{"value":{"body":"[{\"id\":10935,\"date\":\"2015-08-07T07:00:40\",\"date_gmt\":\"2015-08-07T14:00:40\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=10935\"},\"modified\":\"2015-08-07T07:00:40\",\"modified_gmt\":\"2015-08-07T14:00:40\",\"slug\":\"working-with-intern-recorder\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/working-with-intern-recorder/\",\"title\":{\"rendered\":\"Working with Intern Recorder\"},\"content\":{\"rendered\":\"<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2014/07/intern-300x157.png\\\" alt=\\\"intern\\\" width=\\\"300\\\" height=\\\"157\\\" class=\\\"alignnone size-medium wp-image-9167\\\" style=\\\"float: right; margin: 0 0 1em 1em\\\"></p>\\n<p>So you&#8217;ve had a chance to try out <a href=\\\"https://www.sitepen.com/blog/2015/08/06/introducing-intern-recorder/\\\">Intern Recorder</a>, our new Chrome DevTools extension for recording functional tests, and now you want to efficiently work these tests into your workflow? This post will guide you through these steps and provide helpful advice for improving the tests you record.</p>\\n<p>The goal with Intern Recorder is to reduce the tedium of creating functional tests by 80-90%, but to make tests work flawlessly, you still have some steps to follow to perfect them. Intern Recorder is very useful for getting started when creating functional tests, but the test code should ultimately be fine-tuned by hand and maintained and updated manually. It may take multiple runs with the Recorder to get the sequence of actions just right, but once you have it, plan to discontinue using Recorder for ongoing updates to the test as you will now have code you can continue to improve.</p>\\n<p><!--more--></p>\\n<p>Depending on the complexity and length of the test sequence (keep it as low as you can, so it&#8217;s easier to decouple your tests!), it may be useful to write a descriptive list of the actions to be performed in the test, as well as the conditions to be tested. This list can serve as the script for the person performing the actions while using Intern Recorder, as well as a reference for adding test assertions and comments to the generated code.</p>\\n<h2>Tips</h2>\\n<p>Here are some tips for getting optimal results when working with Intern Recorder.</p>\\n<h3>Perform as few actions as necessary</h3>\\n<p>Don&#8217;t perform extraneous actions as they will be recorded and included in generated code, and may later be irrelevant to your test, or in the worst case, break your test if your application changes.</p>\\n<h3>Set-up data and preconditions</h3>\\n<p>Provide as much set-up data and preconditions as possible in the test page being loaded. Don&#8217;t use UI actions driven by test code to put the page into a desired beginning test state &#8211; only use UI actions for things that are the focus of the test.</p>\\n<h3>Configure and use hotkeys</h3>\\n<p>Intern Recorder includes a number of hotkeys for your usage when recording functional tests.</p>\\n<ul>\\n<li>Pause/resume recorder: use this to pause if you need to do some actions that should not be recorded</li>\\n<li>Insert callback: use this to insert a call to <code>Command#then</code> &#8211; you can later add code such as assertions, or replace the call with another function (e.g. <code>execute</code> / <code>executeAsync</code>)</li>\\n<li>Insert move to current mouse position: while mouse clicks are recorded (with their coordinates), mouse movement is not, so you can use this to record mouse movement and trigger hover actions</li>\\n</ul>\\n<h3>Use the appropriate element selection strategy</h3>\\n<ul>\\n<li>Use path of element: this will usually be the best option; the Recorder will compute a concise XPath expression for the element</li>\\n<li>Use text of element: if you know the text content of the element is unique (and will not change), this is a better option than XPath</li>\\n</ul>\\n<h3>Use <code>findDisplayed</code> when appropriate</h3>\\n<p>This method can incur performance penalties, so disable it as much as possible (it can be toggled on and off during test recording so it only applies to actions performed while it is enabled). </p>\\n<p>It is useful when animations or visibility transitions cause an element to be created in the DOM (and be discoverable by Leadfoot&#8217;s <code>findByXXX</code> methods), but the element is not <a href=\\\"https://theintern.github.io/leadfoot/Command.html#isDisplayed\\\">displayed</a>. </p>\\n<p>In some cases, trying to interact with it will result in failure. Leadfoot&#8217;s <code>findDisplayedByXXX</code> methods will wait until the element exists and is displayed. Note that this will not help in cases where you want to interact with an element that is displayed, but is obscured, for example, by a Dijit dialog overlay. In that case you must perform actions to remove the obscuring element(s).</p>\\n<h2>Fine tuning</h2>\\n<p>A simple example of Recorder output looks like this:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndefine(function (require) {\\n\\tvar tdd = require('intern!tdd');\\n\\ttdd.suite('recorder-generated suite', function () {\\n\\t\\ttdd.test('Test 1', function () {\\n\\t\\t\\treturn this.remote\\n\\t\\t\\t\\t.get('http://localhost/dojo/dgrid/test/intern/functional/Editor.html')\\n\\t\\t\\t\\t.findByXpath('//TD[normalize-space(string())=&quot;one&quot;]')\\n\\t\\t\\t\\t\\t.moveMouseTo(100, 16)\\n\\t\\t\\t\\t\\t.clickMouseButton(0)\\n\\t\\t\\t\\t.pressKeys('a')\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t.findByXpath('//TD[normalize-space(string())=&quot;two&quot;]')\\n\\t\\t\\t\\t\\t.moveMouseTo(96, 8)\\n\\t\\t\\t\\t\\t.clickMouseButton(0)\\n\\t\\t\\t\\t.pressKeys('b')\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t.then(function () {})\\n\\t\\t\\t\\t.findByXpath('//TD[normalize-space(string())=&quot;onea&quot;]')\\n\\t\\t\\t\\t\\t.moveMouseTo(69, 13)\\n\\t\\t\\t\\t\\t.clickMouseButton(0)\\n\\t\\t\\t\\t.then(function () {});\\n\\t\\t});\\n\\t});\\n});\\n</pre>\\n<p>While the actions have been recorded, more work needs to be done to transform this into a working test case. Here are some strategies for further fine tuning your tests.</p>\\n<h3>Add descriptive comments</h3>\\n<p>Add code comments describing what UI actions are being performed by each section of code.</p>\\n<h3>Trim unnecessary code</h3>\\n<p>Identify any unnecessary actions and remove the code for them.</p>\\n<h3>Replace brittle element selectors</h3>\\n<p>The Recorder application has no knowledge of your overall application architecture or DOM structure &#8211; it simply creates the most concise and accurate element selectors that can be deduced in a very straightforward manner and expressed using XPath. When an element is interacted with, Recorder looks for the nearest ancestor that has an id assigned, and if the target element itself has no id, then the DOM hierarchy below the identified ancestor is expressed using XPath.</p>\\n<ul>\\n<li>Bad ids: the ids that Dijit auto-generates for nodes include a numeric value that will vary as the widgets in the page vary, so they should not be used. The Recorder does not account for this and uses them. Replace unsuitable ids with better ones, possibly replacing the call to <code>findByXpath</code> with a call to <code>findByCssSelector</code></li>\\n<li>Non-ideal targets: widgets are often constructed using multiple elements to provide cross-browser consistency and flexible styling options, but the resulting DOM structure is more complicated than would be ideal. A human looking at the DOM structure could identify that a certain node should be the target, despite the fact that the node has descendants several levels deep.  The Recorder cannot make this distinction and will select the deepest descendant as the target. Replace interaction targets with the most appropriate node based on inspecting the DOM and UI layout.</li>\\n</ul>\\n<h3>Add extra logic</h3>\\n<p>Occasionally you will need to add extra logic to tests, e.g. calling <code>Command#then</code> or <code>Command#execute</code>. Some actions trigger animations in the UI that require a wait period, so you might need to insert a call to <code>Command#sleep</code>.</p>\\n<h3>Add test assertions</h3>\\n<p>Identify the points in the action sequence where conditions need to be tested and insert appropriate assertions.</p>\\n<h3>Comment/uncomment UI actions</h3>\\n<p>While debugging and developing a test based on generated code, it can be helpful to comment out all the UI actions and uncomment them 1 or 2 at a time, re-run the test, and observe the results. This can help you verify that each section of code is performing the intended action and if there are problems, identify exactly where the code is failing. </p>\\n<p>When invoking Intern from the command line the <code>--leaveRemoteOpen</code> argument is particularly useful &#8211; it will leave the web browser open after Intern finishes, allowing you to open the developer tools and inspect the state of the test page.</p>\\n<p>After fine tuning, the recorded test case might look like this:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndefine(function (require) {\\n\\tvar tdd = require('intern!tdd');\\n\\tvar assert = require('intern/chai!assert');\\n\\ttdd.suite('recorder-generated suite', function () {\\n\\t\\ttdd.test('Test 1', function () {\\n\\t\\t\\treturn this.get('remote')\\n\\t\\t\\t\\t.get(require.toUrl('./Editor.html'))\\n\\t\\t\\t\\t// Click the cell at row 1, col 3 to activate the editor\\n\\t\\t\\t\\t.findByXpath('//TD[normalize-space(string())=&quot;one&quot;]')\\n\\t\\t\\t\\t\\t.moveMouseTo(100, 16)\\n\\t\\t\\t\\t\\t.clickMouseButton(0)\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t// Wait for the editor to activate (indicated by presence of an input element)\\n\\t\\t\\t\\t.findAllByCssSelector('.field-description input')\\n\\t\\t\\t\\t\\t.pressKeys('a')\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t// Click the cell at row 2, col 3 to activate the editor\\n\\t\\t\\t\\t.findByXpath('//TD[normalize-space(string())=&quot;two&quot;]')\\n\\t\\t\\t\\t\\t.moveMouseTo(96, 8)\\n\\t\\t\\t\\t\\t.clickMouseButton(0)\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t// Wait for the editor to activate (indicated by presence of an input element)\\n\\t\\t\\t\\t.findAllByCssSelector('.field-description input')\\n\\t\\t\\t\\t\\t.pressKeys('b')\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t// Verify first edit was successful\\n\\t\\t\\t\\t.findAllByCssSelector('td.field-description')\\n\\t\\t\\t\\t\\t.getVisibleText()\\n\\t\\t\\t\\t\\t.then(function (descriptionValues) {\\n\\t\\t\\t\\t\\t\\tassert.strictEqual(descriptionValues[0], 'onea', 'Row 1 column 3 value should be edited');\\n\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t// Click somewhere to de-activate row 2's editor\\n\\t\\t\\t\\t.findByXpath('//TD[normalize-space(string())=&quot;onea&quot;]')\\n\\t\\t\\t\\t\\t.moveMouseTo(69, 13)\\n\\t\\t\\t\\t\\t.clickMouseButton(0)\\n\\t\\t\\t\\t\\t.end()\\n\\t\\t\\t\\t// Verify second edit was successful\\n\\t\\t\\t\\t.findAllByCssSelector('td.field-description')\\n\\t\\t\\t\\t\\t.getVisibleText()\\n\\t\\t\\t\\t\\t.then(function (descriptionValues) {\\n\\t\\t\\t\\t\\t\\tassert.strictEqual(descriptionValues[1], 'twob', 'Row 2 column 3 value should be edited');\\n\\t\\t\\t\\t\\t});\\n\\t\\t});\\n\\t});\\n});\\n</pre>\\n<h2>Running tests</h2>\\n<p>Once you are finished optimizing your tests, then you just include them in your normal <a href=\\\"https://theintern.github.io/intern/#common-config\\\">Intern configuration</a> and run them like any other tests in your suite!</p>\\n<h2>Installing Intern Recorder</h2>\\n<p>You can download and install Intern Recorder from the <a href=\\\"https://chrome.google.com/webstore/detail/intern-recorder/oalhlikaceknjlnmoombecafnmhbbgna\\\" title=\\\"Intern Recorder on Chrome Web Store\\\">Chrome Web Store</a>. Once installed, the Recorder will show up on the “Intern” tab in Dev Tools. Full usage instructions can be found in the <a href=\\\"https://github.com/theintern/recorder/blob/master/README.md\\\">README</a>.</p>\\n<h2>Making improvements</h2>\\n<p>This version of the Intern Recorder was sponsored by <a href=\\\"http://www.sita.aero/\\\">SITA</a>. If you or your company find Intern or Intern Recorder useful, please help support ongoing development of these tools and consider a similar sponsorship to add features and fixes you’d like to see! Just <a href=\\\"https://www.sitepen.com/contact/\\\">send us an email</a> letting us know of your interest and we’ll set up a call to talk you through the process and what you can expect.</p>\\n<h2>Learning more</h2>\\n<p>We cover the creation of functional tests in our <a href=\\\"https://www.sitepen.com/workshops/private.html?workshop=7\\\">Intern</a> and <a href=\\\"https://www.sitepen.com/workshops/private.html?workshop=4\\\">Dojo 202 workshops</a>, and we <a href=\\\"https://www.sitepen.com/services/\\\">support</a> developers worldwide in their efforts with JavaScript and testing. If you would like to discuss how we can help your organization improve their approach to automated testing, please <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to start the conversation.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>So you&#8217;ve had a chance to try out Intern Recorder, our new Chrome DevTools extension for recording functional tests, and now you want to efficiently work these tests into your workflow? This post will guide you through these steps and provide helpful advice for improving the tests you record. The goal with Intern Recorder is [&hellip;]</p>\\n\",\"protected\":false},\"author\":3,\"featured_media\":9167,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[356,375,3],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Working with Intern Recorder | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"So you&#039;ve had a chance to try out Intern Recorder, our new Chrome DevTools extension for recording functional tests, and now you want to efficiently work these tests into your workflow? This post will guide you through these steps and provide helpful advice for improving the tests you record. The goal with Intern Recorde\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/working-with-intern-recorder/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Working with Intern Recorder | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"So you&#039;ve had a chance to try out Intern Recorder, our new Chrome DevTools extension for recording functional tests, and now you want to efficiently work these tests into your workflow? This post will guide you through these steps and provide helpful advice for improving the tests you record. The goal with Intern Recorde\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/working-with-intern-recorder/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-08-07T14:00:40+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/working-with-intern-recorder/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/working-with-intern-recorder/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/working-with-intern-recorder/\\\",\\\"name\\\":\\\"Working with Intern Recorder | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/working-with-intern-recorder/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-08-07T14:00:40+00:00\\\",\\\"dateModified\\\":\\\"2015-08-07T14:00:40+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\"},\\\"description\\\":\\\"So you've had a chance to try out Intern Recorder, our new Chrome DevTools extension for recording functional tests, and now you want to efficiently work these tests into your workflow? This post will guide you through these steps and provide helpful advice for improving the tests you record. The goal with Intern Recorde\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/working-with-intern-recorder/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10935\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=10935\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10935/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/9167\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=10935\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=10935\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=10935\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=10935\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":3,\"name\":\"Dylan Schiemann\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dylan/\",\"slug\":\"dylan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dylan Schiemann, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dylan Schiemann, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dylan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dylan/\\\",\\\"name\\\":\\\"Dylan Schiemann, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:26:38 GMT"],["expires","Thu, 24 Sep 2020 13:26:38 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}