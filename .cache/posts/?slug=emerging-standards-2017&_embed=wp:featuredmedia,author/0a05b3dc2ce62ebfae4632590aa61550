{"value":{"body":"[{\"id\":15081,\"date\":\"2017-08-31T10:09:21\",\"date_gmt\":\"2017-08-31T17:09:21\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15081\"},\"modified\":\"2020-02-03T08:25:42\",\"modified_gmt\":\"2020-02-03T16:25:42\",\"slug\":\"emerging-standards-2017\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/emerging-standards-2017/\",\"title\":{\"rendered\":\"Five of our favorite emerging web standards\"},\"content\":{\"rendered\":\"<p>As we create and improve open source software, and build many applications for our customers, we&#8217;re constantly looking for things that will improve the software we create. Part of this is looking at an often dizzying array of proposed and emerging standards, and finding those that feel efficient and ready for use. Here we&#8217;ll explore five emerging web standards that we&#8217;ve started using or are strongly considering using in future work.</p>\\n<p><!--more--> </p>\\n<h2>CSS Variables / Custom Properties</h2>\\n<p>Web engineers have been using variables to create and manage complex systems of CSS for over ten years, and they continue to be one of the main features driving demand for CSS preprocessors like Sass, LESS, and Stylus. Used well, they can greatly increase the maintainability of large codebases by standardizing and consolidating all values used for colors, fonts, padding, etc. Over time, preprocessor variables have converged on a set of shared features, by design or convention:</p>\\n<ul>\\n<li><strong>They are prefixed:</strong> e.g. by <code>$</code> or <code>@</code> to prevent conflicts with existing CSS keywords</li>\\n<li><strong>They are scoped:</strong> <code>$bgColor</code> defined within <code>.container</code> will be available in <code>.container &gt; .child</code>, but not vice-versa.</li>\\n<li><strong>They can be overridden:</strong>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\t$bgColor: blue;\\r\\n\\t.container {\\r\\n\\t\\t$bgColor: red;\\r\\n\\t\\tbackground-color: $bgColor; /* will be red */\\r\\n\\t}</pre>\\n</li>\\n</ul>\\n<p>Native CSS variables (or &ldquo;custom properties&rdquo;) have adopted all of these conventions, making the switch to native support easy and intuitive. CSS variables must be prefixed by two dashes: <code>--</code>, they are scoped to the selector in which they are defined and are inherited by its descendants, and they may be overridden within those descendants. For example:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n:root {\\r\\n\\t--bgColor: periwinkle;\\r\\n}\\r\\n\\r\\n.container {\\r\\n\\tbackground-color: var(--bgColor); /* will be periwinkle */\\r\\n}\\r\\n\\r\\n.container .child {\\r\\n\\t--bgColor: lime;\\r\\n\\tbackground-color: var(--bgColor); /* will be lime */\\r\\n}\\r\\n</pre>\\n<p>There are also a few obvious differences in this example between CSS variables and preprocessor variables:</p>\\n<ul>\\n<li>CSS variables must be wrapped in <code>var()</code> when used.</li>\\n<li>The prefix, <code>--</code> is different from any other prefix used in existing preprocessors, so that they may be used in tandem.</li>\\n<li>CSS variables must be defined within a selector, so the closest thing to a &ldquo;global&rdquo; scope is <code>:root</code>.</li>\\n<li>Preprocessors are unaware of the DOM, so they rely on nesting for inheritance. The value of CSS variables inherit down the DOM tree in the same way any other value is inherited.</li>\\n</ul>\\n<p>The other significant difference between preprocessor variables and CSS variables is not obvious in the above code: since they aren&#8217;t compiled down to static values, CSS variables may be updated in the browser at run-time. This means CSS variable are available to be read and written in JavaScript for use in calculations or animations. The following Codepen demonstrates how to create animated accordions using CSS variables and JavaScript:</p>\\n<p><iframe height='400' scrolling='no' title='Accordions with CSS Properties' src='//codepen.io/smhigley/embed/vJazVE/?height=400&#038;theme-id=0&#038;default-tab=js,result&#038;embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/smhigley/pen/vJazVE/'>Accordions with CSS Properties</a> by Sarah Higley (<a href='https://codepen.io/smhigley'>@smhigley</a>) on <a href='https://codepen.io'>CodePen</a>.<br />\\n</iframe></p>\\n<p>CSS variables are supported in Firefox, Chrome, and Safari, with partial support in the current version of Edge: <a href=\\\"http://caniuse.com/#feat=css-variables\\\">http://caniuse.com/#feat=css-variables</a></p>\\n<h2>CSS Modules</h2>\\n<p>Variables are not the only concept that has leaked from JavaScript to CSS. Especially in recent years, JavaScript developers have been turning their eye to CSS organization and, in an extension of Atwood’s Law, thinking &ldquo;I could do that better.&rdquo; There are some good reasons to believe that:</p>\\n<ul>\\n<li>Unlike JavaScript, CSS classes all exist within a global namespace</li>\\n<li>Resolving conflicting styles is brittle and prone to unexpected behavior in large, compiled stylesheets, or only solved with increasing specificity</li>\\n<li>Styles “leak” down the DOM hierarchy, and can break child element styles in unexpected ways.</li>\\n<li>Managing styles with JavaScript allows CSS rules to be based on run-time logic.</li>\\n</ul>\\n<p>React in particular pioneered the idea that <a href=\\\"https://www.sitepen.com/blog/2017/08/17/state-of-modern-component-styling/\\\">inline styles, controlled through JavaScript</a>, could be the answer to all those problems (maybe not styles leaking to children, but it does reduce the number of cases where styles would conflict). However, it comes with its own set of drawbacks:</p>\\n<ul>\\n<li>Pseudo-classes (e.g. <code>:hover</code> or <code>:focus</code>) are easily accomplished with CSS, but must be faked with JavaScript</li>\\n<li>Media queries are labor-intensive to recreate in JavaScript</li>\\n<li>Inline styles lose the ability to override with greater specificity, since they are already at the top of the specificity hierarchy</li>\\n<li>Toggling classes, CSS variables, and functions like <code>calc()</code> already solve most problems around dynamic styles</li>\\n<li>Performance: DOM weight is a thing, and CSS can be cached</li>\\n</ul>\\n<p>CSS Modules are in some ways the CSS developer&rsquo;s comeback to JavaScript developers intruding on their turf: a way to address criticisms and improve stylesheets without doing away with them entirely. CSS modules essentially boil down to locally-scoped CSS files that may be imported into JavaScript, and compile to unique class names.</p>\\n<h3>For example, this:</h3>\\n<h6>JavaScript:</h6>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport * as css from ‘css/buttonComponent.css’;\\r\\n\\r\\nconst buttonHTML = `&lt;button class=&quot;${css.root}&quot;&gt;${buttonText}&lt;/button&gt;`;\\r\\n</pre>\\n<h6>CSS:</h6>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.root {\\r\\n\\tbackground-color: #ffffff;\\r\\n\\tcolor: blue;\\r\\n\\tborder: 1px solid blue;\\r\\n}\\r\\n</pre>\\n<h3>Would compile to something like this:</h3>\\n<h6>HTML:</h6>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;button class=&quot;buttonComponent_root_abc2718&quot;&gt;Button with modular CSS&lt;/button&gt;\\r\\n</pre>\\n<h6>CSS:</h6>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.buttonComponent_root_abc2718 {\\r\\n\\tbackground-color: #ffffff;\\r\\n\\tcolor: blue;\\r\\n\\tborder: 1px solid blue;\\r\\n}\\r\\n</pre>\\n<p>Since the classes contained in <code>buttonComponent.css</code> are locally scoped and in a clearly named CSS file, there is no longer any need for specific class names like <code>.button</code>. Instead, the recommended format is to use a single standardized &ldquo;root&rdquo; class name like <code>.root</code> or <code>.normal</code>, and then state-specific class names like <code>.error</code>, <code>.success</code>, or <code>.disabled</code>, all of which may be conditionally applied with JavaScript.</p>\\n<p>CSS modules also solve the problem of brittle style overrides by discouraging the use of multiple classes in favor of <code>composes</code>. The <code>composes</code> keyword is similar to preprocessor decorators like Sass&rsquo; <code>@extends</code>, except instead of compiling the styles in CSS, <code>composes</code> returns multiple namespaced class names in a predictable order. So, for example:</p>\\n<h6>CSS:</h6>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.root {\\r\\n\\tdisplay: inline-block;\\r\\n\\tpadding: 10px;\\r\\n\\tcolor: blue;\\r\\n}\\r\\n\\r\\n.success {\\r\\n\\tcomposes: root;\\r\\n\\tcolor: green;\\r\\n}\\r\\n</pre>\\n<h6>JavaScript:</h6>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport * as css from 'css/buttonComponent.css';\\r\\n\\r\\n// css.success = 'buttonComponent_root_abc2718 buttonComponent_success_pi3141'\\r\\nconst buttonHTML = `&lt;button class=&quot;${css.success}&quot;&gt;${buttonText}&lt;/button&gt;`;\\r\\n</pre>\\n<h6>HTML:</h6>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;button class=&quot;buttonComponent_root_abc2718 buttonComponent_success_pi3141&quot;&gt;Button with green text&lt;/button&gt;\\r\\n</pre>\\n<p>CSS also has one more powerful tool to increase the modularity of its styles: the <code>all</code> keyword, separate from CSS modules, can be used to reset all properties to their initial state, e.g. with <code>.root { all: initial; }</code>. Since this is a new CSS property rather than a pattern that relies on a compiler like <a href=\\\"https://github.com/css-modules/webpack-demo\\\">Webpack</a> or <a href=\\\"https://github.com/css-modules/browserify-demo\\\">Browserify</a>, support is still lacking in <a href=\\\"http://caniuse.com/#search=all\\\">IE and Edge</a>.</p>\\n<h2>Async / Await / Can make your code great</h2>\\n<p>JavaScript has long Promised to improve the handling of asynchronous code, with increasing success and the occasional (caught) error. A callback to the days before promises might look like the following nested cone of doom:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndoAsyncFunction(function(result) {\\r\\n\\tdoSecondAsyncFunction(result, function(resultTwo) {\\r\\n\\t\\tdoThirdAsyncFunction(resultTwo, function(resultThree) {\\r\\n\\t\\t\\t// and so on…\\r\\n\\t\\t}, catchError);\\r\\n\\t}, catchError);\\r\\n}, catchError);\\r\\n</pre>\\n<p>With promises, the above could be simplified into a chained set of <code>.then()</code> calls with a final <code>.catch()</code> at the end:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndoAsyncFunction()\\r\\n\\t.then(result =&gt; doSecondAsyncFunction(result))\\r\\n\\t.then(resultTwo =&gt; doThirdAsyncFunction(resultTwo))\\r\\n\\t// and so on…\\r\\n\\t.catch(catchError);\\r\\n</pre>\\n<p>The chained syntax is clearly cleaner and more fetching than the earlier pyramid of passed-in callbacks and error handlers. With <code>async</code> functions, however, developers need no longer await the day when writing asynchronous code will be as clear and intuitive as synchronous code. The initial example using <code>async/await</code> would look like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n(async function() {\\r\\n\\ttry {\\r\\n\\t\\tconst result = await doAsyncFunction();\\r\\n\\t\\tconst resultTwo = await doSecondAsyncFunction(result);\\r\\n\\t\\tconst resultThree = await doThirdAsyncFunction(resultTwo);\\r\\n\\r\\n\\t\\treturn resultThree;\\r\\n\\t}\\r\\n\\tcatch(error) {\\r\\n\\t\\tcatchError(error);\\r\\n\\t}\\r\\n})();\\r\\n</pre>\\n<p>Each <code>await</code> will pause code execution until its promise is resolved, and the whole set of code can be wrapped in a try/catch block, just as with synchronous code. The most important points to remember are that <code>await</code> may only be used inside an <code>async</code> function designated by that keyword, and the <code>async</code> function itself is asynchronous and will not block surrounding code.</p>\\n<p>While the triple promise example shows how three promises can be executed one after the other, <code>Promise.all</code> and <code>Promise.race</code> can be used in conjunction with async/await to run them concurrently:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nasync function doAsyncStuff() {\\r\\n\\tconst [resultOne, resultTwo, resultThree] = await Promise.all([\\r\\n\\t\\tdoAsyncFunction(),\\r\\n\\t\\tdoSecondAsyncFunction(),\\r\\n\\t\\tdoThirdAsyncFunction()\\r\\n\\t]);\\r\\n\\r\\n\\t// do stuff with resultOne, resultTwo, and resultThree\\r\\n}\\r\\n</pre>\\n<p>Technically, <code>await</code> does not even need to be passed a promise, since it will wrap any non-promise value in <code>Promise.resolve</code>. Together with the fact that any promise resolution is pushed to the end of the call stack, this can result in some slightly odd but fun possibilities:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nasync function getAnswer() {\\r\\n\\tconst answer = await 42;\\r\\n\\tconsole.log(`The answer to life, the universe, and everything is ${answer}`);\\r\\n}\\r\\n\\r\\ngetAnswer();\\r\\nconsole.log(‘Vogons blow up Earth’);\\r\\n\\r\\n// will log:\\r\\n// “Vogons blow up Earth”\\r\\n// The answer to life, the universe, and everything is 42\\r\\n</pre>\\n<h2>blockingElements / inert</h2>\\n<p>Managing focus has been and continues to be a poorly-solved problem for any developer who has needed to create a modal and cares about accessibility. Focus should never be allowed to enter hidden or obscured DOM elements, but creating the proper behavior is painful and labor-intensive. The two basic options are to listen to the focus event and hijack focus whenever it attempts to leave the modal, or to manually remove all non-modal elements from the focus order by setting <code>tabindex=\\\"-1\\\"</code>. Both solutions usually end up using a large, fragile DOM query for focusable elements somewhere in their code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndocument.querySelectorAll('a[href],\\r\\n\\tbutton:not([disabled]),\\r\\n\\tarea[href],\\r\\n\\tinput:not([disabled]),\\r\\n\\tselect:not([disabled]),\\r\\n\\ttextarea:not([disabled]),\\r\\n\\tiframe,\\r\\n\\tobject,\\r\\n\\tembed,\\r\\n\\t*[tabindex],\\r\\n\\t*[contenteditable]);\\r\\n</pre>\\n<p>Even after focus has been dealt with, hidden sections should ideally have <code>aria-hidden</code> set to true, so it will not be read by assistive technology like screen readers.</p>\\n<p>Two specification proposals would solve the modal problem entirely: <code>inert</code> and <code>blockingElements</code>. The first, the HTML attribute <code>inert</code>, would remove a DOM tree from the focus order (as if all focusable elements received <code>tabindex=\\\"-1\\\"</code>), as well as hiding it from assistive technology.</p>\\n<p><code>blockingElements</code> would do the almost exact opposite: expose a stack of &ldquo;blocking elements&rdquo; that would effectively make all other DOM trees inert. As an example, if I were to have the following DOM structure:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n\\t&lt;div class=&quot;content&quot;&gt;\\r\\n\\t\\t&lt;div class=&quot;modal&quot;&gt; Modal content &lt;/div&gt;\\r\\n\\t\\t&lt;p&gt; Other content, including links/buttons/etc &lt;/p&gt;\\r\\n\\t&lt;/div&gt;\\r\\n\\t&lt;div class=&quot;sidebar&quot;&gt;\\r\\n\\t\\t\\r\\n\\t&lt;/div&gt;\\r\\n\\r\\n</pre>\\n<p>To open the dialog, I would remove the <code>inert</code> attribute and call <code>document.$blockingElements.push(document.querySelector('.modal'))</code>, which would render not only direct sibling trees inert, but also siblings of parents and ancestors.</p>\\n<p>Both <code>inert</code> and <code>blockingElements</code> are still proposals so are not natively supported in any current browsers. However, there are polyfills available that allow them to be used now: <a href=\\\"https://github.com/WICG/inert\\\">https://github.com/WICG/inert</a> and <a href=\\\"https://github.com/PolymerLabs/blockingElements\\\">https://github.com/PolymerLabs/blockingElements</a>.</p>\\n<h2>IntersectionObserver</h2>\\n<p>Watching for elements to scroll into view has long been the province of a proliferation of scrolling plugins using some sort of (hopefully throttled) scroll event listener. Now, the IntersectionObserver allows developers to create an observer with options and a callback to watch for elements scrolling into view with only vanilla JavaScript.</p>\\n<p>The IntersectionObserver is similar to other DOM observers like the MutationObserver, in that you create it with a callback and options, then call <code>.observe</code> on a DOM element. A simple implementation that updates every time the element’s intersection with the viewport increases by 10% might look like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst observerOptions = {\\r\\n  root: null,\\r\\n  rootMargin: '0px'\\r\\n  threshold: [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]\\r\\n};\\r\\n\\r\\nfunction intersectionCallback(entries) {\\r\\n\\tentries.forEach((entry) =&gt; {\\r\\n\\t\\tconst percent = Math.floor(entry.intersectionRatio * 100);\\r\\n\\t\\tconsole.log(`Element ${entry.target} scrolled ${percent}% into view`);\\r\\n\\t});\\r\\n}\\r\\n\\r\\nconst observer = new IntersectionObserver(intersectionCallback, observerOptions);\\r\\nobserver.observe(myElement);\\r\\n</pre>\\n<p>The options object consists of the following properties:</p>\\n<ul>\\n<li>root: the element containing the scroll area (falls back to the document’s viewport if null)</li>\\n<li>rootMargin: can grow or shrink the area around the root used to compute intersections</li>\\n<li>threshold: takes an array of numbers indicating at which percentages of the target element’s visibility the callback should fire. E.g. <code>[0, 0.5, 1]</code> would fire when the element passes the 0%, 50%, and 100% visibility marks.</li>\\n</ul>\\n<p>To cease observing a particular element — advisable if the callback is only needed the first time the element is scrolled past, or if it’s being used to watch a large number of elements scrolling into and out of view, simply call <code>observer.unobserve(myElement);</code>. To disconnect the entire observer, do <code>observer.disconnect();</code>.</p>\\n<p>A good use case for using <code>unobserve()</code> with IntersectionObserver would be a script to lazy-load images as they scroll into view:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction onImageIntersect(entries) {\\r\\n\\tentries.forEach(entry =&gt; {\\r\\n\\t\\tentry.target.src = imageSource;\\r\\n\\t\\tobserver.unobserve(entry.target);\\r\\n\\t}\\r\\n}\\r\\n\\r\\ndocument.querySelectorAll('img').forEach(img =&gt; observer.observe(img));\\r\\n</pre>\\n<p>Browser support is still trickling in, but it can be used without a polyfill in Chrome, Firefox, and Edge. <a href=\\\"http://caniuse.com/#search=intersec\\\">IE and Safari</a> lack native support at this time.</p>\\n<hr />\\n<h2>Need Help Bringing Your Web App Up-to-date?</h2>\\n<div>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\"><a href=\\\"https://www.sitepen.com/contact/\\\">Let&#8217;s talk</a> about how we can help you with your JavaScript projects.</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Get help from <a href=\\\"https://www.sitepen.com/services/\\\">SitePen On-Demand Development and Support</a>, our fast and efficient solutions to JavaScript and web development problems of any size.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>As we create and improve open source software, and build many applications for our customers, we&#8217;re constantly looking for things that will improve the software we create. Part of this is looking at an often dizzying array of proposed and emerging standards, and finding those that feel efficient and ready for use. Here we&#8217;ll explore [&hellip;]</p>\\n\",\"protected\":false},\"author\":82,\"featured_media\":22194,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[31,215,4,3,16],\"tags\":[5],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Five of our favorite emerging web standards | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"As we create and improve open source software, and build many applications for our customers, we&#039;re constantly looking for things that will improve the software we create. Part of this is looking at an often dizzying array of proposed and emerging standards, and finding those that feel efficient and ready for use. Here we&#039;l\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/emerging-standards-2017/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Five of our favorite emerging web standards | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"As we create and improve open source software, and build many applications for our customers, we&#039;re constantly looking for things that will improve the software we create. Part of this is looking at an often dizzying array of proposed and emerging standards, and finding those that feel efficient and ready for use. Here we&#039;l\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/emerging-standards-2017/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-08-31T17:09:21+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-03T16:25:42+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/emerging-standards-2017/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Emerging web standards\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/emerging-standards-2017/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/emerging-standards-2017/\\\",\\\"name\\\":\\\"Five of our favorite emerging web standards | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/emerging-standards-2017/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-08-31T17:09:21+00:00\\\",\\\"dateModified\\\":\\\"2020-02-03T16:25:42+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/9f3c35c8bc00d7b2a20167d7c7cbb4d7\\\"},\\\"description\\\":\\\"As we create and improve open source software, and build many applications for our customers, we're constantly looking for things that will improve the software we create. Part of this is looking at an often dizzying array of proposed and emerging standards, and finding those that feel efficient and ready for use. Here we'l\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/emerging-standards-2017/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/9f3c35c8bc00d7b2a20167d7c7cbb4d7\\\",\\\"name\\\":\\\"Sarah Higley\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Sarah Higley\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15081\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/82\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15081\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15081/revisions\"}],\"predecessor-version\":[{\"id\":22195,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15081/revisions/22195\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22194\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15081\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15081\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15081\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=15081\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":82,\"name\":\"Sarah Higley\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/shigley/\",\"slug\":\"shigley\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Sarah Higley, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Sarah Higley, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/shigley/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/shigley/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/shigley/\\\",\\\"name\\\":\\\"Sarah Higley, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/9f3c35c8bc00d7b2a20167d7c7cbb4d7\\\",\\\"name\\\":\\\"Sarah Higley\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Sarah Higley\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/shigley/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/82\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22194,\"date\":\"2020-02-03T08:25:28\",\"slug\":\"emerging-web-standards\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/emerging-standards-2017/emerging-web-standards/\",\"title\":{\"rendered\":\"Emerging web standards\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Emerging web standards | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Emerging web standards | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-03T16:25:34+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\\\",\\\"name\\\":\\\"Emerging web standards | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-02-03T16:25:28+00:00\\\",\\\"dateModified\\\":\\\"2020-02-03T16:25:34+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Emerging web standards\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/08/Emerging-web-standards.jpg\",\"sizes\":{\"medium\":{\"file\":\"Emerging-web-standards-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards-300x158.jpg\"},\"large\":{\"file\":\"Emerging-web-standards-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Emerging-web-standards-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards-150x150.jpg\"},\"medium_large\":{\"file\":\"Emerging-web-standards-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards-768x403.jpg\"},\"full\":{\"file\":\"Emerging-web-standards.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Emerging-web-standards.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22194\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:20:03 GMT"],["expires","Thu, 24 Sep 2020 13:20:03 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}