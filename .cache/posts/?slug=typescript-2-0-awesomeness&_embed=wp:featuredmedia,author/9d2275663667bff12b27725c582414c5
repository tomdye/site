{"value":{"body":"[{\"id\":12904,\"date\":\"2016-09-01T06:22:00\",\"date_gmt\":\"2016-09-01T13:22:00\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=12904\"},\"modified\":\"2016-09-01T06:22:00\",\"modified_gmt\":\"2016-09-01T13:22:00\",\"slug\":\"typescript-2-0-awesomeness\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/typescript-2-0-awesomeness/\",\"title\":{\"rendered\":\"TypeScript 2.0 Awesomeness\"},\"content\":{\"rendered\":\"<p><img class=\\\"align center size-full wp-image-13000\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/09/typescript-2.0-awesomeness-image.jpg\\\" alt=\\\"typescript-2.0-awesomeness-image\\\" width=\\\"620\\\" /></p>\\n<p>Over the past few years, TypeScript has iterated and greatly improved developer ergonomics. With our <a href=\\\"http://github.com/dojo/meta\\\">efforts on Dojo 2</a>, we&#8217;ve been very excited about many of the features and improvements made, including several key improvements that have landed for TypeScript 2, which is currently in beta release!</p>\\n<p><!--more--></p>\\n<h2>Control flow type analysis</h2>\\n<p>TypeScript 2 adds a major improvement in the type analysis of code. Now types are narrowed and widened recognizing the flow of the code. Previously, there were limits where you could allow narrowing of a type within a closure before, but when outside of the block, it would reset the type. You always had to write your code within <code>if...else</code> blocks to take advantage of type narrowing, or use unsafe casts:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nfunction foo(x: string | number | boolean) {\\n\\tif (typeof x === 'string') {\\n\\t\\tx; // type of `string`\\n\\t}\\n\\telse {\\n\\t\\tx; // type of `number | boolean`\\n\\t}\\n\\tx; // type of `string | number | boolean`\\n}\\n\\nfunction bar(x: string | number) {\\n\\tif (typeof x === 'number') {\\n\\t\\treturn;\\n\\t}\\n\\tx; // type of `string | number`\\n}\\n</pre>\\n<p>With TypeScript 2.0, the code is statically analyzed and types are narrowed, widened or changed in line with the logic of the code. Meaning that you can code in patterns allowed by JavaScript and the type system will keep up. This can help guard you against many logic errors in your code, where you might have had to unsafely cast before, when in fact the logic wouldn&#8217;t have been safe to assume that the type was properly narrowed.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nfunction foo(x: string | number | boolean) {\\n\\tif (typeof x === 'string') {\\n\\t\\tx; // type of `string`\\n\\t\\tx = 1;\\n\\t\\tx; // type of `number`\\n\\t}\\n\\tx; // type of `number | boolean`\\n}\\n\\nfunction bar(x: string | number) {\\n\\tif (typeof x === 'number') {\\n\\t\\treturn;\\n\\t}\\n\\tx; // type of `string`\\n}\\n</pre>\\n<h2><code>this</code> typing for Functions</h2>\\n<p>As one of the most requested features for TypeScript for quite a while, many TypeScript users are happy to see this feature land. Prior to TypeScript 2.0, you had to choose to unsafely access <code>this</code> or use some sort of boilerplate which would add to your emit for no good value.:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\ninterface Foo {\\n\\tfoo: string;\\n\\tbar: string;\\n}\\n\\nfunction foo() {\\n\\tthis.foo = 3; // No Error, because `this` is `any`\\n}\\n\\nfunction bar() {\\n\\tconst self: Foo = this; // Annoying &quot;boilerplate&quot; that gets emitted\\n\\tself.foo = 3; // Error\\n}\\n</pre>\\n<p>There was an attempt to contextually infer <code>this</code> in object literals, but it caused too much of a challenge, because not all object literal methods will be invoked with the <code>this</code> of the enclosing object, so the change was rolled back. This means <code>this</code> in object literal methods is not contextually inferred and you need to be explicit.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\ninterface Foo {\\n\\tfoo: string;\\n\\tbar: string;\\n}\\n\\nfunction foo(this: Foo) {\\n\\tthis.foo = 3; // Error and no emitted &quot;boilerplate&quot;\\n}\\n</pre>\\n<p>There is also a new compiler flag (<code>noImplicitThis</code>) which ensures that if you are using <code>this</code> in the function body that cannot be properly contextually inferred, that it becomes a compiler error and informs you to be explicit about the type of <code>this</code> in the function.</p>\\n<h2>Strict null checking</h2>\\n<p>Again, a source for many logic errors. Previously <code>undefined</code> and <code>null</code> types were inclusive of other types. Now they may be considered separate types that do not intersect with other types.</p>\\n<p>Because of the likelihood of significant breakage to code, this improvement was introduced under the compiler flag <code>--strictNullChecks</code>. Without this flag set to true, this feature is not enabled. There are many cases where logic errors could easily be made, when values could be <code>undefined</code> or <code>null</code> at run-time, but the type system would assume they were assigned. So in older versions of TypeScript, or without the flag enabled, this would happen:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nfunction foo(x?: string) {\\n\\tx.split('.'); // Ooops! Run time error, but no build time error\\n}\\n\\nfoo();\\n</pre>\\n<p>With <code>--strictNullChecks</code> enabled, optional parameters are automatically inferred as <code>| undefined</code> even if the parameter isn&#8217;t explicit about it:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nfunction foo(x?: string) {\\n\\tx.split('.'); // Build time error &quot;Object is possibly 'undefined'.&quot;\\n}\\n\\nfunction bar(x?: string) {\\n\\tif (x) {\\n\\t\\tx.split('.'); // type is `string`\\n\\t}\\n}\\n</pre>\\n<p>This change really highlights a lot of potential logic error, but likely will require some level of revisiting code to migrate, because of the number of potentially unsafe operations that JavaScript allows.</p>\\n<h2><code>readonly</code> keyword</h2>\\n<p>The new <code>readonly</code> keyword disallows reassignment and implies a non-writable property or a property with only a <code>get</code> accessor. It does <strong>not</strong> mean non-primitives are immutable.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\ninterface Foo {\\n\\treadonly foo: string;\\n\\treadonly bar: { foo?: string; };\\n}\\n\\nclass Bar implements Foo {\\n\\tget foo() {\\n\\t\\treturn 'bar';\\n\\t}\\n\\treadonly bar: { foo?: string; } = {};\\n}\\n</pre>\\n<p>This is one of the items though that is a breaking change. If you have an interface (a <code>.d.ts</code>) file that uses this, older versions of TypeScript will not be able to understand it.</p>\\n<h2>Type guarding on property access</h2>\\n<p>Prior to TypeScript 2, you cannot narrow types on property accessors, only properties/values.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\ninterface Foo {\\n\\tfoo: string | string[];\\n}\\n\\nfunction foo(x: Foo) {\\n\\tif (Array.isArray(x.foo)) {\\n\\t\\tx.foo; // Still type of `string | string[]`\\n\\t}\\n}\\n\\nfunction bar(x: Foo) {\\n\\tconst foo = x.foo;\\n\\tif (Array.isArray(foo)) {\\n\\t\\tfoo; // Type of 'string[]'\\n\\t}\\n}\\n</pre>\\n<p>With TypeScript 2.0, you can safely narrow types through property accessors:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\ninterface Foo {\\n\\tfoo: string | string[];\\n}\\n\\nfunction foo(x: Foo) {\\n\\tif (Array.isArray(x.foo)) {\\n\\t\\tx.foo; // type is `string[]`\\n\\t}\\n}\\n</pre>\\n<h2>Wildcard modules</h2>\\n<p>To support module loader plugins within AMD or SystemJS, it&#8217;s necessary to be able to type the module, with the understanding that the name of the module is variable through the parameter that is passed to the module loader plugin. For example, this makes it possible to support the loading of HTML files, JSON resources, and other resources with more flexibility.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\ndeclare module &quot;json!*&quot; {\\n    let json: any;\\n    export default json;\\n}\\n\\nimport d from &quot;json!a/b/bar.json&quot;;\\n// lookup:\\n//    json!a/b/bar.json\\n//    json!*\\n</pre>\\n<h2>Path mapping configuration</h2>\\n<p>Similar to what we&#8217;ve had for many years with AMD, TypeScript 2 now supports <a href=\\\"https://github.com/Microsoft/TypeScript/issues/5039\\\">configuration settings to remap a path</a>!</p>\\n<p>Prior to TypeScript 2, support existed for two ways of resolving module names: <code>classic</code> (a module name always resolves to a file, modules are searched using a folder walk) and <code>node</code> (uses rules similar to the Node.js module loader). Unfortunately neither approach solves the approach of defining modules relative to a <code>baseUrl</code>, which is what AMD systems such as Dojo and RequireJS, and SystemJS use.</p>\\n<p>Instead of introducing a third type of module resolution, the TypeScript team added the configuration settings to solve this within the existing systems: <code>baseUrl</code>, <code>paths</code>, and <code>rootDirs</code>.</p>\\n<p><code>paths</code> may only be used if <code>baseUrl</code> is set. If at least one of these properties is defined then the TypeScript compiler will try to use it to resolve module names and if it fails, it will fallback to a default strategy.</p>\\n<h2><code>async</code> and <code>await</code> for ES5 (TypeScript 2.1)</h2>\\n<p>One more feature that we&#8217;re very very excited about for TypeScript has been deferred until version 2.1. For the ES8 <code>async</code> and <code>await</code> syntax, it is currently possible to transpile to ES6 syntax, but this requires a global ES6 <code>Promise</code> compatible implementation. Soon it will be possible to transpile code relying on <code>async</code> and <code>await</code> to ES5.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nasync function foo() {\\n\\treturn 'foo';\\n}\\n\\nawait foo();\\n</pre>\\n<h2>A new bottom type</h2>\\n<p>One of the challenges that the TypeScript team faced with the code flow analysis was that there was no <em>bottom</em> type, or in other words a total lack of a type, which is important in any type system. Traditionally, if a function in TypeScript was not expected to return a value, it could be typed as <code>void</code> but this wasn&#8217;t strictly a bottom type (since this was actually a version of <code>undefined | null</code> which are actually types in TypeScript).</p>\\n<p>In most cases, <code>never</code> is inferred in functions where the code flow analysis detects unreachable code and as a developer you don&#8217;t have to worry about it. For example, if a function only <code>throws</code>, it will get a <code>never</code> type:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nfunction error(message: string): never {\\n    throw new Error(message);\\n}\\n\\nfunction foo() { // inferred as a `never` return\\n    return error('I threw');\\n}\\n</pre>\\n<p>This does mean that functions that may potentially contain an unreachable return will have their return type analyzed as <code>never</code>, which in turn can end up being part of a definition file. So like <code>readonly</code>, this is a breaking change that is not backwards compatible.</p>\\n<h2>TypeScript 2 and beyond</h2>\\n<p>Our team have been big fans of TypeScript and have actively contributed feedback, bug reports, and pull requests. All of our current <a href=\\\"http://github.com/dojo/meta\\\">Dojo 2 work</a> has already been updated to support TypeScript 2, and our <a href=\\\"https://www.sitepen.com/workshops/\\\">ES6 and TypeScript workshops</a> are also updated for TypeScript 2. We&#8217;re very excited to build Dojo 2 and applications for our customers on top of TypeScript 2!</p>\\n<hr />\\n<h2>Learning more</h2>\\n<div style=\\\"margin-left: 20px;\\\">\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Get help from <a href=\\\"https://www.sitepen.com/services/\\\">SitePen Support</a>, our fast and efficient solutions to JavaScript development problems of any size.</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/workshopslogoblogs2.jpg\\\" alt=\\\"Workshops Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: 37px;\\\">SitePen workshops are a fun, hands-on way to keep up with JavaScript development and testing best practices. <a href=\\\"https://www.sitepen.com/services/\\\">Register</a> for an online workshop, today!</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: 35px;\\\"><a href=\\\"https://www.sitepen.com/contact/\\\">Let&#8217;s talk</a> about how we can help your organization improve their approach to automated testing.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: 35px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n<p style=\\\"padding-bottom: 5px;\\\">\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Over the past few years, TypeScript has iterated and greatly improved developer ergonomics. With our efforts on Dojo 2, we&#8217;ve been very excited about many of the features and improvements made, including several key improvements that have landed for TypeScript 2, which is currently in beta release!</p>\\n\",\"protected\":false},\"author\":3,\"featured_media\":13201,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,215,16,11],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>TypeScript 2.0 Awesomeness | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/typescript-2-0-awesomeness/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"TypeScript 2.0 Awesomeness | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Over the past few years, TypeScript has iterated and greatly improved developer ergonomics. With our efforts on Dojo 2, we&#8217;ve been very excited about many of the features and improvements made, including several key improvements that have landed for TypeScript 2, which is currently in beta release!\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/typescript-2-0-awesomeness/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2016-09-01T13:22:00+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/typescript-2-0-awesomeness/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/typescript-2-0-awesomeness/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/typescript-2-0-awesomeness/\\\",\\\"name\\\":\\\"TypeScript 2.0 Awesomeness | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/typescript-2-0-awesomeness/#primaryimage\\\"},\\\"datePublished\\\":\\\"2016-09-01T13:22:00+00:00\\\",\\\"dateModified\\\":\\\"2016-09-01T13:22:00+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/typescript-2-0-awesomeness/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/12904\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=12904\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/12904/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/13201\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=12904\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=12904\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=12904\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=12904\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":3,\"name\":\"Dylan Schiemann\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dylan/\",\"slug\":\"dylan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dylan Schiemann, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dylan Schiemann, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dylan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dylan/\\\",\\\"name\\\":\\\"Dylan Schiemann, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a80800fcb9dce7f-LHR"],["cf-request-id","03842e5de00000ce7fe4277200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Tue, 23 Jun 2020 19:08:53 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d8e9a123b5b1ea06b3c096d02dd3b28e91592939333; expires=Thu, 23-Jul-20 19:08:53 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}