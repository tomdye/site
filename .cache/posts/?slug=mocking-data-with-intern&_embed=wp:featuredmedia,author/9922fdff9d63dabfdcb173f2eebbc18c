{"value":{"body":"[{\"id\":9050,\"date\":\"2014-07-14T11:43:25\",\"date_gmt\":\"2014-07-14T18:43:25\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=9050\"},\"modified\":\"2020-08-01T08:10:21\",\"modified_gmt\":\"2020-08-01T15:10:21\",\"slug\":\"mocking-data-with-intern\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/mocking-data-with-intern/\",\"title\":{\"rendered\":\"Mocking data with Intern\"},\"content\":{\"rendered\":\"<p>When writing tests for an application, it’s prudent to add mock or stub data in order to allow code to be properly tested in isolation from other parts of the system. Within a normal Dojo application, there are typically three places where mocking will occur: I/O requests, stores, and module dependencies.</p>\\n<p><!--more--></p>\\n<h2 id=\\\"mocking-i-o-requests\\\">Mocking I/O requests</h2>\\n<p>Implementing mock services makes it easy to decouple the testing of client-side application logic from server-side data sources. Most bugs that are reported in Web application development are initially reported against the client-side application. By having clearly-established tests against mock objects, it is easier to isolate the source of a bug, and determine if the error is the result of an unexpected change to an API, or a failing data service. This reduces the frequency of reporting bugs against the wrong component, and streamlines the process for identifying, resolving, and testing fixes to application source code.</p>\\n<p>Mocking services client-side can be accomplished fairly simply by creating a custom <code>dojo/request</code> provider using <code>dojo/request/registry</code>. The following simple example creates a simple mock for a <code>/info</code> service endpoint which is simply expected to yield a hard-coded object:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// in tests/support/requestMocker.js\\r\\ndefine([\\r\\n    'dojo/request/registry',\\r\\n    'dojo/when'\\r\\n], function (registry, when) {\\r\\n    var mocking = false,\\r\\n        handles = [];\\r\\n\\r\\n    function start() {\\r\\n        if (mocking) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        mocking = true;\\r\\n\\r\\n        // Set up a handler for requests to '/info' that mocks a\\r\\n        // response without requesting from the server at all\\r\\n        handles.push(\\r\\n            registry.register('/info', function (url, options) {\\r\\n                // Wrap using `when` to return a promise;\\r\\n                // you could also delay the response\\r\\n                return when({\\r\\n                    hello: 'world'\\r\\n                });\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function stop() {\\r\\n        if (!mocking) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        mocking = false;\\r\\n\\r\\n        var handle;\\r\\n\\r\\n        while ((handle = handles.pop())) {\\r\\n            handle.remove();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        start: start,\\r\\n        stop: stop\\r\\n    };\\r\\n});</pre>\\n<p>Once you have a mock service, <code>dojo/request</code> will need to be configured to use the request registry so that the mock provider can be loaded:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// in tests/intern.js\\r\\nvar dojoConfig = {\\r\\n    requestProvider: 'dojo/request/registry'\\r\\n};\\r\\ndefine({\\r\\n    // … Intern configuration\\r\\n});</pre>\\n<p>Finally, the unit test itself will load the mock service and enable it during the test suite’s execution:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// in tests/unit/app/Controller.js\\r\\ndefine([\\r\\n    'intern!tdd',\\r\\n    'intern/chai!assert',\\r\\n    './support/requestMocker',\\r\\n    'app/Controller'\\r\\n], function (tdd, assert, requestMocker, Controller) {\\r\\n    tdd.suite('app/Controller', function () {\\r\\n        // start the data mocker when the test suite starts,\\r\\n        // and stop it after the suite suite has finished\\r\\n        tdd.before(function () {\\r\\n            requestMocker.start();\\r\\n        });\\r\\n\\r\\n        tdd.after(function () {\\r\\n            requestMocker.stop();\\r\\n        });\\r\\n\\r\\n        tdd.test('GET /info', function () {\\r\\n            // this code assumes Controller uses dojo/request\\r\\n            Controller.get({\\r\\n                url: '/info'\\r\\n            }).then(function (data) {\\r\\n                assert.deepEqual(data, {\\r\\n                    hello: 'world'\\r\\n                });\\r\\n            });\\r\\n        });\\r\\n    });\\r\\n});</pre>\\n<p>This data mocking mechanism provides the lowest-level cross-platform I/O abstraction possible. As an added benefit, creating a mock request provider also enables client-side development to proceed independently from any back-end development or maintenance that might normally prevent client-side developers from being able to continue working.</p>\\n<h2 id=\\\"mocking-stores\\\">Mocking stores</h2>\\n<p>The <code>dojo/store</code> API provides a standard, high-level data access API that abstracts away any underlying I/O transport layer and allows data to be requested and provided from a wide range of compatible stores. While a networked store like <code>dojo/store/JsonRest</code> could be used in conjunction with a <code>dojo/request</code> mock provider to mock store data, it is often simpler to mock the store itself using <code>dojo/store/Memory</code>. This is because, unlike a <code>dojo/request</code> mock, a mock <code>dojo/store</code> implementation does not need to know anything about how the back-end server might behave in production—or if there is even a back-end server in production at all.</p>\\n<p>By convention, and following the recommended principle of dependency injection, stores are typically passed to components that use a data store through the constructor:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// in tests/unit/util/Grid.js\\r\\ndefine([\\r\\n    'intern!tdd',\\r\\n    'intern/chai!assert',\\r\\n    'dojo/store/Memory',\\r\\n    'app/Grid'\\r\\n], function (tdd, assert, Memory, Grid) {\\r\\n    var mockStore = new Memory({\\r\\n        data: [\\r\\n            { id: 1, name: 'Foo' },\\r\\n            { id: 2, name: 'Bar' }\\r\\n        ]\\r\\n    });\\r\\n\\r\\n    tdd.suite('app/Grid', function () {\\r\\n        var grid;\\r\\n\\r\\n        tdd.before(function () {\\r\\n            grid = new Grid({\\r\\n                store: mockStore\\r\\n            });\\r\\n            grid.placeAt(document.body);\\r\\n            grid.startup();\\r\\n        });\\r\\n\\r\\n        tdd.after(function () {\\r\\n            grid.destroyRecursive();\\r\\n            grid = null;\\r\\n        });\\r\\n        // …\\r\\n    });\\r\\n});</pre>\\n<h2 id=\\\"mocking-amd-dependencies\\\">Mocking AMD dependencies</h2>\\n<p>Rewriting code to use dependency injection is strongly recommended over attempting to mock AMD modules, as doing so simplifies testing and improves code reusability. However, it is still possible to mock AMD dependencies by undefining the module under test and its mocked dependencies, modifying one of its dependencies using the loader’s module remapping functionality, then restoring the original modules after the mocked version has completed loading.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// in tests/support/amdMocker.js\\r\\ndefine([\\r\\n    'dojo/Deferred'\\r\\n], function (Deferred) {\\r\\n    function mock(moduleId, dependencyMap) {\\r\\n        var dfd = new Deferred();\\r\\n        // retrieve the original module values so they can be\\r\\n        // restored after the mocked copy has loaded\\r\\n        var originalModule;\\r\\n        var originalDependencies = {};\\r\\n        var NOT_LOADED = {};\\r\\n\\r\\n        try {\\r\\n            originalModule = require(moduleId);\\r\\n            require.undef(moduleId);\\r\\n        } catch (error) {\\r\\n            originalModule = NOT_LOADED;\\r\\n        }\\r\\n\\r\\n        for (var dependencyId in dependencyMap) {\\r\\n            try {\\r\\n                originalDependencies[dependencyId] = require(dependencyId);\\r\\n                require.undef(dependencyId);\\r\\n            } catch (error) {\\r\\n                originalDependencies[dependencyId] = NOT_LOADED;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // remap the module's dependencies with the provided map\\r\\n        var map = {};\\r\\n        map[moduleId] = dependencyMap;\\r\\n\\r\\n        require({\\r\\n            map: map\\r\\n        });\\r\\n\\r\\n        // reload the module using the mocked dependencies\\r\\n        require([moduleId], function (mockedModule) {\\r\\n            // restore the original condition of the loader by\\r\\n            // replacing all the modules that were unloaded\\r\\n            require.undef(moduleId);\\r\\n\\r\\n            if (originalModule !== NOT_LOADED) {\\r\\n                define(moduleId, [], function () {\\r\\n                    return originalModule;\\r\\n                });\\r\\n            }\\r\\n\\r\\n            for (var dependencyId in dependencyMap) {\\r\\n                map[moduleId][dependencyId] = dependencyId;\\r\\n                require.undef(dependencyId);\\r\\n                (function (originalDependency) {\\r\\n                    if (originalDependency !== NOT_LOADED) {\\r\\n                        define(dependencyId, [], function () {\\r\\n                            return originalDependency;\\r\\n                        });\\r\\n                    }\\r\\n                })(originalDependencies[dependencyId]);\\r\\n            }\\r\\n\\r\\n            require({\\r\\n                map: map\\r\\n            });\\r\\n\\r\\n            // provide the mocked copy to the caller\\r\\n            dfd.resolve(mockedModule);\\r\\n        });\\r\\n\\r\\n        return dfd.promise;\\r\\n    }\\r\\n\\r\\n    return {\\r\\n        mock: mock\\r\\n    };\\r\\n});</pre>\\n<p>With this AMD mocker, you simply call it from within your test suite to remap the dependencies of the module you’re trying to test, and load the newly mocked module:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// in tests/unit/app/Controller.js\\r\\ndefine([\\r\\n        'intern!tdd',\\r\\n        'intern/chai!assert',\\r\\n        'tests/support/amdMocker'\\r\\n    ], function (tdd, assert, amdMocker) {\\r\\n    tdd.suite('app/Controller', function () {\\r\\n        var Controller;\\r\\n\\r\\n        tdd.before(function () {\\r\\n            return amdMocker.mock('app/Controller', {\\r\\n                'util/ErrorDialog': 'tests/mocks/util/ErrorDialog',\\r\\n                'util/StatusDialog': 'tests/mocks/util/StatusDialog'\\r\\n            }).then(function (mocked) {\\r\\n                Controller = mocked;\\r\\n            });\\r\\n        });\\r\\n\\r\\n        tdd.test('basic tests', function () {\\r\\n            // use mocked `Controller`\\r\\n        });\\r\\n    });\\r\\n});</pre>\\n<p>More information on avoiding this pattern by loosely coupling components and performing dependency injection is discussed in <a href=\\\"https://www.sitepen.com/blog/?p=9044\\\">Testable code best practices</a>.</p>\\n<p>In the future, we hope to include several of these mocking systems directly within Intern in order to make mocking data even easier. For now, by following these simple patterns in your own tests, it becomes much easier to isolate sections of code for proper unit testing. Happy testing!</p>\\n<p>If you’re still not sure where to start, or would like extra assistance making your code more testable and reliable, we’re here to help! <a href=\\\"https://www.sitepen.com/contact\\\">Get in touch today</a> for a free 30-minute consultation.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>When writing tests for an application, it’s prudent to add mock or stub data in order to allow code to be properly tested in isolation from other parts of the system. Within a normal Dojo application, there are typically three places where mocking will occur: I/O requests, stores, and module dependencies.</p>\\n\",\"protected\":false},\"author\":41,\"featured_media\":9111,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,353,45,375,3],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Mocking data with Intern | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/mocking-data-with-intern/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Mocking data with Intern | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"When writing tests for an application, it’s prudent to add mock or stub data in order to allow code to be properly tested in isolation from other parts of the system. Within a normal Dojo application, there are typically three places where mocking will occur: I/O requests, stores, and module dependencies.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/mocking-data-with-intern/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2014-07-14T18:43:25+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-08-01T15:10:21+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/mocking-data-with-intern/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/mocking-data-with-intern/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/mocking-data-with-intern/\\\",\\\"name\\\":\\\"Mocking data with Intern | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/mocking-data-with-intern/#primaryimage\\\"},\\\"datePublished\\\":\\\"2014-07-14T18:43:25+00:00\\\",\\\"dateModified\\\":\\\"2020-08-01T15:10:21+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/mocking-data-with-intern/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\",\\\"name\\\":\\\"Colin Snover\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Colin Snover\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9050\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/41\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=9050\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9050/revisions\"}],\"predecessor-version\":[{\"id\":26348,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9050/revisions/26348\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/9111\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=9050\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=9050\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=9050\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=9050\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":41,\"name\":\"Colin Snover\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/csnover/\",\"slug\":\"csnover\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Colin Snover, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Colin Snover, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/csnover/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/csnover/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/csnover/\\\",\\\"name\\\":\\\"Colin Snover, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\",\\\"name\\\":\\\"Colin Snover\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Colin Snover\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/csnover/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/41\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:29:01 GMT"],["expires","Mon, 31 Aug 2020 15:29:01 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}