{"value":{"body":"[{\"id\":17073,\"date\":\"2019-01-29T08:11:54\",\"date_gmt\":\"2019-01-29T15:11:54\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=17073\"},\"modified\":\"2020-01-22T08:49:54\",\"modified_gmt\":\"2020-01-22T16:49:54\",\"slug\":\"codemods-effective-automated-refactoring\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/codemods-effective-automated-refactoring/\",\"title\":{\"rendered\":\"Codemods: Effective, Automated Refactoring\"},\"content\":{\"rendered\":\"<p>Maintaining software is challenging. Stagnant software quickly becomes obsolete and this couldn’t be truer than in the JavaScript ecosystem. JavaScript firmly holds the reigns as the language of the web and with that comes a unique opportunity for the language and ecosystem to learn and adopt best practices and paradigms from other languages and ecosystems, as JavaScript is the convergence point for all web projects. This means that everything changes, from the language syntax to the popular patterns used to write effective front-end code.</p>\\n<p>Frameworks and libraries are also in a perpetual state of flux, squashing bugs and improving the code. Trying to keep up with all of this can be a tedious effort and can lead to <em>JavaScript Fatigue</em>. But it doesn’t need to be bad! As JavaScript has grown in complexity, so too has the ecosystem continued to develop new and better tooling. One of the most powerful tools at our disposal is Codemods.</p>\\n<p><!--more--></p>\\n<h2>What’s in a codemod?</h2>\\n<p>In general, a codemod is an automated change to source code. More specifically, a codemod generally includes the following steps:</p>\\n<ol>\\n<li>Generate an Abstract Syntax Tree (AST) from a source file</li>\\n<li>Traverse the AST looking for matches</li>\\n<li>Make changes to the AST where appropriate</li>\\n<li>Regenerate the source file based on the new AST</li>\\n</ol>\\n<p>A very common codemod example is <a href=\\\"https://prettier.io/\\\">Prettier</a> which formats code based on an opinionated set of rules. Codemods don’t need to as general purpose as Prettier! Their real power arises from the simplicity of being able to generate your own codemod to satisfy your project&#8217;s very specific needs. Let’s walk through each of the steps.</p>\\n<h3>Generating the AST</h3>\\n<p>There are many tools available to generate an AST, depending on the language or style. One such tool is <a href=\\\"https://babeljs.io/docs/en/babel-parser\\\">@babel/parser</a> which provides a simple <code>parse</code> method to generate an AST.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { parse } from '@babel/parser';\\r\\n\\r\\nconst output = parse('let foo = true;', {});\\r\\nconsole.log(output);\\r\\n</pre>\\n<p>In this example, the source <code>let foo = true;</code> is passed to the <code>parse</code> method to generate the following tree.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n{\\r\\n  &quot;type&quot;: &quot;File&quot;,\\r\\n  &quot;start&quot;: 0,\\r\\n  &quot;end&quot;: 15,\\r\\n  &quot;program&quot;: {\\r\\n    &quot;type&quot;: &quot;Program&quot;,\\r\\n    &quot;start&quot;: 0,\\r\\n    &quot;end&quot;: 15,\\r\\n    &quot;sourceType&quot;: &quot;script&quot;,\\r\\n    &quot;interpreter&quot;: null,\\r\\n    &quot;body&quot;: [\\r\\n      {\\r\\n        &quot;type&quot;: &quot;VariableDeclaration&quot;,\\r\\n        &quot;start&quot;: 0,\\r\\n        &quot;end&quot;: 15,\\r\\n        &quot;declarations&quot;: [\\r\\n          {\\r\\n            &quot;type&quot;: &quot;VariableDeclarator&quot;,\\r\\n            &quot;start&quot;: 4,\\r\\n            &quot;end&quot;: 14,\\r\\n            &quot;id&quot;: {\\r\\n              &quot;type&quot;: &quot;Identifier&quot;,\\r\\n              &quot;start&quot;: 4,\\r\\n              &quot;end&quot;: 7,\\r\\n              &quot;name&quot;: &quot;foo&quot;\\r\\n            },\\r\\n            &quot;init&quot;: {\\r\\n              &quot;type&quot;: &quot;BooleanLiteral&quot;,\\r\\n              &quot;start&quot;: 10,\\r\\n              &quot;end&quot;: 14,\\r\\n              &quot;value&quot;: true\\r\\n            }\\r\\n          }\\r\\n        ],\\r\\n        &quot;kind&quot;: &quot;let&quot;\\r\\n      }\\r\\n    ]\\r\\n  }\\r\\n}\\r\\n</pre>\\n<p>Following this structure, <code>let foo = true;</code> consists of a single <code>VariableDeclaration</code>. The <code>declarations</code> property is an array containing the left and right sides of the equal sign. On the left is a <code>VariableDeclaration</code>, while on the right is the value being set, a <code>BooleanLiteral</code>.</p>\\n<p>ASTs may seem overwhelming at first, but it’s actually quite simple. Each part of the source is transformed into a node, which can be made up of other nodes. Being able to check the type of node for everything in the source tree allows us to find very specific segments of our code to transform, being assured that the code is not actually part of a comment or other less relevant node type. A great tool to better understand an AST is <a href=\\\"https://astexplorer.net/\\\">AST Explorer</a>, where you can enter code and receive a real-time AST. This is an incredibly powerful way to introspect an AST, including the types of nodes and their properties.</p>\\n<h3>Traversing and modifying the AST</h3>\\n<p>Once we have the AST, next we need to traverse it by calling a function for each node that will accept the node as its input. The function can determine the node’s type and then modify that node and return it, or return the unmodified original. To make things easier, traversal helpers like <a href=\\\"https://babeljs.io/docs/en/next/babel-traverse.html\\\">@babel/traverse</a> provide a helper to automatically detect a node’s type and run a provided function against all nodes of that type.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { parse } from '@babel/parser';\\r\\nimport traverse from '@babel/traverse';\\r\\n\\r\\nconst ast = parse('let foo = true;', {});\\r\\n\\r\\ntraverse(ast, {\\r\\n    Identifier(path) {\\r\\n        if (path.node.name === 'foo') {\\r\\n            path.node.name = 'bar';\\r\\n        }\\r\\n    }\\r\\n});\\r\\n\\r\\nconsole.log(ast.program.body[0].declarations[0]);\\r\\n</pre>\\n<p>In this example, the <code>Identifier</code> function allows us to provide code to specifically run on nodes of type <code>Identifier</code>. We can then check and make changes to its properties, resulting in an updated AST.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n{\\r\\n  &quot;type&quot;: &quot;VariableDeclarator&quot;,\\r\\n  &quot;start&quot;: 4,\\r\\n  &quot;end&quot;: 14,\\r\\n  &quot;id&quot;: {\\r\\n    &quot;type&quot;: &quot;Identifier&quot;,\\r\\n    &quot;start&quot;: 4,\\r\\n    &quot;end&quot;: 7,\\r\\n    &quot;name&quot;: &quot;bar&quot;\\r\\n  },\\r\\n  &quot;init&quot;: {\\r\\n    &quot;type&quot;: &quot;BooleanLiteral&quot;,\\r\\n    &quot;start&quot;: 10,\\r\\n    &quot;end&quot;: 14,\\r\\n    &quot;value&quot;: true\\r\\n  }\\r\\n}\\r\\n</pre>\\n<h3>Generating new source from the updated AST</h3>\\n<p>Once we have traversed the AST and made our desired changes, we can then generate the new source code from the modified AST. To do this, we can use <a href=\\\"https://github.com/benjamn/recast\\\">recast</a> or <a href=\\\"https://babeljs.io/docs/en/next/babel-generator\\\">@babel/generator</a>. Our current preference is recast because it specifically tries to preserve the original code styles, such as quote types, indentation, and newlines.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { parse } from '@babel/parser';\\r\\nimport traverse from '@babel/traverse';\\r\\nimport { print } from 'recast';\\r\\n\\r\\nconst ast = parse('let foo = true;', {});\\r\\n\\r\\ntraverse(ast, {\\r\\n    Identifier(path) {\\r\\n        if (path.node.name === 'foo') {\\r\\n            path.node.name = 'bar';\\r\\n        }\\r\\n    }\\r\\n});\\r\\n\\r\\nconst { code } = print(ast);\\r\\n\\r\\nconsole.log(code); // -&gt; let bar = true;\\r\\n</pre>\\n<h2>Putting it all together</h2>\\n<p>Now that we have reviewed each of the steps needed to make an effective transform for our code, we put it all together to create a codemod. The open source <a href=\\\"https://github.com/facebook/jscodeshift\\\">jscodeshift</a> project combines these pieces together to provide a simplified interface with a focus on simplicity. It also provides a command-line interface for running codemods by pointing it towards the source files. A jscodeshift codemod is created by defining a function that accepts information about a source file and API object.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport default function (file, api) {\\r\\n    const { source } = file;\\r\\n    const { jscodeshift: j } = api;\\r\\n\\r\\n    return j(source)\\r\\n        // codemod goes here\\r\\n        // ...\\r\\n        .toSource()\\r\\n}\\r\\n</pre>\\n<p>Inside that function, jscodeshift provides a chainable API for traversing and modifying the AST, as well as identifiers for each type of node. A final <code>.toSource</code> call is used to then replace the contents of the source file with one generated from the modified AST, matching the styles of the original file.</p>\\n<h3>A real-world example</h3>\\n<p>Version 2 of <a href=\\\"https://dojo.io/\\\">Dojo</a> was released on May 2nd, 2018. Since then, three additional major versions have been released, each with some pretty big changes. For example, <a href=\\\"https://dojo.io/blog/2018/07/27/2018-07-27-Dojo-version-3-release/\\\">version 3 of Dojo</a> focused on reducing the repository/package complexity of Dojo by consolidating eight foundational packages into a single package, <a href=\\\"https://github.com/dojo/framework\\\">@dojo/framework</a>. <a href=\\\"https://dojo.io/blog/2018/10/15/2018-10-15-Version-4-Dojo/\\\">Version 4 of Dojo</a> removed several modules that were no longer necessary. In both of these versions, the changes required by a user of the previous version required manual updates. This is where codemods can really shine and why we made them part of the <a href=\\\"https://github.com/dojo/cli-upgrade-app\\\">CLI tool</a>.</p>\\n<p>The following codemod example is derived from our work simplifying the upgrade story for Dojo by rewriting imports for the eight deprecated packages in version 2, to the new <code>@dojo/framework</code> package in version 3. One of Dojo’s main focuses is on developer ergonomics, and automating changes via codemods moves us to achieve that goal. This kind of change could be tedious for Dojo users as it is very likely that they would need to change <code>import</code> statements in every file of their project. They could use regular expressions to find and replace the strings, but there is a chance for unintended consequences with this approach, and the whole experience is not very friendly to the developer. Instead, this codemod automates the change to assure that it only affects <code>import</code> statements by modifying the AST directly.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst match = /^@dojo\\\\/(core|has|i18n|widget-core|routing|stores|shim|test-extras)/;\\r\\n\\r\\nexport default function({ source }, { jscodeshift: j }) {\\r\\n    return j(source)\\r\\n        .find(j.ImportDeclaration)\\r\\n        .replaceWith((path) =&gt; {\\r\\n            const { source } = path.node;\\r\\n            const matches = match.exec(source.value);\\r\\n            if (matches) {\\r\\n                const [full, pkg] = matches;\\r\\n                const replacement = pkg === 'test-extras' ? 'testing' : pkg;\\r\\n                source.value = source.value.replace(full, `@dojo/framework/${replacement}`);\\r\\n                return { ...path.node, source: { ...source } };\\r\\n            }\\r\\n            return p.node;\\r\\n        })\\r\\n        .toSource();\\r\\n};\\r\\n</pre>\\n<p>Providing the expected syntax for a jscodeshift codemod, this function traverses the AST looking specifically for nodes of type <code>ImportDeclaration</code>. For each matching node the codemod finds, it checks if the node’s value matches the regular expression for the deprecated packages. If it matches, the codemod directly modifies the value, changing the <code>source</code> value to be the new location of the import, and then returns that node. Otherwise, the codemod returns the node unchanged. Finally, it calls <code>toSource</code> which will output the changes. This codemod can be run from the command line with <code>jscodeshift -t ./codemod.js src/**/*.js</code>. This will run the defined function once for each source file and overwrite the files with the relevant changes. Ideally, the files being changed exist in version control, and the accuracy of the codemod can be tested via a simple <code>git diff</code> check.</p>\\n<h2>Simplifying the future with codemods</h2>\\n<p>Codemods are a simple yet effective tool to combat the inevitable churn of a codebase in a fast, safe, and programmatic way. Because of the low barrier to entry, they can be created by anyone with a little practice and are effective for long-term conversions, or one-time, throw away scripts. The ability to create and maintain modifications to an AST is the primary driver behind <a href=\\\"https://github.com/dojo/cli-upgrade-app\\\">@dojo/cli-upgrade-app</a>. This tool wraps jscodeshift and provides a way for Dojo developers to organize and develop codemods for each new major version of Dojo going forward. It also helps manage npm dependencies by defining what dependencies are new or deprecated and automating their installation/upgrade and removal, respectively. Codemods play a signifcant part in Dojo’s developer ergonomics story, and they can in yours as well!</p>\\n<h2>Getting help</h2>\\n<p>If you’d like to know more about codemods or if you need help codemods within your development initiatives, feel free to <a href=\\\"https://www.sitepen.com/contact\\\">reach out to us</a>, and we’ll be more than happy to help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Maintaining software is challenging. Stagnant software quickly becomes obsolete and this couldn’t be truer than in the JavaScript ecosystem. JavaScript firmly holds the reigns as the language of the web and with that comes a unique opportunity for the language and ecosystem to learn and adopt best practices and paradigms from other languages and ecosystems, [&hellip;]</p>\\n\",\"protected\":false},\"author\":49,\"featured_media\":22026,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[214,2,215,3,16],\"tags\":[5],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Codemods: Effective, Automated Refactoring | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Maintaining software is challenging. Stagnant software quickly becomes obsolete and this couldn’t be truer than in the JavaScript ecosystem. JavaScript firmly holds the reigns as the language of the web and with that comes a unique opportunity for the language and ecosystem to learn and adopt best practices and paradigms\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/codemods-effective-automated-refactoring/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Codemods: Effective, Automated Refactoring | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Maintaining software is challenging. Stagnant software quickly becomes obsolete and this couldn’t be truer than in the JavaScript ecosystem. JavaScript firmly holds the reigns as the language of the web and with that comes a unique opportunity for the language and ecosystem to learn and adopt best practices and paradigms\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/codemods-effective-automated-refactoring/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2019-01-29T15:11:54+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T16:49:54+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@nicknisi\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/codemods-effective-automated-refactoring/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Codemods: Effective, Automated Refactoring\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/codemods-effective-automated-refactoring/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/codemods-effective-automated-refactoring/\\\",\\\"name\\\":\\\"Codemods: Effective, Automated Refactoring | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/codemods-effective-automated-refactoring/#primaryimage\\\"},\\\"datePublished\\\":\\\"2019-01-29T15:11:54+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T16:49:54+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\"},\\\"description\\\":\\\"Maintaining software is challenging. Stagnant software quickly becomes obsolete and this couldn\\\\u2019t be truer than in the JavaScript ecosystem. JavaScript firmly holds the reigns as the language of the web and with that comes a unique opportunity for the language and ecosystem to learn and adopt best practices and paradigms\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/codemods-effective-automated-refactoring/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\",\\\"name\\\":\\\"Nick Nisi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Nick Nisi\\\"},\\\"sameAs\\\":[\\\"https://twitter.com/nicknisi\\\"]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17073\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/49\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=17073\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17073/revisions\"}],\"predecessor-version\":[{\"id\":22027,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17073/revisions/22027\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22026\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=17073\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=17073\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=17073\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=17073\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":49,\"name\":\"Nick Nisi\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/nnisi/\",\"slug\":\"nnisi\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Nick Nisi, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Nick Nisi, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/nnisi/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nnisi/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/nnisi/\\\",\\\"name\\\":\\\"Nick Nisi, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\",\\\"name\\\":\\\"Nick Nisi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Nick Nisi\\\"},\\\"sameAs\\\":[\\\"https://twitter.com/nicknisi\\\"],\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nnisi/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/49\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22026,\"date\":\"2020-01-22T08:49:34\",\"slug\":\"codemods\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/codemods-effective-automated-refactoring/codemods/\",\"title\":{\"rendered\":\"Codemods\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Codemods | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Codemods | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T16:49:45+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\\\",\\\"name\\\":\\\"Codemods | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T16:49:34+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T16:49:45+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Codemods: Effective, Automated Refactoring\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2019/01/Codemods.png\",\"sizes\":{\"medium\":{\"file\":\"Codemods-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods-300x158.png\"},\"large\":{\"file\":\"Codemods-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods-1024x538.png\"},\"thumbnail\":{\"file\":\"Codemods-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods-150x150.png\"},\"medium_large\":{\"file\":\"Codemods-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods-768x403.png\"},\"full\":{\"file\":\"Codemods.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Codemods.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22026\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:12:16 GMT"],["expires","Thu, 24 Sep 2020 13:12:16 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}