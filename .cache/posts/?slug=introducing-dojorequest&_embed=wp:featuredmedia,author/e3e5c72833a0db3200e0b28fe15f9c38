{"value":{"body":"[{\"id\":4753,\"date\":\"2012-08-21T06:00:36\",\"date_gmt\":\"2012-08-21T13:00:36\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=4753\"},\"modified\":\"2012-08-21T06:00:36\",\"modified_gmt\":\"2012-08-21T13:00:36\",\"slug\":\"introducing-dojorequest\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/introducing-dojorequest/\",\"title\":{\"rendered\":\"Introducing dojo/request\"},\"content\":{\"rendered\":\"<p>As Dojo moves toward its 2.0 release, our focus has been on giving developers tools that will help them be productive in any JavaScript environment. This means creating consistent APIs across all environments. One area that has been sorely lacking, in this regard, is Dojo&#8217;s IO functions. We&#8217;ve always provided developers with a way to make requests in the browser (<code>dojo.xhr*</code>, <code>dojo.io.iframe</code>, <code>dojo.io.script</code>), but the API has been less consistent than some of us would like (<code>dojo.xhrGet</code>, <code>dojo.io.script.get</code>, etc.). Additionally, we&#8217;ve never provided a server-side implementation, and if we had, it would have been another module name and API call to remember.</p>\\n<p>With the release of Dojo 1.8, we have introduced the <a href=\\\"http://dojotoolkit.org/reference-guide/1.8/dojo/request.html\\\"><code>dojo/request</code></a> API which provides consistent API calls between browsers, request methods, and environments:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequire([&quot;dojo/request&quot;], function(request){\\n    var promise = request(url, options);\\n    promise.then(\\n        function(data){\\n        },\\n        function(error){\\n        }\\n    );\\n    promise.response.then(\\n        function(response){\\n        },\\n        function(error){\\n        }\\n    );\\n    request.get(url, options).then(...);\\n    request.post(url, options).then(...);\\n    request.put(url, options).then(...);\\n    request.del(url, options).then(...);\\n});\\n</pre>\\n<p><!--more--></p>\\n<p>The function signature for <code>dojo/request</code> and all providers is a URL and an object specifying options for the request. This means using <code>dojo/request</code> is as easy as passing it a string argument; the <code>options</code> argument is truly optional. Let&#8217;s take a look at the common properties you can pass on the <code>options</code> object:</p>\\n<ul>\\n<li><strong>method</strong> &#8211; HTTP method to use for the request (default is <code>'GET'</code>; ignored by <code>dojo/request/script</code>)</li>\\n<li><strong>query</strong> &#8211; <code>key=value</code> string or <code>{ key: 'value' }</code> object specifying query parameters</li>\\n<li><strong>data</strong> &#8211; string or object (serialized to a string with <code>dojo/io-query.objectToQuery</code>) specifying data to transfer (ignored by <code>GET</code> and <code>DELETE</code> requests)</li>\\n<li><strong>handleAs</strong> &#8211; string specifying how to handle the server response; default is &#8216;text&#8217;, other possibilities include &#8216;json&#8217;, &#8216;javascript&#8217;, and &#8216;xml&#8217;</li>\\n<li><strong>headers</strong> &#8211; <code>{ 'Header-Name': 'value' }</code> object specifying headers to use for the request</li>\\n<li><strong>timeout</strong> &#8211; integer specifying how many milliseconds to wait before considering the request timed out, canceling the request, and rejecting the promise</li>\\n</ul>\\n<p>The consistency of the API also extends to its return value: all <code>dojo/request</code> methods return a promise that will resolve to the data contained in the response. If a content handler was specified when the request was made (via the <code>handleAs</code> option), the promise will resolve to the result of the content handler; otherwise it will resolve to the response body text.</p>\\n<p>Promises returned from <code>dojo/request</code> calls extend normal <code>dojo/promise</code> behavior with an additional property: <code>response</code>. This property is also a promise that will resolve to a frozen object (where available) describing the response in more detail:</p>\\n<ul>\\n<li><strong>url</strong> &#8211; final URL used to make the request (with query string appended)</li>\\n<li><strong>options</strong> &#8211; options object used to make the request</li>\\n<li><strong>text</strong> &#8211; string representation of the data in the response</li>\\n<li><strong>data</strong> &#8211; the handled data in the response (if <code>handleAs</code> was specified)</li>\\n<li><strong>getHeader(headerName)</strong> &#8211; a function to get a header from the request; if a provider doesn&#8217;t provide header information, this function will return <code>null</code>.</li>\\n</ul>\\n<p>The example at the top of this post shows this in action through the use of <code>promise.response.then</code></p>\\n<h3>Providers</h3>\\n<p>Behind the scenes, <code>dojo/request</code> uses providers to make requests. For each platform, a sensible default is chosen: browsers will use <a href=\\\"http://dojotoolkit.org/reference-guide/1.8/dojo/request/xhr.html\\\"><code>dojo/request/xhr</code></a> and Node will use <a href=\\\"http://dojotoolkit.org/reference-guide/1.8/dojo/request/node.html\\\"><code>dojo/request/node</code></a>. It should be noted that newer browsers (IE9+, FF3.5+, Chrome 7+, Safari 4+) will use the new <a href=\\\"http://www.w3.org/TR/XMLHttpRequest/\\\"><code>XMLHttpRequest2</code></a> events instead of <code>XMLHttpRequest</code>&#8216;s <code>onreadystatechange</code> that is used in older browsers. Also, the Node provider uses the <code>http</code> and <code>https</code> modules, which means no <code>XMLHttpRequest</code> shim needs to be employed on the server.</p>\\n<p>If a provider other than the default needs to be used (for instance, the provider for JSON-P), there are three choices available: use the non-default provider directly, configure it as the default provider, or configure the request registry.</p>\\n<p>Because all providers conform to the <code>dojo/request</code> API, non-default providers can be used directly. The approach taken with the <code>dojo/request</code> API is analogous to the approach of <code>dojo/store</code>. This means that if you only have a few services that return JSON-P, you can use <a href=\\\"http://dojotoolkit.org/reference-guide/1.8/dojo/request/script.html\\\"><code>dojo/request/script</code></a> for those services without having to change the basic API signature. Using a provider this way is slightly less flexible than the other two choices (especially for testing), but is a completely valid way to use a non-default provider.</p>\\n<p>Another way to use a non-default provider is to configure it as the default provider. This is helpful if we knew that our application was only going to use one provider that wasn&#8217;t the default. Configuring the default provider is as simple as setting a provider&#8217;s module ID as the <code>requestProvider</code> property of <code>dojoConfig</code>:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;script&gt;\\n    var dojoConfig = {\\n        requestProvider: &quot;dojo/request/script&quot;\\n    };\\n&lt;/script&gt;\\n&lt;script src=&quot;path/to/dojo/dojo.js&quot;&gt;&lt;/script&gt;\\n</pre>\\n<p><code>requestProvider</code> can also be set up via <code>data-dojo-config</code> like any other configuration parameter. In addition, any function that conforms to the <code>dojo/request</code> API can be used as the default provider. This means we could develop a custom module that wraps <code>dojo/request/xhr</code>, adds additional headers for authentication, and configure it as our application&#8217;s default provider. During testing, a separate provider could be used to simulate responses from the server to test if our application is making requests to the correct services.</p>\\n<p>Although configuring the default provider gives us more flexibility than using providers directly, it still doesn&#8217;t give us the flexibility needed to use one API call (<code>dojo/request</code>) with different providers based on a specified criteria. Let&#8217;s say our application&#8217;s data services needed one set of authentication headers for one service and an entirely different set of headers for a second service. Or JSON-P for one and <code>XMLHttpRequest</code> for another. This is where using <code>dojo/request/registry</code> shines.</p>\\n<h3>Registry</h3>\\n<p>One module that has been present in DojoX for a long time, but is not widely used is <code>dojox/io/xhrPlugins</code>. This module provides a way to use <code>dojo.xhr*</code> as the interface for all requests, whether those requests needed to be made via JSONP, iframe, or another user-defined provider. Because of its usefulness, the idea has been adapted as <a href=\\\"http://dojotoolkit.org/reference-guide/1.8/dojo/request/registry.html\\\"><code>dojo/request/registry</code></a>.</p>\\n<p><code>dojo/request/registry</code> conforms to the <code>dojo/request</code> API (so it can be used as a provider) with the addition of the <code>register</code> function:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// provider will be used when the URL of a request\\n// matches &quot;some/url&quot; exactly\\nregistry.register(&quot;some/url&quot;, provider);\\n\\n// provider will be used when the beginning of the URL\\n// of a request matches &quot;some/url&quot;\\nregistry.register(/^some\\\\/url/, provider);\\n\\n// provider will be used when the HTTP method of\\n// the request is &quot;GET&quot;\\nregistry.register(\\n    function(url, options){\\n        return options.method === &quot;GET&quot;;\\n    },\\n    provider\\n);\\n\\n// provider will be used if no other criteria are\\n// matched (a fallback provider)\\nregistry.register(provider);\\n</pre>\\n<p>If no criteria are matched and a fallback provider hasn&#8217;t been configured, the default provider for the environment will be used. Since <code>dojo/request/registry</code> conforms to the <code>dojo/request</code> API, it can be used as the default provider:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;script&gt;\\n    var dojoConfig = {\\n        requestProvider: &quot;dojo/request/registry&quot;\\n    };\\n&lt;/script&gt;\\n&lt;script src=&quot;path/to/dojo/dojo.js&quot;&gt;&lt;/script&gt;\\n&lt;script&gt;\\n    require([&quot;dojo/request&quot;, &quot;dojo/request/script&quot;],\\n        function(request, script){\\n            request.register(/^\\\\/jsonp\\\\//, script);\\n            ...\\n        }\\n    );\\n&lt;/script&gt;\\n</pre>\\n<p>This is great if we want to use the platform&#8217;s default provider (XHR for browsers) as our fallback. We could also set up a fallback provider using the last API call above, but no other providers could be registered afterward. Instead, <code>dojo/request/registry</code> can be used as a plugin from <code>requestProvider</code> to set the fallback provider:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;script&gt;\\n    var dojoConfig = {\\n        requestProvider: &quot;dojo/request/registry!my/authProvider&quot;\\n    };\\n&lt;/script&gt;\\n&lt;script src=&quot;path/to/dojo/dojo.js&quot;&gt;&lt;/script&gt;\\n&lt;script&gt;\\n    require([&quot;dojo/request&quot;, &quot;dojo/request/script&quot;],\\n        function(request, script){\\n            request.register(/^\\\\/jsonp\\\\//, script);\\n            ...\\n        }\\n    );\\n&lt;/script&gt;\\n</pre>\\n<p>Now, any request not matching the criteria we have set up will use the module located at <code>my/authProvider</code>.</p>\\n<p>The power of the registry may not be readily apparent. Let&#8217;s take a look at some scenarios which make the benefits stand out. First, let&#8217;s consider an application where the server API is in flux. We know the end-points, but we don&#8217;t know what headers will be required or even what JSON objects will be returned. We could easily set up a registry provider for each service, temporarily, and start coding the user interface. Let&#8217;s say we guess that <code>/service1</code> will return items as JSON in an <code>items</code> property and <code>/service2</code> will return them as JSON in a <code>data</code> property:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequest.register(/^\\\\/service1\\\\//, function(url, options){\\n    var promise = xhr(url, lang.delegate(options, { handleAs: &quot;json&quot; })),\\n         dataPromise = promise.then(function(data){\\n            return data.items;\\n        });\\n    return lang.delegate(dataPromise, {\\n        response: promise.response\\n    });\\n});\\nrequest.register(/^\\\\/service2\\\\//, function(url, options){\\n    var promise = xhr(url, lang.delegate(options, { handleAs: &quot;json&quot; })),\\n         dataPromise = promise.then(function(data){\\n            return data.data;\\n        });\\n    return lang.delegate(dataPromise, {\\n        response: promise.response\\n    });\\n});\\n</pre>\\n<p>All service requests in the user interface can now be used in the form <code>request(url, options).then(...)</code> and they will receive the proper data. As development proceeds, however, the server team decides that <code>/service1</code> will return its items as JSON in a <code>data</code> property and <code>/service2</code> will return its items as XML. Without using the registry, this would have been a major code change; but by using the registry, we&#8217;ve decoupled what our widgets and data stores are expecting from what the services are providing. This means the server team&#8217;s decisions only cause code to change in two places: our providers. Potentially, we could even decouple our user interface from URLs altogether and use generic URLs which the registry then maps to the correct provider that uses the correct server end-point. This allows end-points to change without the pain of updating code in multiple places.</p>\\n<p>This decoupling can also be extended to testing. Usually during unit tests, a remote server is not desirable: data can change and the remote server could be down. This is why testing against static data is recommended. But if our widgets and user interface have end-points or request calls hard-coded into them, how do we test them? If we&#8217;re using <code>dojo/request/registry</code> we simply register a provider for an end-point that will return static data for requests for our unit tests. No API calls need to change. No code within our application needs to be rewritten.</p>\\n<h3>Conclusion</h3>\\n<p>As you can see, <code>dojo/request</code> was written with the developer in mind: a simple API for simple situations, but flexible options for the most complex applications.</p>\\n<h3>Resources</h3>\\n<p>To learn even more about <code>dojo/request</code>, check out the following resources:</p>\\n<ul>\\n<li><a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.8/ajax/\\\">Ajax with dojo/request tutorial</li>\\n<li><a href=\\\"http://dojotoolkit.org/reference-guide/1.8/dojo/request.html\\\">dojo/request reference guide</li>\\n<li><a href=\\\"http://dojotoolkit.org/api/1.8/dojo/request\\\">dojo/request API</li>\\n</ul>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>As Dojo moves toward its 2.0 release, our focus has been on giving developers tools that will help them be productive in any JavaScript environment. This means creating consistent APIs across all environments. One area that has been sorely lacking, in this regard, is Dojo&#8217;s IO functions. We&#8217;ve always provided developers with a way to [&hellip;]</p>\\n\",\"protected\":false},\"author\":17,\"featured_media\":22075,\"comment_status\":\"open\",\"ping_status\":\"open\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,45,356,3,28],\"tags\":[52,358,359],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Introducing dojo/request | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/introducing-dojorequest/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Introducing dojo/request | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"As Dojo moves toward its 2.0 release, our focus has been on giving developers tools that will help them be productive in any JavaScript environment. This means creating consistent APIs across all environments. One area that has been sorely lacking, in this regard, is Dojo&#8217;s IO functions. We&#8217;ve always provided developers with a way to [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/introducing-dojorequest/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2012-08-21T13:00:36+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/introducing-dojorequest/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/introducing-dojorequest/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/introducing-dojorequest/\\\",\\\"name\\\":\\\"Introducing dojo/request | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/introducing-dojorequest/#primaryimage\\\"},\\\"datePublished\\\":\\\"2012-08-21T13:00:36+00:00\\\",\\\"dateModified\\\":\\\"2012-08-21T13:00:36+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/19684d284628ca51cb723446174f3cb2\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/introducing-dojorequest/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/19684d284628ca51cb723446174f3cb2\\\",\\\"name\\\":\\\"Bryan Forbes\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/a12ae493f823bcb136d7c39000e5e294?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Bryan Forbes\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/4753\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/17\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=4753\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/4753/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=4753\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=4753\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=4753\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=4753\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":17,\"name\":\"Bryan Forbes\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/bforbes/\",\"slug\":\"bforbes\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/a12ae493f823bcb136d7c39000e5e294?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/a12ae493f823bcb136d7c39000e5e294?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/a12ae493f823bcb136d7c39000e5e294?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Bryan Forbes, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Bryan Forbes, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/bforbes/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/a12ae493f823bcb136d7c39000e5e294?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/bforbes/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/bforbes/\\\",\\\"name\\\":\\\"Bryan Forbes, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/19684d284628ca51cb723446174f3cb2\\\",\\\"name\\\":\\\"Bryan Forbes\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/a12ae493f823bcb136d7c39000e5e294?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Bryan Forbes\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/bforbes/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/17\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:29:43 GMT"],["expires","Mon, 31 Aug 2020 15:29:43 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}