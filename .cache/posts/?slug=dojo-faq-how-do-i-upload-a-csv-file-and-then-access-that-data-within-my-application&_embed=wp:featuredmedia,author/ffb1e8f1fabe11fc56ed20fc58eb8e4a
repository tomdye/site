{"value":{"body":"[{\"id\":9639,\"date\":\"2015-03-26T12:24:13\",\"date_gmt\":\"2015-03-26T19:24:13\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=9639\"},\"modified\":\"2015-03-26T12:24:13\",\"modified_gmt\":\"2015-03-26T19:24:13\",\"slug\":\"dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/\",\"title\":{\"rendered\":\"Dojo FAQ: How do I upload a CSV file, then access that data in my application?\"},\"content\":{\"rendered\":\"<p><img style=\\\"margin: 20px 0 20px 20px; float: right;\\\" alt=\\\"DojoFAQ\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2013/09/DojoFAQ.png\\\" width=\\\"200\\\" height=\\\"200\\\" /></p>\\n<p>While a more recent advancement allows us <a href=\\\"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications\\\">use the HTML5 file API to retrieve contents from files</a>, this approach is not universally supported in web browsers as yet. Instead, we will access data from user-uploaded CSV files using the following steps:</p>\\n<ul>\\n<li>Upload a file to the server</li>\\n<li>Retrieve the file from the server</li>\\n<li>Load the data into an easy-to-use format</li>\\n</ul>\\n<p><!--more--></p>\\n<h2>Uploading a file to the server</h2>\\n<p>Traditional file uploads from within a form are only permitted when the entire form is submitted to the server and a new page is returned. Normally, file uploads are disallowed with XMLHttpRequests for security reasons.</p>\\n<p>To upload a CSV file, there are two options within Dojo: the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects\\\">FormData</a> object or <a href=\\\"http://dojotoolkit.org/reference-guide/1.10/dojox/form/Uploader.html\\\">dojox/form/Uploader</a>. The FormData approach is not supported prior to Internet Explorer version 10. Most of our users still need to support IE9, so this example will use the <a href=\\\"http://dojotoolkit.org/reference-guide/1.10/dojox/form/Uploader.html\\\">dojox/form/Uploader</a> API. Like all Dijits, it can be instantiated <a href=\\\"http://dojotoolkit.org/reference-guide/1.10/quickstart/writingWidgets.html\\\">programmatically or declaratively</a>.</p>\\n<p>The Uploader widget is wrapped in a form element with its method set to <code>post</code>, its action set to <code>/upload</code>, and its enctype set to <code>multipart/form-data</code>. When a file is selected, the form will do a POST request to the url &#8220;/upload.&#8221;</p>\\n<p>We are instantiating the Uploader widget programmatically with a source node reference of &#8220;uploader&#8221;:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">    var uploader = new Uploader({\\n        name: 'uploadedfile',\\n        type: 'file',\\n        label: 'Select CSV file',\\n        uploadOnSelect: true, // immediately upload file upon selected\\n        onComplete: onComplete\\n    }, 'uploader');\\n\\n    uploader.startup();</pre>\\n<p>Once a file is selected with the Uploader widget, the form will do a POST request to the specified url. The server side will need to save the file to a location where your application can reach it. This method works with almost any server-side approach for handling the file request. This particular example uses <a href=\\\"http://expressjs.com/\\\">Express</a>, a server-side JavaScript web framework for <a href=\\\"http://nodejs.org/\\\">Node.js</a>.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">function upload (request, response) {\\n\\tvar file,\\n\\t\\tnewPath;\\n\\n\\t// save file to upload directory\\n\\tif (request.files) {\\n\\t\\tfile = request.files.uploadedfile;\\n\\n\\t\\tfs.readFile(file.path, function (error, data) {\\n\\t\\t\\tnewPath = path.normalize(__dirname + '/../public/upload/' +\\n                        file.originalFilename);\\n\\n\\t\\t\\tfs.writeFile(newPath, data, function (error) {\\n\\t\\t\\t\\tif (error) {\\n\\t\\t\\t\\t\\treturn next(error);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tresponse.json({success: true, \\n\\t\\t\\t\\t\\tmessage: 'file is successfully uploaded.', \\n\\t\\t\\t\\t\\tfilename: file.originalFilename\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t});\\n\\t}\\n\\telse {\\n\\t\\tresponse.status(400).json({success: false, message:'No file attached'});\\n\\t}\\n}</pre>\\n<p>Once the file is successfully saved, the server will send a response with a status of 200 and return a JSON object with properties including the message and filename.</p>\\n<h2>Retrieving the file from the server</h2>\\n<p>In this example, <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.10/ajax/\\\">dojo/request</a> is used to fetch the file.</p>\\n<p>For the initial Uploader example, an onComplete handler is added to the Uploader widget upon instantiation. The function is called when the server returns a response.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">function onComplete (response) {\\n\\tif (response.filename) {\\n\\t\\t// request the uploaded csv file\\n\\t\\trequest('upload/' + response.filename).then(function (response) {\\n\\t\\t\\t// response = CSV string\\n\\t\\t\\t...\\n\\t\\t});\\n\\t}\\n\\telse {\\n\\t\\tconsole.log('Failed to upload file');\\n\\t}\\n}</pre>\\n<p>The onComplete function uses dojo/request to retrieve the file previously uploaded and saved to the server. Once the request successfully retrieves the file, either <a href=\\\"https://github.com/SitePen/dstore/blob/master/Csv.js\\\">dstore/Csv</a> or <a href=\\\"https://github.com/SitePen/dojo-smore/blob/master/Csv.js\\\">dojo-smore/Csv</a> can be used to place the response in an easy-to-use object store structure. The decision here will depend on which approach to object stores you wish to use within your application: either the newer <a href=\\\"https://www.sitepen.com/blog/2014/11/17/introducing-dstore/\\\">dstore</a>, or the existing dojo/store API.</p>\\n<h2>dstore/Csv</h2>\\n<p>The first step to use <code>dstore/Csv</code> is to mix the <a href=\\\"https://github.com/SitePen/dstore/blob/master/Memory.js\\\">dstore/Memory</a> with the <code>dstore/Csv</code> then initialize the object with the server response as the data property. You can access the CSV data with the initialized object data property. This data property will give you an array of objects with the key as the name and values as the value. Below, we will use <a href=\\\"https://github.com/SitePen/dgrid/blob/master/OnDemandGrid.js\\\">dgrid/OnDemandGrid</a> to display the CSV data. For example:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">require([\\n\\t'dojo/_base/declare',\\n\\t'dojo/_base/array',\\n\\t'dojox/form/Uploader',\\n\\t'dstore/Memory',\\n\\t'dstore/Csv',\\n\\t'dgrid/OnDemandGrid', // dgrid 0.4+\\n\\t'dojo/request',\\n\\t'dojo/domReady!'\\n], function (\\n\\tdeclare,\\n\\tarray,\\n\\tUploader,\\n\\tMemory,\\n\\tCsv,\\n\\tOnDemandGrid,\\n\\trequest\\n) { \\n...\\n\\t// request the uploaded csv file\\n\\trequest('upload/' + response.filename).then(function (response) {\\n\\t\\tvar csvData,\\n\\t\\t\\t// Mix Csv into Memory\\n\\t\\t\\tCsvMemory = declare([Memory, Csv]);\\n\\n\\t\\tcsvData = new CsvMemory({\\n\\t\\t\\tdata: response\\n\\t\\t\\t/* options: delimiter, newline... */\\n\\t\\t});\\n\\n\\t\\t// [{key: value}, {key: value}, ...]\\n\\t\\tconsole.log(csvData.fetchSync());\\n\\t\\t// [&quot;field1&quot;, &quot;field2&quot;, ...]\\n\\t\\tconsole.log(csvData.fieldNames);\\n\\n\\t\\tnew OnDemandGrid({\\n\\t\\t\\tcollection: csvData,\\n\\t\\t\\t// Columns can be taken directly from the collection\\n\\t\\t\\tcolumns: csvData.fieldNames\\n\\t\\t}, 'grid'); // attach to a DOM id\\n\\t});\\n...\\n});</pre>\\n<h2>dojo-smore/Csv</h2>\\n<p>When using <code>dojo-smore/Csv</code>, an object is initialized by passing in the CSV data string as the data property along with other options. Data is then accessed via the store&#8217;s <code>data</code> property, an array of objects with the key as the name and value as the value. Since we are displaying the data in a 0.4+ version of <code>dgrid/OnDemandGridData</code>, we need to use the <a href=\\\"https://github.com/SitePen/dstore/blob/master/legacy/StoreAdapter.js\\\">dstore/legacy/StoreAdapter</a>. If you are using dgrid 0.3.x with dojo/store, the adapter is not necessary. For example:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">require([\\n\\t'dojo/_base/array',\\n\\t'dojox/form/Uploader',\\n\\t'dojo-smore/Csv',\\n\\t'dstore/legacy/StoreAdapter' // only for dgrid 0.4+\\n\\t'dgrid/OnDemandGrid', // dgrid 0.4+\\n\\t'dojo/request',\\n\\t'dojo/domReady!'\\n], function (\\n\\tarray,\\n\\tUploader,\\n\\tCsv,\\n\\tStoreAdapter,\\n\\tOnDemandGrid,\\n\\trequest\\n) { \\n...\\n\\t// request the uploaded csv file\\n\\trequest('upload/' + response.filename).then(function (response) {\\n\\t\\tvar csvData;\\n\\n\\t\\t// use storeAdapter for dgrid\\n\\t\\tcsvData = new StoreAdapter({\\n\\t\\t\\tobjectStore: new Csv({data: response})\\n\\t\\t});\\n\\n\\t\\t// [{key: value}, {key: value}, ...]\\n\\t\\tconsole.log(csvData.objectStore.data); \\n\\t\\t// [&quot;field1&quot;, &quot;field2&quot;, ...]\\n\\t\\tconsole.log(csvData.objectStore.fieldNames);\\n\\t\\t// convert the data to CSV\\n\\t\\tconsole.log(csvData.objectStore.toCsv());\\n\\n\\t\\tnew OnDemandGrid({\\n\\t\\t\\tcollection: csvData,\\n\\t\\t\\t// Columns can be taken directly from the store\\n\\t\\t\\tcolumns: csvData.objectStore.fieldNames\\n\\t\\t}, 'grid'); // attach to a DOM id\\n\\t});\\n...\\n});</pre>\\n<h2>Conclusion</h2>\\n<p>Once data has been accessed, the data from the original CSV file is now saved on the server and available for use within the application.</p>\\n<h2>Learning more</h2>\\n<p>Join us in our <a href=\\\"https://www.sitepen.com/services/\\\">Dojo workshops</a> offered throughout the US, Canada, and Europe, or at your location to learn more about loading data via object stores and dstore. We also provide expert <a href=\\\"https://www.sitepen.com/services/\\\">JavaScript and Dojo support</a> and <a href=\\\"https://www.sitepen.com/services/\\\">development</a> services. <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> for a free 30 minute consultation to discuss how we can help you efficiently manage data within your application.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>While a more recent advancement allows us use the HTML5 file API to retrieve contents from files, this approach is not universally supported in web browsers as yet. Instead, we will access data from user-uploaded CSV files using the following steps: Upload a file to the server Retrieve the file from the server Load the data [&hellip;]</p>\\n\",\"protected\":false},\"author\":3,\"featured_media\":8167,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[350,45,396,380],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dojo FAQ: How do I upload a CSV file, then access that data in my application? | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"While a more recent advancement allows us use the HTML5 file API to retrieve contents from files, this approach is not universally supported in web browsers as yet. Instead, we will access data from user-uploaded CSV files using the following steps:  Upload a file to the server Retrieve the file from the server Load t\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dojo FAQ: How do I upload a CSV file, then access that data in my application? | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"While a more recent advancement allows us use the HTML5 file API to retrieve contents from files, this approach is not universally supported in web browsers as yet. Instead, we will access data from user-uploaded CSV files using the following steps:  Upload a file to the server Retrieve the file from the server Load t\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-03-26T19:24:13+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/\\\",\\\"name\\\":\\\"Dojo FAQ: How do I upload a CSV file, then access that data in my application? | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-03-26T19:24:13+00:00\\\",\\\"dateModified\\\":\\\"2015-03-26T19:24:13+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\"},\\\"description\\\":\\\"While a more recent advancement allows us\\\\u00a0use the HTML5 file API to retrieve contents from files, this approach is not universally supported in web browsers as yet. Instead, we will access data from user-uploaded CSV files using the following steps: Upload a file to the server Retrieve the file from the server Load t\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/dojo-faq-how-do-i-upload-a-csv-file-and-then-access-that-data-within-my-application/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9639\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=9639\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9639/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/8167\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=9639\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=9639\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=9639\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=9639\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":3,\"name\":\"Dylan Schiemann\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dylan/\",\"slug\":\"dylan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dylan Schiemann, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dylan Schiemann, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dylan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dylan/\\\",\\\"name\\\":\\\"Dylan Schiemann, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:31:26 GMT"],["expires","Wed, 09 Sep 2020 15:31:26 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}