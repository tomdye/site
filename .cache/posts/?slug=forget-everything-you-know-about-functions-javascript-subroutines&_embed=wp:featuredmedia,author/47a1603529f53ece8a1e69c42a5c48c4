{"value":{"body":"[{\"id\":590,\"date\":\"2009-02-11T00:10:10\",\"date_gmt\":\"2009-02-11T07:10:10\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2009/02/11/forget-everything-you-know-about-functions-javascript-subroutines/\"},\"modified\":\"2009-02-11T00:10:10\",\"modified_gmt\":\"2009-02-11T07:10:10\",\"slug\":\"forget-everything-you-know-about-functions-javascript-subroutines\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/\",\"title\":{\"rendered\":\"Forget Everything You Know About Functions: JavaScript Subroutines\"},\"content\":{\"rendered\":\"<p>Performing frequent <a href=\\\"https://www.sitepen.com/\\\">training</a> courses has given SitePen a chance to learn new ways to improve our training approach. Some concepts in JavaScript can be trickier than others and as we interact with the classes, we&#8217;re able to develop fun explanations for these tricky concepts. I&#8217;d like to share one of the explanations I developed at a recent training course.</p>\\n<p>A common phrase that results from these training sessions is &#8220;I didn&#8217;t know JavaScript could do that.&#8221; The first time we hear it is usually after we&#8217;ve covered how to work with functions in JavaScript, when we start showing how JavaScript allows us to use functions (in an approach termed <a href=\\\"http://en.wikipedia.org/wiki/Functional_programming\\\">functional programming</a>). We try to conclude each part of the course with code examples that incorporate everything from the section we&#8217;ve just covered. At the end of our section on functional programming, we have the following example:</p>\\n<p><!--more--></p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\naddTo = function(a, log){\\n  return function(b){\\n    if(log){\\n      log(a, b);\\n    }\\n    return a+b;\\n  }\\n}\\n\\nvar addToTen = addTo(10, function(x, y){ console.debug(x, y); });\\naddToTen(5) == 15; // Logs: 10, 5\\n</pre>\\n<p><small>Note: the console object is part of the <a href=\\\"http://getfirebug.com/console.html\\\">console API</a> which is part of <a href=\\\"https://addons.mozilla.org/en-US/firefox/addon/1843\\\">Firebug</a> and an increasing number of browser debugging tools.</small></p>\\n<p>Those coming from a less dynamic language can have a hard time following the series of events that result in that log statement being printed out. The order in which function objects are created or executed is determined by how they&#8217;re defined and used, and often out of order in terms of line numbers. The origins of each of the used variables can likewise be hard to trace.</p>\\n<p>We might not even realize that our brain is trained to think in a certain manner. After two years of experience in a Java shop, when I looked at my code, I was subconsciously figuring out how my code all worked together. Pause for a second, open up some source code in a language you&#8217;re familiar with, and consider how much you subconsciously parse simply by looking at the code. Unless you&#8217;re coming from a language where the code you write reads from top-to-bottom with no other code executing in between, you should realize that your mind is jumping in and out of functions, in between classes and files.</p>\\n<p>One of the most important things to understand with JavaScript is that the functions we create are all totally dynamic and all of them exist as real objects. Unlike languages that use a <a href=\\\"http://en.wikipedia.org/wiki/Compiler\\\">compiler</a> to turn functions and classes into a set of static routines, function objects do not exist until the JavaScript parser has reached that line in the file. This is contradictory to both compiled languages (e.g. Java) where functions act as either class or instance methods and are referenced with static locations, or languages where functions are ever-present (e.g. PHP) and you can call them even before the runtime parser has reached their definition (JavaScript itself is one of these languages if you give your function a name).</p>\\n<p>Notice that when I talked about functions in JavaScript above, &#8220;functions&#8221; were called &#8220;function objects&#8221;. That they are objects is a key idea of JavaScript and functional languages in general. By functions becoming objects, instead of some functionality hidden behind a compiler and a variable name, they become a &#8220;<a href=\\\"http://en.wikipedia.org/wiki/First-class_function\\\">first-class</a>&#8221; citizen of the language.</p>\\n<p>As a way of distancing these old ways of thinking even further, let&#8217;s start calling these function objects &#8220;subroutine objects&#8221;. When the browser (or any other JavaScript runtime) encounters one of these definitions, it says &#8220;I am not supposed to run this right now, I&#8217;ll have to save this code in memory somewhere, so that it can be deferred until it&#8217;s needed&#8221;. When this happens, the way I think of it is that the runtime deletes all of the code within the function, creates an object, assigns the removed code to this object, and sticks this new object where the code used to be.</p>\\n<p>Being taken out of the main routine makes it a subroutine, and the way that this subroutine is stored in memory is through an object that holds not only that code, but some other goodies as well which we&#8217;ll cover in detail by the end of this post.</p>\\n<p>Take a look at this next code block. The way that the entire function is blocked off is an important thing to remember. Blocked out code is completely removed from the main routine and replaced with a subroutine object:</p>\\n<div class=\\\"wp_syntax\\\">\\n<div class=\\\"code\\\"><img src='https://wp.sitepen.com/wp-content/uploads/2009/02/top.png' alt='top.png' /></div>\\n</div>\\n<p>In the last SitePen training course, while explaining the way that the various components in this example all ended up working together, there was still some confusion about exactly what these subroutine objects contained. I told you that the subroutine object held onto the code that it removed, and there&#8217;s a way in JavaScript to examine it: the <code>toString</code> method. As we look at how this code example works, we&#8217;ll be able to use the <code>toString</code> method at each step.</p>\\n<p>In order to show the series of events, the various components are numbered in the order that they&#8217;re used (in grey) or defined (in blue):</p>\\n<div class=\\\"wp_syntax\\\">\\n<div class=\\\"code\\\"><img src='https://wp.sitepen.com/wp-content/uploads/2008/12/numbered.png' alt='Numbered Code Example' /></div>\\n</div>\\n<p>Code in <b>Item 1</b> is removed from the main routine and stored in a subroutine object that is assigned to the global <code>addTo</code> variable. None of the code in <b>Item 1</b> is altered in any way when this subroutine object is created. Remembering that we&#8217;re thinking of these pieces as objects that are encapsulated subroutines, this means we can view exactly what code is encapsulated in <b>Item 1</b> by using the <code>toString</code> method.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nconsole.debug(addTo.toString());\\n</pre>\\n<p>gives us the string:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nfunction (a, log) {\\n return function(b){\\n    if(log){\\n      log(a, b);\\n    }\\n    return a + b;\\n  }\\n}\\n</pre>\\n<p>We can see the definition for <b>Item 4</b> within this subroutine object. But that&#8217;s all it is, a definition. And until <b>Item 1</b> is executed, <b>Item 4</b> will remain a definition.</p>\\n<p>The code following the creation of the <code>addTo</code> subroutine object will execute the <code>addTo</code> subroutine. But before the code in the subroutine object gets executed, any expressions in the passed arguments must be resolved. In the second argument, we see <b>Item 2</b>&#8216;s subroutine object being created. Once this subroutine object is created, it&#8217;s passed as part of the execution of the <code>addTo</code> subroutine. If we add a <code>toString</code> to the top line of the <code>addTo</code> function, we can see that the subroutine is an object, that its contents haven&#8217;t been executed yet, and what code it contains:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nconsole.debug(log.toString());\\n</pre>\\n<p>gives us the string:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nfunction (x, y) { console.log(x, y); }\\n</pre>\\n<p>Each time the <b>Item 1</b> subroutine is called, it gets a new set of local variables, what we call a new execution scope. This means that the values <code>a</code> and <code>log</code> that are passed to it are local to the code within the subroutine. These variables won&#8217;t leak out into the rest of the program.</p>\\n<p>Now that the subroutine in <b>Item 1</b> is being executed, it&#8217;s part of the main program routine. This means that any function definitions it encounters will once again be removed from the routine and stored in subroutine objects. As the code in <b>Item 1</b> executes, this new subroutine object is created (<b>Item 4</b>) and returned. As mentioned earlier, each time a subroutine object&#8217;s code is executed, it gets a new execution scope. This means that each time you call the subroutine in <b>Item 1</b> it removes the code at <b>Item 4</b> and assigns it to a totally new subroutine object.</p>\\n<p>By assigning the returned subroutine object to the local variable <code>addToTen</code>, we can use the <code>toString</code> method once again to see what code it contains. As this subroutine object is being returned from a function call, seeing what code it contains is particularly illuminating.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nconsole.debug(addToTen.toString());\\n</pre>\\n<p>gives us the string:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nfunction (b) {\\n if (log) {\\n  log(a, b);\\n }\\n return a + b;\\n}\\n</pre>\\n<p>This string resembles the exact code contained within <b>Item 4</b>, removed perfectly! But do you notice anything odd about the code that this subroutine contains? It has references to local variables that aren&#8217;t passed to the function: <code>log</code> and <code>a</code> (you can see that <code>b</code> will be passed as an argument to the code in the subroutine).</p>\\n<p>Where do these come from? It was mentioned earlier that these subroutine objects hold more than just code. Subroutine objects in JavaScript are objects referred to in computer science as <a href=\\\"http://en.wikipedia.org/wiki/Closure_(computer_science)\\\">closures</a>. A closure is basically a fancy way of saying that a function remembers what variables were around it when it was declared. The other subroutine objects that we&#8217;ve worked with so far haven&#8217;t had to remember variables, because all of the variables they reference exist within the function as local variables.</p>\\n<p>The way that these variables are remembered is completely invisible to us, there is no <code>toString</code> equivalent. Each individual variable isn&#8217;t encapsulated by the subroutine object, the scope that the subroutine object was created in is. What this means is that when the subroutine code is finally executed, it first looks at its own inner scope to resolve variables, and if a variable is not found there, it looks in its containing scope (held on to by the subroutine object). This can confuse some programmers who think that each variable is encapsulated individually.</p>\\n<p>One of the ways our brain can trick us here is to think that when JavaScript removes the code and replaces it with a subroutine object, it replaces all of the variables with their current values. Instead, the removed code is not altered in any way.</p>\\n<p>Finally, the function call we make in <b>Item 5</b> runs the code in <b>Item 4</b>, which is holding on to the encapsulated scope (created when <b>Item 1</b> was executed) containing <code>a</code> and <code>log</code> (which we passed as part of the call in <b>Item 3</b>)</p>\\n<p>The only thing we pass to <code>addToTen</code> is the number <code>5</code>, which will be accepted as the local variable <code>b</code> in the subroutine code. During the call, the code contained in the <code>log</code> subroutine object is executed, <code>a</code> and <code>b</code> are added together and returned.</p>\\n<h2>Why It Matters</h2>\\n<p>A student said it best when he said that being able to do this sort of programming is like &#8220;writing a function template&#8221;. The power in this example is that we&#8217;re able to create a function, we&#8217;re able to define a template (<b>Item 4</b>), and we&#8217;re able to define the variables by leaving them out of our template, but defining them in the execution scope the subroutine object gets created in.</p>\\n<p>By doing this, JavaScript &#8220;fills in the blanks&#8221;, effectively giving us the variables <code>a</code> and <code>log</code> for use in our template in <code>Item 4</code>. We can execute the <code>addTo</code> subroutine as many times as we want, each time getting a new subroutine object that behaves the same way, but with variability.</p>\\n<h2>Moving Forward</h2>\\n<p>We cover this material as part of our <a href=\\\"https://www.sitepen.com/\\\">training</a> so that when we start to get involved with the Dojo APIs, the students are comfortable and familiar with the power and flexibility of a system that uses callbacks (what we call a subroutine object that is executed by another function).</p>\\n<p>Many of our API calls, from <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/dojo.xhrGet\\\">dojo.xhrGet</a>, to <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/dojo.forEach\\\">functional array iteration</a>, to the <a href=\\\"http://docs.dojocampus.org/dojo/data\\\">Dojo Data</a> API&#8217;s fetch method, accept these subroutine objects and will execute them when an Ajax call returns, for each item in an array, or when some data is loaded.</p>\\n<p>Knowing that the language works this way also helps prevent bugs as students are getting familiar with developing in JavaScript. If you haven&#8217;t been taught what these subroutine objects are, and how they end up being able to &#8220;see&#8221; the execution scope they were created in, you can easily end up writing code that will cause headaches later. Being aware of how JavaScript manages functions isn&#8217;t just theoretical, it allows you to create more powerful code, and avoid writing code with harmful side-effects.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Performing frequent training courses has given SitePen a chance to learn new ways to improve our training approach. Some concepts in JavaScript can be trickier than others and as we interact with the classes, we&#8217;re able to develop fun explanations for these tricky concepts. I&#8217;d like to share one of the explanations I developed at [&hellip;]</p>\\n\",\"protected\":false},\"author\":22,\"featured_media\":17623,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,3,60],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Forget Everything You Know About Functions: JavaScript Subroutines | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Forget Everything You Know About Functions: JavaScript Subroutines | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Performing frequent training courses has given SitePen a chance to learn new ways to improve our training approach. Some concepts in JavaScript can be trickier than others and as we interact with the classes, we&#8217;re able to develop fun explanations for these tricky concepts. I&#8217;d like to share one of the explanations I developed at [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2009-02-11T07:10:10+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/\\\",\\\"name\\\":\\\"Forget Everything You Know About Functions: JavaScript Subroutines | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/#primaryimage\\\"},\\\"datePublished\\\":\\\"2009-02-11T07:10:10+00:00\\\",\\\"dateModified\\\":\\\"2009-02-11T07:10:10+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/5faa55fe74a96ec3ce93ae43191b4efa\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/forget-everything-you-know-about-functions-javascript-subroutines/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/5faa55fe74a96ec3ce93ae43191b4efa\\\",\\\"name\\\":\\\"Neil Roberts\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Neil Roberts\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/590\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/22\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=590\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/590/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17623\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=590\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=590\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=590\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=590\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":22,\"name\":\"Neil Roberts\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/nroberts/\",\"slug\":\"nroberts\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Neil Roberts, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Neil Roberts, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/nroberts/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nroberts/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/nroberts/\\\",\\\"name\\\":\\\"Neil Roberts, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/5faa55fe74a96ec3ce93ae43191b4efa\\\",\\\"name\\\":\\\"Neil Roberts\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Neil Roberts\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nroberts/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/22\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:39:32 GMT"],["expires","Mon, 31 Aug 2020 15:39:32 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}