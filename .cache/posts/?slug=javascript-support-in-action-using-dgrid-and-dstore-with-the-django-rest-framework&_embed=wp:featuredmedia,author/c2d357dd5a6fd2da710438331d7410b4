{"value":{"body":"[{\"id\":10908,\"date\":\"2015-07-07T08:23:09\",\"date_gmt\":\"2015-07-07T15:23:09\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=10908\"},\"modified\":\"2015-07-07T08:23:09\",\"modified_gmt\":\"2015-07-07T15:23:09\",\"slug\":\"javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/\",\"title\":{\"rendered\":\"JavaScript Support in action: Using dgrid and dstore with the Django REST Framework\"},\"content\":{\"rendered\":\"<p>Throughout the course of June, the <a href=\\\"http://stackoverflow.com/questions/tagged/dgrid\\\">dgrid StackOverflow tag</a> saw a series of questions regarding usage of dgrid and dstore with the Django REST Framework.  Based on the flurry of closely-related questions that popped up, I became quite curious as to the actual level of difficulty involved with this integration.</p>\\n<p>Over the holiday weekend here in the US, I decided to let that curiosity get the better of me.  In this blog post, I share the results of that endeavor, stepping through the process of customizing a simple <a href=\\\"http://www.django-rest-framework.org/\\\">Django Rest Framework</a> project to communicate with <a href=\\\"http://dgrid.io/\\\">dgrid</a> using <a href=\\\"https://github.com/SitePen/dstore/blob/v1.1.0/docs/Stores.md#rest\\\">dstore&#8217;s Rest store</a>.</p>\\n<p><!--more--></p>\\n<h2>Before we Begin</h2>\\n<p>If you&#8217;d like to follow along with the steps in this post, you&#8217;re going to need Python, Django, and the Django REST Framework.  On OS X and Linux, this can be accomplished by installing <code>pip</code>, then using it to install <code>django</code> and <code>djangorestframework</code>.  e.g.:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\nsudo easy_install pip\\nsudo pip install django\\nsudo pip install djangorestframework\\n</pre>\\n<p>(Some Linux distributions may also provide packages for <code>pip</code> and <code>django</code>.)</p>\\n<h2>Getting Started</h2>\\n<p>We will start with <a href=\\\"https://wp.sitepen.com/wp-content/uploads/2015/07/dgrid-dstore-drf.zip\\\">a zip archive</a> containing a very simple <code>dgrid</code> project, with an <code>example</code> application which defines a Person model and comes complete with initial data.</p>\\n<p>The zip includes the following notable files:</p>\\n<ul>\\n<li><code>dgrid/</code> &#8211; Contains project files</li>\\n<ul>\\n<li><code>settings.py</code> &#8211; Settings for this Django project, initially modified to add <code>'rest_framework'</code> and <code>'example'</code> to <code>INSTALLED_APPS</code></li>\\n<li><code>urls.py</code> &#8211; Sets up routes for the project; uses the Django REST Framework&#8217;s <code>DefaultRouter</code> to register the <code>/people/</code> route</li>\\n</ul>\\n<li><code>example/</code> &#8211; Contains the <code>example</code> application&#8217;s files</li>\\n<ul>\\n<li><code>fixtures/initial_data.json</code> &#8211; Initial data for populating the <code>Person</code> table</li>\\n<li><code>models.py</code> &#8211; Defines the <code>Person</code> model</li>\\n<li><code>serializers.py</code> &#8211; Defines a Serializer for the <code>Person</code> model, to allow CRUD operations</li>\\n<li><code>views.py</code> &#8211; Defines a ViewSet for the <code>Person</code> model, allowing full read/write access for this example</li>\\n<li><code>static/</code> &#8211; Contains HTML, CSS, and JS for displaying data from the <code>/people/</code> endpoint in dgrid instances\\n<ul>\\n<li><code>dojoConfig.js</code> &#8211; Common <code>dojoConfig</code> to load dgrid, dstore, etc. from MaxCDN (c/o <a href=\\\"http://rawgit.com/\\\">RawGit</a>)</li>\\n<li><code>createGrid.js</code> &#8211; Common code to create a <code>dstore/Rest</code> store and a grid, based on a specified dgrid constructor</li>\\n<li><code>index.html</code> and <code>pagination.html</code> &#8211; Pages which display items from the store using <code>OnDemandGrid</code> and <code>Pagination</code>, respectively</li>\\n</ul>\\n</ul>\\n</ul>\\n<p>Extract the zip into a directory of your choosing, then open a terminal in that directory and run <code>./manage.py syncdb</code> to initialize tables and pre-populate the Person table with data.  (If it prompts you to create a superuser, you can skip that step &#8211; we don&#8217;t need it for this example.)</p>\\n<p>Next, to make sure the example model and viewset is working, run <code>./manage.py runserver</code> and navigate a browser to <code>http://localhost:8000/people/</code>.  It may take a moment, but you should see a page listing all of the entries in the database table.</p>\\n<p>You can also view the two dgrid pages mentioned above by browsing to <code>http://localhost:8000/static/index.html</code> and <code>http://localhost:8000/static/pagination.html</code>.</p>\\n<p>Now it&#8217;s time for some good news and some bad news.</p>\\n<p>The good news is, we can already see data rendered in those grids! Great!</p>\\n<p>The bad news is, the data isn&#8217;t really being requested correctly. Take a closer look and you may notice a few things:</p>\\n<ul>\\n<li>Clicking the headers to sort has no effect</li>\\n<li>If you examine the Pagination example, you&#8217;ll notice it says &#8220;0 &#8211; 0 of 0 results&#8221;</li>\\n<li>If you look in the Network tab of your browser&#8217;s developer tools, every response from <code>/people/</code> includes <em>all</em> of the entries</li>\\n</ul>\\n<p>What&#8217;s going on here?  Well, we haven&#8217;t fully made ends meet yet.  The Django REST Framework has certain default behaviors, and includes some useful features that aren&#8217;t enabled by default.  Meanwhile, <code>dstore/Rest</code> (or more precisely, <code>dstore/Request</code>, from which it inherits) has certain expectations of how it should interact with the service and how the service should respond.</p>\\n<p>Let&#8217;s take a look at each side of this puzzle.</p>\\n<h2>Customizing the Django REST Framework</h2>\\n<p>Based on the above observations, we know we need to address a couple of issues with the service &mdash; namely, the ability to request ranges of data (rather than receiving the full set), and the ability to sort the data.</p>\\n<h3>Pagination</h3>\\n<p>The Django REST Framework documentation has a <a href=\\\"http://www.django-rest-framework.org/api-guide/pagination/\\\">full page detailing the various pagination styles it supports</a>. It also includes information and examples on creating customized pagination classes.</p>\\n<p>The decision of which pagination class to use is ultimately dependent on what fits the needs of <code>dstore/Rest</code>.  Specifically, it needs to be able to indicate a start and count, and expects the response to indicate the total number of items either via the <code>Content-Range</code> header, or via the <code>total</code> property if the response is an object.  When the response is an object, it also expects the actual results to be present under the <code>items</code> property.</p>\\n<p>Looking at the Django REST Framework documentation, the <a href=\\\"http://www.django-rest-framework.org/api-guide/pagination/#limitoffsetpagination\\\"><code>LimitOffsetPagination</code></a> class seems to fit the criteria of passing a start and count (or, in its terms, offset and limit).  However, in looking at the example, it&#8217;s clear that it reports the total via a <code>count</code> property, and the items via a <code>results</code> property.</p>\\n<p>So close, and yet so far away. That&#8217;s okay, though &mdash; we just need to extend the class that <em>almost</em> meets our needs, and nudge it the rest of the way there.</p>\\n<p>The framework&#8217;s documentation on <a href=\\\"http://www.django-rest-framework.org/api-guide/pagination/#custom-pagination-styles\\\">custom pagination styles</a> provides a helpful example, but the example extends <code>PageNumberPagination</code>, not <code>LimitOffsetPagination</code>. However, by looking at that example and <a href=\\\"https://github.com/tomchristie/django-rest-framework/blob/3.1.3/rest_framework/pagination.py#L401-L407\\\">the source code of <code>LimitOffsetPagination</code></a>, we can figure out what we need pretty quickly.</p>\\n<p>Let&#8217;s add our own custom pagination class to <code>example/pagination.py</code>:</p>\\n<pre class=\\\"brush: python; title: ; notranslate\\\" title=\\\"\\\">\\nfrom rest_framework.compat import OrderedDict\\nfrom rest_framework.pagination import LimitOffsetPagination\\nfrom rest_framework.response import Response\\n\\nclass DstorePagination(LimitOffsetPagination):\\n    def get_paginated_response(self, data):\\n        return Response(OrderedDict([\\n            ('total', self.count),\\n            ('next', self.get_next_link()),\\n            ('previous', self.get_previous_link()),\\n            ('items', data)\\n        ]))\\n</pre>\\n<p>If you think this looks a whole lot like <code>LimitOffsetPagination</code>&#8216;s <code>get_paginated_response</code> function, you&#8217;re not far off the mark &mdash; the only difference is we&#8217;ve replaced <code>count</code> with <code>total</code> and <code>results</code> with <code>items</code>.</p>\\n<p>Now we just need to tell the framework to use our custom pagination class.  As indicated in the documentation, this can be accomplished centrally by specifying <code>DEFAULT_PAGINATION_CLASS</code> in our application&#8217;s settings.  We simply add the following at the end of <code>dgrid/settings.py</code>:</p>\\n<pre class=\\\"brush: python; title: ; notranslate\\\" title=\\\"\\\">\\nREST_FRAMEWORK = {\\n    'DEFAULT_PAGINATION_CLASS': 'example.pagination.DstorePagination',\\n    'PAGE_SIZE': 25\\n}\\n</pre>\\n<p>(This also adds <code>PAGE_SIZE</code> so that if an unranged query is performed, it won&#8217;t bother consuming resources and bandwidth returning the full set.)</p>\\n<h3>Ordering (Sorting)</h3>\\n<p>While we&#8217;re editing <code>dgrid/settings.py</code>, let&#8217;s also tackle the issue of sorting. The Django REST Framework documentation&#8217;s page on Filtering mentions an <a href=\\\"http://www.django-rest-framework.org/api-guide/filtering/#orderingfilter\\\"><code>OrderingFilter</code></a>, which seems like exactly what we need, so let&#8217;s add that to <code>DEFAULT_FILTER_BACKENDS</code> as <a href=\\\"http://www.django-rest-framework.org/api-guide/filtering/#setting-filter-backends\\\">indicated in the documentation</a>.</p>\\n<p>At this point the <code>REST_FRAMEWORK</code> dictionary should look like this:</p>\\n<pre class=\\\"brush: python; title: ; notranslate\\\" title=\\\"\\\">\\nREST_FRAMEWORK = {\\n    'DEFAULT_PAGINATION_CLASS': 'example.pagination.DstorePagination',\\n    'DEFAULT_FILTER_BACKENDS': (\\n        'rest_framework.filters.OrderingFilter',\\n    ),\\n    'PAGE_SIZE': 25\\n}\\n</pre>\\n<h3>Are we There Yet?</h3>\\n<p>At this point if you restart your server and browse again to <code>pagination.html</code>, you should notice some improvements.  The footer now reports the proper number of items.  The response also no longer includes all of the results. However, it still includes 25 when we&#8217;re asking for 10, and sort still isn&#8217;t working.</p>\\n<p>That&#8217;s okay for now, because we&#8217;ve still yet to configure the <code>dstore/Rest</code> store. It&#8217;s time to hop over to the client side.</p>\\n<h2>Customizing the dstore/Rest store</h2>\\n<p>As with the server-side, we&#8217;ve got two areas to resolve: pagination and sorting. Fortunately, <code>dstore/Request</code> (which <code>dstore/Rest</code> inherits all of its querying logic from) provides <a href=\\\"https://github.com/SitePen/dstore/blob/v1.1.0/docs/Stores.md#request\\\">useful options</a> that will allow us to send the parameters that the service needs.</p>\\n<h3>Pagination</h3>\\n<p>By default, <code>dstore/Request</code> expresses its ranged queries via a <code>limit(count,start)</code> syntax.  (You may have already noticed this while looking at network requests earlier.)  However, as seen in the documentation linked above, we can set <code>rangeStartParam</code> and <code>rangeCountParam</code> to override this.</p>\\n<p>Looking again at the Django REST Framework&#8217;s <a href=\\\"http://www.django-rest-framework.org/api-guide/pagination/#limitoffsetpagination\\\"><code>LimitOffsetPagination</code> documentation</a>, it expects <code>offset</code> and <code>limit</code> query parameters by default, so let&#8217;s set the store&#8217;s options accordingly.</p>\\n<p>Open <code>example/static/createGrid.js</code> and add the following properties to the object passed to the store&#8217;s constructor (around line 10):</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nrangeStartParam: 'offset',\\nrangeCountParam: 'limit'\\n</pre>\\n<h3>Sorting</h3>\\n<p>You may have already noticed <code>sortParam</code> in the <a href=\\\"https://github.com/SitePen/dstore/blob/v1.1.0/docs/Stores.md#request\\\"><code>dstore/Request</code></a> documentation as well.  This defaults to <code>sort(+field)</code> syntax, but when a value is specified, it will behave as a typical key/value pair.</p>\\n<p>Thinking back to the Django REST Framework&#8217;s <a href=\\\"http://www.django-rest-framework.org/api-guide/filtering/#orderingfilter\\\"><code>OrderingFilter</code> documentation</a>, it expects an <code>ordering</code> query parameter by default, so let&#8217;s add that to the store&#8217;s constructor arguments as well.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nsortParam: 'ordering'\\n</pre>\\n<p>However, there&#8217;s still a small issue &mdash; looking at the Django REST Framework examples, the sort field includes a <code>-</code> prefix to indicate descending sort, but does not include a prefix to indicate ascending sort.  <code>dstore/Request</code>, on the other hand, defaults to specifying <code>+</code> or <code>-</code>.  Fortunately, these are also overridable via <code>ascendingPrefix</code> and <code>descendingPrefix</code> properties, so all we need to do is set <code>ascendingPrefix</code> to an empty string:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nascendingPrefix: ''\\n</pre>\\n<h3>Last but not Least</h3>\\n<p>There&#8217;s one more very important thing we need to configure for this store.  When you first looked at the results in the service response, you may have noticed that it provides a unique ID via the <code>pk</code> field.  dstore stores expect unique IDs to reside in an <code>id</code> field by default, so we need to set <code>idProperty</code> to tell it otherwise.</p>\\n<p>With all this said and done, our store instantiation should now look like this:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nvar store = new TrackableRest({\\n    target: '/people/',\\n    idProperty: 'pk',\\n    rangeStartParam: 'offset',\\n    rangeCountParam: 'limit',\\n    sortParam: 'ordering',\\n    ascendingPrefix: ''\\n});\\n</pre>\\n<h2>Going for a Test Drive</h2>\\n<p>Now if you refresh <code>index.html</code> or <code>pagination.html</code> (you don&#8217;t need to restart the server since we only changed static assets since the last restart), scrolling/paging and sorting should function as expected!</p>\\n<p>Additionally, the grids in the example pages are set up with the <code>dgrid/Editor</code> mixin, configured so you can double-click any cell, edit the value, press Enter, and the new value will be sent to the server via a PUT request.  This all Just Works by virtue of <code>dstore/Rest</code>&#8216;s <code>put</code> implementation, which already operates the way the Django REST Framework expects.</p>\\n<h2>In Conclusion</h2>\\n<p>Let&#8217;s reflect back on what it took to get this working:</p>\\n<ul>\\n<li>Thoroughly browsing the documentation for both the server-side framework and the client-side store, to see what each side needs and where we could meet in the middle</li>\\n<li>Piecing together some settings on both sides based on documentation and examples</li>\\n<li>Getting our hands a bit dirty to create a custom pagination class</li>\\n</ul>\\n<p>All in all, this may have been a bit challenging, but the takeaway is that it was surely not an insurmountable task.  Coming into this with no knowledge of Django or the Django REST Framework whatsoever (and very little practical Python experience), it took me roughly a day&#8217;s worth of work &#8211; 50% to get things to work, and the other 50% to reduce it down to the minimal example presented in this tutorial.</p>\\n<p>I&#8217;d wager there&#8217;s one more important takeaway from this &mdash; if you or your team is facing a tough JavaScript integration challenge, and the solution seems elusive even with help from the community, you don&#8217;t need to fight that battle alone.  <a href=\\\"https://www.sitepen.com/contact/\\\">Drop us a line</a> and let us provide a few hours of <a href=\\\"https://www.sitepen.com/services/\\\">insight and support</a> to prevent weeks of frustration and project delays.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Throughout the course of June, the dgrid StackOverflow tag saw a series of questions regarding usage of dgrid and dstore with the Django REST Framework. Based on the flurry of closely-related questions that popped up, I became quite curious as to the actual level of difficulty involved with this integration. Over the holiday weekend here [&hellip;]</p>\\n\",\"protected\":false},\"author\":40,\"featured_media\":22075,\"comment_status\":\"open\",\"ping_status\":\"open\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[350,396,2,356,58],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>JavaScript Support in action: Using dgrid and dstore with the Django REST Framework | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"JavaScript Support in action: Using dgrid and dstore with the Django REST Framework | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Throughout the course of June, the dgrid StackOverflow tag saw a series of questions regarding usage of dgrid and dstore with the Django REST Framework. Based on the flurry of closely-related questions that popped up, I became quite curious as to the actual level of difficulty involved with this integration. Over the holiday weekend here [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-07-07T15:23:09+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/\\\",\\\"name\\\":\\\"JavaScript Support in action: Using dgrid and dstore with the Django REST Framework | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-07-07T15:23:09+00:00\\\",\\\"dateModified\\\":\\\"2015-07-07T15:23:09+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/57f7543ce2a7621dd81c29a55b4d513a\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/javascript-support-in-action-using-dgrid-and-dstore-with-the-django-rest-framework/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/57f7543ce2a7621dd81c29a55b4d513a\\\",\\\"name\\\":\\\"Ken Franqueiro\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/94814bc62045f3bc7759c7ac261145f1?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Ken Franqueiro\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10908\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/40\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=10908\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10908/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=10908\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=10908\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=10908\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":40,\"name\":\"Ken Franqueiro\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kfranqueiro/\",\"slug\":\"kfranqueiro\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/94814bc62045f3bc7759c7ac261145f1?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/94814bc62045f3bc7759c7ac261145f1?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/94814bc62045f3bc7759c7ac261145f1?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Ken Franqueiro, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Ken Franqueiro, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kfranqueiro/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/94814bc62045f3bc7759c7ac261145f1?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kfranqueiro/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kfranqueiro/\\\",\\\"name\\\":\\\"Ken Franqueiro, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/57f7543ce2a7621dd81c29a55b4d513a\\\",\\\"name\\\":\\\"Ken Franqueiro\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/94814bc62045f3bc7759c7ac261145f1?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Ken Franqueiro\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kfranqueiro/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/40\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a7753080c62ce3f-LHR"],["cf-request-id","037e7239050000ce3fb1956200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:25:17 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=dfd3e0be30d9e48b697863c41b8e2ebee1592843116; expires=Wed, 22-Jul-20 16:25:16 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}