{"value":{"body":"[{\"id\":612,\"date\":\"2009-03-06T01:01:01\",\"date_gmt\":\"2009-03-06T08:01:01\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2009/03/06/security-in-persevere/\"},\"modified\":\"2009-03-06T01:01:01\",\"modified_gmt\":\"2009-03-06T08:01:01\",\"slug\":\"security-in-persevere\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/security-in-persevere/\",\"title\":{\"rendered\":\"Security in Persevere\"},\"content\":{\"rendered\":\"<p><a href=\\\"http://www.persvr.org/\\\">Persevere</a>&#8216;s <a href=\\\"http://docs.persvr.org/documentation/security\\\">security</a> system provides a powerful infrastructure for controlling access to a system by combining the best aspects of <a href=\\\"http://en.wikipedia.org/wiki/Capability-based_security\\\">capability-based security</a> with <a href=\\\"http://en.wikipedia.org/wiki/Role-based_access_control\\\">role-based security</a>. Persevere has a full user management system and granular per-object access control with inheritance. This system is designed such that it is very easy to use the default Persevere security to handle your access or integrate with an existing authentication system.  Any part of the security system can be redefined and customized. Persevere can also be started without enabling security to make it easier to start development.</p>\\n<p><!--more--></p>\\n<h2>Creating Users in Persevere</h2>\\n<p>Out of the box, Persevere&#8217;s security system is disabled and there are restrictions on accessing and modifying data in Persevere. Enabling security is simply done by creating a new user. The first user will be given the super-user role in Persevere, with full access to the system. You can create a new user from the database explorer (<a href=\\\"http://localhost:8080/explorer.html\\\">explorer.html</a> in your local install) by clicking on the &#8220;Sign In&#8221; button and then &#8220;Register&#8221; (you can alternately create a new user by selecting &#8220;User&#8221; from the class/table list and clicking &#8220;Create New User&#8221;). This first user will be the super-user. You can continue to add more users, and by default subsequent users will have a read-only view of the system unless they are granted further permission. New users can also be created programmatically using the <code>createUser</code> method on the User class. This is the default user management system for Persevere. Later, we will discuss customized integration with existing user management systems.</p>\\n<h3>Authenticating Users</h3>\\n<p>User authentication can be done through an RPC call to the User class&#8217;s <code>authenticate</code> method. A successful login through this method will create a cookie-based authentication. For example:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\nPOST /Class/User\\n\\n{\\n   &quot;method&quot;:&quot;authentication&quot;,\\n   &quot;params: [&quot;username&quot;, &quot;password&quot;],\\n   &quot;id&quot;:&quot;call1&quot;\\n}\\n</pre>\\n<p>Alternately, you can authenticate users using standard <a href=\\\"http://www.ietf.org/rfc/rfc2617.txt\\\">HTTP Basic Authentication (RFC 2617)</a>. This is done by including an <code>Authorization</code> header with the username and password with base64 encoding. This authentication technique does not create a cookie and the <code>Authorization</code> header must be sent with each request (that needs authorization). For example:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\nAuthorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\\n</pre>\\n<h2>Grant Access with a Capability</h2>\\n<p>Persevere&#8217;s default mechanism for controlling access to objects is through Capability (capitalized because it is a class in Persevere) objects. A Capability object defines a set of members that are authorized through the Capability and it defines a set of resources that are authorized at different access levels. A Capability fulfills the role of a group (containing a set of users or other Capability/groups) and an ACL (defining access levels for resources). The easiest way to create a new Capability is from the database explorer by clicking on &#8220;Grant Access&#8221;. The explorer will prompt you for who you want to grant access to and what level of access to grant to the selected resource in the grid (if nothing is selected in the grid, then the table is the target resource). This action will create a new Capability with one member (the indicated user) and one authorized resource (with the indicated access level). This Capability may look like:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n{\\n   &quot;members&quot;:[{&quot;$ref&quot;:&quot;/User/2&quot;}],\\n   &quot;full&quot;:[{&quot;$ref&quot;:&quot;/SomeClass/4&quot;}]\\n}\\n</pre>\\n<p>We could modify this Capability to include additional users and grant read-only access to all the objects in the <code>OtherClass</code> table:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n{\\n   &quot;members&quot;: [{&quot;$ref&quot;: &quot;/User/2&quot;}, {&quot;$ref&quot;: &quot;/User/3&quot;}],\\n   &quot;full&quot;: [{&quot;$ref&quot;: &quot;/SomeClass/4&quot;}],\\n   &quot;read&quot;: [{&quot;$ref&quot;: &quot;/OtherClass/&quot;}]\\n}\\n</pre>\\n<p>Unauthorized users are represented by <code>null</code>, so if we wanted to allow unauthenticated users (the public) access through this Capability, we could do so by adding <code>null</code> to the <code>members</code> array. A list of all the access levels are available in the <a href=\\\"http://docs.persvr.org/documentation/security\\\">security documentation</a>.</p>\\n<p>Persevere uses inheritance to determine access levels for objects. When a user attempts to access an class instance, Persevere will first check to see if there is a Capability defined for that object. If it is not, it will look to see if there is a Capability defined for the table, next it will look for the class definition object, and finally it will look at the class definition for Class (the object /Class/Class, which can be used to define the default access level of the whole system). When the first resource in the inheritance chain that has a Capability defined is found, the corresponding Capability will be used to determine the access level.</p>\\n<p>When the first user is added to Persevere, Persevere will create two default Capability objects. One Capability will be defined for the newly created user to have full access for to the entire system (full access to <code>/Class/Class</code>), and another Capability will be defined to give the public <code>execute</code> access to the system (they can read and execute publicly accessible methods).<br />\\n<img src='https://wp.sitepen.com/wp-content/uploads/2009/02/perseveresecurity.png' alt='perseveresecurity.png' /></p>\\n<h3>The Sandbox Model</h3>\\n<p>Persevere provides security at a well-defined layer to differentiate between privileged and unprivileged operations. All requests from a remote client (HTTP requests) are checked against the access control system. This means all queries, RPCs and object modification requests are subject to access limitations. The primary access levels (from lowest to highest and a higher permission has all the access of the lower level):</p>\\n<ul>\\n<li>read &#8211; permission to make queries and request data (GET requests)</li>\\n<li>execute &#8211; permission to execute methods (via JSON-RPC)</li>\\n<li>append &#8211; permission to create new objects (POST requests)</li>\\n<li>write &#8211; permission to modify data (PUT requests)</li>\\n<li>full &#8211; permission to delete objects (DELETE requests)</li>\\n</ul>\\n<p>JavaScript code on the server runs in privileged mode, that is, it can modify data regardless of what user is logged in. Once a RPC is executed, the method can make it&#8217;s own decisions about how and what modifications to make. Server side code can use the <code>getAccessLevel</code> and <code>hasAccessLevel</code> functions to query for the access levels of the current user. For example, one could write a method for a BlogPost class that will add a comment to a blog if the user has read permission to the post:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n&quot;schema&quot;:{\\n   &quot;prototype&quot;:{\\n      &quot;addComment&quot;: function(comment){\\n         if(hasAccessLevel(this, &quot;read&quot;)){\\n            this.comments.push(comment);\\n         }\\n      },\\n   ...\\n</pre>\\n<p>Because JavaScript on the server runs in privileged mode, you must have full access to the system (super-user) to add methods to classes and objects through HTTP.</p>\\n<h3>Custom Authentication/Integrating with Existing Security System</h3>\\n<p>Persevere may be used in conjunction with an existing user directory system, in which case it may be desirable to define a custom authentication mechanism to integrate with the existing system. This can be done by simply defining a top-level <code>authenticate</code> function in a JavaScript library module. JavaScript modules are .js file that are placed in the WEB-INF/jslib directory in Persevere. The <code>authenticate</code> function is passed two arguments, the username and password. An example of an <code>authenticate</code> function that would interact with another system, such as a LDAP server, might look like:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nauthenticate = function(username, password){\\n   if(username == null){\\n      //a null username indicates that the user is signing out\\n      return null;\\n   }\\n   // if we defined a function that handles the credentials check:\\n   var successful = checkCredentials(username,password);\\n   if(!successful){\\n      // this is how we indicate a login failure\\n      throw new AccessError(&quot;Authentication failed&quot;);\\n   }\\n   // return a user object\\n   return username;\\n}\\n</pre>\\n<p>The authenticate function can return any object or value that we want to represent the user. The authenticate function could simply return the username as a string, it can pull a User object from Persevere&#8217;s User table, or it could return an object from a custom table.</p>\\n<h3>Custom Access Handling</h3>\\n<p>With Persevere you can also define custom access handler functions. This is done by defining a top level <code>getAccessLevel</code> function which behaves as described in the <a href=\\\"http://docs.persvr.org/documentation/server-side-js\\\">server JavaScript API documentation for Persevere</a>. If we wanted to define our access scheme such that the all the objects in the <code>MyClass</code> table are fully accessible to everyone, but the rest of the data in Persevere is only accessible to the user with the name &#8220;john&#8221;, we could define a <code>getAccessLevel</code> function:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ngetAccessLevel = function(resource){\\n   if(resource instanceof MyClass){\\n      return 6; // indicates full permission\\n   }\\n   var user = getCurrentUser();\\n   if(user &amp;&amp; user.name == 'john'){\\n      return 6; // john has full permission to everything\\n   }\\n   return 3; // everyone else has execute/read permission\\n}\\n</pre>\\n<h3>Security in Persevere</h3>\\n<p>There are other aspects of Persevere&#8217;s security system that are automatic. Persevere handles cookie-based authenticated sessions, and also provides comprehensive and robust <a href=\\\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\\\">cross-site request forgery</a> protection. With the powerful role-based capability access control system in Persevere, you can easily create secure applications without needing to create your user management and access control system, yet Persevere still provides the flexibility of customized authentication and authorization schemes.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Persevere&#8216;s security system provides a powerful infrastructure for controlling access to a system by combining the best aspects of capability-based security with role-based security. Persevere has a full user management system and granular per-object access control with inheritance. This system is designed such that it is very easy to use the default Persevere security to [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":17640,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[178],\"tags\":[175],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Security in Persevere | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/security-in-persevere/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Security in Persevere | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Persevere&#8216;s security system provides a powerful infrastructure for controlling access to a system by combining the best aspects of capability-based security with role-based security. Persevere has a full user management system and granular per-object access control with inheritance. This system is designed such that it is very easy to use the default Persevere security to [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/security-in-persevere/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2009-03-06T08:01:01+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/security-in-persevere/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/security-in-persevere/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/security-in-persevere/\\\",\\\"name\\\":\\\"Security in Persevere | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/security-in-persevere/#primaryimage\\\"},\\\"datePublished\\\":\\\"2009-03-06T08:01:01+00:00\\\",\\\"dateModified\\\":\\\"2009-03-06T08:01:01+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/security-in-persevere/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/612\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=612\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/612/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17640\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=612\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=612\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=612\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=612\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a80912d1d9b073a-LHR"],["cf-request-id","03843910300000073a7c0f7200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Tue, 23 Jun 2020 19:20:34 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d0c20355e841eead809c4dad6326e12881592940034; expires=Thu, 23-Jul-20 19:20:34 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}