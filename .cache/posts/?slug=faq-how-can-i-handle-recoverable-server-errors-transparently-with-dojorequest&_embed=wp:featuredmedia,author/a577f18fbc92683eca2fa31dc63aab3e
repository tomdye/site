{"value":{"body":"[{\"id\":8809,\"date\":\"2015-01-21T10:10:48\",\"date_gmt\":\"2015-01-21T17:10:48\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=8809\"},\"modified\":\"2015-01-21T10:10:48\",\"modified_gmt\":\"2015-01-21T17:10:48\",\"slug\":\"faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/\",\"title\":{\"rendered\":\"Dojo FAQ: How can I handle recoverable server errors transparently with dojo/request?\"},\"content\":{\"rendered\":\"<p><img loading=\\\"lazy\\\" style=\\\"margin: 20px 0 20px 20px; float: right;\\\" alt=\\\"DojoFAQ\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2013/09/DojoFAQ.png\\\" width=\\\"200\\\" height=\\\"200\\\" /></p>\\n<p>A common scenario with web applications is accessing protected resources, which require authentication with the server in order to proceed. A common flow is as follows:</p>\\n<ol>\\n<li>User opens web site</li>\\n<li>Web site presents authentication screen</li>\\n<li>User enters credentials</li>\\n<li>Web site presents protected information</li>\\n</ol>\\n<h2>Authentication workflows</h2>\\n<p>This is simple enough to begin with, but what happens when the session times out? Or perhaps the application does not require authentication initially, but once the user initiates an action to access protected resources authentication is required? A common approach is to use redirects to an authentication page:<br />\\n<!--more--></p>\\n<ol>\\n<li>User&#8217;s authentication session times out</li>\\n<li>Any action on user&#8217;s part redirects to authentication screen</li>\\n<li>After successful authentication, user is redirected to the results of the initial action</li>\\n</ol>\\n<p>This model works well enough with applications architected around the full page request-response model, but becomes less pleasant with single-page applications that provide a persistent and responsive user interface. A solution that provides a better end-user experience is to mimic the general approach above without the actual page redirects. The authentication can be performed without causing a full page reload:</p>\\n<ol>\\n<li>User&#8217;s authentication session times out (assume client-side application code has no knowledge of session status)</li>\\n<li>User initiates an action which is handled normally by the application code and makes an XHR request to the server</li>\\n<li>The server detects that the session has timed out and instead of returning the requested resource it returns a 403 (Forbidden) status code</li>\\n<li>Client-side application code has been configured to intercept all 403 responses and present an authentication dialog</li>\\n<li>User provides credentials and re-authenticates</li>\\n<li>Initial request is repeated; server returns appropriate resource; application flow continues as normal</li>\\n</ol>\\n<h2>Emulating redirects client-side</h2>\\n<p>The challenge is, how can step #4 be implemented using <a href=\\\"http://dojotoolkit.org/reference-guide/dojo/request.html\\\"><code>dojo/request</code></a>? By creating your own request provider you can set up a robust system that works across your application without having to update code in individual application components.</p>\\n<p>Let&#8217;s look at what we need to do in a little more detail. The goal is to provide an optimal end-user experience and also maintain a clean separation of concerns in the source code. The components that make up the application should not have to handle authentication. The interruption caused by the need to authenticate should happen transparently to the application. Fortunately, <code>dojo/request</code> allows us to do this. There are two main issues to address:</p>\\n<ol>\\n<li>Intercepting XHR calls to check if 403 handling needs to be performed: this can be achieved with a custom request provider\\n<ul>\\n<li>After step 2 completes, re-send the original XHR so the application flow can resume</li>\\n</ul>\\n</li>\\n<li>Creating a method and user interface to present an authentication dialog</li>\\n</ol>\\n<h2>Creating a custom request provider</h2>\\n<p>A request provider is simply a module that implements the <code>dojo/request</code> API. In this case, we want the behavior provided by <code>dojo/request/xhr</code> so we don&#8217;t need to provide a complete implementation &#8211; we can extend <code>dojo/request/xhr</code> to inherit most functionality. The extra functionality we want to provide is intercepting responses with a status code of 403.</p>\\n<p>To provide an example of the simplest request provider, here is a request provider that defers entirely to <code>dojo/request/xhr</code> and adds no custom functionality:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndefine([\\n\\t'dojo/request/xhr',\\n\\t'dojo/request/util'\\n], function (request, requestUtil) {\\n\\tfunction requestProvider(url, options) {\\n\\t\\treturn request(url, options);\\n\\t}\\n\\n\\t// Add the 'get', 'post', etc. convenience methods\\n\\trequestUtil.addCommonMethods(requestProvider);\\n\\n\\treturn requestProvider;\\n});\\n</pre>\\n<p>The module above can now be used in place of <code>dojo/request</code>. Let&#8217;s continue to customize this to add the required functionality:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndefine([\\n\\t'dojo/_base/lang',\\n\\t'dojo/request/xhr',\\n\\t'dojo/request/util',\\n\\t'dojo/Deferred'\\n], function (lang, request, requestUtil, Deferred) {\\n\\tfunction requestProvider(url, options) {\\n\\t\\t// Create the Deferred that will manage the overall request\\n\\t\\t// process\\n\\t\\t// * Should resolve to the requested data\\n\\t\\t// * Should only be resolved if the XHR response returns\\n\\t\\t//   a non-error status\\n\\t\\t// * If the XHR response returns a 403 status code, the\\n\\t\\t//   authentication process should be asynchronously injected\\n\\t\\t// * If authentication is cancelled by the user, the Deferred\\n\\t\\t//   should be rejected\\n\\t\\tvar dfd = new Deferred();\\n\\n\\t\\t// While you normally return the 'promise' property of a\\n\\t\\t// Deferred, we need to return a promise that has a 'response'\\n\\t\\t// property on it.\\n\\t\\t// The 'promise' property of a Deferred is frozen, so we cannot\\n\\t\\t// add properties to it. In order to create a mutable promise, we\\n\\t\\t// use 'lang.delegate' to create an object whose prototype is\\n\\t\\t// linked to 'dfd.promise'.\\n\\t\\tvar dataPromise = lang.delegate(dfd.promise.then(function (response) {\\n\\t\\t\\treturn response.data || response.text;\\n\\t\\t}));\\n\\n\\t\\t// 'dfd' will resolve to the 'response' property of the XHR,\\n\\t\\t// which is what we want on dataPromise's 'response' property\\n\\t\\tdataPromise.response = dfd.promise;\\n\\n\\t\\t// This function uses dojo/request/xhr to perform the actual XHR\\n\\t\\tfunction send() {\\n\\t\\t\\t// Perform the xhr request\\n\\t\\t\\tvar xhrPromise = request(url, options);\\n\\n\\t\\t\\t// Listen for the response to the request\\n\\t\\t\\txhrPromise.response.then(function (response) {\\n\\t\\t\\t\\t// Resolve the surrogate deferred when the original\\n\\t\\t\\t\\t// request was successful\\n\\t\\t\\t\\tdfd.resolve(response);\\n\\t\\t\\t}, function (error) {\\n\\t\\t\\t\\t// Otherwise check to see whether the request failed due\\n\\t\\t\\t\\t// to a 403 from the server\\n\\t\\t\\t\\tif (error.response.status === 403) {\\n\\t\\t\\t\\t\\t// Perform some reauthentication in the UI\\n\\t\\t\\t\\t\\treauthenticate().then(function () {\\n\\t\\t\\t\\t\\t\\t// Re-run the original request\\n\\t\\t\\t\\t\\t\\tsend();\\n\\t\\t\\t\\t\\t}, function (error) {\\n\\t\\t\\t\\t\\t\\t// User failed to reauthenticate successfully,\\n\\t\\t\\t\\t\\t\\t// permanent failure\\n\\t\\t\\t\\t\\t\\tdfd.reject(error);\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\tdfd.reject(error);\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\tsend();\\n\\n\\t\\treturn dataPromise;\\n\\t}\\n\\n\\t// Add the 'get', 'post', etc. convenience methods\\n\\trequestUtil.addCommonMethods(requestProvider);\\n\\n\\treturn requestProvider;\\n});\\n</pre>\\n<p>You could of course load this module instead of <code>dojo/request</code> in your application code, but there are other solutions available that may be more convenient, such as configuring a default request provider or remapping AMD modules.</p>\\n<h3>Configuring a default request provider</h3>\\n<p>If you have created a request provider that you want to be used by modules throughout your application that load <code>dojo/request</code>, you can use the <code>requestProvider</code> property in your Dojo config. For example, if you created a request provider in <code>app/custom/request.js</code>:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nvar dojoConfig = {\\n\\tasync: true,\\n\\trequestProvider: 'app/custom/request'\\n};\\n</pre>\\n<p>This would result in all modules that load <code>dojo/request</code> receiving the module defined in <code>app/custom/request.js</code>. Some points to keep in mind:</p>\\n<ul>\\n<li>Modules that explicitly load <code>dojo/request/xhr</code> will be unaffected by this</li>\\n<li><code>dojo/request/default.js</code> includes logic to load the appropriate default provider for web clients (<code>dojo/request/xhr</code>) and Node.js (<code>dojo/request/node</code>). If this is relevant to your application you will have to implement this logic in your custom provider.</li>\\n</ul>\\n<p>Dojo&#8217;s request modules also include <a href=\\\"http://dojotoolkit.org/reference-guide/dojo/request/registry.html\\\"><code>dojo/request/registry</code></a>, which allows you to specify which request provider module to use based on request criteria.</p>\\n<h3>Remapping AMD modules</h3>\\n<p>If you want to restrict use of your custom provider to a subset of your application&#8217;s modules, or if you have modules that directly load <code>dojo/request/xhr</code>, you can use Dojo&#8217;s <code>map</code> configuration option to remap modules.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nvar dojoConfig = {\\n\\tmap: {\\n\\t\\t'app/custom': {\\n\\t\\t\\t'dojo/request': 'app/custom/request',\\n\\t\\t\\t'dojo/request/xhr': 'app/custom/request'\\n\\t\\t}\\n\\t}\\n};\\n</pre>\\n<p>This configuration would result in all modules whose path begins with &#8220;app/custom&#8221; receiving the <code>app/custom/request</code> module instead of <code>dojo/request</code> or <code>dojo/request/xhr</code>. You can read more about using <code>map</code> under the &#8220;Using portable modules&#8221; section of the <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.10/modules_advanced/\\\">Advanced AMD Usage</a> tutorial.</p>\\n<h2>Creating an authentication module</h2>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n// The reauthenticate function stores its own state in a closure\\nvar reauthenticate = (function () {\\n\\tvar dfd;\\n\\n\\t// Precreate some custom widget for the reauthentication form\\n\\t// This is where you would supply your own implementation\\n\\tvar form = new AuthenticationForm();\\n\\n\\t// When the form is submitted...\\n\\tform.on('submit', function (data) {\\n\\t\\t// Hide the form\\n\\t\\tform.hide();\\n\\n\\t\\t// Try to authenticate using the data from the form\\n\\t\\trequest.post('authenticate', {\\n\\t\\t\\thandleAs: 'json',\\n\\t\\t\\tdata: data\\n\\t\\t}).then(function (response) {\\n\\t\\t\\t// If the authentication was successful, resolve the deferred\\n\\t\\t\\tif (response.success) {\\n\\t\\t\\t\\tdfd.resolve();\\n\\t\\t\\t\\tdfd = null;\\n\\t\\t\\t}\\n\\t\\t\\t// Otherwise clear the form and display the authentication\\n\\t\\t\\t// error from the server\\n\\t\\t\\telse {\\n\\t\\t\\t\\tform.clear();\\n\\t\\t\\t\\tform.set('error', response.message);\\n\\t\\t\\t\\tform.show();\\n\\t\\t\\t}\\n\\t\\t});\\n\\t});\\n\\n\\t// If someone cancels the authentication form then they have given up\\n\\t// reauthenticating and the application needs to do something else\\n\\tform.on('cancel', function () {\\n\\t\\tdfd.reject();\\n\\t\\tdfd = null;\\n\\t\\tform.hide();\\n\\t});\\n\\n\\treturn function () {\\n\\t\\t// If we are already in the reauthentication workflow, simply\\n\\t\\t// return the same promise for all future calls\\n\\t\\tif (dfd) {\\n\\t\\t\\treturn dfd.promise;\\n\\t\\t}\\n\\n\\t\\t// Otherwise create a new deferred for the form and show it\\n\\t\\tdfd = new Deferred();\\n\\t\\tform.show();\\n\\n\\t\\treturn dfd.promise;\\n\\t};\\n})();\\n</pre>\\n<p>To clarify, the authentication module code above requires you to provide your own implementation of an <code>AuthenticationForm</code> module that provides the methods being called above, as well as an authentication endpoint for the XHR on line 15.</p>\\n<h2>Conclusion</h2>\\n<p>With a custom request provider in place to respond to specific responses from the server and a module to provide the user interface for authentication you can maintain the smooth user experience in your single-page applications even when the user must authenticate (or re-authenticate). The example code allows for infinite retries with no delay &#8211; any security precautions for a production environment should be deployed on the server.</p>\\n<h2>Learning more</h2>\\n<p>SitePen covers advanced Ajax usage and much more in our <a href=\\\"https://www.sitepen.com/services/\\\">Dojo workshops</a> offered throughout the US, Canada, and Europe, or at your location. We also provide expert <a href=\\\"https://www.sitepen.com/services/\\\">JavaScript and Dojo support</a> and <a href=\\\"https://www.sitepen.com/services/\\\">development</a> services. <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> for a free 30 minute consultation to discuss how we can help.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>A common scenario with web applications is accessing protected resources, which require authentication with the server in order to proceed. A common flow is as follows: User opens web site Web site presents authentication screen User enters credentials Web site presents protected information Authentication workflows This is simple enough to begin with, but what happens [&hellip;]</p>\\n\",\"protected\":false},\"author\":43,\"featured_media\":7905,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,45,380],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dojo FAQ: How can I handle recoverable server errors transparently with dojo/request? | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"A common scenario with web applications is accessing protected resources, which require authentication with the server in order to proceed. A common flow is as follows:  User opens web site Web site presents authentication screen User enters credentials Web site presents protected information  Authentication workflows\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dojo FAQ: How can I handle recoverable server errors transparently with dojo/request? | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"A common scenario with web applications is accessing protected resources, which require authentication with the server in order to proceed. A common flow is as follows:  User opens web site Web site presents authentication screen User enters credentials Web site presents protected information  Authentication workflows\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-01-21T17:10:48+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/\\\",\\\"name\\\":\\\"Dojo FAQ: How can I handle recoverable server errors transparently with dojo/request? | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-01-21T17:10:48+00:00\\\",\\\"dateModified\\\":\\\"2015-01-21T17:10:48+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/d26d1a7b34bba79757f0b73269ffb051\\\"},\\\"description\\\":\\\"A common scenario with web applications is accessing protected resources, which require authentication with the server in order to proceed. A common flow is as follows: User opens web site Web site presents authentication screen User enters credentials Web site presents protected information Authentication workflows\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/faq-how-can-i-handle-recoverable-server-errors-transparently-with-dojorequest/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/d26d1a7b34bba79757f0b73269ffb051\\\",\\\"name\\\":\\\"Mangala SSS Khalsa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/f70b4a426631ceef7247191be7e30be4?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Mangala SSS Khalsa\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/8809\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/43\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=8809\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/8809/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/7905\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=8809\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=8809\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=8809\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=8809\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":43,\"name\":\"Mangala SSS Khalsa\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/mkhalsa/\",\"slug\":\"mkhalsa\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/f70b4a426631ceef7247191be7e30be4?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/f70b4a426631ceef7247191be7e30be4?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/f70b4a426631ceef7247191be7e30be4?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Mangala SSS Khalsa, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Mangala SSS Khalsa, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/mkhalsa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/f70b4a426631ceef7247191be7e30be4?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/mkhalsa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/mkhalsa/\\\",\\\"name\\\":\\\"Mangala SSS Khalsa, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/d26d1a7b34bba79757f0b73269ffb051\\\",\\\"name\\\":\\\"Mangala SSS Khalsa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/f70b4a426631ceef7247191be7e30be4?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Mangala SSS Khalsa\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/mkhalsa/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/43\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:14:13 GMT"],["expires","Thu, 24 Sep 2020 13:14:13 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}