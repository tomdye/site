{"value":{"body":"[{\"id\":24264,\"date\":\"2020-06-03T13:38:44\",\"date_gmt\":\"2020-06-03T20:38:44\",\"guid\":{\"rendered\":\"https://wp.sitepen.com/?p=24264\"},\"modified\":\"2020-06-16T07:23:45\",\"modified_gmt\":\"2020-06-16T14:23:45\",\"slug\":\"progressively-adopting-typescript-in-a-dojo-toolkit-application\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/\",\"title\":{\"rendered\":\"Progressively Adopting TypeScript in a Dojo Toolkit Application\"},\"content\":{\"rendered\":\"\\n<p>TypeScript has become a mainstay of modern web development libraries. Consuming functions and widgets written by a third party can be error-prone without some type of guidance. Introducing static typing to the interfaces doesn’t just reduce misuse, it has added benefits including intelligence code completion.</p>\\n\\n\\n\\n<p>Dojo Toolkit is one of the earliest libraries to facilitate the building of large, dynamic, interconnected single-page applications. Above and beyond the tools for loading and storing data, managing events, and working with the DOM, it provides a diverse set of widgets through Dijit.</p>\\n\\n\\n\\n<p>Is TypeScript something the Dojo Toolkit can benefit from even though it was written before TypeScript existed? Luckily for us, the designers of TypeScript have made this possible through tools we’ll be looking at in this post.</p>\\n\\n\\n\\n<h2><strong>Introducing TypeScript to Your Project</strong></h2>\\n\\n\\n\\n<p>To help our project evolve from JavaScript to TypeScript, we need a good place to start. Take a look at the<a href=\\\"https://github.com/rorticus/DijitHelloWorld\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\"> example Dojo Toolkit application</a> that we&#8217;ll be using in this post.</p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https://lh5.googleusercontent.com/BZRuD9lS6m0N1KglRciKTOCA5MQcuMBFi8OIgVzFmZebKOk5KwIoMPmIhv9289lDqh2FKthUTc5H4IgU2lSznvfDIm0IfB_XFNgnv5RsTvZ3019Qh4Tptm-onqU9w2vPhTyNei8v\\\" alt=\\\"\\\"/></figure>\\n\\n\\n\\n<p>We will need just two things to start integrating TypeScript into our project -the TypeScript compiler, and a configuration file.</p>\\n\\n\\n\\n<h4><strong>Installing the TypeScript Compiler</strong></h4>\\n\\n\\n\\n<p>We&#8217;ll be using the TypeScript compiler for performing compile-time type checking, and eventually for turning our TypeScript files into JavaScript.</p>\\n\\n\\n\\n<p>Installing the TypeScript compiler is easy, we simply install typescript as a <code>devDependency</code>.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-bash\\\">npm i -D typescript</code></pre>\\n\\n\\n\\n<h4><strong>The TypeScript Configuration File</strong></h4>\\n\\n\\n\\n<p>Now that the TypeScript compiler is installed, we need to configure it to work with our application. Create a new file called <code>tsconfig.json</code> in the project root with the following contents:</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-json\\\">{\\n  \\\"compilerOptions\\\": {\\n    \\\"allowJs\\\": true,\\n    \\\"checkJs\\\": true,\\n    \\\"esModuleInterop\\\": true,\\n    “noImplicitThis”: true,\\n    \\\"lib\\\": [\\n      \\\"dom\\\",\\n      \\\"es2015\\\",\\n      \\\"scripthost\\\"\\n    ],\\n    \\\"module\\\": \\\"amd\\\",\\n    \\\"outDir\\\": \\\"build/src/demo/\\\",\\n    \\\"removeComments\\\": false,\\n    \\\"target\\\": \\\"es5\\\"\\n  },\\n  \\\"include\\\": [\\n    \\\"./src/**/*.js\\\",\\n    \\\"./src/**/*.ts\\\"\\n  ]\\n}</code></pre>\\n\\n\\n\\n<p>You can<a href=\\\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\"> read about the full extent of the tsconfig.json file options</a>, but the interesting ones for this post are <code>allowJs</code>, <code>checkJs</code>, and <code>esModuleInterop</code>.</p>\\n\\n\\n\\n<ul><li><code>allowJs</code> &#8211; Allows JavaScript files to be compiled. We need this right now because our entire app is written in JavaScript.</li><li><code>checkJs</code> &#8211; Reports errors in JavaScript files. We can have TypeScript perform <a href=\\\"https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">type checking on our original JavaScript files</a>, possibly surfacing some application bugs before we even make any code changes!</li><li><code>esModuleInterop</code> &#8211; Enables compatibility with the dojo loader.</li></ul>\\n\\n\\n\\n<p>With these two pieces in place, we can now try to compile our project using the TypeScript compiler! From your project root, run the compiler.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-bash\\\">./node_modules/.bin/tsc</code></pre>\\n\\n\\n\\n<p>Uh oh! Looks like we have a few errors.</p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nsrc/demo/index.js:1:1 - error TS2304: Cannot find name 'define'.\\n\\n1 define([\\n  ~~~~~~\\n\\nsrc/demo/widgets/Hello.js:1:1 - error TS2304: Cannot find name 'define'.\\n\\n1 define([\\n  ~~~~~~\\n</pre>\\n\\n\\n<p>TypeScript doesn&#8217;t know anything about the Dojo Toolkit, so it&#8217;s not sure how to proceed here.</p>\\n\\n\\n\\n<h4><strong>Ambient Declarations</strong></h4>\\n\\n\\n\\n<p>TypeScript is designed to be used with existing JavaScript libraries. To do that, you need to tell it something about those libraries. These types of definitions are called &#8220;ambient declarations&#8221; and usually end with .d.ts. Ambient declarations do not produce any code output and instead are simply there to inform TypeScript about the types and APIs of other code. The Dojo Toolkit provides ambient declarations in the form of the <a href=\\\"https://github.com/dojo/typings\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">dojo-typings</a> package. Simply install this package as a <code>devDependency</code>,</p>\\n\\n\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\nnpm i -D dojo-typings\\n</pre>\\n\\n\\n<p>Then, include the files in your <code>tsconfig.json</code> file by adding them to the <code>include</code> key.</p>\\n\\n\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n{\\n &quot;include&quot;: [\\n    &quot;./node_modules/dojo-typings/dojo/1.11/modules.d.ts&quot;,\\n    &quot;./node_modules/dojo-typings/dijit/1.11/modules.d.ts&quot;,\\n    &quot;./node_modules/dojo-typings/dojo/1.11/loader.d.ts&quot;,\\n    &quot;./src/**/*.js&quot;,\\n    &quot;./src/**/*.ts&quot;\\n  ]\\n}\\n</pre>\\n\\n\\n<p>Note that we&#8217;ve included three different ambient declarations (the .d.ts files):</p>\\n\\n\\n\\n<ul><li><code>dojo/1.11/modules.d.ts</code> &#8211; Ambient declarations for Dojo 1.11</li><li><code>diijt/1.11/modules.d.ts</code> &#8211; Ambient declarations for Dijit 1.11</li><li><code>dojo/1.11/loader.d.ts</code> &#8211; Ambient declarations for the loader to give us access to require and define.</li></ul>\\n\\n\\n\\n<p>Running the TypeScript compiler now should yield better results.</p>\\n\\n\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\n./node_modules/.bin/tsc\\n</pre>\\n\\n\\n<p>Success! We&#8217;ve now got some basic TypeScript type checking for the Dojo Toolkit implemented, but soon we&#8217;ll really see the power of type checking when we transition our project to TypeScript.</p>\\n\\n\\n\\n<h4><strong>Transitioning Loaders</strong></h4>\\n\\n\\n\\n<p>TypeScript does not understand Dojo&#8217;s module loader, so we need to transition our code to use ES module syntax instead. TypeScript will then be able to look at our imports and determine the types from them. In our case, it will be able to enforce the types of Button, TextBox, etc.</p>\\n\\n\\n\\n<p>Take a look at the top of <code>Hello.js</code>:</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-typescript\\\">define([\\n    \\\"dojo/_base/declare\\\",\\n    \\\"dojo/dom-construct\\\",\\n    \\\"dijit/_WidgetBase\\\",\\n    \\\"dijit/form/Button\\\",\\n    \\\"dijit/form/TextBox\\\"\\n], function(\\n    declare,\\n    domConstruct,\\n    _WidgetBase,\\n    Button,\\n    TextBox\\n) {\\n    return declare([_WidgetBase], {\\n    // ...</code></pre>\\n\\n\\n\\n<p>Using ES module syntax, that would look like:</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-javascript\\\">import declare from \\\"dojo/_base/declare\\\";\\nimport domConstruct from \\\"dojo/dom-construct\\\";\\nimport _WidgetBase from \\\"dijit/_WidgetBase\\\";\\nimport Button from \\\"dijit/form/Button\\\";\\nimport TextBox from \\\"dijit/form/TextBox\\\";\\n\\nexport default declare([_WidgetBase], {</code></pre>\\n\\n\\n\\n<p>How can this be compatible with Dojo Toolkit you wonder? Go ahead and compile the project (you&#8217;ll see some errors, but we&#8217;ll deal with those in a bit) and open up <code>build/src/demo/widgets/Hello.js</code>.</p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nvar __importDefault = (this &amp;amp;&amp;amp; this.__importDefault) || function (mod) {\\n    return (mod &amp;amp;&amp;amp; mod.__esModule) ? mod : { &quot;default&quot;: mod };\\n};\\ndefine([\\n    &quot;require&quot;, \\n    &quot;exports&quot;, \\n    &quot;dojo/_base/declare&quot;, \\n    &quot;dojo/dom-construct&quot;, \\n    &quot;dijit/_WidgetBase&quot;, \\n    &quot;dijit/form/Button&quot;, \\n    &quot;dijit/form/TextBox&quot;\\n], function (require, exports, declare_1, dom_construct_1, _WidgetBase_1, Button_1, TextBox_1) {\\n// ...\\n</pre>\\n\\n\\n<p>You&#8217;ll notice right away that our imports were turned into a call to define that looks a lot like our old define call! TypeScript knows we want to use AMD modules (from our <code>tsconfig.json</code> file) and automatically converted our imports into an appropriate define call. That&#8217;s some powerful stuff right there.</p>\\n\\n\\n\\n<h4><strong>Type Safety</strong></h4>\\n\\n\\n\\n<p>With our imports in place, TypeScript can read the types and enforce some type safety rules. You may have noticed that we&#8217;ve now got compile errors.</p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https://lh4.googleusercontent.com/-ZvLQl6vueh0N0iz9YjdT2Awpu3wTePSmLA9nZfbg0fVdDSup1uvsmBl4El7mnyvwJcrDzgSozwxhDJCu4h8MfyeVui6VmZ3c3SZG6TocUufLB0O7QnD6bjhSECkWVufTz3i5Wty\\\" alt=\\\"\\\"/></figure>\\n\\n\\n\\n<p>Because TypeScript knows that our widget extends from <code>_WidgetBase</code>, it knows what properties are available and which ones are not. If we try to use a property that isn&#8217;t part of <code>_WidgetBase</code> or our extension, we&#8217;ll see an error about the property not existing &#8211; just like what we are seeing with <code>nameInput</code>. To fix this, we simply need to define the <code>nameInput</code> property and tell TypeScript (via JsDoc) what type it is. Add this above the <code>buildRendering</code> property:</p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nnameInput: /** @type TextBox */ (undefined),\\n</pre>\\n\\n\\n<p>With our build errors taken care of, let&#8217;s take a quick inventory of the type safety we&#8217;ve got in <code>Hello.js</code> right now.</p>\\n\\n\\n\\n<ul><li>Accidentally using a variable that doesn&#8217;t exist will create a compile-time error. So if we type <code>this.nmeInput</code> by mistake, we&#8217;ll get an error right away.<br><br><img src=\\\"https://lh5.googleusercontent.com/hNjGss4Pfk8PAt-jxkvKAwmxXhTFlkJHLImucXZGF3ssZsMjumYpnFiKaizrEysJQS5iM_ik9b4t9zz5C8ZQfhPgTKmkgCvB9nGIxil4v7p49o8o1f1kyccVxh-IgYtpQS_K0MXV\\\" width=\\\"462\\\" height=\\\"171\\\"></li><li>We&#8217;ve got autocomplete (most IDEs support this)! Now that TypeScript knows what types things should be, typing <code>domConstruct</code> or <code>this</code>. will provide you with an autocomplete list that is specific to that type.<br><br><img src=\\\"https://lh3.googleusercontent.com/L87GpdQuxjvdfHmuTWJINbyYlkoVstrpyIpeM39trsNSOgyGNCmY_szOrVCDKNp6VFEcuZbDmgcOTYS2hLqUqfA1wTXBN3kPZJRpGdaE6iy2UEmiuQHc1BDbeQIoIPtaDSJLi8Zh\\\" width=\\\"571\\\" height=\\\"314\\\"></li><li>We&#8217;ve got additional type safety on Dijit constructor parameters. Since TypeScript knows what <code>TextBox({ ... })</code> should accept, if you try to type in a property that hasn&#8217;t been defined in the types, you&#8217;ll get a compile-time error.<br><br><img src=\\\"https://lh4.googleusercontent.com/VLPxP2xo3sjYHhn-Xd5TdtAN750XRRQJudc6GvU8SmK3GfSXDj3YOU4kJu4LG3yKtGB2oShkq4XvxENuGwXC7ewGOpuEjuO3byIhQjnePcXc8o4FjfsLWdIj83lII5D2ewt0QbdH\\\" width=\\\"662\\\" height=\\\"44\\\"></li></ul>\\n\\n\\n\\n<p>These are all huge wins, but can we actually migrate our JavaScript files to full-on TypeScript files for an even bigger payoff?</p>\\n\\n\\n\\n<h2><strong>.js to .ts</strong></h2>\\n\\n\\n\\n<p>Type checking on your JavaScript files is a powerful feature, but eventually you’ll want to take full advantage of everything that TypeScript has to offer. TypeScript files do not rely on JsDoc and offer far more expressive types, allowing the compiler to analyze your code even further. Your end goal should be to transition your JavaScript codebase to a TypeScript-first code base.</p>\\n\\n\\n\\n<h4><strong>Rename Your Files</strong></h4>\\n\\n\\n\\n<p>The first step is to rename your files to .ts instead of .js. Once TypeScript sees the .ts extension it knows it can expect special TypeScript syntax and make certain assumptions about your code. Rename <code>Hello.js</code> to <code>Hello.ts</code> to begin the conversion. You&#8217;ll notice that the project still builds, even though we haven&#8217;t changed anything but the file extension. This is because .ts files try to be backwards compatible with .js files as much as possible.</p>\\n\\n\\n\\n<h4><strong>Update Your Types</strong></h4>\\n\\n\\n\\n<p>With JavaScript files, we used JsDoc to specify types. With TypeScript files, we&#8217;ll be able to use TypeScript specific syntax. Let&#8217;s update our <code>nameInput</code> property to be typed via TypeScript.</p>\\n\\n\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nnameInput: undefined as TextBox | undefined\\n</pre>\\n\\n\\n<p>Here we are declaring that <code>nameInput</code> is undefined, and we expect it to contain either nothing (undefined) or an instance of TextBox. This is a simple example, but TypeScript offers<a href=\\\"https://www.typescriptlang.org/docs/handbook/basic-types.html\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\"> an incredibly wide and advanced set of types</a> that are now at your disposal.</p>\\n\\n\\n\\n<h2><strong>Your Project: What’s First?</strong></h2>\\n\\n\\n\\n<p>Converting our example app to TypeScript is one thing, but how do you convert a real-world project. Where do you even start?</p>\\n\\n\\n\\n<h4><strong>Critical Business Logic</strong></h4>\\n\\n\\n\\n<p>Some modules are more important than others. When you&#8217;ve got a module that is critical and should not be misused, converting the module to TypeScript is a great way to enforce that the module is used correctly.</p>\\n\\n\\n\\n<h4><strong>Modules with few dependencies</strong></h4>\\n\\n\\n\\n<p>Modules with few dependencies are a great place to start your conversion to TypeScript. To use the ES import syntax, TypeScript needs to know about the module being imported. That means it either needs to have ambient declarations or already be a TypeScript file.</p>\\n\\n\\n\\n<h2><strong>Potential Issues</strong></h2>\\n\\n\\n\\n<h4><strong>Mapped Libraries</strong></h4>\\n\\n\\n\\n<p>You may be using a third-party library that you can&#8217;t find types for. In this case, you might have to write your own ambient declarations. Writing these is outside the scope of this post, but you can find plenty of tutorials on this subject. Start small and only implement the parts of the API you are using, and then build from there.</p>\\n\\n\\n\\n<h2><strong>Next Steps</strong></h2>\\n\\n\\n\\n<p>Upgrading your project to TypeScript is a great step toward using modern web technologies. Once there, you might want to consider going even further.</p>\\n\\n\\n\\n<h4><strong>TypeScript and ESLint</strong></h4>\\n\\n\\n\\n<p>You can use ESLint and TypeScript together to perform additional checks that are only possible because of the extra type information added by TypeScript. For example, some of these rules can assure that you are not specifying a type you don&#8217;t have, or that you <em>always</em> have to specify a type and you should not rely on inferred types.</p>\\n\\n\\n\\n<h4><strong>Webpack</strong></h4>\\n\\n\\n\\n<p>The TypeScript compiler will output each of your TypeScript files as individual JavaScript files. While this is OK for your existing build system, loading all of those individual files can be inefficient on the browser. Webpack can take your TypeScript (and JavaScript) files and create one or more bundled versions that you serve to your users. These bundles are smaller and more efficient than loading individual files. With some additional plugins, <a href=\\\"https://webpack.js.org/guides/typescript/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Webpack can use the TypeScript compiler</a> without ever creating intermediary JavaScript files during the build. There is even a <a href=\\\"https://github.com/OpenNTF/dojo-webpack-plugin\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">dojo-webpack</a> plugin to build Dojo Toolkit applications using Webpack.</p>\\n\\n\\n\\n<h2><strong>Conclusion</strong></h2>\\n\\n\\n\\n<p>In this post, we&#8217;ve seen how to take a Dojo Toolkit and Dijit project and incrementally convert it into a TypeScript project. We&#8217;ve also seen some of the advantages of TypeScript and where we can go from here. Hopefully this post has inspired you to start converting your own projects to TypeScript.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>TypeScript has become a mainstay of modern web development libraries. Consuming functions and widgets written by a third party can be error-prone without some type of guidance. Introducing static typing to the interfaces doesn’t just reduce misuse, it has added benefits including intelligence code completion. Dojo Toolkit is one of the earliest libraries to facilitate [&hellip;]</p>\\n\",\"protected\":false},\"author\":74,\"featured_media\":24645,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,11],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Progressively Adopting TypeScript in a Dojo Toolkit Application | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Going from JavaScript to TypeScript in a Legacy Dojo Toolkit Application\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Progressively Adopting TypeScript in a Dojo Toolkit Application | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Going from JavaScript to TypeScript in a Legacy Dojo Toolkit Application\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2020-06-03T20:38:44+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-06-16T14:23:45+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"2400\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"1200\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-\\\\u2013-progressively-adopting-typescript@2x.png\\\",\\\"width\\\":2400,\\\"height\\\":1200},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/\\\",\\\"name\\\":\\\"Progressively Adopting TypeScript in a Dojo Toolkit Application | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/#primaryimage\\\"},\\\"datePublished\\\":\\\"2020-06-03T20:38:44+00:00\\\",\\\"dateModified\\\":\\\"2020-06-16T14:23:45+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/58aec2c7c61151384a270fec81a91b81\\\"},\\\"description\\\":\\\"Going from JavaScript to TypeScript in a Legacy Dojo Toolkit Application\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/58aec2c7c61151384a270fec81a91b81\\\",\\\"name\\\":\\\"Rory Mulligan\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/257d0f178c788d9915beeb33833f04b8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Rory Mulligan\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/24264\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/74\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=24264\"}],\"version-history\":[{\"count\":16,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/24264/revisions\"}],\"predecessor-version\":[{\"id\":24718,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/24264/revisions/24718\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/24645\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=24264\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=24264\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=24264\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":74,\"name\":\"Rory Mulligan\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/rmulligan/\",\"slug\":\"rmulligan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/257d0f178c788d9915beeb33833f04b8?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/257d0f178c788d9915beeb33833f04b8?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/257d0f178c788d9915beeb33833f04b8?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Rory Mulligan, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Rory Mulligan, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/rmulligan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/257d0f178c788d9915beeb33833f04b8?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/rmulligan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/rmulligan/\\\",\\\"name\\\":\\\"Rory Mulligan, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/58aec2c7c61151384a270fec81a91b81\\\",\\\"name\\\":\\\"Rory Mulligan\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/257d0f178c788d9915beeb33833f04b8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Rory Mulligan\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/rmulligan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/74\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":24645,\"date\":\"2020-06-03T12:58:24\",\"slug\":\"blog-progressively-adopting-typescript2x\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/progressively-adopting-typescript-in-a-dojo-toolkit-application/blog-progressively-adopting-typescript2x/\",\"title\":{\"rendered\":\"blog – progressively adopting typescript@2x\"},\"author\":103,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>blog – progressively adopting typescript@2x | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"blog – progressively adopting typescript@2x | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"2400\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"1200\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-\\\\u2013-progressively-adopting-typescript@2x.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-\\\\u2013-progressively-adopting-typescript@2x.png\\\",\\\"name\\\":\\\"blog \\\\u2013 progressively adopting typescript@2x | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-06-03T19:58:24+00:00\\\",\\\"dateModified\\\":\\\"2020-06-03T19:58:24+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-\\\\u2013-progressively-adopting-typescript@2x.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":2400,\"height\":1200,\"file\":\"2020/05/blog-–-progressively-adopting-typescript@2x.png\",\"sizes\":{\"medium\":{\"file\":\"blog-–-progressively-adopting-typescript@2x-300x150.png\",\"width\":300,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x-300x150.png\"},\"large\":{\"file\":\"blog-–-progressively-adopting-typescript@2x-1024x512.png\",\"width\":1024,\"height\":512,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x-1024x512.png\"},\"thumbnail\":{\"file\":\"blog-–-progressively-adopting-typescript@2x-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x-150x150.png\"},\"medium_large\":{\"file\":\"blog-–-progressively-adopting-typescript@2x-768x384.png\",\"width\":768,\"height\":384,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x-768x384.png\"},\"1536x1536\":{\"file\":\"blog-–-progressively-adopting-typescript@2x-1536x768.png\",\"width\":1536,\"height\":768,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x-1536x768.png\"},\"2048x2048\":{\"file\":\"blog-–-progressively-adopting-typescript@2x-2048x1024.png\",\"width\":2048,\"height\":1024,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x-2048x1024.png\"},\"full\":{\"file\":\"blog-–-progressively-adopting-typescript@2x.png\",\"width\":2400,\"height\":1200,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/05/blog-–-progressively-adopting-typescript@2x.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/24645\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/103\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a5549ddeafd002a-LHR"],["cf-request-id","03692c7ead0000002a9322a200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 18 Jun 2020 13:17:06 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d329681ea8591186460b40d597fd53df41592486225; expires=Sat, 18-Jul-20 13:17:05 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}