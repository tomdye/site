{"value":{"body":"[{\"id\":16214,\"date\":\"2018-08-14T10:03:13\",\"date_gmt\":\"2018-08-14T17:03:13\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=16214\"},\"modified\":\"2020-01-24T05:47:01\",\"modified_gmt\":\"2020-01-24T13:47:01\",\"slug\":\"cross-tab-synchronization-with-the-web-locks-api\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/\",\"title\":{\"rendered\":\"Cross-tab Synchronization with the Web Locks API\"},\"content\":{\"rendered\":\"<p>The <a href=\\\"https://github.com/inexorabletash/web-locks\\\">Web Locks API</a> is a new addition to the Web Platform which allows you to execute JavaScript in a lock, a resource which can potentially get shared with other browser tabs. This API is currently available in <a href=\\\"https://www.chromestatus.com/feature/5712361335816192\\\">Chrome and other Chromium-based browsers</a> with no major signals from other browser vendors.</p>\\n<p>Use cases which are suitable for the Web Locks API are the managing, coordinating, and syncing of multi-tab interactions. Currently, some or all of the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker\\\">Shared Web Worker</a>, <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel\\\">Broadcast Channel</a>, <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage\\\">Local Storage</a>, <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage\\\">Session Storage</a>, <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\\\">Post Message</a> &#038; <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/Events/unload\\\">unload handler</a> APIs can be used to manage tab communication and synchronization, however, they each have their drawbacks and require workarounds which decrease code maintainability.</p>\\n<p><!--more--></p>\\n<p>Many simple web applications do not have a use case for the Web Locks API, however more complex, JavaScript-heavy applications may have such a use case. Two brief use cases include:</p>\\n<ol>\\n<li>A user opens up two tabs of the same text editing web application in their browser. Changes to the document need to get synced back to the server. Complications can arise if tab #2 syncs a change back to the server which clashes with tab #1. The Web Lock API enables multiple instances of the same web application to gain exclusivity with executing a JavaScript function.</li>\\n<li>A user leaves a tab open for a stock portfolio investment web application. It’s not unheard of that one may leave such a tab open throughout the day so they can scan the current stock price. The user opens up a new tab of the same web app to purchase some shares. Both tabs may need to coordinate with each other, so the web user interface doesn’t mistakenly allow duplicate transactions to go through, one in each tab.</li>\\n</ol>\\n<p>When an exclusive lock gets held in one browser tab, the same JavaScript from another tab, even it matches the same origin, cannot acquire this lock. When the primary instance of a web application releases its lock, other instances of the same web app may request access to the same lock throughout their lifecycle. For a lock to be released, it’s said to have completed its function execution, or in some cases, errored during execution.</p>\\n<p>There are at least three crucial concepts to understand the basics of the Web Locks API:</p>\\n<ul>\\n<li><strong>lock request</strong> &#8211; this is where you, the web developer starts</li>\\n<li><strong>lock</strong> &#8211; something you may acquire after a lock request gets granted</li>\\n<li><strong>lock manager</strong> &#8211; an overview of held locks and pending locks</li>\\n</ul>\\n<p>There are many concepts part of the Web Locks API. However, we’ll focus on the above three topics in this post.</p>\\n<p>Tip: Locks get entirely isolated in incognito and private browsing environments which helps protect the privacy of the user.</p>\\n<h3>Lock Request</h3>\\n<p>Lock requests are placed into a queue and granted by the browser if:</p>\\n<ul>\\n<li>No other lock gets held which matches the same name</li>\\n<li>No other pending lock requests are waiting to be granted and made earlier in the queue</li>\\n</ul>\\n<p>You can request a lock using the request method of the locks object:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nnavigator.locks.request('your-lock', async lock =&gt; {\\r\\n\\treturn 'Done!'\\r\\n});\\r\\n</pre>\\n<p>The first argument to the request method is a string-based identifier which should be something meaningful to your web app. The callback function receives a lock as its argument, a simple object which may look like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n{\\r\\n\\tmode: &quot;exclusive&quot;\\r\\n\\tname: &quot;your-lock&quot;\\r\\n}\\r\\n</pre>\\n<p>Notice the callback function passed to the request method is an anonymous async function. The Web Locks API is Promise-aware and waits for the Promise based callback function to settle before it releases a lock.</p>\\n<p>You can abort a lock request using the AbortController API. You may wish to abort a lock request based on your application state changing. When you request a lock, it may not get acquired in an acceptable timeframe. One use case for aborting a lock request is to cancel it if it does not get acquired within a certain timeframe:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// The Web Locks API waits for this promise to settle\\r\\n// By not calling resolve, we keep 'lock-1' active\\r\\nfunction holdTheLock() {\\r\\n\\t// This Promise is never resolved\\r\\n\\treturn new Promise(resolve =&gt; {});\\r\\n}\\r\\n\\r\\nnavigator.locks.request('lock-1', holdTheLock);\\r\\n\\r\\nconst controller = new AbortController();\\r\\n\\r\\n// If the lock isn't acquired within one second, then abort it\\r\\nsetTimeout(() =&gt; controller.abort(), 1000);\\r\\n\\r\\n// Tip: This is similar to cancellation in the Fetch API \\r\\nconst lockOptions = {\\r\\n\\tsignal: controller.signal\\r\\n};\\r\\n\\r\\nfunction neverExecuted () {\\r\\n\\tconsole.log('I will never log to the console');\\r\\n}\\r\\n\\r\\n// If you have lock options, pass it as the 2nd argument\\r\\n// Note, the already held ‘lock-1’ has not been released\\r\\nnavigator.locks.request('lock-1', lockOptions, neverExecuted);\\r\\n</pre>\\n<p>After one second, the following gets logged to the console:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nUncaught (in promise) DOMException: The request was aborted.\\r\\n</pre>\\n<p>If you have worked with promises before, you may be familiar with a JavaScript error following the pattern: “Uncaught (in promise).” The solution is to handle the error, for example with the following code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ntry {\\r\\n\\tawait navigator.locks.request('lock-1', lockOptions, neverExecuted);\\r\\n} catch (err) {\\r\\n\\tconsole.log('Error: Could not request a lock', err);\\r\\n}\\r\\n</pre>\\n<p>The <code>navigator.locks.request()</code> method returns a promise which you can await, using the <code>await</code> keyword. An alternative pattern, if you’d rather avoid the try/catch blocks, is to tack on a <code>catch()</code> callback:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nnavigator.locks.request('lock-1', lockOptions, neverExecuted)\\r\\n\\t.catch(err =&gt; console.log('Error: Could not request a lock', err));\\r\\n</pre>\\n<p>Another available configuration option when requesting a lock is the <code>ifAvailable</code> flag. Observe the following code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst lockOptions = {ifAvailable: true};\\r\\nnavigator.locks.request('resource', lockOptions, () =&gt; {});\\r\\n</pre>\\n<p>The default value for the <code>ifAvailable</code> flag is <code>false</code>. If the value gets set to <code>true</code>, the lock gets granted only if the following conditions get met:</p>\\n<ul>\\n<li>The usual conditions from granting locks must still get met</li>\\n<li>If the lock can get granted without additional waiting, then grant the lock. Otherwise, if waiting time is required, the lock request is discarded from the lock request queue.</li>\\n</ul>\\n<h3>Lock Acquisition</h3>\\n<p>When you acquire the lock named <code>your-lock</code>, at some point, it gets released. The lock release could happen when:</p>\\n<ul>\\n<li>The async callback function which gets passed to the lock request has its promise settled</li>\\n<li>When the non-async callback function which gets passed in has finished executing</li>\\n<li>When the tab closes/crashes</li>\\n</ul>\\n<p>If you have acquired an exclusive lock, you can trust that no other browser tab running the same codebase may execute the same code, at the same time, under the same named lock. However, note that lock requests may be queued up in other tabs and those queued lock requests can eventually be granted based on conditions in or out of your control:</p>\\n<ul>\\n<li>In your control: Your JavaScript code releases the lock because script execution has finished</li>\\n<li>Out of your control: Your user closes one tab instance of your web application</li>\\n</ul>\\n<p>When you request a lock, you also pass in a callback function which gets invoked upon lock acquisition. You can return a value from this callback function. Observe the following techniques:</p>\\n<h4>Technique #1: Pass in an async function which returns a string</h4>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nawait navigator.locks.request('lock-1', async () =&gt; 'hello'); // logs ‘hello’\\r\\n</pre>\\n<h4>Technique #2: Pass in a promise which explicitly resolves to a string</h4>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nawait navigator.locks.request('lock-1', () =&gt; new Promise(resolve =&gt; resolve('hello'))); // logs ‘hello’\\r\\n</pre>\\n<h4>Technique #3: Pass in a non-promise based function which still returns a string</h4>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nawait navigator.locks.request('lock-1', () =&gt; 'hello'); // logs ‘hello’\\r\\n</pre>\\n<p>You may be wondering how the above line of code works (technique #3) since the callback function does <em>not</em> return a promise or use an async-based function. This technique works because the Lock API itself wraps non-promise based functions with a promise. The return value of the callback function is used to resolve the <code>navigator.locks.request()</code> promise.</p>\\n<h3>Shared Locks</h3>\\n<p>By default, locks are exclusive, meaning another script cannot obtain access until the lock gets released. Another script cannot obtain access to an unreleased exclusive acquired lock. When you request a lock, you can permit sharing capabilities:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst lockOptions = {mode: 'shared'};\\r\\nnavigator.locks.request('resource', lockOptions, () =&gt; {});\\r\\n</pre>\\n<p>A shared lock is one of two types of locks you can request. When you hold a shared lock, other scripts can request a lock of the same name. Shared locks can allow you to better coordinate workloads across a certain number of tabs which belong to the same web application. Shared locks can also get used when working with a database, such as IndexedDB. Obtaining multiple shared reader locks, but only a single exclusive writer lock, might be a useful pattern.</p>\\n<h3>Lock Manager</h3>\\n<p>A lock manager organizes the internal state of all locks and gets controlled by the browser. If you create a few lock requests and also acquire a few locks, you can execute the following code to query for all locks and lock requests.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nawait navigator.locks.query()\\r\\n</pre>\\n<p>The <code>query()</code> function call returns an object containing an array of held locks and an array of pending locks which are in a queue. The <code>query()</code> method returns the following JSON structure:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n{\\r\\n  &quot;held&quot;: [{\\r\\n      &quot;clientId&quot;: &quot;a58e9...&quot;,\\r\\n      &quot;mode&quot;: &quot;exclusive&quot;,\\r\\n      &quot;name&quot;: &quot;lock-1&quot;\\r\\n    }, {\\r\\n      &quot;clientId&quot;: &quot;a58e9...&quot;,\\r\\n      &quot;mode&quot;: &quot;exclusive&quot;,\\r\\n      &quot;name&quot;: &quot;lock-2&quot;\\r\\n    }, {\\r\\n      &quot;clientId&quot;: &quot;a58e9...&quot;,\\r\\n      &quot;mode&quot;: &quot;exclusive&quot;,\\r\\n      &quot;name&quot;: &quot;lock-3&quot;\\r\\n  }],\\r\\n  &quot;pending&quot;: [{\\r\\n      &quot;clientId&quot;: &quot;a58e9...&quot;,\\r\\n      &quot;mode&quot;: &quot;exclusive&quot;,\\r\\n      &quot;name&quot;: &quot;lock-1&quot;\\r\\n    }, {\\r\\n      &quot;clientId&quot;: &quot;a58e9...&quot;,\\r\\n      &quot;mode&quot;: &quot;exclusive&quot;,\\r\\n      &quot;name&quot;: &quot;lock-1&quot;\\r\\n  }]\\r\\n}\\r\\n</pre>\\n<p>Notice in the JSON object above, an array of locks, pending or held, gets provided. We have covered the <code>mode</code> and <code>name</code> fields of a lock object. The third field, the <code>clientId</code> is a string which uniquely identifies the user agent environment, and gets provided by the browser.</p>\\n<p>Querying the state of all locks can help with diagnostic debugging. You could also query the lock manager to make decisions on how subsequent lock requests should get made, and how long acquired locks may get held.</p>\\n<h3>Conclusion</h3>\\n<p>To recap the normal flow which you as a developer go through when dealing with the Web Locks API:</p>\\n<ol>\\n<li>First, you create a lock request with <code>navigator.locks.request</code>. Recall that each lock has an identifier. A lock request which matches the name of an already held lock does not get granted until the held lock is released.</li>\\n<li>At some point, you acquire the lock you requested in step #1 and execute the callback code</li>\\n<li>As an optional step, you can query for the state of all locks with the <code>query()</code> method</li>\\n</ol>\\n<p>Tip: Utilizing the Web Locks API in your application does not guarantee the integrity or reliability of operations. For example, if you are dealing with network requests of financial transactions, you must always validate and approve such requests on the server-side. Where the Web Locks API can shine is when updating the user interface to explain to the user, for example: “You have already submitted this withdrawal request in another browser tab. That request is still pending, please wait.”</p>\\n<p>Web locks help manage your client-side application state and provide a more reliable user experience.</p>\\n<p><!-- If you want to use the Web Locks API in an unsupported browser, there is a <a href=\\\"https://github.com/inexorabletash/web-locks/blob/master/polyfill.js\\\">Web Locks polyfill</a> in the official Web Locks API repository on GitHub. Be sure to read the JavaScript comments and documentation for limitations of the polyfill, such as requiring <a href=\\\"http://caniuse.com/#feat=sharedworkers\\\">SharedWorker</a> support to function.-->If you want to use the Web Locks API in an unsupported browser, there was a Web Locks polyfill in the official Web Locks API repository on GitHub. Unfortunately, this has been removed for now but hopefully a replacement polyfill will arrive soon. Alternatively, if you’re looking for another solution to achieve cross-tab communication, check out <a href=\\\"https://github.com/nodeca/tabex\\\">tabex</a> on GitHub.</p>\\n<h2>Next steps</h2>\\n<div><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 2px;\\\" src=\\\"//wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Are you looking for help building applications that leverage modern best practices and features such as the Web Locks API? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>The Web Locks API is a new addition to the Web Platform which allows you to execute JavaScript in a lock, a resource which can potentially get shared with other browser tabs. This API is currently available in Chrome and other Chromium-based browsers with no major signals from other browser vendors. Use cases which are [&hellip;]</p>\\n\",\"protected\":false},\"author\":83,\"featured_media\":22104,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,3],\"tags\":[5],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Cross-tab Synchronization with the Web Locks API | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Cross-tab Synchronization with the Web Locks API | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"The Web Locks API is a new addition to the Web Platform which allows you to execute JavaScript in a lock, a resource which can potentially get shared with other browser tabs. This API is currently available in Chrome and other Chromium-based browsers with no major signals from other browser vendors. Use cases which are [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2018-08-14T17:03:13+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-24T13:47:01+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Cross-tab Synchronization with the Web Locks API\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/\\\",\\\"name\\\":\\\"Cross-tab Synchronization with the Web Locks API | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/#primaryimage\\\"},\\\"datePublished\\\":\\\"2018-08-14T17:03:13+00:00\\\",\\\"dateModified\\\":\\\"2020-01-24T13:47:01+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\"}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16214\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=16214\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16214/revisions\"}],\"predecessor-version\":[{\"id\":22105,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16214/revisions/22105\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22104\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=16214\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=16214\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=16214\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=16214\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":83,\"name\":\"Umar Hansa\",\"url\":\"https://umaar.com/\",\"description\":\"Front-end web developer in London!\",\"link\":\"https://wp.sitepen.com/blog/author/uhansa/\",\"slug\":\"uhansa\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Umar Hansa, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Umar Hansa, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/uhansa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/uhansa/\\\",\\\"name\\\":\\\"Umar Hansa, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\",\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22104,\"date\":\"2020-01-24T05:46:48\",\"slug\":\"cross-tab-synchronization-with-the-web-locks-api-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/cross-tab-synchronization-with-the-web-locks-api/cross-tab-synchronization-with-the-web-locks-api-2/\",\"title\":{\"rendered\":\"Cross-tab Synchronization with the Web Locks API\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Cross-tab Synchronization with the Web Locks API | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Cross-tab Synchronization with the Web Locks API | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-24T13:46:53+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\\\",\\\"name\\\":\\\"Cross-tab Synchronization with the Web Locks API | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-24T13:46:48+00:00\\\",\\\"dateModified\\\":\\\"2020-01-24T13:46:53+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Cross-tab Synchronization with the Web Locks API\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\",\"sizes\":{\"medium\":{\"file\":\"Cross-tab-Synchronization-with-the-Web-Locks-API-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API-300x158.png\"},\"large\":{\"file\":\"Cross-tab-Synchronization-with-the-Web-Locks-API-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API-1024x538.png\"},\"thumbnail\":{\"file\":\"Cross-tab-Synchronization-with-the-Web-Locks-API-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API-150x150.png\"},\"medium_large\":{\"file\":\"Cross-tab-Synchronization-with-the-Web-Locks-API-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API-768x403.png\"},\"full\":{\"file\":\"Cross-tab-Synchronization-with-the-Web-Locks-API.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Cross-tab-Synchronization-with-the-Web-Locks-API.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22104\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:31:36 GMT"],["expires","Mon, 31 Aug 2020 15:31:36 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}