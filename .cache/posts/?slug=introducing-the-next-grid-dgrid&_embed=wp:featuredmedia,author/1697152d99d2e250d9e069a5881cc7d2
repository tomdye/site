{"value":{"body":"[{\"id\":2893,\"date\":\"2011-10-26T13:20:50\",\"date_gmt\":\"2011-10-26T20:20:50\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=2893\"},\"modified\":\"2011-10-26T13:20:50\",\"modified_gmt\":\"2011-10-26T20:20:50\",\"slug\":\"introducing-the-next-grid-dgrid\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/introducing-the-next-grid-dgrid/\",\"title\":{\"rendered\":\"Introducing the Next Grid: dgrid\"},\"content\":{\"rendered\":\"<div style=\\\"background:#FFFFB1; padding:1em;\\\"><strong>Notice:</strong> This post is now several years old and covers early versions of dgrid prior to 1.x. We recommend starting with the <a href=\\\"http://dgrid.io/#tutorials\\\">dgrid tutorials</a> to leverage dgrid 1.x.</div>\\n<p>We have recently reached the alpha milestone in the development of dgrid, a new component for creating lists and grids. Built on the latest Dojo technology, dgrid is <a href=\\\"https://www.sitepen.com/blog/2011/08/05/code-design-and-approach-for-the-next-grid/\\\">designed</a> to be lightweight, fast, mobile-ready, and easy-to-use. This SitePen-led project brings the best innovations and techniques from extensive experience on the DataGrid, to create a brand new simple and fast architecture. Let&#8217;s explore some of the examples included in the project to demonstrate how to use it.</p>\\n<p><!--more--></p>\\n<h2>Download/Installation</h2>\\n<p><a href=\\\"https://github.com/SitePen/dgrid\\\">dgrid</a> is a package available on GitHub. To install the grid, you can either <a href=\\\"https://github.com/SitePen/dgrid\\\">download it</a> (and its dependencies) or <a href=\\\"https://github.com/SitePen/dgrid/blob/master/README.md\\\">install dgrid using npm or bower</a>.</p>\\n<h2>Getting Started</h2>\\n<p>The two most basic modules in the dgrid package are List and Grid.  List provides the base functionality for rendering any kind of list.  Grid extends List, adding functionality for defining columns and displaying tabular data with headers.  Let&#8217;s take a look at how we can use the Grid module, as it is likely to be the primary topic of interest.</p>\\n<h2>Simple Grid</h2>\\n<p>The most basic usage of the Grid module is to simply take an array of objects and render them in tabular form. In this simple grid example, our dataset is an array of steps in a recipe that looks like:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar data = [\\n    {order: 1, name:&quot;preheat&quot;, description:&quot;Preheat your oven to 350Â°F&quot;},\\n    {order: 2, name:&quot;mix dry&quot;, description: \\n        &quot;In a medium bowl, combine flour, salt, and baking soda&quot;},\\n    ...\\n];\\n</pre>\\n<p>The only real configuration needed for the grid to render this data is column definitions. dgrid allows us to define columns with an object hash (or an array) where the property names correspond to object fields by default, and the values are configuration objects where we can specify the sortability of a column, the label, and other information. The property value can alternately be a simple string, which is interpreted as the label of the column (used in the column header). In our example, we define our columns to render:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar columns = {\\n    order: &quot;step&quot;, // simply defining the label\\n    name: {}, // reuses key (field name) as label\\n    description: { label: &quot;what to do&quot;, sortable: false }\\n};\\n</pre>\\n<p>We have defined three columns. The first will render the <code>order</code> property for each object, the second will render the <code>name</code> property, and the third will render the <code>description</code> property. The first two columns will be sortable by default (you can click on the column header to sort it), and since no <code>label</code> is defined in the column definition for the <code>name</code> field, the column header defaults to the property name. The first column uses a string as the property value which defines the column name (equivalent to <code>order: { label: \\\"step\\\" }</code>).</p>\\n<p>With our column configuration we can now easily instantiate our grid. We just provide the columns and give the id of a target element to the Grid module/constructor:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequire([&quot;dgrid/Grid&quot;, &quot;dojo/domReady!&quot;],\\n    function(Grid){\\n        // var data = ..., columns = ..., as above\\n        var grid = new Grid({\\n            columns: columns\\n        }, &quot;grid&quot;); // id of target element\\n        ...\\n</pre>\\n<p>And then to render the data:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n        grid.renderArray(data);\\n</pre>\\n<p>With all of these examples, feel free to check the <a href=\\\"https://github.com/SitePen/dgrid/wiki\\\">API documentation</a> or <a href=\\\"https://github.com/SitePen/dgrid/blob/master/README.md\\\">README</a> for more information on specific methods and properties.</p>\\n<h3>Skinning</h3>\\n<p>Typically we will also want to apply a skin to our grid. It should be noted that the grid utilizes CSS best practices of structure and skin separation. The structural CSS required for the grid is automatically dynamically loaded as a dependency. However, we can optionally <a href=\\\"http://dgrid.io/js/dgrid/test/skin.html\\\">choose a look and feel</a> with one of several provided themes.</p>\\n<p>For example, we could easily apply the Claro theme by adding the following to our page:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;head&gt;\\n    ...\\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;css/skins/claro.css&quot;&gt;\\n&lt;/head&gt;\\n&lt;body class=&quot;claro&quot;&gt;\\n    ...\\n&lt;/body&gt;\\n</pre>\\n<p>We can also easily create custom themes. Because the structural CSS is completely separate, there are only a few rules that need to be specified to provide a new color scheme.</p>\\n<h2>Store-driven Grid</h2>\\n<p>Next we will create a grid driven by an <a href=\\\"https://www.sitepen.com/blog/2011/02/15/dojo-object-stores/\\\">object store</a>, an API based on the HTML5 IndexedDB API. It can be used with data providers that wrap in-memory data, JSON/REST-based data, or any other source.</p>\\n<p>Store-driven grids are critical for scaling up to large data sets, as they allow the grid to interact with the data provider and only retrieve the data needed for the visible set of rows. The data provider implements querying, sorting, and paged retrieval of data from the data source. The grid then provides virtual paging where it will request data from the data source as the rows are scrolled into view. It will request sorted data in response to header clicks. The store-driven grids can also automatically send data changes back to the data provider in response to editing cells (more on that later).</p>\\n<p>Let&#8217;s start out by using <a href=\\\"http://dojotoolkit.org/reference-guide/dojo/store/Memory.html\\\"><code>dojo/store/Memory</code></a>, a simple store based on an in-memory JavaScript array.  This can later be substituted by an alternate <code>dojo/store</code> implementation, such as the <a href=\\\"http://dojotoolkit.org/reference-guide/dojo/store/JsonRest.html\\\">JsonRest store</a>, which is a great choice for RESTful JSON communication with a server with integrated support for sorting and paging.</p>\\n<p>To create the Memory store, we simply instantiate it with an array of data:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndefine([&quot;dojo/store/Memory&quot;], function(Memory){\\n    var testStore = new Memory({data:arrayOfData});\\n    ...\\n</pre>\\n<p>To use the store with a grid, we will use the OnDemandGrid module/constructor. We provide the store to the constructor:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequire([&quot;dgrid/OnDemandGrid&quot;, &quot;dojo/store/Memory&quot;],\\n    function(Grid, Memory){\\n        var testStore = new Memory({data:arrayOfData});\\n        var grid = new Grid({\\n            store: testStore,\\n            columns: columns\\n        }, &quot;grid&quot;);\\n        ...\\n</pre>\\n<p>The grid will now immediately query the store for data, retrieving limited blocks or pages of data. If we click on any of the sortable column headers, the grid will re-query the store automatically. The grid can also instantly respond to changes in the underlying data provider if the store supports observation of query results (often achieved by wrapping it with the <a href=\\\"http://dojotoolkit.org/reference-guide/dojo/store/Observable.html\\\">Observable module</a>).</p>\\n<p>We can also provide a base query to be passed to the store when queries are executed, by including a <code>query</code> property on the grid:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar grid = new Grid({\\n    store: testStore,\\n    query: someQuery,\\n    ...\\n});\\n</pre>\\n<h2>Styling Columns</h2>\\n<p>dgrid is designed to be extremely fast and follow styling best practices, achieving column styling via CSS rules. Each column is assigned class names based on the column id and field, of the form &#8220;column-<id>&#8221; and &#8220;field-<name>&#8220;. For example, to specify a width and background color for the &#8220;description&#8221; column we defined above, we can add CSS:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\n.field-description {\\n    width: 50em;\\n    background-color: blue;\\n}\\n</pre>\\n<h2>Adding Functionality with Mixins</h2>\\n<p>dgrid is designed to easily support adding functionality to the list or grid instance, via the standard mixin composition mechanisms in Dojo via <code>dojo/_base/declare</code>. dgrid includes several mixin modules:</p>\\n<ul>\\n<li><code>dgrid/Keyboard</code>: Adds keyboard navigation support</li>\\n<li><code>dgrid/Selection</code>: Adds row selection support</li>\\n<li><code>dgrid/CellSelection</code>: Adds cell selection support (extends <code>dgrid/Selection</code>)</li>\\n<li><code>dgrid/ColumnSet</code>: Adds support for sets of column to provide column locking or independent horizontal scrolling</li>\\n</ul>\\n<p>In addition to these &#8220;core&#8221; mixins, there is an &#8220;extensions&#8221; subfolder containing additional mixins which add functionality that is potentially useful, but less commonly desired:</p>\\n<ul>\\n<li><code>dgrid/extensions/DnD</code>: Adds drag&#8217;n&#8217;drop support</li>\\n<li><code>dgrid/extensions/ColumnResizer</code>: Adds column resizing support</li>\\n</ul>\\n<p>In this example, we will add keyboard navigation and row selection support to our grid. We can quickly do this with an anonymous inline <code>dojo/_base/declare</code> instantiation that creates a Grid combined with the Selection and Keyboard mixins:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequire([&quot;dgrid/OnDemandGrid&quot;,&quot;dgrid/Selection&quot;, &quot;dgrid/Keyboard&quot;, &quot;dojo/_base/declare&quot;],\\n    function(Grid, Selection, Keyboard){\\n        declare([Grid, Selection, Keyboard])({\\n            store: testStore,\\n            columns: columns\\n        }, &quot;grid&quot;);\\n        ...\\n</pre>\\n<p><a href=\\\"http://dgrid.io/js/dgrid/test/common_cases.html\\\">View the example (see the first grid).</a></p>\\n<h3>Column Plugins</h3>\\n<p>The Keyboard and Selection mixins are grid-level plugins, but we can create and use column-level plugins as well. Column plugin modules expose functions to be applied to a column definition in our set of columns.</p>\\n<p>One such plugin is the dgrid/editor plugin, which will make cells in the target column editable. With our current sample grid, we can make certain columns editable using this plugin:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequire([&quot;dgrid/OnDemandGrid&quot;,&quot;dgrid/Selection&quot;, &quot;dgrid/Keyboard&quot;,\\n    &quot;dgrid/editor&quot;],\\n    function(Grid, Selection, Keyboard, editor){\\n        var columns = {\\n            // always editable:\\n            col1: editor({name: &quot;Column 1&quot;}, &quot;text&quot;),\\n            col2: &quot;Column 2&quot;,\\n            // editable on double-click:\\n            col3: editor({name: &quot;Column 3&quot;}, &quot;text&quot;, &quot;dblclick&quot;),\\n            col4: {name: &quot;Column 4&quot;},\\n            // editable on single-click:\\n            &quot;last-col&quot;: editor({name: &quot;Column 5&quot;, field: &quot;col5&quot;},\\n                &quot;text&quot;, &quot;click&quot;)\\n        };\\n        ...\\n    });\\n</pre>\\n<p>With this you can now edit cells in the grid, similar to the first grid in <a href=\\\"http://dgrid.io/js/dgrid/test/common_cases.html\\\">this example page</a> (however, the example page activates all its Editors on double-click).</p>\\n<p>The editor plugin can do much more than render a simple textbox, however. The editor plugin takes three arguments. The first is the standard column definition object. The second is the editor to use. The third is the event to trigger activation of the editor.</p>\\n<p>If a string is provided as the second argument, a plain HTML input will be used, and the value of this argument identifies the <code>type</code> of the input to use. Common types would include &#8220;radio&#8221;, &#8220;checkbox&#8221;, or &#8220;text&#8221;. The second argument can alternately be a Dijit form widget constructor, in which case an instance of the widget is used as the editor.</p>\\n<p>The third argument defines the trigger event for the editor. Common events to use would be &#8220;click&#8221; or &#8220;dblclick&#8221;, for mouse events, or the custom &#8220;dgrid-cellfocusin&#8221; event, which handles both mouse- and keyboard-driven focus events. If the third argument is omitted, the editor will always be visible.</p>\\n<p>Here is an example of creating radio and checkbox columns (with no trigger event so the radio and checkbox will always be shown):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n    var columns = [\\n        editor({name: &quot;CheckBox&quot;, field: &quot;bool&quot;}, &quot;checkbox&quot;),\\n        editor({name: &quot;Radio&quot;, sortable: false}, &quot;radio&quot;),\\n        ...\\n    ];\\n</pre>\\n<p>As stated above, we can also include Dijit form widgets as editors for cells. We simply provide the widget constructor as the second argument. Here is an example of using the DateTextBox (for dates), Slider (for numbers), and NumberSpinner (for numbers) as editors for column cells:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequire([&quot;dgrid/editor&quot;, &quot;dijit/form/DateTextBox&quot;, \\n    &quot;dijit/form/HorizontalSlider&quot;, &quot;dijit/form/NumberSpinner&quot;], \\n    function(editor, DateTextBox, Slider, NumberSpinner){\\n        var columns = [\\n            editor({name: &quot;A Date&quot;, field: &quot;date&quot;},\\n                DateTextBox),\\n            editor({name: &quot;Real Number&quot;, field: &quot;floatNum&quot;}, \\n                Slider),\\n            editor({name: &quot;Integer&quot;, field: &quot;integer&quot;}, \\n                NumberSpinner),\\n            ...\\n        ];\\n        ...\\n    });\\n</pre>\\n<p>The editor also supports a function property named <code>canEdit</code> in the column definition object. If provided, this function defines whether a cell in a particular row is editable. For each row/cell, the <code>canEdit</code> function is called and passed the object to be rendered. If <code>canEdit</code> returns a truthy value, the cell will be editable. For example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n    var columns = [\\n        editor({name: &quot;Text editable if checkbox checked&quot;, field: &quot;text&quot;, \\n            canEdit: function(object){\\n                return object.bool;\\n            }\\n        }, &quot;text&quot;, &quot;dblclick&quot;),\\n        ...\\n    ];\\n</pre>\\n<p>We can see these different editor examples together on <a href=\\\"http://dgrid.io/js/dgrid/test/Editor.html\\\">this page</a>.</p>\\n<h3>Saving Changes</h3>\\n<p>What happens when we edit a cell in an OnDemandGrid? The grid will store the change in its cache of dirty objects and be ready to save the changes on demand. To save the changes, we simply call the <code>save()</code> method on the grid. Any dirty data will then be sent to the store. Using the Memory store, custom handling would need to be implemented if this data is to be persisted in any way. The JsonRest store will automatically send changes back to the server through PUT requests.</p>\\n<p>Because OnDemandGrid can automatically respond to changes in data, it is easy to see the editing and saving capability in action. When an OnDemandGrid references a store instance which supports the <code>observe</code> method on its query results, the grid will reflect any changes made or reported at the store level.  This can be seen in action in the second and third examples on <a href=\\\"http://dgrid.io/js/dgrid/test/OnDemand.html\\\">this page</a>.</p>\\n<p>When using the editor column plugin, it is possible to cause edits to a column to automatically save changes to the Grid. Set the <code>autoSave</code> property in the column definition to <code>true</code>, and any changes will be saved as soon as a cell in that column loses focus after being edited.</p>\\n<h3>Tree</h3>\\n<p>Another powerful column plugin is the dgrid/tree plugin, which allows for expandable rows to easily navigate hierarchical data. Like Editor and other column plugins, this module returns a function to be applied to a column definition.</p>\\n<p>To use the tree plugin, we need a store which provides a <code>getChildren</code> method, which implements the logic for finding the children of an object. In this example, we create a <code>getChildren</code> method that simply gets the children array property, then iterates through the references and retrieves each child item:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar testStore = new Memory({\\n    data: arrayOfData,\\n    getChildren: function(parent){\\n        var store = this;\\n        // Note that arrayUtil is a local reference to dojo/_base/array\\n        return arrayUtil.map(parent.children, function(child){\\n            return store.get(child._reference);\\n        });\\n    },\\n    ...\\n</pre>\\n<p>We can also (optionally) provide a <code>mayHaveChildren</code> method which will indicate whether a given object has children (and thus whether or not to display an expansion icon).</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar testStore = new Memory({\\n    data: arrayOfData,\\n    mayHaveChildren: function(parent){\\n        return parent.children;\\n    },\\n    ...\\n});\\n</pre>\\n<p>And now we simply define the tree column:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar treeGrid = new Grid({\\n    store: testCountryStore,\\n    query: {type: &quot;continent&quot;},\\n    columns: {\\n        tree({label: &quot;Name&quot;, field:&quot;name&quot;, sortable: false}),\\n        ...\\n    }\\n});\\n</pre>\\n<p>Another thing to note about this particular example is that we are using a query that will only retrieve the top level items for the initial rendering of the grid. <a href=\\\"http://dgrid.io/js/dgrid/test/Tree.html\\\">In our example</a>, only objects with a type of &#8220;continent&#8221; are top level items; we expand those to see the children, which are countries and cities.</p>\\n<h2>Plain Lists and Custom Row Rendering</h2>\\n<p>One of the most direct and low-level ways to use the dgrid package is to use the List module. This module is the base class, and provides basic scrolling (including mobile touch scrolling), row rendering, and row access which the Grid module builds upon. We can directly use the List for situations when we don&#8217;t want the grid&#8217;s tabular layout, or we need to use our own custom row rendering. We can use the List module the same way as the Grid, simply rendering an array of values or objects, or use OnDemandList (the store-driven version of the List module) to render data from a store. To render an array, we could simply do the following:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrequire([&quot;dgrid/List&quot;], function(List){\\n    var list = new List({}, &quot;list&quot;);\\n    list.renderArray(arrayOfStrings);\\n});\\n</pre>\\n<p>See <a href=\\\"http://dgrid.io/js/dgrid/test/common_cases.html\\\">our example page</a> again (under the second heading, to the right) for an example List component with Selection and Keyboard functionality mixed in.</p>\\n<p>If the the array has strings as values (or other values with appropriate <code>toString()</code> methods), it can be directly rendered by the List. If we have an array of objects (or are getting data from a store), we can implement our own <code>renderRow</code> method to render the objects:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar list = new List({\\n  renderRow: function(object, options){\\n    return dojo.create(&quot;div&quot;, {\\n      innerHTML: &quot;First name: &quot; + object.first + \\n        &quot; last name: &quot; + object.last\\n    });\\n  }\\n}, &quot;list&quot;);\\n</pre>\\n<h3>Check it Out</h3>\\n<p>Check out the <a href=\\\"https://github.com/sitepen/dgrid\\\">dgrid project page</a> for more documentation, issue tracking, and source code. We certainly encourage you to peruse the source. It is remarkably small due to the minimalistic design principles, making it very accessible and easy to learn and extend.</p>\\n<p>In addition, the <a href=\\\"http://dgrid.io/js/dgrid/test/\\\">dgrid test pages</a> and a few <a href=\\\"http://dgrid.io/#demos\\\">demos</a> are available.  (These are part of the source package, so you can tinker with them on your own server as well.)</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Notice: This post is now several years old and covers early versions of dgrid prior to 1.x. We recommend starting with the dgrid tutorials to leverage dgrid 1.x. We have recently reached the alpha milestone in the development of dgrid, a new component for creating lists and grids. Built on the latest Dojo technology, dgrid [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":22075,\"comment_status\":\"open\",\"ping_status\":\"open\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[350,45,112],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Introducing the Next Grid: dgrid | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/introducing-the-next-grid-dgrid/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Introducing the Next Grid: dgrid | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Notice: This post is now several years old and covers early versions of dgrid prior to 1.x. We recommend starting with the dgrid tutorials to leverage dgrid 1.x. We have recently reached the alpha milestone in the development of dgrid, a new component for creating lists and grids. Built on the latest Dojo technology, dgrid [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/introducing-the-next-grid-dgrid/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2011-10-26T20:20:50+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/introducing-the-next-grid-dgrid/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/introducing-the-next-grid-dgrid/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/introducing-the-next-grid-dgrid/\\\",\\\"name\\\":\\\"Introducing the Next Grid: dgrid | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/introducing-the-next-grid-dgrid/#primaryimage\\\"},\\\"datePublished\\\":\\\"2011-10-26T20:20:50+00:00\\\",\\\"dateModified\\\":\\\"2011-10-26T20:20:50+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/introducing-the-next-grid-dgrid/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/2893\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=2893\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/2893/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=2893\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=2893\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=2893\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=2893\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:38:53 GMT"],["expires","Mon, 31 Aug 2020 15:38:53 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}