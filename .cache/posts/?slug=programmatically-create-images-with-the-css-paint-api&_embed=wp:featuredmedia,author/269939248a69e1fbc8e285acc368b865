{"value":{"body":"[{\"id\":16250,\"date\":\"2018-08-27T09:00:05\",\"date_gmt\":\"2018-08-27T16:00:05\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=16250\"},\"modified\":\"2020-01-24T05:39:20\",\"modified_gmt\":\"2020-01-24T13:39:20\",\"slug\":\"programmatically-create-images-with-the-css-paint-api\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/\",\"title\":{\"rendered\":\"Programmatically create images with the CSS Paint API\"},\"content\":{\"rendered\":\"<p>The <a href=\\\"https://www.w3.org/TR/css-paint-api-1/\\\">CSS Paint API</a> is a modern web platform feature to programmatically create images in JavaScript which are rendered to the page when referenced by CSS. You create images using the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial\\\">Canvas API</a>, an API with which you may already be familiar.</p>\\n<p><!--more--></p>\\n<p>You can reference image URLs in CSS. For example in the background-image CSS property, you may write code like this:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.logo {\\r\\n    background-image: url('logo.png');\\r\\n}\\r\\n</pre>\\n<p>Which typically follows this flow:</p>\\n<p><img class=\\\"alignnone size-full wp-image-16251\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/FlowBeforeCSSPaint.png\\\" alt=\\\"Flow Before CSS Paint\\\" width=\\\"515\\\" height=\\\"140\\\" /></p>\\n<p>Now, with the CSS Paint API, you can do:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.logo {\\r\\n    // fallback image\\r\\nbackground-image: url('logo.png');    \\r\\n\\r\\n// CSS Paint API\\r\\nbackground-image: paint(logo);\\r\\n}\\r\\n</pre>\\n<p>Which follows this flow:</p>\\n<p><img class=\\\"alignnone size-full wp-image-16252\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/FlowWithCSSPaint.png\\\" alt=\\\"Flow With CSS Paint\\\" width=\\\"390\\\" height=\\\"339\\\" /></p>\\n<p>You can use the CSS paint() function anywhere that you would expect a CSS image.</p>\\n<h2>The CSS Paint API as a specification</h2>\\n<p>The <code>paint</code> function you see in the latter code example is part of CSS Paint API which is in turn part of the <a href=\\\"https://github.com/w3c/css-houdini-drafts\\\">Houdini project</a> — a collection of new browser APIs. Houdini currently has limited <a href=\\\"https://ishoudinireadyyet.com/\\\">browser support</a>, and the CSS Paint API is <a href=\\\"https://caniuse.com/#search=css%20paint%20api\\\">currently available</a> in Chrome and Chromium-based browsers.</p>\\n<h2>Worklets</h2>\\n<p>This JavaScript code you write which programmatically creates images gets referred to as a Paint Worklet. A Paint Worklet has some critical constraints, such as:</p>\\n<ul>\\n<li>No network access</li>\\n<li>No storage access</li>\\n<li>Script lifetime does not get guaranteed; it can get killed at any point</li>\\n<li>No timer functions available like requestAnimationFrame or setInterval</li>\\n</ul>\\n<p>A <a href=\\\"https://www.w3.org/TR/worklets-1/#intro\\\">Worklet</a> is an extension point into the browser rendering pipeline. Web Specifications define additional Worklets besides Paint Worklets. These include:</p>\\n<p><a href=\\\"https://developers.google.com/web/updates/2017/12/audio-worklet\\\">Audio Worklets</a> — for dealing for Web Audio<br />\\n<a href=\\\"https://wicg.github.io/animation-worklet/\\\">Animation Worklets</a> — can be used to <a href=\\\"https://dojo.io/tutorials/008_animations/\\\">create animations</a><br />\\n<a href=\\\"https://drafts.css-houdini.org/css-layout-api-1/#layout-worklet\\\">Layout Worklets</a> — handling of element geometry</p>\\n<p>All of these Worklets inherit from the parent <a href=\\\"https://www.w3.org/TR/worklets-1/#intro\\\">Worklet specification</a>; a new type of standard extension point which some new browser APIs use under the hood. A quick skim through the specification document highlights an important concept: Worklets are fairly independent to your usual main thread JavaScript, and they operate in a similar way to <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\\\">Web Workers</a>.</p>\\n<p>The specification grants user agents some flexibility into how a Worklet executes and the order in which Worklets get executed. Because of these facts, and many others, it’s recommended that developer-defined Worklets are <a href=\\\"https://www.w3.org/TR/worklets-1/#code-idempotency\\\">idempotent</a>. Consider the limitations we covered earlier and notice how restricting access to the network, for example, helps your class Worklet class achieve idempotency.</p>\\n<p>Your Paint Worklet can execute once or many times and is all based on whether the browser determines the affected element needs repainting. Examples of repaint triggers can include:</p>\\n<p>Changes in CSS properties and/or their values<br />\\nChanges triggered by hover styles<br />\\nJavaScript style changes<br />\\nWindow resizing</p>\\n<p>Why an element needs to get repainted is outside the scope of this post, but feel free to learn more about it in this 7-minute video: <a href=\\\"https://www.youtube.com/watch?v=n1cKlKM3jYI\\\">An Introduction to Browser Rendering</a>.</p>\\n<h2>Simple code example</h2>\\n<p>Here’s a minimal amount of code for creating and utilizing a Paint Worklet:</p>\\n<p>Step 1: Write the HTML and CSS to use a background image on an element:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;div class=&quot;element&quot;&gt;hello&lt;/div&gt;\\r\\n</pre>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.element {\\r\\n    background-image: paint(my-paint-worklet);\\r\\n}\\r\\n</pre>\\n<p>Step 2: Import your Paint Worklet file from your main HTML file:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;script&gt;\\r\\nCSS.paintWorklet.addModule('worklet.js');\\r\\n&lt;/script&gt;\\r\\n</pre>\\n<p>Step 3: Implement the Paint Worklet using canvas semantics:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// worklet.js\\r\\nclass MyWorklet {\\r\\n    paint(ctx) {\\r\\n        ctx.fillStyle = 'green';\\r\\n        ctx.fillRect(0, 0, 20, 20);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>Step 4: Register the Paint Worklet:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// Register the worklet using...\\r\\n// ...the built-in registerPaint() function\\r\\nregisterPaint('my-paint-worklet', MyWorklet);\\r\\n</pre>\\n<p>Study the four steps shown above and note the following:</p>\\n<ul>\\n<li>The CSS Paint API exposes a <code>paint()</code> function in CSS allowing you to refer to registered Paint Worklets.</li>\\n<li>Your Paint Worklet module does not get imported through script tags, but rather through the <code>CSS.paintWorklet.addModule()</code> method. This use of the term modules is unrelated to <a href=\\\"https://www.sitepen.com/blog/2017/10/26/state-of-modules-in-javascript/\\\">ES Modules.</a></li>\\n<li>The ID you pass to the <code>registerPaint</code> function in the JavaScript Worklet, and the ID you pass to the paint function in CSS must match. IDs must be unique.</li>\\n<li>The <code>registerPaint</code> function in step 4 is only available in Paint Worklets and must be registered there.</li>\\n</ul>\\n<h2>Paint method signature</h2>\\n<p>The paint method receives the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\\\">canvas context</a> as the first argument. If you wish to explore other arguments which the paint method receives, you can discover them by logging them to the console:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass MyWorklet {\\r\\n    paint(...args) {\\r\\n        console.log(args);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>This example uses <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters\\\">rest parameters</a>, part of ES2015 and newer JavaScript syntax, to collect all arguments into an array named <code>args</code>.</p>\\n<p>If you are following along with this simple code example, notice an array of three items gets logged to the Console Panel:</p>\\n<ul>\\n<li>The <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\\\">canvas context,</a> which you may be familiar with from canvas-related code you’ve worked on previously</li>\\n<li>Paint size, an object containing a width and height attribute which represents the dimensions of the element in question</li>\\n<li>As the third and final argument, notice an object of the type <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/StylePropertyMapReadOnly\\\">StylePropertyMapReadOnly</a>. This map represents the input properties for the paint worklet which gets covered in the following section</li>\\n</ul>\\n<h2>Input properties</h2>\\n<p>A handy way to explain the input properties feature of the Paint API is with a code example. Take note of the following Paint Worklet class definition.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass MyWorklet {\\r\\n    static get inputProperties() {\\r\\n        return ['--custom-property-1', '--custom-property-2'];\\r\\n    }\\r\\n\\r\\n    paint(ctx, geometry, inputProperties) {\\r\\n        const customProp1 = inputProperties.get('--custom-property-1');\\r\\n        const customProp2 = inputProperties.get('--custom-property-2');\\r\\n        console.log(customProp1.toString(), customProp2.toString());\\r\\n        ctx.fillStyle = 'green';\\r\\n        ctx.fillRect(0, 0, 20, 20);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>Tip: You can read more about the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static\\\">static keyword on MDN</a> &#8211; it’s part of part of ES2015 and is not specific to Worklets.</p>\\n<p>The static <code>inputProperties</code> method returns an array of properties you wish to make available to the worklet. The final part of this demonstration on input properties is to use <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables\\\">CSS Custom Properties</a> to initialize those variables to a value. In the CSS:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.container {\\r\\n    background-image: paint(my-paint-worklet);\\r\\n    --custom-property-1: 100;\\r\\n    --custom-property-2: 'some string';\\r\\n}\\r\\n</pre>\\n<p>You can use JavaScript to manipulate CSS custom properties. For example, if you execute the following code from outside a paint worklet:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst container = document.querySelector('.container');\\r\\ncontainer.style.cssText = '--custom-property-1: 200';\\r\\n</pre>\\n<p>Using this technique of initializing and updating CSS custom properties from outside the scope of a Paint Worklet, you can theme your Paint Worklet using familiar CSS syntax. Paint Worklets can also get reused across multiple areas of your web application with different theming rules applied based on different contexts.</p>\\n<h2>Animation</h2>\\n<p>There are no immediately apparent ways to animate background images via the CSS Paint API. If you recall, the limitations include a lack of timer APIs within a worklet such as <code>setInterval</code> or <code>requestAnimationFrame</code>. Browser repainting allows you to achieve the effect of animation.</p>\\n<p>The browser typically invokes the paint method of your worklet as and when it detects a repaint is required. If you change your CSS Custom Property Values which get declared in the static input properties method of your worklet, the browser is likely to determine a repaint is required.</p>\\n<p>Here’s a minimal code example for achieving animation through the CSS Paint API. In this example, you can start by applying a CSS Custom Property within CSS:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.container {\\r\\n    background-image: paint(my-paint-worklet);\\r\\n    width: 200px;\\r\\n    height: 200px;\\r\\n    --ball-y-pos: 45;\\r\\n}\\r\\n</pre>\\n<p>Moreover, a Paint Worklet definition as follows:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass MyWorklet {\\r\\n    static get inputProperties() {\\r\\n        return [\\r\\n            '--ball-y-pos'\\r\\n        ];\\r\\n    }\\r\\n\\r\\n    paint(ctx, {width, height}, inputProperties) {\\r\\n        const ballYPosValue = inputProperties.get('--ball-y-pos');\\r\\n\\r\\n        const ballYPos = parseInt(ballYPosValue.toString());\\r\\n\\r\\n        ctx.fillStyle = 'green';\\r\\n        ctx.beginPath();\\r\\n        ctx.arc(100, ballYPos, 10, 0, 2 * Math.PI);\\r\\n        ctx.fill();\\r\\n    }\\r\\n}\\r\\n\\r\\nregisterPaint('my-paint-worklet', MyWorklet);\\r\\n</pre>\\n<p>Notice: A circle (<code>ctx.arc()</code>) gets drawn, but instead of a hardcoded value for the y position, a CSS Custom Property value gets used instead.</p>\\n<p>In the CSS code, the y position of the ball gets initialized to 45. The circle initially gets drawn at 45 pixels down the page. So far, nothing within the code is likely to trigger any repaints. To trigger a repaint, update the <code>--ball-y-pos</code> CSS Custom Property value.</p>\\n<p>Here’s the complete, main thread JavaScript to animate a ball moving down the page. The commented numbers in the code correspond to code explanations below the code snippet:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction init() {\\r\\n    // 1\\r\\n    const styleMap = document.querySelector('style').sheet.cssRules[0].styleMap;\\r\\n\\r\\n    // 2\\r\\n    let currentBallYPos = parseInt(styleMap.get('--ball-y-pos').toString());\\r\\n\\r\\n    const container = document.querySelector('.container');\\r\\n\\r\\n    function animate() {\\r\\n        // 3\\r\\n        container.style.setProperty('--ball-y-pos',  currentBallYPos++)\\r\\n\\r\\n        if (currentBallYPos &amp;gt; 200) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // 4\\r\\n        requestAnimationFrame(animate);\\r\\n    }\\r\\n\\r\\n    animate();\\r\\n}\\r\\n\\r\\ninit();\\r\\n</pre>\\n<p>Code explanations:</p>\\n<ol>\\n<li>Retrieve a map of existing CSS style rules; our goal is to find the initial ball position.</li>\\n<li>Parse the initial value of the ball’s y position. Tip: In the future, you’ll be able to parse CSS property values with the <a href=\\\"https://www.w3.org/TR/css-typed-om-1/\\\">CSS Typed Object Model</a>.</li>\\n<li>Increment the ball’s y position and update the CSS Custom Property.</li>\\n<li>Invoke the animate function for each available animation frame.</li>\\n</ol>\\n<h2>Debugging support</h2>\\n<p>Chrome supports DevTools debugging of a Paint Worklet, meaning you can add the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger\\\">debugger</a> keyword within the paint method of your Paint Worklet and DevTools pause at that line in question. Console logging statements behave as you would expect.</p>\\n<p>This behavior gets a special mention because, in the past, debugging JavaScript in different threads would not always work as expected.</p>\\n<h2>Browser Support</h2>\\n<p><a href=\\\"https://caniuse.com/#feat=css-paint-api\\\">CSS Paint API support</a> is currently available in Chrome and Chromium-based browsers. You can also check support programmatically through CSS and JavaScript.</p>\\n<h3>CSS Support Detection</h3>\\n<p>Recall that a reference to a Paint Worklet gets made in CSS code. You can use the CSS <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/@supports\\\">@supports</a></code> rule to detect support for the CSS <code>paint()</code> function:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n@supports (background-image: paint(my-paint-worklet)) {\\r\\n    /* CSS Paint API is supported */\\r\\n}\\r\\n</pre>\\n<h3>JavaScript Support Detection</h3>\\n<p>In JavaScript, you can use the following boolean expression to check for support:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nif (window.CSS &amp;amp;&amp;amp; 'paintWorklet' in CSS) {\\r\\n    // CSS Paint API is supported\\r\\n}\\r\\n</pre>\\n<p>Browsers which do not understand the <code>paint()</code> function call in CSS effectively discard that line of CSS and do not display the generated image. To improve this experience for your users, you can specify a fallback image to be displayed:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\nbackground-image: url('fallback.png');\\r\\nbackground-image: paint(my-paint-worklet);\\r\\n</pre>\\n<p>By ensuring the generated images are complementary and are not required to understand the critical content of your site, you can progressively enhance the user interface with generated images from a Paint Worklet only when support is present.</p>\\n<h2>Recap</h2>\\n<p>There are various code snippets and concepts which are worth being familiar with to use this API. Here’s a quick recap:</p>\\n<ul>\\n<li>The <code>addModule</code> method, e.g. <code>CSS.paintWorklet.addModule('worklet.js')</code>, triggers the resource download for the file <code>worklet.js</code>. You invoke this from your main JavaScript code</li>\\n<li>To reference your Paint Worklet from CSS code, use the paint function like this: <code>paint(my-paint-worklet)</code></li>\\n<li>The paint method of a Paint Worklet receives three arguments. 1) A canvas context. 2) Geometry information. 3) Input properties</li>\\n<li>Simply importing your paint worklet module is not enough, you must also register it with the <code>registerPaint</code> function available within the Worklet, like this: <code>registerPaint('my-paint-worklet', MyWorklet)</code></li>\\n<li>Input properties must get returned in an array from invoking the static <code>inputProperties()</code> method of the paint worklet</li>\\n<li>Your Paint Worklet can be executed multiple times and gets based upon when the browser determines a repaint is necessary</li>\\n</ul>\\n<p>The API is admittedly a bit strange given how some features are global functions and others hook off of a global CSS namespace.</p>\\n<h2>Further reading</h2>\\n<p>If you’re interested in researching more on the CSS Paint API, check out these resources:</p>\\n<ul>\\n<li><a href=\\\"https://www.w3.org/TR/css-paint-api-1/#paint-worklet\\\">CSS Paint API</a> specification</li>\\n<li>The <a href=\\\"https://css-tricks.com/the-css-paint-api/\\\">CSS Paint API</a> on CSS Tricks</li>\\n<li><a href=\\\"https://developers.google.com/web/updates/2018/01/paintapi\\\">CSS Paint API</a> Updates on the Google Developers Blog</li>\\n<li><a href=\\\"https://github.com/GoogleChromeLabs/houdini-samples/tree/master/paint-worklet\\\">Paint Worklet Demos</a> on GitHub</li>\\n<li>More <a href=\\\"https://vitaliy-bobrov.github.io/css-paint-demos/\\\">CSS Paint API demos</a></li>\\n<li><a href=\\\"https://css-houdini.rocks/\\\">CSS Houdini Showcase</a> on CSS Houdini</li>\\n</ul>\\n<h2>Conclusion</h2>\\n<p>There are multiple topics involved in what is a seemingly simple task: to paint an image to the screen. However, the CSS Paint API allows you to create images which are performant, responsive and reactive.</p>\\n<p>Next time you get tasked with applying a complex background image onto a page, consider the pros and cons of using the CSS Paint API to programmatically create a resolution independent image instead of a potentially large image resource.</p>\\n<p>Are you looking for helping build applications that leverage modern best practices and features such as the CSS Paint API? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>The CSS Paint API is a modern web platform feature to programmatically create images in JavaScript which are rendered to the page when referenced by CSS. You create images using the Canvas API, an API with which you may already be familiar.</p>\\n\",\"protected\":false},\"author\":83,\"featured_media\":22098,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[31,215,4,3,51],\"tags\":[5],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Programmatically create images with the CSS Paint API | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Programmatically create images with the CSS Paint API | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"The CSS Paint API is a modern web platform feature to programmatically create images in JavaScript which are rendered to the page when referenced by CSS. You create images using the Canvas API, an API with which you may already be familiar.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2018-08-27T16:00:05+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-24T13:39:20+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Programmatically create images with the CSS Paint API\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/\\\",\\\"name\\\":\\\"Programmatically create images with the CSS Paint API | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/#primaryimage\\\"},\\\"datePublished\\\":\\\"2018-08-27T16:00:05+00:00\\\",\\\"dateModified\\\":\\\"2020-01-24T13:39:20+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\"}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16250\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=16250\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16250/revisions\"}],\"predecessor-version\":[{\"id\":22099,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16250/revisions/22099\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22098\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=16250\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=16250\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=16250\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=16250\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":83,\"name\":\"Umar Hansa\",\"url\":\"https://umaar.com/\",\"description\":\"Front-end web developer in London!\",\"link\":\"https://wp.sitepen.com/blog/author/uhansa/\",\"slug\":\"uhansa\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Umar Hansa, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Umar Hansa, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/uhansa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/uhansa/\\\",\\\"name\\\":\\\"Umar Hansa, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\",\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22098,\"date\":\"2020-01-24T05:39:07\",\"slug\":\"programmatically-create-images-with-the-css-paint-api-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/programmatically-create-images-with-the-css-paint-api/programmatically-create-images-with-the-css-paint-api-2/\",\"title\":{\"rendered\":\"Programmatically create images with the CSS Paint API\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Programmatically create images with the CSS Paint API | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Programmatically create images with the CSS Paint API | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-24T13:39:11+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\\\",\\\"name\\\":\\\"Programmatically create images with the CSS Paint API | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-24T13:39:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-24T13:39:11+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Programmatically create images with the CSS Paint API\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\",\"sizes\":{\"medium\":{\"file\":\"Programmatically-create-images-with-the-CSS-Paint-API-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API-300x158.png\"},\"large\":{\"file\":\"Programmatically-create-images-with-the-CSS-Paint-API-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API-1024x538.png\"},\"thumbnail\":{\"file\":\"Programmatically-create-images-with-the-CSS-Paint-API-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API-150x150.png\"},\"medium_large\":{\"file\":\"Programmatically-create-images-with-the-CSS-Paint-API-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API-768x403.png\"},\"full\":{\"file\":\"Programmatically-create-images-with-the-CSS-Paint-API.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/08/Programmatically-create-images-with-the-CSS-Paint-API.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22098\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:33:05 GMT"],["expires","Mon, 31 Aug 2020 15:33:05 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}