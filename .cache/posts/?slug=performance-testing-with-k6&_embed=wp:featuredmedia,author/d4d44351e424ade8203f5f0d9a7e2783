{"value":{"body":"[{\"id\":23670,\"date\":\"2020-05-13T08:35:23\",\"date_gmt\":\"2020-05-13T15:35:23\",\"guid\":{\"rendered\":\"https://wp.sitepen.com/?p=23670\"},\"modified\":\"2020-06-11T16:06:54\",\"modified_gmt\":\"2020-06-11T23:06:54\",\"slug\":\"performance-testing-with-k6\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/performance-testing-with-k6/\",\"title\":{\"rendered\":\"Performance Testing with k6\"},\"content\":{\"rendered\":\"<p>There’s an old adage in the software industry &#8211; premature optimization is the root of all evil. A corollary to this should be &#8211; <a href=\\\"https://ubiquity.acm.org/article.cfm?id=1513451\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">no optimization is just as bad as premature optimization</a>.</p>\\n<p>It is often true that effort spent optimizing a system before features are properly implemented, correct and stable is effort wasted, but even a fully-implemented system can offer a terrible user experience if performance is never considered. Unfortunately when delivery timelines get squeezed, performance will more often than not take a back seat behind yet more system features &#8211; but even the best feature in the world is useless if users struggle to interact with it due to poor performance. Finding a balance between features and performance is key.</p>\\n<h2>What is load testing?</h2>\\n<p>While there are many performance testing tools available that cater to a variety of needs, in this post we’re going to focus on <a href=\\\"https://k6.io/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">performance testing of HTTP services using one tool in particular: k6</a>.</p>\\n<h2>Why k6 over other load testing tools?</h2>\\n<p>If you work in software engineering in 2020, chances are you or someone you know is writing a modern web application using TypeScript &#8211; or at the very least, ES6. That web application is also likely communicating with back-end services over HTTP, which implement the bulk of the application’s business logic and data management.</p>\\n<p>k6 allows you to transfer those JavaScript skills over to writing performance test scripts for your application’s HTTP back-end, cutting down the time and investment required to start seeing meaningful performance insights in your application.</p>\\n<p>While k6 supports JavaScript, it does not run on Node.js &#8211; it uses its own runtime engine written in Go. This is done for two main reasons: to reduce the surface area of its standard library to only focus on <a href=\\\"https://k6.io/docs/javascript-api\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">APIs relevant to performance testing</a>, and to help get script execution performance closer to bare metal than what <a href=\\\"https://k6.io/blog/comparing-best-open-source-load-testing-tools\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">performance testing tools based on more generic runtime engines can achieve</a> (warning: k6 bias in that article &#8211; although it is not the best performer out there!).</p>\\n<p>Overall, k6 strikes a good balance between scripting flexibility and execution performance. k6 also offers a comprehensive ecosystem beyond the test runner. This includes <a href=\\\"https://k6.io/docs/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">extensive documentation</a> on its features, as well as tools that can <a href=\\\"https://k6.io/docs/using-k6/session-recording-har-support\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">convert user journeys recorded from web browsers (HAR files)</a> or convert <a href=\\\"https://k6.io/blog/announcing-jmeter-to-k6-js-converter-tool\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">other pre-existing performance test scripts your team may already have if they use JMeter</a> (a popular performance testing tool for Java-based backends). k6 also has a commercial offering of a cloud-based performance script execution environment, including pre-configured analysis dashboards, allowing you to focus on writing your test scripts and implementing performance improvements within your application.</p>\\n<h2>How to get started with k6</h2>\\n<p>The quickest way to get up and running with meaningful performance testing and analysis is by using a <a href=\\\"https://k6.io/docs/results-visualization/influxdb-+-grafana#using-our-docker-compose-setup\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">docker-compose setup provided by the k6 team</a>. This gives you the ability to:</p>\\n<ul>\\n<li>Run performance test scripts with k6</li>\\n<li>Record performance metrics within an <a href=\\\"https://www.influxdata.com/products/influxdb-overview/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">InfluxDB database</a></li>\\n<li>Visualize and analyze collected performance metrics via <a href=\\\"https://grafana.com/grafana/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Grafana dashboards</a></li>\\n</ul>\\n<p>Assuming you already have docker installed, your first example performance test can be run with the following commands:</p>\\n<pre><code>git clone --depth 1 'https://github.com/loadimpact/k6'\\r\\ncd k6\\r\\ndocker-compose up -d\\r\\ndocker-compose run -v $PWD/samples:/scripts k6 run --no-usage-report -w /scripts/es6sample.js\\r\\n</code></pre>\\n<h2>Analyzing k6 output</h2>\\n<p>The <a href=\\\"https://k6.io/docs/getting-started/results-output\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">output</a> from the <code>k6 run</code> command shows a series of ticked or crossed verification steps, similar to traditional functional testing tools. These checks allow k6 scripts to assert observed performance metrics against expected thresholds, as well as to validate response values similar to regular functional testing. When testing more complex workflows in stateful applications, checking responses often includes extracting out values that need to get provided as parameters to later endpoints.</p>\\n<p>The last section of k6’s command line output is a summary table of performance gauges, mostly related to various stages of <a href=\\\"https://k6.io/docs/using-k6/metrics#http-specific-built-in-metrics\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">HTTP data negotiation and transmission</a>. Of particular interest is the <code>http_req_duration</code> metric, which represents the time spent sending a request, waiting for a response from the back-end, and eventually receiving the response data. This metric excludes client-side time spent looking up DNS entries and performing TLS handshakes, etc, so more closely represents the actual time taken for the application’s HTTP backend to perform its work.</p>\\n<p>The remaining HTTP timings are still relevant for overall performance analysis, as they could represent what a user of the application would experience for a given request, but these values are more specifically related to the environment in which k6 is getting run, so may not be entirely representative of a real-world user experience.</p>\\n<h2>Structure of a k6 performance script</h2>\\n<p>So what is k6 actually testing here? For the above example, open up the <code>./samples/es6sample.js file.</code> You’ll be most interested in the default function export &#8211; this is what k6 runs as a performance test iteration for a virtual user (VU). There are also a few other top-level sections of a k6 script used for more granular customization.</p>\\n<h3>Configuring execution</h3>\\n<p>The <code>options</code> export at the top of the script allows you to pre-configure <a href=\\\"https://k6.io/docs/using-k6/options\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">certain k6 runtime parameters</a>. You can omit this variable when writing your first performance test script, as you’ll most likely be executing your script from the command line and can customize from there. Embedding options within the script becomes useful when looking to automate performance testing, such as when integrating into your build pipeline alongside functional testing.</p>\\n<p>By default, when the <code>options</code> variable is not present, <code>k6 run [perfscript.js]</code> will use a single virtual user to execute a single iteration of your test script. This type of execution is useful when initially writing and debugging a performance test script. However it won’t give you much in the way of performance insight under any meaningful user load (although it is useful for <a href=\\\"http://performance smoke testing\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">performance smoke testing</a> new releases of your application).</p>\\n<p>You can ramp up the number of virtual users and total iterations using the <code>-u</code> and <code>-i</code> command-line arguments, respectively. If you want to limit the total script duration by time rather than the number of iterations, you can also use the <code>-d</code> argument.</p>\\n<h3>Testing performance</h3>\\n<p>As mentioned, the focus of the script is the default function. This function should include one or more <a href=\\\"https://k6.io/docs/using-k6/http-requests\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">HTTP requests</a> used to interact with relevant aspects of your application’s service layer. Each HTTP request will have its own performance metrics recorded that indicate how long the request took to complete &#8211; part of this timing will indicate how long the back-end services took to do their work.</p>\\n<p>Applications will typically require some form of authentication before other endpoints can get accessed, such as a <code>POST</code> request to a <code>/login</code> endpoint. k6 implicitly handles cookie management across multiple HTTP requests for a single virtual user, meaning there’s not much more to do beyond invoking your authentication endpoint, assuming your application relies on typical authorization or session cookies.</p>\\n<p>When testing multiple endpoints as part of a cohesive user journey through parts of your application, you will likely want to start grouping areas of your script to provide a structure closer to the user features, rather than a series of isolated HTTP requests. This grouping by user features is where the <code>group()</code> function comes into play (and it may also get nested) &#8211; although k6 also supports <a href=\\\"https://k6.io/docs/using-k6/tags-and-groups\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">tagging</a> for an added dimension to how your test can be structured.</p>\\n<p>There are a few <a href=\\\"https://k6.io/docs/testing-guides/api-load-testing#test-creation\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">different approaches</a> that can get taken when it comes to writing the bulk of your script. In essence, you can start from a blank slate and manually add requests for endpoints you are interested in testing, or you can start from an auto-generated script based on a <a href=\\\"https://k6.io/docs/using-k6/session-recording-har-support\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">HAR recording</a> of a typical user journey within your application’s user interface. Starting from a HAR can be useful for more complex journeys, as it will more accurately reflect everything a user needs to do when using your application &#8211; including any human processing delays between steps.</p>\\n<p>When ramping up the load generated by your performance script, there may be aspects of your application that you do not want to include in every test iteration, such as invariant static data that your web application may already be caching. You can use the additional <a href=\\\"http://setup and teardown phases of k6’s execution lifecycle\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">setup and teardown phases of k6’s execution lifecycle</a> to handle this.</p>\\n<h3>Using dynamic data</h3>\\n<p>Starting a k6 script from a HAR will require modification, as the initial journey will be hard-coded to only those parameter values used as part of the recording. This hard coding won’t provide broad coverage of application performance against a variety of different data sets.</p>\\n<p>Using dynamic data in your tests will likely require parameterized HTTP requests, including data extracted from previous responses. To help generate dynamic data, you can use <a href=\\\"https://k6.io/docs/using-k6/modules\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">k6’s module support</a> to import a library such as <a href=\\\"https://github.com/marak/Faker.js/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">faker.js</a>.</p>\\n<p>If this dynamic data appears in a POST request body to a static endpoint URL, there’s not too much of a problem when it comes to analyzing the performance of that single endpoint, but this requires more effort if the endpoint name itself needs to get parameterized. By default, k6 differentiates between every unique endpoint name when tagging the metrics it records. This differentiation helps if you aim to look at performance differences between <code>GET /product/a</code> versus <code>GET /product/b</code>, but it is not that helpful if you’re looking for overall performance analysis of <code>GET /product/{productId}</code> with a variety of parameters. To get around this, you can override the <code>name</code> tag for a given request &#8211; all requests using the same <code>name</code> alias will then have their metrics grouped.</p>\\n<h3>Bringing things together: example k6 script</h3>\\n<p>The following script highlights many of the dynamic data concepts described above:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\nimport { group, sleep, check } from 'k6';\\r\\nimport http from 'k6/http';\\r\\nimport faker from 'https://cdnjs.cloudflare.com/ajax/libs/Faker/3.1.0/faker.min.js';\\r\\n \\r\\nconst BASE_URL = `https://myapp.example.com`;\\r\\n \\r\\nconst COMMON_REQUEST_HEADERS = {\\r\\n   dnt: '1',\\r\\n   'user-agent': 'Mozilla/5.0',\\r\\n   'content-type': 'application/json',\\r\\n   accept: '*/*',\\r\\n   origin: BASE_URL,\\r\\n   referer: BASE_URL\\r\\n};\\r\\n \\r\\nfunction simulateUserInteractionDelay() {\\r\\n   sleep(1 + Math.random(3));\\r\\n}\\r\\n \\r\\nexport default function() {\\r\\n   group('myapp performance test', function() {\\r\\n       group('authenticate', function() {\\r\\n           let response = http.post(\\r\\n               `${BASE_URL}/login`,\\r\\n               '{username:&quot;whoami&quot;,password:&quot;verysecure&quot;}',\\r\\n               {\\r\\n                   tags: { name: '/login' },\\r\\n                   headers: COMMON_REQUEST_HEADERS\\r\\n               }\\r\\n           );\\r\\n           check(response, {\\r\\n               'can login': (res) =&gt; res.status === 201\\r\\n           });\\r\\n       });\\r\\n \\r\\n       simulateUserInteractionDelay();\\r\\n \\r\\n       let productId;\\r\\n       group('add product', function() {\\r\\n           let productName = faker.commerce.productName();\\r\\n \\r\\n           let response = http.post(`${BASE_URL}/product`, `{productName: &quot;${productName}&quot;}`, {\\r\\n               tags: { name: '/product' },\\r\\n               headers: COMMON_REQUEST_HEADERS\\r\\n           });\\r\\n           check(response, {\\r\\n               'can add product': (res) =&gt; res.status === 201,\\r\\n               'can obtain product ID': (res) =&gt; {\\r\\n                   let productResponse = JSON.parse(res.body);\\r\\n                   productId = productResponse &amp;&amp; productResponse.id;\\r\\n                   return productId !== undefined;\\r\\n               }\\r\\n           });\\r\\n       });\\r\\n \\r\\n       simulateUserInteractionDelay();\\r\\n \\r\\n       group('fetch product', function() {\\r\\n           let response = http.get(`${BASE_URL}/product/${productId}`, {\\r\\n               tags: { name: '/product/{productId}' },\\r\\n               headers: COMMON_REQUEST_HEADERS\\r\\n           });\\r\\n           check(response, {\\r\\n               'can get product': (res) =&gt; res.status === 200\\r\\n           });\\r\\n       });\\r\\n   });\\r\\n}\\r\\n\\r\\n\\r\\n</pre>\\n<h2>Get more detailed performance analysis using k6</h2>\\n<p>k6’s command line output is very much a summary of the total script’s execution. It doesn’t help much when your scripts are testing more complex user journeys involving several unrelated backend endpoints. More granular analysis of the complete set of metrics, tagged per endpoint name, is better performed in Grafana.</p>\\n<p>The docker-compose setup makes Grafana available on <a href=\\\"http://localhost:3000/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">http://localhost:3000/</a>. However, this is a stock install with no dashboards preconfigured. You can create your dashboard customized to whatever analysis needs you have, but when just getting started, it’s often quicker to use a pre-canned dashboard and further customize from there. To do so, you’ll need to import a dashboard via <a href=\\\"http://localhost:3000/dashboard/import\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">http://localhost:3000/dashboard/import</a> &#8211; a good one to start with is dashboard ID# <code>2587</code> &#8211; or <code>4411</code> is also worth exploring.</p>\\n<p>In terms of doing the analysis and making accurate sense of your application’s performance &#8211; that is, unfortunately, a much larger subject than covered here! <a href=\\\"http://www.brendangregg.com/methodology.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Brendan Gregg</a> provides a wealth of information to help guide you in using sound methodologies and avoiding the most common metric interpretation pitfalls, and also author’s books for a more thorough review of the subject.</p>\\n<h2>Conclusion</h2>\\n<p>k6 offers a comprehensive performance testing ecosystem that can add significant value to your application’s responsiveness, whether you’re looking for ad-hoc manual performance investigation for particularly slow areas, or whether you would like to integrate performance testing as part of your overall <a href=\\\"https://k6.io/docs/testing-guides/automated-performance-testing\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">automated testing suite</a>. And while it is not the only tool for the job, it is well suited to modern full-stack application development.</p>\\n<p>Performance testing is not as binary as functional testing, where a feature is either working or not working. Compromises often need to be reached after weighing up how many users will interact with a poorly-performing feature vs. the investment required to improve its performance. It is impossible to achieve ‘100% perfect performance’, as such a concept does not exist; you could spend an infinite amount of time optimizing your application, to the detriment of regular feature development. Therefore, useful performance measurements must get gathered, allowing you to focus on the top few bottlenecks that, if fixed, would result in the most significant perceived improvement to end-users. There will also be a cut-off point in the list of bottlenecks where, if any others were to get improved, they would only provide diminishing, imperceptible returns.</p>\\n<p>Whether you choose to use k6 or not, you must properly analyze and consider the performance of your application. Performance is an all-too-often forgotten piece of the puzzle that is delivering the best possible experience for your users. Make sure you keep the fully-assembled puzzle picture in view!</p>\\n<p>If you need help analyzing or improving the performance of your web application, <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to learn more about how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>There’s an old adage in the software industry &#8211; premature optimization is the root of all evil. A corollary to this should be &#8211; no optimization is just as bad as premature optimization. It is often true that effort spent optimizing a system before features are properly implemented, correct and stable is effort wasted, but [&hellip;]</p>\\n\",\"protected\":false},\"author\":98,\"featured_media\":23773,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[500,6,450,496],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>How to Use k6 for Performance Testing Your Code | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"While there are many load testing tools out there, we love using k6 for performance testing. Read more about getting started with k6 testing here.\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/performance-testing-with-k6/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"How to Use k6 for Performance Testing Your Code | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"While there are many load testing tools out there, we love using k6 for performance testing. Read more about getting started with k6 testing here.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/performance-testing-with-k6/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2020-05-13T15:35:23+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-06-11T23:06:54+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/performance-testing-with-k6/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Performance testing with k6\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/performance-testing-with-k6/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/performance-testing-with-k6/\\\",\\\"name\\\":\\\"How to Use k6 for Performance Testing Your Code | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/performance-testing-with-k6/#primaryimage\\\"},\\\"datePublished\\\":\\\"2020-05-13T15:35:23+00:00\\\",\\\"dateModified\\\":\\\"2020-06-11T23:06:54+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/88cc1448e58fbc7e02ff6fc5d2ff3b8b\\\"},\\\"description\\\":\\\"While there are many load testing tools out there, we love using k6 for performance testing. Read more about getting started with k6 testing here.\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/performance-testing-with-k6/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/88cc1448e58fbc7e02ff6fc5d2ff3b8b\\\",\\\"name\\\":\\\"Stuart Bing\\\\u00eb\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Stuart Bing\\\\u00eb\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/23670\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/98\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=23670\"}],\"version-history\":[{\"count\":34,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/23670/revisions\"}],\"predecessor-version\":[{\"id\":24675,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/23670/revisions/24675\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/23773\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=23670\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=23670\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=23670\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":98,\"name\":\"Stuart Bingë\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/sbinge/\",\"slug\":\"sbinge\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Stuart Bingë, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Stuart Bingë, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/sbinge/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/sbinge/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/sbinge/\\\",\\\"name\\\":\\\"Stuart Bing\\\\u00eb, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/88cc1448e58fbc7e02ff6fc5d2ff3b8b\\\",\\\"name\\\":\\\"Stuart Bing\\\\u00eb\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Stuart Bing\\\\u00eb\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/sbinge/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/98\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":23773,\"date\":\"2020-03-27T05:33:01\",\"slug\":\"blog-k6_load-testing\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/performance-testing-with-k6/blog-k6_load-testing/\",\"title\":{\"rendered\":\"Performance testing with k6\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Performance testing with k6 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Performance testing with k6 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-03-27T12:34:08+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\\\",\\\"name\\\":\\\"Performance testing with k6 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-03-27T12:33:01+00:00\\\",\\\"dateModified\\\":\\\"2020-03-27T12:34:08+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Performance testing with k6\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2020/03/blog-k6_load-testing.png\",\"sizes\":{\"medium\":{\"file\":\"blog-k6_load-testing-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing-300x158.png\"},\"large\":{\"file\":\"blog-k6_load-testing-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing-1024x538.png\"},\"thumbnail\":{\"file\":\"blog-k6_load-testing-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing-150x150.png\"},\"medium_large\":{\"file\":\"blog-k6_load-testing-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing-768x403.png\"},\"full\":{\"file\":\"blog-k6_load-testing.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-k6_load-testing.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/23773\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a554a25fed8f3df-LHR"],["cf-request-id","03692cabbe0000f3df6c90c200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 18 Jun 2020 13:17:17 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=dfb596de35f9ce92022ecb7bf032926fc1592486237; expires=Sat, 18-Jul-20 13:17:17 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}