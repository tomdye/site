{"value":{"body":"[{\"id\":22532,\"date\":\"2020-03-18T05:24:59\",\"date_gmt\":\"2020-03-18T12:24:59\",\"guid\":{\"rendered\":\"https://wordpress-testbed.sitepen.com/?p=22532\"},\"modified\":\"2020-03-18T05:24:59\",\"modified_gmt\":\"2020-03-18T12:24:59\",\"slug\":\"new-typescript-features-that-improve-the-developer-experience\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/\",\"title\":{\"rendered\":\"New TypeScript Features that Improve the Developer Experience\"},\"content\":{\"rendered\":\"<p>In many ways TypeScript is more like a powerful linting and documentation tool to author better JavaScript, rather than a separate programming language.</p>\\n<p>One significant benefit of TypeScript is its deliberate support for  some of the latest ECMAScript language features. Updating to new versions of TypeScript provides support for  new language features but in a safe, backwards-compatible manner. But aside from keeping up JavaScript, TypeScript regularly offers improvements to the actual experience of writing TypeScript. This includes tools to assist in refactoring, tools for finding references, renaming, and more.</p>\\n<p>Here we’ll explore not a complete, exhaustive list of everything that’s new in TypeScript over the past year, but instead some of the most exciting recent additions to  TypeScript. For a more complete list of new features in each version, check out the <a href=\\\"https://www.typescriptlang.org/docs/handbook/release-notes/overview.html\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\">TypeScript Release Notes</a>.</p>\\n<h2>“Immutable” objects and arrays</h2>\\n<p>For marking array variables and parameters as being immutable at compile time, TypeScript provides the <code>Readonly</code> and <code>ReadonlyArray</code> helper types. However, using these helpers can feel a bit inconsistent with how types typically get annotated, especially when typing arrays using the <code>[]</code> characters after a type. TypeScript  version 3.4 added a new way to mark parameters as being a readonly array and a new way to mark variable declarations as being immutable.</p>\\n<h2>Improved UX for readonly array parameters</h2>\\n<p>Parameters to a function which should get treated as immutable arrays can now also utilize the <code>readonly</code> keyword. In the following example, the two method signatures are identical.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction foo(s: ReadonlyArray&lt;string&gt;) { /* ... */ }\\r\\n\\r\\nfunction foo(s: readonly string[]) { /* ... */ }\\r\\n</pre>\\n<p>In both cases, any attempt to modify the array (e.g. using the <code>push</code> method) will result in an error. This change eliminates the need to use a generic helper type in one instance, which can lead to easier-to-read code. Object types can also get marked as readonly, but they still need to use the <code>Readonly</code> helper type.</p>\\n<h2>Improved UX for immutable variables with const assertions</h2>\\n<p>Any variable declared with <code>const</code> will not allow for its type to get changed. This is a concept that exists in JavaScript and that TypeScript adopts to narrow a type definition. But when working with non-primitive data types such as objects or arrays, those structures are not truly immutable. Using <code>const</code> means that the specific instance of the object or array will remain the same, but the contents within can get changed quite easily. We can use the array’s push method to add a new value or we can change the value of a property on an object without violating the <code>const</code> contract.</p>\\n<p>Using <code>Readonly</code> and <code>ReadonlyArray</code> we can indicate to TypeScript that it should treat the non-primitive as if it were truly immutable and throw an error anytime the code attempts a mutation.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ninterface Person {  \\r\\n  name: string;  \\r\\n}\\r\\n\\r\\nconst person = {  \\r\\n  name: 'Will'  \\r\\n} as Readonly&lt;Person&gt;;\\r\\nperson.name = 'Diana'; // error!\\r\\n</pre>\\n<p>TypeScript 3.4 also introduces the concept of a <em>const assertion</em>, a simplified method of marking an object or array as being a constant, immutable value. This is done by adding an <code>as const</code> assertion to the end of a variable declaration. This also has the added benefit of not needing to explicitly declare the type alongside the const assertion.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst person = {  \\r\\n        name: 'Will'  \\r\\n} as const;\\r\\n\\r\\nperson.name = 'Diana'; // error!\\r\\n\\r\\n// Arrays can be marked as const as well  \\r\\nconst array = [1, 2, 3] as const;  \\r\\narray.push(4); // error!\\r\\n</pre>\\n<h2>The Omit helper type</h2>\\n<p>TypeScript ships with several helper types that make it easy to map existing types to new types or conditionally set a type based on other types.</p>\\n<p>The <code>Partial</code> helper marks all properties on an object as being optional. Prior to TypeScript 3.5, there was one type I found myself repeatedly adding to projects, the <code>Omit</code> type. Just like the name states, Omit takes a type and a union of keys to omit from that type, returning a new type with those keys omitted. Gone are the days of remembering the correct incantation of <code>Pick</code> and <code>Exclude</code> to manually create Omit myself.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// now included in TypeScript 3.5  \\r\\ntype Omit&lt;T, K extends keyof T&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;\\r\\n\\r\\ninterface A {  \\r\\n    propA?: string;  \\r\\n    propB?: string;  \\r\\n    propC?: string;  \\r\\n}\\r\\n\\r\\ntype B = Omit&lt;A, 'propA' | 'propC'&gt;;  \\r\\nconst b: B = { propA: 'hi' }; // error;\\r\\n</pre>\\n<h2>New JavaScript features supported by TypeScript</h2>\\n<p>When proposals for JavaScript reach stage 4 they are considered to be part of the next version of the language. However,  this doesn’t mean that these new features can be used immediately as support for them must be built into all target environments and then the feature must exist in all versions that an application needs to support.</p>\\n<p>TypeScript’s compiler adds support for new JavaScript features and for many, can rewrite the code into a backwards-compatible format that can be used by all browsers supporting the build target set in an application’s <code>tsconfig.json</code>. </p>\\n<h2>Nullish coalescing</h2>\\n<p>JavaScript developers are familiar with the concept of <em>truthy</em> and <em>falsy</em>. When checking for truthiness, there are 6 values that are always falsy: <code>0</code>, <code>null</code>, <code>undefined</code>, <code>\\\"\\\"</code>, <code>NaN</code>, and of course, <code>false</code>. Most of the time we just want to know if a value is falsy but there are certain instances where you might actually want to know if the value was truly <code>null</code> or <code>undefined</code>. For example, if the code needs to know the difference between <code>0</code> and an <code>undefined</code> value.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// using || won't work when index is 0  \\r\\nconst getValueOrOne = (x?: number) =&gt; index || 1;  \\r\\ngetValueOrOne(0); // 1 &lt;-- Problematic\\r\\n</pre>\\n<p>This code will work and set x to the value of index in all cases except where <code>index = 0</code>. To write this correctly requires a more convoluted check of the values actual type.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// this works but is more convoluted  \\r\\nconst getValueOrOne = (x?: number) =&gt; index !== null &amp;&amp; index !== undefined ? : 1;  \\r\\ngetValueOrOne(0); // 0\\r\\n</pre>\\n<p>The code now works correctly but requires  a more complex check. The new nullish coalescing operator (<code>??</code>) simplifies this check by returning the value on the left side if  it’s not <code>null</code> or <code>undefined</code>, otherwise it returns the value on the right side.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// this works!  \\r\\nconst getValueOrOne = (x?: number) =&gt; index ?? 1;  \\r\\ngetValueOrOne(0); // 0  \\r\\ngetValueOrOne(2); // 2  \\r\\ngetValueOrOne(); // 1\\r\\n</pre>\\n<h2>Optional chaining</h2>\\n<p>Another new JavaScript feature available in TypeScript 3.7 is the optional chaining operator (<code>?.</code>). I was first introduced to this as a language operator in the Groovy programming language and ever since I’ve wanted it in JavaScript. This operator allows for deep property access without the need to check that a value exists at every level. If at any point it encounters an <code>undefined</code> value, it simply returns <code>undefined</code> without throwing a <code>TypeError</code>.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// without optional chaining  \\r\\nconst value = foo &amp;&amp; foo.bar &amp;&amp; foo.bar.baz;\\r\\n\\r\\n// with optional chaining  \\r\\nconst value = foo?.bar?.baz;\\r\\n</pre>\\n<p>Optional chaining gets even more powerful when combined with the nullish coalescing operator, allowing for setting a value to a deeply nested value or a default value in the case that it doesn’t exist.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst value = foo?.bar?.baz ?? 'default value';\\r\\n</pre>\\n<h2>Private fields</h2>\\n<p>TypeScript has had its own concept of <code>private</code> class fields since its inception, before classes were defined in the JavaScript standard. But TypeScript’s <code>private</code> is a compile-time private, meaning the compiler will throw errors if a private method or property is accessed outside of its class methods. JavaScript now includes the ability to mark a property or method as private to a class, though its private is semantically and syntactically different.</p>\\n<p>JavaScript private fields do not use the <code>private</code> keyword. Instead, they start with <code>#</code>.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass Fan {  \\r\\n    #on = false;  \\r\\n    private name = 'fan';\\r\\n\\r\\n    turnOn() {  \\r\\n        this.#on = true;  \\r\\n    }\\r\\n   isTurnedOn() {  \\r\\n        return this.#on;  \\r\\n    }\\r\\n}\\r\\n\\r\\nconst fan = new Fan();  \\r\\nfan.isTurnedOn(); // false  \\r\\nfan.turnOn();  \\r\\nfan.isTurnedOn(); // true\\r\\n\\r\\nfan.on; // does not exist  \\r\\nfan.#on; // not accessible  \\r\\nfan.name; // compile-time error, but accessible in JS\\r\\n</pre>\\n<p>Currently, private fields are supported, with private methods being a Stage 3 <a href=\\\"https://github.com/tc39/proposal-private-methods\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\">proposal</a>. Currently private and #private fields cannot get used together. Both approaches are useful and it remains a choice for the developer to  determine which is required to solve the problem. The <a href=\\\"https://www.sitepen.com/blog/episode-38-private-vs-private-adding-es-private-to-typescript/\\\">TalkScript team chatted with the TypeScript team about the new private syntax</a>.</p>\\n<h2>Top-level await</h2>\\n<p>Asynchronous programming has greatly improved in JavaScript and TypeScript, first with the introduction of promises and then with the async/await syntax to cleanly author asynchronous code. </p>\\n<p>One case where you need to use promise callbacks rather than async/await is calling an asynchronous method from outside of an asynchronous function, such as in the top-level of a module or application. One workaround for this has been to create an asynchronous immediately invoked function expression (IIFE) and perform the asynchronous calls inside.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n(async () =&gt; {  \\r\\n    const response = await fetch('https://api.github.com/users/sitepen');  \\r\\n    const data = await response.json();  \\r\\n    console.log(`Check out the blog at ${data.blog}`);  \\r\\n})();\\r\\n</pre>\\n<p>TypeScript now supports the top-level await feature from JavaScript letting you use the <code>await</code> keyword outside of an <code>async</code> function, specifically in the top-level of a module script. This is wonderful for keeping code concise and to the point. However, one criticism of top-level await is that it can lead to bottlenecks in module loading where one module could slow down the loading of the application as it waits for promises to get resolved before the module gets resolved.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst response = await fetch('https://api.github.com/users/sitepen');  \\r\\nconst data = await response.json();\\r\\n\\r\\nexport default { ...data };\\r\\n</pre>\\n<h2>An improved TypeScript Playground</h2>\\n<p>This isn’t really a new feature of TypeScript, but given that we’re treating TypeScript as a tool in this post, the TypeScript Playground is an effective tool to quickly try out theories on types while simultaneously viewing the generated JavaScript. Most of the examples in this post were tested in the TypeScript playground, which now includes the ability to run a specific version of TypeScript (including nightly) and contains several examples to help anyone interactively get started with the language.</p>\\n<h2>What are you excited about?</h2>\\n<p>TypeScript is a tool that helps us write better, more expressive JavaScript. It’s tooling keeps us honest and makes tasks such as renaming and refactoring trivial where they would normally be extremely tedious in plain JavaScript. Adding helpers like <code>Omit</code>, const assertions, and continuously improving support for complex types on top of introducing the latest features coming to JavaScript are why many consider TypeScript to be their preferred tool, language, and ecosystem. What features are you excited about?</p>\\n<p>Need help architecting or creating your next TypeScript application or determining if TypeScript is the right approach for you? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>In many ways TypeScript is more like a powerful linting and documentation tool to author better JavaScript, rather than a separate programming language. One significant benefit of TypeScript is its deliberate support for some of the latest ECMAScript language features. Updating to new versions of TypeScript provides support for new language features but in a [&hellip;]</p>\\n\",\"protected\":false},\"author\":49,\"featured_media\":23439,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[3,11],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>New Releases for TypeScript and How to Use Them | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"TypeScript is a coding language that helps to author better JavaScript. Here are some of the most exciting, new releases in TypeScript this year. Read more.\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"New Releases for TypeScript and How to Use Them | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"TypeScript is a coding language that helps to author better JavaScript. Here are some of the most exciting, new releases in TypeScript this year. Read more.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2020-03-18T12:24:59+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@nicknisi\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"What's New in TypeScript\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/\\\",\\\"name\\\":\\\"New Releases for TypeScript and How to Use Them | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/#primaryimage\\\"},\\\"datePublished\\\":\\\"2020-03-18T12:24:59+00:00\\\",\\\"dateModified\\\":\\\"2020-03-18T12:24:59+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\"},\\\"description\\\":\\\"TypeScript is a coding language that helps to author better JavaScript. Here are some of the most exciting, new releases in TypeScript this year. Read more.\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\",\\\"name\\\":\\\"Nick Nisi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Nick Nisi\\\"},\\\"sameAs\\\":[\\\"https://twitter.com/nicknisi\\\"]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/22532\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/49\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=22532\"}],\"version-history\":[{\"count\":28,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/22532/revisions\"}],\"predecessor-version\":[{\"id\":24235,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/22532/revisions/24235\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/23439\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=22532\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=22532\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=22532\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":49,\"name\":\"Nick Nisi\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/nnisi/\",\"slug\":\"nnisi\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Nick Nisi, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Nick Nisi, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/nnisi/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nnisi/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/nnisi/\\\",\\\"name\\\":\\\"Nick Nisi, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\",\\\"name\\\":\\\"Nick Nisi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Nick Nisi\\\"},\\\"sameAs\\\":[\\\"https://twitter.com/nicknisi\\\"],\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nnisi/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/49\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":23439,\"date\":\"2020-03-10T09:39:31\",\"slug\":\"blog-ts\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/new-typescript-features-that-improve-the-developer-experience/blog-ts/\",\"title\":{\"rendered\":\"What&#8217;s New in TypeScript\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>What&#039;s New in TypeScript | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"What&#039;s New in TypeScript | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-03-10T16:39:48+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\\\",\\\"name\\\":\\\"What's New in TypeScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-03-10T16:39:31+00:00\\\",\\\"dateModified\\\":\\\"2020-03-10T16:39:48+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"What's New in TypeScript\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2020/03/blog-ts.png\",\"sizes\":{\"medium\":{\"file\":\"blog-ts-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts-300x158.png\"},\"large\":{\"file\":\"blog-ts-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts-1024x538.png\"},\"thumbnail\":{\"file\":\"blog-ts-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts-150x150.png\"},\"medium_large\":{\"file\":\"blog-ts-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts-768x403.png\"},\"full\":{\"file\":\"blog-ts.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/03/blog-ts.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/23439\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a45b82e7b1cbc48-LHR"],["cf-request-id","035f71710c0000bc48cf878200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Tue, 16 Jun 2020 15:56:12 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d364c5dbb0fbfff0cea716e6c720cb3841592322971; expires=Thu, 16-Jul-20 15:56:11 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}