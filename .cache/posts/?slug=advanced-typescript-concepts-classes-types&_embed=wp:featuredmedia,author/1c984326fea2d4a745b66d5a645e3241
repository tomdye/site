{"value":{"body":"[{\"id\":7850,\"date\":\"2014-08-22T08:38:28\",\"date_gmt\":\"2014-08-22T15:38:28\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=7850\"},\"modified\":\"2014-08-22T08:38:28\",\"modified_gmt\":\"2014-08-22T15:38:28\",\"slug\":\"advanced-typescript-concepts-classes-types\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/advanced-typescript-concepts-classes-types/\",\"title\":{\"rendered\":\"Advanced TypeScript concepts: Classes and types\"},\"content\":{\"rendered\":\"<p><i>This article describes the features and functionality of TypeScript 2.5.</i></p>\\n<p>While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can leverage this knowledge to write cleaner, well-organised code.</p>\\n<p>If you find yourself having trouble with some of the concepts discussed in this article, try reading through the <a href=\\\"https://www.sitepen.com/blog/2013/12/31/definitive-guide-to-typescript/\\\">Definitive Guide to TypeScript</a> first to make sure you’ve got a solid understanding of all the basics.</p>\\n<p><!--more--></p>\\n<h2>Behind the <code>class</code> keyword</h2>\\n<p>In TypeScript, the <code>class</code> keyword provides a more familiar syntax for generating constructor functions and performing simple inheritance. But what if we couldn’t use the <code>class</code> keyword for some reason? How would we make an equivalent structure? Is it even possible? To answer these questions, let’s start with a basic example of a TypeScript class:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nclass Point {\\n  static fromOtherPoint(point: Point): Point {\\n    // ...\\n  }\\n\\n  x: number;\\n  y: number;\\n\\n  constructor(x: number, y: number) {\\n    // ...\\n  }\\n\\n  toString(): string {\\n    // ...\\n  }\\n}\\n</pre>\\n<p>This archetypical class includes a static method, instance properties, and instance methods. When creating a new instance of this type, we’d call <code>new Point(&lt;number>, &lt;number>)</code>, and when referring to an instance of this type, we’d use the type <code>Point</code>. But how does this work? Aren’t the <code>Point</code> type and the <code>Point</code> constructor the same thing? Actually, no!</p>\\n<p>In TypeScript, types are overlaid onto JavaScript code through an entirely separate type system, rather than becoming part of the JavaScript code itself. This means that an interface (“type”) in TypeScript can—and often does—use the same identifier name as a <em>variable</em> in JavaScript without introducing a name conflict. (The <em>only</em> time that an identifier in the type system refers to a name within JavaScript is when the <code>typeof</code> operator is used.)</p>\\n<p>When using the <code>class</code> keyword in TypeScript, you are actually creating <em>two</em> things with the same identifier:</p>\\n<ul>\\n<li>A TypeScript interface containing all the instance methods and properties of the class; and</li>\\n<li>A JavaScript variable with a <em>different</em> (anonymous) constructor function type</li>\\n</ul>\\n<p>In other words, the example class above is effectively just shorthand for this code:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\n// our TypeScript `Point` type\\ninterface Point {\\n  x: number;\\n  y: number;\\n  toString(): string;\\n}\\n\\n// our JavaScript `Point` variable, with a constructor type\\nlet Point: {\\n  new (x: number, y: number): Point;\\n  prototype: Point;\\n\\n  // static class properties and methods are actually part\\n  // of the constructor type!\\n  fromOtherPoint(point: Point): Point;\\n};\\n\\n// `Function` does not fulfill the defined type so\\n// it needs to be cast to &lt;any&gt;\\nPoint = &lt;any&gt; function (this: Point, x: number, y: number): void {\\n  // ...\\n};\\n\\n// static properties/methods go on the JavaScript variable...\\nPoint.fromOtherPoint = function (point: Point): Point {\\n  // ...\\n};\\n\\n// instance properties/methods go on the prototype\\nPoint.prototype.toString = function (): string {\\n  // ...\\n};\\n</pre>\\n<p>Prior to TypeScript 1.6, TypeScript artificially restricted the use of the <code>extends</code> keyword for equivalent effectively equivalent types: you could <em>only</em> extend a constructor that was explicitly created using the <code>class</code> keyword. Since TypeScript 1.6, this restriction has been lifted and the following will work:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\ninterface Point {\\n  x: number;\\n  y: number;\\n}\\n\\nlet Point: {\\n  new (x: number, y: number): Point;\\n  prototype: Point;\\n} = function (): void {\\n  // ...\\n};\\n\\n// This works in TypeScript 1.6+\\nclass Point3d extends Point {\\n  z: number;\\n  // ...\\n}\\n\\n// You can also extend from built-in types\\nclass MyArray&lt;T&gt; extends Array&lt;T&gt; {\\n  // ...\\n}\\n</pre>\\n<p>TypeScript 1.6+ also added support for <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class\\\">ES6 Class expressions</a>.</p>\\n<h2>Adding type properties to classes</h2>\\n<p>A common problem in complex applications is how to keep related sets of functionality grouped together. We already accomplish this by doing things like organising code into modules for large sets of functionality, but what about things like types that are only applicable to a single class or interface? For example, what if we had a <code>Widget</code> class that accepted a keyword arguments object, as is common in Dojo 1.x?:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nclass Widget {\\n  constructor(kwArgs: {\\n    className?: string;\\n    id?: string;\\n    style?: Object;\\n  }) {\\n    for (let key in kwArgs) {\\n      this[key] = kwArgs[key];\\n    }\\n  }\\n}\\n</pre>\\n<p>In this code, we’ve succeeded in defining an anonymous type for the <code>kwArgs</code> parameter, but this is very brittle. What happens when we subclass <code>Widget</code> and want to add some extra properties? We’d have to write the entire type all over again. Or, what if we want to reference this type in multiple places, like within some code that instantiates a Widget? We wouldn’t be able to, because it’s an anonymous type assigned to a function parameter.</p>\\n<p>To solve this problem, we can use the <code>namespace</code> keyword to augment the <code>Widget</code> type with some new properties that can be accessed using an identifier <em>path</em>:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nclass Widget {\\n  constructor(kwArgs: Widget.KwArgs = {}) {\\n    for (let key in kwArgs) {\\n      this[key] = kwArgs[key];\\n    }\\n  }\\n}\\n\\nnamespace Widget {\\n  // accessible as Widget.KwArgs\\n  export interface KwArgs {\\n    className?: string;\\n    id?: string;\\n    style?: Object | Style;\\n  }\\n\\n  // Classes can be exported in namespaces, too\\n  export class Style {\\n    // ...\\n  }\\n}\\n\\nexport default Widget;\\n</pre>\\n<p>Now, instead of having an anonymous object type dirtying up our code, we have a specific <code>Widget.KwArgs</code> subtype that can be referenced by our code as well as any other code that imports <code>Widget</code>. This means that we can easily subclass our <code>kwArgs</code> parameter while keeping everything <abbr title=\\\"Don’t Repeat Yourself\\\">DRY</abbr> and well-organised:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nimport Widget from './Widget';\\n\\n// normal class inheritance…\\nclass TextInput extends Widget {\\n  // replace the parameter type with our new, more specific subtype\\n  constructor(kwArgs: TextInput.KwArgs = {}) {\\n    super(kwArgs);\\n  }\\n}\\n\\nnamespace TextInput {\\n  // normal inheritance here again!\\n  export interface KwArgs extends Widget.KwArgs {\\n    maxLength?: number;\\n    placeholder?: string;\\n    value?: string;\\n  }\\n\\n  // inheritance here, too!\\n  export class Style extends Widget.Style {\\n    // ...\\n  }\\n}\\n\\nexport default TextInput;\\n</pre>\\n<p>As mentioned earlier, using this pattern, we can also reference these types from other code:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nimport Widget from './Widget';\\nimport TextInput from './TextInput';\\n\\nexport function createWidget&lt;\\n  T extends Widget = Widget,\\n  K extends Widget.KwArgs = Widget.KwArgs\\n&gt;(Ctor: { new (...args: any[]): T; }, kwArgs: K): T {\\n  return new Ctor(kwArgs);\\n}\\n\\n// w has type `Widget`\\nconst w = createWidget(Widget, { style: new Widget.Style() });\\n// t has type `TextInput`\\nconst t = createWidget(TextInput, { style: new TextInput.Style() });\\n</pre>\\n<p>Namespaces can also be nested in order to create sub-subtypes, if desired:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nnamespace Widget {\\n  export namespace Types {\\n    // Will be accessible as `Widget.Types.KwArgs`\\n    export interface KwArgs {\\n      // ...\\n    }\\n  }\\n}\\n</pre>\\n<p>Note that the inner <code>namespace</code> and <code>interface</code> definitions need to use the <code>export</code> keyword or they will be considered part of the internal namespace code and not publicly exposed.</p>\\n<h2>Extending subclasses with function overrides</h2>\\n<p>JavaScript toolkits like Dojo 1.x use custom <code>get</code> and <code>set</code> functions on most objects in order to enable advanced <a href=\\\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-proxy-objects\\\">Proxy</a>&#8211; and <a href=\\\"http://wiki.ecmascript.org/doku.php?id=harmony:observe\\\">Object.observe</a>-like functionality in browsers going all the way back to IE6. When upgrading to TypeScript, we still need to be able to specify the correct return type for these calls, the same way that an instance property would have the correct type. Unfortunately, TypeScript doesn’t allow us to simply define method overrides in subclasses:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nclass Widget {\\n  get(key: 'className'): string;\\n  get(key: 'id'): string;\\n  get(key: 'style'): Object;\\n  get(key: string): void;\\n  get(key: string): any {\\n    // ...implementation...\\n  }\\n}\\n\\nclass TextInput extends Widget {\\n  // Even though there is a function implementation\\n  // in the parent class, this will cause an error\\n  // because there is no implementation in this subclass:\\n  // “Function implementation expected”\\n  get(key: 'maxLength'): number;\\n  get(key: 'placeholder'): string;\\n  get(key: 'value'): string;\\n}\\n</pre>\\n<p>To work around this limitation, we can combine <em>function interface definitions</em> with the subtype declarations discussed above in order to create an extensible <code>get</code> <em>property</em> for the subclass:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nclass Widget {\\n  // now defined as a function property, not a method\\n  get: Widget.Get;\\n}\\n\\nWidget.prototype.get = function (): any {\\n  // ...implementation...\\n};\\n\\nmodule Widget {\\n  export interface Get {\\n    // note that these definitions have no name, which means\\n    // they are applied directly to the `Widget.Get` interface\\n    (key: 'className'): string;\\n    (key: 'id'): string;\\n    (key: 'style'): Object;\\n    (key: string): void;\\n  }\\n}\\n\\nclass TextInput extends Widget {\\n  get: TextInput.Get;\\n}\\n\\nmodule TextInput {\\n  export interface Get extends Widget.Get {\\n    // now we can add more interface definitions that correctly\\n    // augment the original `Widget.Get` interface\\n    (key: 'maxLength'): number;\\n    (key: 'placeholder'): string;\\n    (key: 'value'): string;\\n  }\\n}\\n</pre>\\n<p>With this change, we can successfully call <code>TextInput#get('maxLength')</code> and TypeScript knows the return value is a number, and <code>TextInput#get('id')</code> and TypeScript knows the return value is a string, without needing to duplicate the <code>get</code> function inside every single subclass.</p>\\n<h2>Abstract Classes <i>(TS 1.6+)</i></h2>\\n<p>TypeScript 1.6+ supports the <code>abstract</code> keyword for classes and their methods and TypeScript 2.0+ supports the <code>abstract</code> keyword for properties and accessors. An abstract class may have methods, properties, and accessors with no implementation, and cannot be constructed. See <a href=\\\"https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#abstract-classes-and-methods\\\">Abstract classes and methods</a> and <a href=\\\"https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#abstract-properties-and-accessors\\\">Abstract properties and accessors</a> for more information.</p>\\n<h2>Mixins and Compositional Classes <i>(TS 2.2+)</i></h2>\\n<p>TypeScript 2.2 has made some changes to make it easier to implement mixins and/or compositional classes. This was achieved by removing some of the restrictions on classes. For example, it’s now possible to extend from a value that constructs an intersection type. They’ve also changed the way that signatures on intersection types get combined.</p>\\n<h2>Symbols, Decorators, and more</h2>\\n<h3>Symbols</h3>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\\\">Symbols</a> are unique, immutable identifiers that can be used as object keys. They offer the benefit of guaranteeing safety from naming conflicts. A symbol is a primitive value with the type of &#8220;symbol&#8221; (<code>typeof Symbol() === 'symbol'</code>).</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\n// even symbols created from the same key are unique\\nSymbol('foo') !== Symbol('foo');\\n</pre>\\n<p>When used as object keys, you don&#8217;t have to worry about name collision:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nconst ID_KEY = Symbol('id');\\nlet obj = {};\\nobj[ID_KEY] = 5;\\nobj[Symbol('id')] = 10;\\nobj[ID_KEY] === 5; // true\\n</pre>\\n<p>Strong <a href=\\\"https://github.com/Microsoft/TypeScript/pull/1978\\\">type information in TS</a> is only available for <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols\\\">built-in symbols</a>.</p>\\n<p>See our <a href=\\\"https://www.sitepen.com/blog/2016/04/13/es6-symbols-drumroll-please/\\\">ES6 Symbols: Drumroll please!</a> article for more information about Symbols.</p>\\n<h3>Decorators</h3>\\n<p>A decorator is a function that allows shorthand in-line modification of <a href=\\\"https://github.com/Microsoft/TypeScript/issues/2249\\\">classes, properties, methods, and parameters</a>. A method decorator receives 3 parameters:</p>\\n<ul>\\n<li><code>target</code>: the object the method is defined on</li>\\n<li><code>key</code>: the name of the method</li>\\n<li><code>descriptor</code>: the object descriptor for the method</li>\\n</ul>\\n<p>The decorator function can optionally return a property descriptor to install on the target object.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nfunction myDecorator(target, key, descriptor) {\\n}\\n\\nclass MyClass {\\n    @myDecorator\\n    myMethod() {}\\n}\\n</pre>\\n<p><code>myDecorator</code> would be invoked with the parameter values <code>MyClass.prototype</code>, <code>'myMethod'</code>, and <code>Object.getOwnPropertyDescriptor(MyClass.prototype, 'myMethod')</code>.</p>\\n<p>TypeScript also supports <a href=\\\"https://github.com/Microsoft/TypeScript/issues/1082\\\">computed property names</a> and <a href=\\\"https://github.com/Microsoft/TypeScript/pull/2169\\\">Unicode escape sequences</a>.</p>\\n<p>See our <a href=\\\"https://www.sitepen.com/blog/2015/10/20/typescript-decorators/\\\">TypeScript Decorators</a> article for more information about decorators.</p>\\n<h2>In conclusion</h2>\\n<p>Hopefully this post has helped to demystify parts of the TypeScript type system and given you some ideas about how you can exploit its advanced features to improve your own TypeScript application structure. If you have any other questions, or want some expert assistance writing TypeScript applications, <a href=\\\"https://www.sitepen.com/contact/\\\">get in touch</a> to chat with us today!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>This article describes the features and functionality of TypeScript 2.5. While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can leverage this knowledge to write cleaner, [&hellip;]</p>\\n\",\"protected\":false},\"author\":41,\"featured_media\":22075,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[3,11],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Advanced TypeScript concepts: Classes and types | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"This article describes the features and functionality of TypeScript 2.5. While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-types/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Advanced TypeScript concepts: Classes and types | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"This article describes the features and functionality of TypeScript 2.5. While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-types/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2014-08-22T15:38:28+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-types/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-types/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-types/\\\",\\\"name\\\":\\\"Advanced TypeScript concepts: Classes and types | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-types/#primaryimage\\\"},\\\"datePublished\\\":\\\"2014-08-22T15:38:28+00:00\\\",\\\"dateModified\\\":\\\"2014-08-22T15:38:28+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\"},\\\"description\\\":\\\"This article describes the features and functionality of TypeScript 2.5. While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-types/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\",\\\"name\\\":\\\"Colin Snover\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Colin Snover\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/7850\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/41\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=7850\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/7850/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=7850\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=7850\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=7850\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=7850\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":41,\"name\":\"Colin Snover\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/csnover/\",\"slug\":\"csnover\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Colin Snover, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Colin Snover, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/csnover/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/csnover/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/csnover/\\\",\\\"name\\\":\\\"Colin Snover, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\",\\\"name\\\":\\\"Colin Snover\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Colin Snover\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/csnover/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/41\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:24:15 GMT"],["expires","Thu, 24 Sep 2020 13:24:15 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}