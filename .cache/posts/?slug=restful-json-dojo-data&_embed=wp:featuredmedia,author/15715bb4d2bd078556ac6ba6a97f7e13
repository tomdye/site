{"value":{"body":"[{\"id\":336,\"date\":\"2008-06-13T00:03:14\",\"date_gmt\":\"2008-06-13T07:03:14\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2008/06/13/restful-json-dojo-data/\"},\"modified\":\"2008-06-13T00:03:14\",\"modified_gmt\":\"2008-06-13T07:03:14\",\"slug\":\"restful-json-dojo-data\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/restful-json-dojo-data/\",\"title\":{\"rendered\":\"RESTful JSON + Dojo Data\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2008/06/jsonreststore-simple.png\\\" style=\\\"float: right\\\" alt=\\\"jsonreststore-simple.png\\\" /></p>\\n<p style=\\\"background:#FFFFB1; padding:1em;\\\"><strong>NOTE:</strong> This post is very out of date. For more up to date information about RESTful JSON in Dojo applications there are a number of more recent tutorials are available, such as the <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.10/intro_dojo_store/\\\">Dojo Store introduction</a>, as well as tutorials demonstrating <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.10/store_driven_grid/\\\">store-driven grids</a> and <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.10/store_driven_tree/\\\">trees</a>, among others. You should also take a look at <a href=\\\"http://dstorejs.io/\\\">dstore</a>, the next generation Dojo store architecture, for an even more modern take on RESTful JSON. We have a <a href=\\\"http://dstorejs.io/tutorials/\\\">series of tutorials</a> introducing the concepts.</p>\\n<p>Dojo 1.2 now includes an infrastructure for interacting with JSON REST services and data storage systems. JsonRestStore is a new <a href=\\\"http://dojotoolkit.org/book/dojo-book-0-9/part-3-programmatic-dijit-and-dojo/data-retrieval-dojo-data-0\\\">Dojo Data store</a> for interacting with the RESTful JSON data sources. This new data store allows you to communicate with server side database/persistent data storage using the Dojo Data API with JavaScript and efficiently handles create, read, update, and delete (CRUD) operations. This can greatly simplify client server communication, interacting can be done simply using straightforward JavaScript instead of having to build your communication for CRUD actions. In addition, Dojo data stores can plugin to many Dojo widgets (Dijits).</p>\\n<p>Complex database driven widgets can be utilized with minimal coding effort. RESTful JSON is an increasingly popular database interface, and in later posts we will look at how JsonRestStore can be used with <a href=\\\"http://aws.amazon.com/s3\\\">Amazon S3</a>, <a href=\\\"http://incubator.apache.org/couchdb/\\\">CouchDB</a>, <a href=\\\"http://www.persvr.org/\\\">Persevere</a>, and <a href=\\\"http://wiki.rubyonrails.org/rails/pages/ActiveResource\\\">Ruby on Rails</a>. The JsonRestStore fully implements the Dojo Data read, write, notification, and identity interfaces. Therefore it can be used with any widget that can utilize these data stores including widgets with editing and live auto-updating features.</p>\\n<p><!--more--></p>\\n<p>Also new to Dojo 1.2 is the ServiceStore. JsonRestStore is an extension of ServiceStore. ServiceStore provides Dojo Data read and identity interface for remote web services. However, I will primarily focus on the JsonRestStore in this article.</p>\\n<h2>Using a JsonRestStore</h2>\\n<p>The JsonRestStore can be created with a REST service function, or it can be instantiated directly with a target URL. To get a JsonRestStore instance with a target URL:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">recipeStore = new dojox.data.JsonRestStore({target:\\\"/recipeStore\\\"});</pre>\\n<p>A JsonRestStore can be created from a REST service function which can be <a href=\\\"https://www.sitepen.com/blog/2008/03/19/pluggable-web-services-with-smd/\\\">generated with dojox.rpc.Service</a>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">services = dojox.rpc.Service(\\\"/mySMD\\\");\\nrecipeStore = new dojox.data.JsonRestStore({service:services.myRestService});</pre>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2008/06/jsonrest-servicestore.png\\\" style=\\\"float: right\\\" alt=\\\"jsonrest-servicestore.png\\\" /></p>\\n<h2>Fast and Compact Syntax</h2>\\n<p>While you can use JsonRestStore and ServiceStore as you would another data store, they have been designed to support a more compact syntax for data interaction as well. This can be very beneficial if you have extensive code that interacts with the data store. First, several of the commonly used store methods are available as &#8220;static&#8221; functions, including getValue and setValue. Therefore we can easily define a convenient global or local functions for common operations.</p>\\n<p>The get, set, and save functions can be used with multiple JsonRestStore stores; it is not limited to the JsonRestStore from which it was retrieved.</p>\\n<p>With a few simple guidelines, you can actually interact with JsonRestStore items using standard JavaScript property syntax. JsonRestStore items are actually simple JavaScript objects, therefore you can always directly read properties from items.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">get = recipeStore.getValue;\\nset = recipeStore.setValue;\\nsave = recipeStore.save;\\n... // fetch an item\\nget(item,\\\"foo\\\"); // instead of using recipeStore.getValue(item,\\\"foo\\\");\\nset(item,\\\"foo\\\",\\\"bar\\\"); // instead of using // recipeStore.setValue(item,\\\"foo\\\",\\\"bar\\\");\\nsave();</pre>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvalue = item.foo;\\n// instead of calling value = recipeStore.getValue(item,\\\"foo\\\");\\nvar prop = \\\"baz\\\";\\nanotherValue = item[prop];\\n// instead of calling value = recipeStore.getValue(item,prop);\\n</pre>\\n<p>You can also modify properties of items using standard JavaScript syntax. However, in order for the JsonRestStore to know that an item has been modified, you must call the <code>changing</code>() method prior to modifying properties. Once you have called <code>changing</code>(), the object will be denoted as being dirty and you can make as many changes to the object (the object&#8217;s properties) as you want until you call the <code>save</code>() method. Once you call the <code>save()</code> method, you need to call <code>changing</code>() again before modifying an item again. Note, that it is safe to call <code>changing</code>() multiple times.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nrecipeStore.changing(item);\\n// mark item as dirty\\nitem.foo = \\\"bar\\\";\\n// instead of calling value = recipeStore.setValue(item,\\\"foo\\\",\\\"bar\\\");\\nitem[prop] = 4;\\n// instead of calling value = recipeStore.setValue(item,prop,4);\\nrecipeStore.save();\\n// this always must be called to commit the changes,\\n// regardless of whether you use setValue or not.\\n</pre>\\n<div style=\\\"border: 1px solid #666666; float: right\\\"> Property Access Performance Comparison</p>\\n<table style=\\\"border-spacing: 5px;\\\">\\n<tr>\\n<td>Browser</td>\\n<td>Direct<br />\\nProperty<br />\\nAccess</td>\\n<td>JsonRestStore<br />\\ngetValue</td>\\n<td>ItemFileReadStore<br />\\ngetValue</td>\\n</tr>\\n<tr>\\n<td>FF3</td>\\n<td>0.037µs</td>\\n<td>1.44µs</td>\\n<td>6.3µs</td>\\n</tr>\\n<tr>\\n<td>FF2</td>\\n<td>0.047µs</td>\\n<td>1.75µs</td>\\n<td>9.1µs</td>\\n</tr>\\n<tr>\\n<td>Safari3</td>\\n<td>0.055µs</td>\\n<td>1.10µs</td>\\n<td>4.1µs</td>\\n</tr>\\n<tr>\\n<td>IE8</td>\\n<td>0.28µs</td>\\n<td>3.0µs</td>\\n<td>13.7µs</td>\\n</tr>\\n<tr>\\n<td>IE6</td>\\n<td>0.28µs</td>\\n<td>5.0µs</td>\\n<td>21µs</td>\\n</tr>\\n</table>\\n</div>\\n<p>If you are writing extensive code based on a data store, this can make your code much more compact, readable, and maintainable. In addition, there are significant performance benefits from direct property access. Property access is 10-50 times faster than using getValue. For large or computationally intense use of data stores, direct property access may be very important for optimal performance.</p>\\n<p>There are a couple of things to remember with direct property access. First, setting properties directly does not trigger notifications. Since setting properties is usually much less frequent than reading properties, it is recommended that in most situations that you only use direct property access for reading, and use the standard simple setValue (or a convenience copy) for writing.</p>\\n<p>Also, the JsonRestStore architecture supports lazy loading using <a href=\\\"http://www.json.com/2007/10/19/json-referencing-proposal-and-library/\\\">JSON referencing</a>. When a value is accessed that is referenced, but not yet loaded, the property value can be tested with the <code>isItemLoaded</code> function. You can load and access the value by calling the <code>loadItem</code> function. You can also use the standard <code>getValue</code> method (or a copy of it as demonstrated above) in situations where the property may be lazy, and the <code>getValue</code> method will automatically download the value on demand. If you are not using JSON referencing and lazy loading you can always directly access properties using normal JavaScript syntax. However, if you are using lazy loading, when a property value is a lazy loaded you can test for values that have not been loaded and load them asynchronously:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nmyValue = item.foo;\\nif(recipeStore.isItemLoaded(myValue)){\\n\\trecipeStore.loadItem({item:myValue,onItem:function(result){\\n\\t\\t... resume with result ...\\n\\t}});\\n}</pre>\\n<p>or simply using synchronous loading (for lazy loaded properties, the Dojo Data getValue function is the easiest form of access):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">myValue = recipeStore.getValue(item,\\\"foo\\\");</pre>\\n<p>Remember, this is only necessary if you are using lazy loading via JSON referencing. Also, using direct property access is purely optional, you can use the JsonRestStore with the same API as any other Dojo Data store.</p>\\n<p>JsonRestStore also provides a constructor for aesthetic creation of new objects. This constructor is accessible with the getConstructor method:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nRecipe = recipeStore.getConstructor();\\n// create a new recipe object instead of recipeStore.newItem();\\nvar recipe = new Recipe();\\n</pre>\\n<p>The constructor also includes a <code>load</code> function for convenient access to the Rest service querying and fetching items by id.</p>\\n<p>Now we can put this all together, If we first create aliases for <code>getValue, setValue,  save</code>, and <code>changing</code> and then create the Recipe constructor we can write:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// make Apple Pie\\nvar query = Recipe.load(\\\"?type='Pie'\\\"); // query for the recipes for pie\\nquery.addCallback(function(queryResults){ // when the results are returned\\n\\tvar recipe = queryResults[0]; // get the first result\\n\\tif(recipe){\\n\\t\\tif(recipe.name!=\\\"Apple Pie\\\"){ // get the name property\\n\\t\\t\\tchanging(recipe); // indicate we are changing properties\\n\\t\\t\\trecipe.name = \\\"Apple Pie\\\"; // rename this recipe to apple pie\\n\\t\\t}\\n\\t}else{\\n\\t\\t// create a new Recipe for apple pie\\n\\t\\trecipe = new Recipe({name:\\\"Apple Pie\\\"});\\n\\t}\\n\\tsave(); // save our changes to the database\\n});\\n</pre>\\n<p>JsonRestStore and ServiceStore also support synchronous mode. Synchronous requests can create a poor user experience since they generally lock up the browser while the browser waits for a response from the server. However, synchronous mode can also simplify programming. Since it is not necessary to use nested callbacks for handling responses, they can be accessed directly after making a request inducing call. Firefox 3 has also eliminated the browser lock-up associated with synchronous calls, making it a more attractive mechanism. To use synchronous mode, you include the syncMode option when instantiating a data store:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">recipeStore = new dojox.data.JsonRestStore({target:\\\"/data\\\",syncMode:true});</pre>\\n<p>In synchronous mode, one can fetch without providing a callback, by directly accessing the <code>results</code> property from the <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.data.api.Request\\\">request object</a> that is returned from the fetch operation:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar queryResults = recipeStore.fetch({query:\\\"?tastes='good'\\\"}).results;\\nvar firstItem = queryResults[0];\\n</pre>\\n<h2>Implementing a RESTful JSON Server</h2>\\n<p>The JsonRestStore can be used with a number of server storage systems that support HTTP JSON/REST interface without any server-side coding. Several JsonRestStore extensions designed to easily connect with <a href=\\\"http://www.persvr.org/\\\">Persevere</a>, <a href=\\\"http://couchdb.apache.org/\\\">CouchDB</a>, and <a href=\\\"http://aws.amazon.com/s3\\\">Amazon S3</a> with minimal configuration are included with Dojo 1.2. You can also easily create your JSON/REST interface for an existing web application and database. This is essentially done by implementing the HTTP methods GET, PUT, POST, and DELETE according to the <a href=\\\"http://www.ietf.org/rfc/rfc2616.txt\\\">HTTP specifications</a> and providing the data in JSON format. While the JsonRestStore can be configured (using <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojox.rpc.Service\\\">dojox.rpc.Service</a>) to support other configurations, generally rows/items/objects should be accessible using URLs of the form /table/id. GET is used to retrieve objects and perform queries, POST is used to create new objects (by POSTing to /table/), PUT is used to modify objects, and DELETE deletes objects. You can also follow the example used by other JSON/REST interfaces like <a href=\\\"http://persevere.sitepen.com/#resthttp\\\">Persevere</a> and <a href=\\\"http://wiki.apache.org/couchdb/HttpDocumentApi\\\">CouchDB</a>.</p>\\n<h3>Transactions</h3>\\n<p>JsonRestStore provides transaction state information so that servers can implement transactions that correspond to the Dojo Data it saves if desired (this is not necessary for a server to implement in order to support REST). Transactions are indicated by a <em>X-Transaction</em> header in the modifications requests. If the <em>X-Transaction</em> header has a value of <em>open</em>, this means that further requests will be delivered that should be included in the current transaction. Once a request is received without an <em>X-Transaction</em> header of open, the server can commit all the changes from the current request and the previous requests that indicated an open transaction. It is recommended that you utilize <a href=\\\"https://www.sitepen.com/blog/?p=338\\\">deterministic request ordering and page sessions</a> if you implement JsonRestStore directed transactions on the server.</p>\\n<p>JsonRestStore also features a shared repository of transactional data between all JsonRestStore instances. Therefore, if you save a change, all the JsonRestStore data store&#8217;s unsaved data will be committed. This means that you don&#8217;t have to track which data stores have modified data, and it also means that you transactions can involve modifications across multiple data stores and corresponding server tables.</p>\\n<h2>Build with, not on JsonRestStore</h2>\\n<p>The JSON REST infrastructure is composed of a layer of modules that can easily be utilized and extended on their own, following the <a href=\\\"http://alex.dojotoolkit.org/?p=649\\\">Dojo philosophy of extensibility</a>. First, JsonRestStore is an extension of the ServiceStore data store and is designed for provider/store separation. The ServiceStore is a <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.data.api.Read\\\">read-only data store</a> built such that various different remote data providers can plugin to the ServiceStore. Thus the ServiceStore provides an adapter between the remote communication provider and widgets. Within dojox.rpc, several commonly used remote communication plugins are provided including REST, JSON-RPC (version 1 and 2), JSONP, and direct POST and GET. You can also easily create custom remote data providers, by creating a service function that takes parameters and returns a dojo.Deferred object that will receive the result of the query. These can all be used with the ServiceStore. The <a href=\\\"http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/grid/tests/test_yahoo_search.html\\\">demonstration of using ServiceStore with a Yahoo search web service</a> shows this in action. You should use the ServiceStore whenever you are working with a read-only web service (that doesn&#8217;t support full bi-directional REST), as it is lighter than JsonRestStore.</p>\\n<p><a href=\\\"http://archive.dojotoolkit.org/nightly/dojotoolkit/dojox/grid/tests/test_yahoo_search.html\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2008/06/yahoo-search-demo.png\\\" alt=\\\"yahoo-search-demo.png\\\" /></a></p>\\n<p>ServiceStore only provides read capabilities (the Dojo Data Read API), however, writable remote communication providers (REST services) can plugin to the JsonRestStore for <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.data.api.Write\\\">full read-write capability</a>. A writable provider is one that provides put, post, and delete functions as properties of the main retrieval function. Once again, you can use the HTTP/REST compliant provider included with Dojo (dojox.rpc.Rest) or you can create your own.</p>\\n<h3>Build with REST Infrastructure</h3>\\n<p>dojox.rpc.Rest can also be used directly. A REST service can be constructed with dojox.rpc.Rest:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">var restService = dojo.rpc.Rest(\\\"/myRestTarget\\\",true);</pre>\\n<p>This indicates that the rest service can be found at <em>/myRestTarget</em> and it is a JSON service, which enables additional caching and optimization capabilities. You can retrieve data from this service:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">restService(\\\"10\\\") // retrieve the object with an id/resource location of 10</pre>\\n<p>This would result in a fetch from the local resource <em>/myRestTarget/10</em>. You can modify this resource with a <em>PUT</em>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">restService.put(\\\"10\\\",{foo:\\\"bar\\\"});</pre>\\n<p>This will store the provided JSON object into the target resource. You can also use <code>restService.post</code> and <code>restService.delete</code> to further directly modify resources. JsonRestStore uses these access points to persist all data changes in the data store. New objects are added with a <code>service.post</code>, deleted objects are removed with a <code>service.delete</code> and modifying objects are updated with a <code>service.put</code>.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2008/06/jsonrest-infrastructure.png\\\" style=\\\"float: left; padding-right: 0.3em;\\\" alt=\\\"jsonrest-infrastructure.png\\\" /></p>\\n<p>The dojox.rpc.JsonRest module is the core engine behind JsonRestStore. JsonRest can be used directly, providing a compact API with the core features of JsonRestStore, including transactional data interaction and query and object loading. dojox.rpc.JsonRest is a singleton object, and provides functions: <code>fetch, commit, revert, changing, deleteObject, getConstructor,</code> and <code>isDirty</code>. These correspond to the same functions on JsonRestStore, but the single JsonRest object can be used without requiring separate data stores to be used to access the API. If you do not need the Dojo Data API, and you only need JSON/REST interaction, you can go lighter, and directly interact with dojox.rpc.JsonRest. However, because the Dojo Data API enables you to plug stores into numerous widgets with minimal effort, generally using JsonRestStore is preferable to directly using JsonRest.</p>\\n<p>JsonRestStore also has comprehensive referencing capabilities, including circular, multiple, and cross-store, and cross-site references. This feature is also provided by a separate JSON referencing module, <code>dojox.json.ref</code> for modularity and extensibility. Therefore, you can use the JSON referencing module to resolve and serialize references for data exchange outside of JsonRestStore. For example, you could easily use referencing for JSON-RPC data, and even allow RPC parameters and return values that reference data from REST stores. This modular structure also allows you to extend or use alternate referencing conventions for JsonRestStore.</p>\\n<h2>Live and Offline Data Stores</h2>\\n<p>Because the JsonRestStore uses the extensible Rest service, JsonRestStore also works with <a href=\\\"http://cometdaily.com/?p=275\\\">HttpChannels</a>, the new cometd transport/protocol module, to provide a Comet-powered real time view of data on a server. This does not require writing any additional event handlers. If you are using a server that supports <a href=\\\"http://cometdaily.com/?p=273\\\">HTTP Channels</a> (<a href=\\\"http://cometdaily.com/?p=274\\\">like Persevere</a>), you can simply add the HttpChannels and you can will have a live view of your data. Be sure to check out the <a href=\\\"http://persevere.sitepen.com:9080/jsclient/dojox/grid/tests/test_dojo_data_model_persevere.html\\\">JsonRestStore in action with live updates</a>.</p>\\n<p>Likewise, JsonRestStore will also run in offline mode by simply adding the forthcoming dojox.rpc.OfflineRest module. The OfflineRest module augments the REST service. As a result, a JsonRestStore running off of a REST service will automatically be able to run in offline mode, with data changes saved locally when offline and automatically re-synced when connectivity is restored.</p>\\n<p>Dojo 1.2 now has a comprehensive infrastructure for RESTful interaction with servers. JsonRestStore is a modular data store with built in capabilities for interacting with servers in standards-based manner that already works with a number of existing server technologies, and provides a widely usable data store for server side storage that is easy for servers to interact with. Stay tuned for more posts on using JsonRestStore with various storage servers.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>NOTE: This post is very out of date. For more up to date information about RESTful JSON in Dojo applications there are a number of more recent tutorials are available, such as the Dojo Store introduction, as well as tutorials demonstrating store-driven grids and trees, among others. You should also take a look at dstore, [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":22075,\"comment_status\":\"open\",\"ping_status\":\"open\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,45,112,55,3],\"tags\":[111,104,113,114],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>RESTful JSON + Dojo Data | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/restful-json-dojo-data/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"RESTful JSON + Dojo Data | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"NOTE: This post is very out of date. For more up to date information about RESTful JSON in Dojo applications there are a number of more recent tutorials are available, such as the Dojo Store introduction, as well as tutorials demonstrating store-driven grids and trees, among others. You should also take a look at dstore, [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/restful-json-dojo-data/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2008-06-13T07:03:14+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/restful-json-dojo-data/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/restful-json-dojo-data/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/restful-json-dojo-data/\\\",\\\"name\\\":\\\"RESTful JSON + Dojo Data | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/restful-json-dojo-data/#primaryimage\\\"},\\\"datePublished\\\":\\\"2008-06-13T07:03:14+00:00\\\",\\\"dateModified\\\":\\\"2008-06-13T07:03:14+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/restful-json-dojo-data/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/336\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=336\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/336/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=336\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=336\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=336\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=336\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:39:11 GMT"],["expires","Mon, 31 Aug 2020 15:39:11 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}