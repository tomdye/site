{"value":{"body":"[{\"id\":627,\"date\":\"2009-02-23T01:01:50\",\"date_gmt\":\"2009-02-23T08:01:50\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2009/02/23/applicationframework-distinction/\"},\"modified\":\"2019-12-11T05:14:32\",\"modified_gmt\":\"2019-12-11T13:14:32\",\"slug\":\"applicationframework-distinction\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/applicationframework-distinction/\",\"title\":{\"rendered\":\"The Distinction Between Application and Framework\"},\"content\":{\"rendered\":\"<p>There are fundamental differences between the roles of application code and framework library modules within an application. Framework libraries provide reusable services that encapsulate lower-level functionality in an abstraction that offers functionality with an easy to use API for higher level code within a variety of different applications. Libraries generally stay static within the development of an application (besides the occasional upgrade). On the other hand, application code utilizes the functionality provided by library modules to create a specific behavior for the logical interaction between users and a domain of data in a generally tighter-defined environment. Application code is completely dynamic within the application development process, it is constantly changing as the application evolves and develops. Recognizing and facilitating these differences is key to intelligently structuring a framework, and is a key principle behind the structure of Persevere.</p>\\n<p><!--more--></p>\\n<h2>Application Level</h3>\\n<p>The application level is where abstract functionality is taken to a concrete realization. The application level is also where we focus more on interacting with our data model and define the structure of our information and how our actions affect that data. A common paradigm to use to describe applications is the <a href=\\\"http://en.wikipedia.org/wiki/Model-view-controller\\\">model-view-controller</a> (MVC) pattern. The model represents our domain-specific information and the encapsulation of the business logic and functionality that adds meaning to the raw stored data. The Persevere server primarily facilitates the model component of MVC applications, allowing the view and controller to be realized as the user interface with a clean separation from the model. Persevere is designed to allow the user interface to run directly in the client/browser for maximum interaction, or in <a href=\\\"https://www.sitepen.com/blog/2008/09/29/jaxer-persevere-via-dojos-jsonreststore/\\\">other UI frameworks</a>. Therefore, Persevere&#8217;s application model is structured in a way to facilitate adding meaning and functionality to raw data with an <a href=\\\"https://www.sitepen.com/blog/2008/11/02/using-the-persistent-object-model-in-persevere/\\\">object-oriented approach to persistent data</a>. Additionally, JavaScript <a href=\\\"http://docs.persvr.org/documentation/storage-model/json-schema\\\">classes are defined</a> for each <a href=\\\"http://docs.persvr.org/documentation/storage-model\\\">table of stored data</a>.</p>\\n<p>Persevere also embraces the reality of the dynamic nature of the application code. When you are developing an application, the code is constantly changing as you add features, fix bugs, refactor, and make improvements. Many frameworks treat the application as a static set of code, but in Persevere the application code is treated as another set of persisted data. Persevere actually has a meta-class system, with a <code>Class</code> table, where each instance is one of the table/class definitions. Persevere classes can be modified directly in their corresponding configuration files, or from the HTTP interface. They exist in declarative data structures that support modification with direct persistence back to their source files (as opposed to imperatively created structures that are made as a side-effect of the result of script execution, which retain reversibility in persisting modified objects). Classes also define the schema for data, specifying any desired constraints on the structure and format of the data. The entirety of the class, <a href=\\\"https://www.sitepen.com/blog/2008/11/17/evolving-schemas-with-persevere/\\\">schema and methods, can be modified dynamically</a> to support maximum efficiency in developing and evolving your application.</p>\\n<p><img src='https://wp.sitepen.com/wp-content/uploads/2009/02/perseverelibraries.png' alt='perseverelibraries.png' style='width:620px;' /></p>\\n<h3>Application Libraries</h3>\\n<p>Applications often do consist of more than only model classes, but may need their own library modules to provide reusable functionality that still is conceptually at the application level in the stack. Application libraries can simply be defined in JavaScript files that are placed in the WEB-INF/jslib directory, and they will be executed when Persevere starts up. Library modules are free to add functions to the global scope, or define namespaces for their functions. Persevere also provides a <a href=\\\"https://wiki.mozilla.org/ServerJS/Modules/SecurableModules\\\"><code>require</code></a> function that can define dependencies and loading order amongst libraries, and be used to define a set of modularized exports. For those familiar with Dojo, Persevere&#8217;s <code>require</code> behaves very similar to <code>dojo.require</code>.</p>\\n<p>Defining global functions is often considered taboo in JavaScript, but broad generalizations without consideration for the underlying purpose can often be counter-productive. In situations where there exists potential for independent parties to create conflicting names, global functions are indeed hazardous. Namespaces are often used for holding functions, so as to categorize a set of functions by their owner, and this is extremely important when code will be used in different environments in conjunction with unknown modules. However, application-level libraries can enjoy a much more deterministic environment. When developing in libraries with a known environment as a single developer or in a small group, creating namespaces for all functions is often completely excessive and unnecessary. To create a module that sets up a globally available function, we can simply define the global in a module:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// add.js\\r\\nadd = function(a,b){\\r\\n  return a + b;\\r\\n}\\r\\n</pre>\\n<p>This makes the add() function available to all server-side code in Persevere as a top level function. Global top-level functions are very simple to create and use, and finding ways to reduce complexity where it is not needed should always be welcome on projects. Persevere has the flexibility to allow application libraries to either define functions globally, in namespaces, or encapsulated in a set of exports (that we will look at below), so the most appropriate mechanism can be used at each layer in the application stack.</p>\\n<h2>Framework Libraries</h2>\\n<p>As we continue down the layers in the application stack, we are moving from the concrete application implementation into the abstract reusable functionality realm. Here we must be much more cautious in how functions are exposed. The <code>require</code> provided by Persevere conforms to the <a href=\\\"https://wiki.mozilla.org/ServerJS/Modules/SecurableModules\\\">ServerJS API draft specification</a> and allows for safe encapsulated modules that do not touch the global scope at all. Modules are given an <code>exports</code> object which they can use to assign functions to. The exports object is then returned whenever a <code>require</code> call is made for that module. Modules are each executed in their own scope (a child of the global scope, so they can still assign to and access the global scope, as mentioned before). Therefore we can create completely encapsulated modules, for example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// math.js\\r\\n// multiply is defined as local/private to the module,\\r\\n//  since it is not assigned to a global variable\\r\\nfunction multiply(a, b){\\r\\n  return a * b;\\r\\n}\\r\\nexports.factorial = function(x){\\r\\n   if(x == 1){\\r\\n      return 1;\\r\\n   }\\r\\n   return multiply(x, exports.factorial(x - 1));\\r\\n}\\r\\n</pre>\\n<p>We can now use this module with the <code>require</code> function:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar math = require(&quot;math&quot;);\\r\\nmath.factorial(5) -&gt; 120\\r\\n</pre>\\n<p>This module has not modified the global scope at all (not even with namespaces). The <a href=\\\"http://groups.google.com/group/serverjs\\\">ServerJS group</a> is working on a standard set of libraries that will also be available as modules and accessible through the require when implemented.</p>\\n<p>Persevere also provides a means for defining single function/constructor modules (this is an extension not defined in the standard require specification). You can assign a function (or any value) directly to the exports object and that function will be returned by require calls. For example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// delay.js\\r\\nexports = function delay(func){\\r\\n   setTimeout(func,100);\\r\\n}\\r\\n\\r\\n// caller\\r\\nvar delay = require(&quot;delay.js&quot;);\\r\\ndelay(function(){\\r\\n  console.log(&quot;a little later&quot;);\\r\\n});\\r\\n</pre>\\n<p>In Persevere, all modules are loaded on startup. This allows all module startup code to execute in a single thread to set up the global scope. Once startup is finished, the global scope is frozen to prevent concurrent modification from different threads and open up the possibility of race conditions and non-deterministic behavior. The exports of modules are also frozen for the same reason. In combination with Persevere&#8217;s transactional handling of shared persistent data, this allows Persevere to maintain a thread-safe environment for application code, while still allowing multi-threaded request handling. Modules are only loaded once, each require call returns the exports object defined by the module, but the module is not re-loaded or executed.</p>\\n<h3>Leveraging Java Libraries</h3>\\n<p>Further down in the application stack, we have the foundational components that handle lower-level operations. Fortunately, Persevere is built on Rhino, which provides access to Java libraries. There is a virtually limitless selection of Java libraries for almost any type of low-level functionality needed, including sockets, encryption, various IO protocols, file system interaction, and so on. This ability to utilize Java libraries is an extremely powerful benefit of Persevere&#8217;s Rhino based infrastructure and opens up an enormous range of components that can be used. Often there is significant legacy functionality that can leveraged from Persevere through the Java bridge as well.</p>\\n<p>Often these lower-level components deal with the more processor intensive tasks and IO operations which may benefit being written in Java, enjoying the maturity of <a href=\\\"http://en.wikipedia.org/wiki/Java_performance\\\">years of intense optimizations</a>. While there are plenty of varying opinions out there about Java, one thing is relatively undisputed: Java is <a href=\\\"http://shootout.alioth.debian.org/u32/benchmark.php?test=all&#038;lang=all&#038;box=1\\\">fast</a>. <a href=\\\"http://blog.dhananjaynene.com/2008/07/performance-comparison-c-java-python-ruby-jython-jruby-groovy/\\\">Very fast</a>. For performance sensitive components, being able to write cycle intense, low level components in a lower-level language like Java, while keeping the majority of application code in high-level JavaScript code can be highly beneficial. For example, suppose we needed a function to calculate prime numbers and we need the best performance possible. We could write the function in Java to maximize the speed:</p>\\n<pre class=\\\"brush: java; title: ; notranslate\\\" title=\\\"\\\">\\r\\npackage org.acme;\\r\\npublic class Prime {\\r\\n\\tpublic static long firstPrime(long start){\\r\\n\\t\\tnextNum: for(long num = start; true; num++){\\r\\n\\t\\t\\tlong numbersToCheck = (long) Math.sqrt(num);\\r\\n\\t\\t\\tfor(int i = 2; i &lt; numbersToCheck; i++){\\r\\n\\t\\t\\t\\tif(num % i == 0){\\r\\n\\t\\t\\t\\t\\tcontinue nextNum;\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\treturn num;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n</pre>\\n<p>And now we can utilize this from JavaScript, but have the performance benefit of the low-level Java code execution:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\norg.acme.Prime.firstPrime(100000000000000);\\r\\n</pre>\\n<p>While Persevere is certainly designed for <a href=\\\"https://www.sitepen.com/blog/2008/07/18/clientserver-model-on-the-web/\\\">client-server applications</a> to enjoy the consistency of a single language for end-to-end application code, that doesn&#8217;t mean that one should necessarily try to fit every layer in the stack into JavaScript. If it makes more sense to use a static lower level language in certain situations, then do so. The Rhino platform gives Persevere developers this freedom, allowing a powerful high-to-low level set of programming paradigms.</p>\\n<h3>Application/Framework Distinction in Persevere</h3>\\n<p>The Persevere server framework makes an intentional effort to create a separation between application code and library modules. Generally, languages and frameworks do not distinguish between the two, even though they can serve very different roles in an application, and have entirely different characteristics in the development cycle. With Persevere, a logical and distinct separation is made to harmonize with the different aspects of libraries and application code, and create an intuitive technological stack across the full spectrum from top to bottom.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>There are fundamental differences between the roles of application code and framework library modules within an application. Framework libraries provide reusable services that encapsulate lower-level functionality in an abstraction that offers functionality with an easy to use API for higher level code within a variety of different applications. Libraries generally stay static within the development [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":17630,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[3,178],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>The Distinction Between Application and Framework | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/applicationframework-distinction/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"The Distinction Between Application and Framework | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"There are fundamental differences between the roles of application code and framework library modules within an application. Framework libraries provide reusable services that encapsulate lower-level functionality in an abstraction that offers functionality with an easy to use API for higher level code within a variety of different applications. Libraries generally stay static within the development [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/applicationframework-distinction/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2009-02-23T08:01:50+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2019-12-11T13:14:32+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/applicationframework-distinction/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/applicationframework-distinction/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/applicationframework-distinction/\\\",\\\"name\\\":\\\"The Distinction Between Application and Framework | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/applicationframework-distinction/#primaryimage\\\"},\\\"datePublished\\\":\\\"2009-02-23T08:01:50+00:00\\\",\\\"dateModified\\\":\\\"2019-12-11T13:14:32+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/applicationframework-distinction/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/627\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=627\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/627/revisions\"}],\"predecessor-version\":[{\"id\":19714,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/627/revisions/19714\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17630\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=627\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=627\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=627\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=627\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b01ab82b88f07a6-LHR"],["cf-request-id","03d4e985b5000007a68f921200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:22:56 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d18d31e42b53150abdfe27c5ee9cd87471594293775; expires=Sat, 08-Aug-20 11:22:55 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}