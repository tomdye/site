{"value":{"body":"[{\"id\":437,\"date\":\"2008-07-30T00:01:48\",\"date_gmt\":\"2008-07-30T07:01:48\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2008/07/30/protected-cross-domain-authentication-with-javascript/\"},\"modified\":\"2008-07-30T00:01:48\",\"modified_gmt\":\"2008-07-30T07:01:48\",\"slug\":\"protected-cross-domain-authentication-with-javascript\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/\",\"title\":{\"rendered\":\"Protected Cross-Domain Authentication with JavaScript\"},\"content\":{\"rendered\":\"<p><a href=\\\"http://code.google.com/apis/ajaxsearch/documentation/\\\">Google</a> and <a href=\\\"http://developer.yahoo.com/search/web/V1/webSearch.html\\\">Yahoo</a> have JavaScript APIs that let you perform searches. <a href=\\\"http://en.wikipedia.org/w/api.php\\\">Wikipedia</a> has a JavaScript API that lets you grab data from its pages. These APIs can be accessed cross-domain with a transport method known as <a href=\\\"https://www.sitepen.com/blog/2008/03/19/pluggable-web-services-with-smd/\\\">JSONP</a>. JSONP works by allowing you add a script tag to your page which points to a URL on their server. The server outputs JavaScript that will call a method (defined as part of the query string in the URL), passing it <a href=\\\"http://www.json.org/example.html\\\">JSON</a>-formatted data.</p>\\n<p>You&#8217;ll notice that these services are read-only. I don&#8217;t currently know of any cross-domain JavaScript APIs that allow you to write data in any meaningful way. An example of this sort of data would be a way, through JavaScript, to update your status on a social networking web site.</p>\\n<p><!--more--></p>\\n<p>Is this lack of functionality simply because developers haven&#8217;t taken the time to implement it? To some extent, yes. Almost all of the sites where this would be useful haven&#8217;t implemented a JavaScript API at all. At the same time, this has been a pretty tough feature to implement in a way that both protects the user while still making it a relatively painless process.</p>\\n<p>Right now, several sites have APIs that work through HTTP using <a href=\\\"http://en.wikipedia.org/wiki/Basic_authentication_scheme\\\">HTTP Basic Authentication</a> (e.g. <a href=\\\"http://groups.google.com/group/twitter-development-talk/web/api-documentation\\\">Twitter</a>). If a site were to try to utilize these HTTP APIs through JavaScript, they would have to use their server as a proxy. And in so doing, you would have to trust the server with your username and password.</p>\\n<h2>Why not just check to see if they&#8217;re logged in?</h2>\\n<p>This may be better explained through an example. You work for <a href=\\\"https://www.sitepen.com/blog/2007/11/06/simple-dojo-grids/\\\">Gaskets, Inc.</a>, and your supplier has just sent you an email announcing their new JavaScript API. They explain that in addition to searching their inventory, the API will allow customers to view their order history. You only need to be logged in to your suppliers site, and the API will work from any other site.</p>\\n<p>Gaskets, Inc. decides that they don&#8217;t currently have the resources to use this API. But meanwhile, over at Evil Gizmos, Ltd., a clever (evil) engineer has decided that the API could prove very valuable to the company.</p>\\n<p>You see, every time someone visits the home page of Evil Gizmos, Ltd., some JavaScript on the page calls the <code>getOrderHistory</code> API function on the supplier&#8217;s site. During your day working at Gaskets, Inc., you browse over to Evil Gizmos, Ltd. to see what they&#8217;re up to. When you visit, their site pulls down the complete order history of Gaskets, Inc. and saves it on their server.</p>\\n<p>How did this happen? Well, your supplier was so excited about providing this new functionality, that they ignored the warnings from their engineers about security. The evil engineer at Evil Gizmo&#8217;s Ltd. noticed that, in the email, the only mention of authentication was that you were logged in to their site.</p>\\n<p>JSONP works by adding a script tag to a page to load data from an external site. Adding a script tag is simply another method of making an HTTP request. When an HTTP request is made by the browser, no matter what site it originates from, all your cookies related to that domain are sent to that site, as part of the official HTTP specifications. If you were logged in to that site, your cookies are what authenticate you and restore your session. No matter what site adds this script tag, the server will always think that you&#8217;re logged in. A malicious callback function can accept this data, and use Ajax to save it back to their site.</p>\\n<h2>Just being logged in isn&#8217;t enough</h2>\\n<p>First of all, if all you are verifying when sending sensitive data through JSONP is that a user has logged in, stop right now. Does this mean that you&#8217;ve just lost the functionality you were hoping to provide? Not totally, the simplest fix is to add a configuration screen to your site that lets a user specify what sites they trust. Then, when you receive an API request, after verifying that a user is logged in, you can compare the referrer specified in the HTTP request against the user&#8217;s list of authorized sites.</p>\\n<p>While this patches the security problem, it requires extra work on the user&#8217;s part. Now, in order for someone to use this API, a user must be logged in to the API site first, as well as granting the third-party site API permission.</p>\\n<h2>What should it look like?</h2>\\n<p>Everything should originate from the site you visit, and you shouldn&#8217;t be required to leave the page in order to perform your authentication or authorization.</p>\\n<p>Nowhere should the site you&#8217;re visiting be able to access your username and password. And if you arrived at the site already authenticated, you should explicitly authorize the site to have access to that site&#8217;s API.</p>\\n<h2>Is this possible?</h2>\\n<p>Really only one possibility exists that fits our requirements. The iframe tag will allow us to nest a page from any URL in a way that obeys <a href=\\\"http://en.wikipedia.org/wiki/Same_origin_policy\\\">same origin policies</a>.</p>\\n<p>An iframe presents several important properties: It allows you to nest a third-party site in the page, it allows multi-page interaction with the third-party site, and it has security restrictions that prevent the parent and child frames from accessing any data in the other. But most importantly, a single property exists that can transport data between documents: <a href=\\\"https://www.sitepen.com/blog/2008/07/22/windowname-transport/\\\">window.name</a>.</p>\\n<p>Let&#8217;s quickly go over the mechanisms that make the exchange of data possible. First, in order for the parent frame to read the window.name property of the child frame, it needs to contain a document in the same domain. During authentication, while the iframe is pointed at a different domain, we have no way of reading the <code>window.name</code> property. Nor can we determine when a user is done authenticating. It&#8217;s up to the authenticating server to decide how many steps the user takes in order to log in. For example, if the authenticating server allows a username and password to be entered in the iframe, the user might mistype their password before getting it correct. So we&#8217;ll need to make sure that the server has a way to return the iframe to a state in which <code>window.name</code> can be read when the authentication and authorization phase is complete.</p>\\n<p>We start out by creating an iframe containing an HTML file in the same domain. This file sets <code>window.name</code> to a location that the authenticating server can use to redirect to after authentication and authorization. Once this is done, the iframe gets redirected to the third-party authentication page. On this page, the server can do anything it wants to confirm authorization, but it will ultimately output a script that grabs the redirect location from <code>window.name</code>, rewrites <code>window.name</code> with some information we&#8217;ll get to in a second, and then, using <code>window.location</code>, redirects back to the original site. After redirection, using this new value in <code>window.name</code>, authorization can be confirmed, and using the JSONP API in an authenticated way is now possible.</p>\\n<p>Throughout the whole process, everything you did inside of the iframe was invisible to the originating site.</p>\\n<h2>The library: xauth</h2>\\n<p>In addition to support within the forthcoming Dojo 1.2 release, I&#8217;ve written a <a href=\\\"http://code.google.com/p/xauth/\\\">tiny library</a> that provides a lightweight API and the local file that should be in the iframe when the page loads.</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;div id=&quot;wrapper&quot;&gt;\\n\\t&lt;iframe src=&quot;js/xauth/blank.html&quot;&gt;&lt;/iframe&gt;\\n&lt;/div&gt;\\n</pre>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;script src=&quot;js/xauth/xauth.js&quot;&gt;&lt;/script&gt;\\n&lt;script&gt;\\n\\twindow.onload = function(){\\n\\t\\txauth.init({\\n\\t\\t\\tnode: document.getElementById(&quot;wrapper&quot;),\\n\\t\\t\\turl: &quot;http://gaskets.inc/api/approval.php&quot;\\n\\t\\t}).addCallback(function(status, token, node){\\n\\t\\t\\talert([status, token, node]);\\n\\t\\t\\tnode.style.display = &quot;none&quot;;\\n\\t\\t});\\n\\t};\\n&lt;/script&gt;\\n</pre>\\n<h2>Breaking it down</h2>\\n<p>We have a wrapper node, which would typically contain an item on the sidebar of your page with a header that makes it clear what the iframe contains (eg. &#8220;Authorize Gasket Supplier&#8221;). Because we probably want to destroy this node once the user is authorized, it makes sense that we would pass this &#8220;wrapper&#8221; node to the <code>init</code> function. The function is smart enough to look for the first iframe in the DOM beneath this passed node, and work with that.</p>\\n<p>Along with that node, we need to specify where to send the user to for authorization.</p>\\n<p>We&#8217;re only adding a single callback here via <code>addCallback</code>, though many can be added. An integer indicating status, a token, and the wrapper node are passed to the function. The status and token will make sense once we cover the server side of things.</p>\\n<h2>The server side of things</h2>\\n<p>I won&#8217;t tell you how to write your server-side code (though the Google Code project has some <a href=\\\"http://code.google.com/p/xauth/source/browse/#svn/trunk/tests\\\">examples</a>. But the important stuff looks like this:</p>\\n<pre class=\\\"brush: php; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;?php if($authorized): ?&gt;\\n&lt;html&gt;\\n&lt;script&gt;\\nvar redirect = window.name;\\nwindow.name = &quot;&lt;?php print $token; ?&gt;&quot;;\\nwindow.location = redirect + &quot;#xauth=1&quot;;\\n&lt;/script&gt;\\n&lt;/html&gt;\\n&lt;?php endif; ?&gt;\\n</pre>\\n<p>Adding the hash <code>xauth=1</code> is a way to pass status to the callbacks. I like to use 1 to indicate success and 0 to indicate failure, but the codes are up to you and you&#8217;re free to give them any meaning that you want.</p>\\n<p>You should always change the value of window.name, and whatever value you set it to will be passed as the second parameter to the callback. This is useful for providing a token to the user. The idea is that, although you can save a list of trusted sites for a given user, if you would prefer the authorization to take place for every page rather than every site, you can simply create a unique token (bound to the user&#8217;s session) that you expect to be passed in any future API calls. But this is completely optional.</p>\\n<h2>Displaying the login form</h2>\\n<p>Though you are free to place a login form inside of the iframe, this might freak some users out. Users that are particularly security conscious, not being able to easily see the URL of the iframe, will likely give up, leave, and not use your service. An easy solution to this is to present a link that will pop up a small login form on your site that automatically closes on successful login, and a &#8220;Continue&#8221; button that will finish the process up in the iframe.</p>\\n<p>It&#8217;s tempting to worry that using a login form inside of an iframe makes your users more susceptible to <a href=\\\"http://en.wikipedia.org/wiki/Phishing\\\">phishing</a> attacks. Ultimately, any site could put any form inside of an iframe claiming it&#8217;s your login form, with or without your approval. You are slightly better off by not having your login form inside of an iframe because your users will become accustomed to you never having a login form embedded in another page, but there&#8217;s really no way to &#8220;fix&#8221; another site claiming that a user can log in through a form on their page.</p>\\n<h2>&#8220;I don&#8217;t think I can trust this newfangled technology&#8221;</h2>\\n<p>Well, old-timer, none of this is new. Although it might be better said that all the security policies that browser enforces remain in effect using this technique. In fact, the only data that gets exchanged between the two sites involved in the transaction is the data that each site <strong>explicitly</strong> assigns to what is technically nothing more than a shared variable.</p>\\n<ul>\\n<li>Your cookies cannot be read or modified by the third-party site</li>\\n<li>Your HTML is only available to your pages</li>\\n<li>You will always get a reliable HTTP referrer value</li>\\n<li>Your server handles all authentication, period. You can theoretically tell the third-party site that the user is authenticated even if they aren&#8217;t. Simply telling them they have authentication doesn&#8217;t mean it&#8217;s true</li>\\n</ul>\\n<p>The &#8220;trick&#8221; to this technique is simply utilizing window.name to tell the server where the iframe should be returned to once the authorization is complete, and to use it again to tell the client whether the user approved or denied the authorization request. Everything that matters as far as security goes is up to your server, and there are plenty of options to choose from.</p>\\n<h2>Summarizing server options</h2>\\n<ul>\\n<li>User does not have a session (is not logged in) with the API site:\\n<ul>\\n<li>A form is presented for the user to enter their username and password:\\n<ul>\\n<li>On successful login, <code>window.name</code> gets set, iframe is returned to originating site.</li>\\n<li>Optionally, the HTTP referrer might be saved for later automatic authorization.</li>\\n</ul>\\n</li>\\n<li>A link is presented along with a &#8220;Continue&#8221; button:\\n<ul>\\n<li>When the user clicks the link, a new window pops up with a login screen.</li>\\n<li>On successful login, <code>window.close();</code> returns the user to the previous window.</li>\\n<li>Pressing the continue button confirms a valid session <code>window.name</code> gets set, iframe is returned to originating site.</li>\\n<li>Optionally, the HTTP referrer might be saved for later automatic authorization.</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>User has a session (is logged in) with the API site:\\n<ul>\\n<li>User has a list of authenticated sites:\\n<ul>\\n<li>If the HTTP referrer is in the list, <code>window.name</code> gets set, iframe is returned to originating site.</li>\\n<li>If the originating referrer is not in the list, authorization is requested. Depending on whether &#8220;Yes&#8221; or &#8220;No&#8221; is chosen, <code>window.name</code> will likely start with a different status code. In either case, iframe is returned to originating site.</li>\\n</ul>\\n</li>\\n<li>If the user does not have a list of authenticated sites, a random token is generated, associated with the user&#8217;s session, and placed into <code>window.name</code> after the status code. The iframe is returned to the originating site and future API calls expect to see this token present.</li>\\n</ul>\\n</li>\\n</ul>\\n<h2>In action</h2>\\n<p>Check out our <a href=\\\"https://www.sitepen.com/labs/code/xauth/\\\">fictional third-party site</a> that uses Zone Products&#8217;s API, and follow the login instructions.</p>\\n<p>After you&#8217;re logged in, visit <a href=\\\"http://someclosure.com/xauth/\\\">Sketchy Site, Inc.</a>to see that just because you&#8217;ve logged in, a site still needs your explicit approval for you to continue.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Google and Yahoo have JavaScript APIs that let you perform searches. Wikipedia has a JavaScript API that lets you grab data from its pages. These APIs can be accessed cross-domain with a transport method known as JSONP. JSONP works by allowing you add a script tag to your page which points to a URL on [&hellip;]</p>\\n\",\"protected\":false},\"author\":22,\"featured_media\":22075,\"comment_status\":\"open\",\"ping_status\":\"open\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,45,3,43],\"tags\":[155,158,154],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Protected Cross-Domain Authentication with JavaScript | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Protected Cross-Domain Authentication with JavaScript | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Google and Yahoo have JavaScript APIs that let you perform searches. Wikipedia has a JavaScript API that lets you grab data from its pages. These APIs can be accessed cross-domain with a transport method known as JSONP. JSONP works by allowing you add a script tag to your page which points to a URL on [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2008-07-30T07:01:48+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/\\\",\\\"name\\\":\\\"Protected Cross-Domain Authentication with JavaScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/#primaryimage\\\"},\\\"datePublished\\\":\\\"2008-07-30T07:01:48+00:00\\\",\\\"dateModified\\\":\\\"2008-07-30T07:01:48+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/5faa55fe74a96ec3ce93ae43191b4efa\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/protected-cross-domain-authentication-with-javascript/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/5faa55fe74a96ec3ce93ae43191b4efa\\\",\\\"name\\\":\\\"Neil Roberts\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Neil Roberts\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/437\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/22\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=437\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/437/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=437\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=437\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=437\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":22,\"name\":\"Neil Roberts\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/nroberts/\",\"slug\":\"nroberts\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Neil Roberts, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Neil Roberts, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/nroberts/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nroberts/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/nroberts/\\\",\\\"name\\\":\\\"Neil Roberts, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/5faa55fe74a96ec3ce93ae43191b4efa\\\",\\\"name\\\":\\\"Neil Roberts\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/69fd66470805247975fb8c663e9a46ee?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Neil Roberts\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nroberts/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/22\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a77801be92ef3f3-LHR"],["cf-request-id","037e8e656d0000f3f334a69200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:56:03 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d1c8dc270e3e477dd3eb160279d8bc72f1592844963; expires=Wed, 22-Jul-20 16:56:03 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}