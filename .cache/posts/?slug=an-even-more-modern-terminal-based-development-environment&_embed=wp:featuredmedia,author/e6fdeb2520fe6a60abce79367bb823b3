{"value":{"body":"[{\"id\":26244,\"date\":\"2020-06-15T05:00:45\",\"date_gmt\":\"2020-06-15T12:00:45\",\"guid\":{\"rendered\":\"https://www.sitepen.com/?p=23983\"},\"modified\":\"2020-07-08T04:54:31\",\"modified_gmt\":\"2020-07-08T11:54:31\",\"slug\":\"an-even-more-modern-terminal-based-development-environment\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/\",\"title\":{\"rendered\":\"An Even More Modern Terminal-Based Development Environment\"},\"content\":{\"rendered\":\"\\n<p>It&#8217;s been a year since I last talked about my <a href=\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/\\\">development environment</a>. Many things remain the same: I&#8217;m using neovim, zsh, and tmux. However, I have made a few changes to improve usability and make my day-to-day work feel faster. I&#8217;m using a new terminal application, my vim environment has changed dramatically (at least behind the scenes), and I started using a pretty neat keyboard-based window manager.</p>\\n\\n\\n\\n<p>This article is a continuation of the previous one. Rather than starting from scratch, I&#8217;ll discuss some of the interesting changes I&#8217;ve made to my environment over the last year: new tools I&#8217;ve started using, and configuration changes that have improved my productivity.</p>\\n\\n\\n\\n<p>All of the configuration files and scripts discussed in this article are available in my <a href=\\\"https://github.com/jason0x43/dotfiles\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">dotfiles repo</a>, so you can always look there for more information. Also, feel free to <a href=\\\"https://github.com/jason0x43/dotfiles/issues\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">open issues</a> if you have questions or suggestions!</p>\\n\\n\\n\\n<h2>Terminal upgrade</h2>\\n\\n\\n\\n<p>Last year I was using Apple&#8217;s Terminal.app, which is a great terminal client, but it does have a couple of downsides. For one (and the one that got me started looking at other terminals), it doesn&#8217;t support true color. I mean, you can set the palette for a theme to any colors you like, but programs are limited to 256 colors. Some of the vim extensions I had picked up really benefited from more color flexibility, so Terminal.app was starting to feel limiting.</p>\\n\\n\\n\\n<p>The other issues I would occasionally run into were redraw times and keypress latency. Terminal.app is pretty fast, but I would still occasionally see flickering in my full screen tmux sessions. And while a few extra milliseconds of key press latency may not sound like much, it can become noticeable when you spend 90% of your day using text-based applications and interacting with a shell.</p>\\n\\n\\n\\n<p>Speed has become something of a focus for terminal clients over the last couple of years. <a href=\\\"https://github.com/alacritty/alacritty\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Alacritty</a>, which bills itself as &#8220;fastest terminal emulator in existence,&#8221; uses OpenGL for hardware-accelerated rendering. It was initially released in September 2018, just a couple months before the previous version of this article was published. <a href=\\\"https://www.iterm2.com/index.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">iTerm2</a>, probably the most popular third-party terminal client for macOS, released its own hardware-accelerated rendering engine, using Apple&#8217;s Metal framework, with version 3.2 in August of 2018.</p>\\n\\n\\n\\n<p>I&#8217;ve used both Alacritty and iTerm2, and while both are quite good, I&#8217;ve been using <a href=\\\"https://sw.kovidgoyal.net/kitty/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">kitty</a> for the last few months. It also uses OpenGL for rendering, so even large windows feel very solid. Kitty sits somewhere between Alacritty and iTerm when it comes to features. Alacritty is extremely minimal, with the idea that it should be used with something like tmux to provide more features. iTerm, on the other hand, is very feature-rich, with built in features to handle the kind of window splitting that tmux provides, and menu options for everything. Kitty has a very minimal UI, but it has quite a bit of built in functionality: it has a well-defined remote control API, it supports extensions, windows can be split much like tmux does (although I still prefer tmux), and it provides very fine-grained font control. In my experience, it also feels a bit faster than both iTerm and Alacritty.</p>\\n\\n\\n\\n<p>One feature I really like is kitty&#8217;s <a href=\\\"https://sw.kovidgoyal.net/kitty/remote-control.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">remote control protocol</a>. Basically, it lets you control kitty windows from the command line or Python scripts. You can change a window&#8217;s layout, set colors, update the title, and even send arbitrary text to a shell. I use it to set the colors for all my terminal windows. This is much more flexible than the method I was using last year with Terminal.app. To update all open Terminal.app windows you have to tell Terminal.app to use a predefined theme, which means that you had to have defined and installed that theme at some point. With iTerm you can use dynamic profiles to do something similar, but there can be a several second lag between a profile update and terminals actually reflecting the change. With kitty, on the other hand, I can send arbitrary new colors to all open kitty windows as string values in a Python script and see instant results.</p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/image1.gif\\\" alt=\\\"using kitty's remote control protocol to update the terminal theme in multiple windows\\\" class=\\\"wp-image-23986\\\"/></figure>\\n\\n\\n\\n<p>It also doesn&#8217;t hurt that kitty is actually cat-themed. It&#8217;s extensions are called &#8220;kittens&#8221;. How could you not want to use it?</p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/image3.png\\\" alt=\\\"kitty terminal client logo\\\" class=\\\"wp-image-23988\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/image3.png 256w, https://wp.sitepen.com/wp-content/uploads/2020/04/image3-150x150.png 150w\\\" sizes=\\\"(max-width: 256px) 100vw, 256px\\\" /></figure></div>\\n\\n\\n\\n<h2>Managing virtual environments</h2>\\n\\n\\n\\n<p>While my shell hasn&#8217;t changed (still <a href=\\\"http://zsh.sourceforge.net/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">zsh</a>), I did make some upgrades to how I manage virtual environments, particularly around how they&#8217;re indicated by my prompt.</p>\\n\\n\\n\\n<h3>asdf</h3>\\n\\n\\n\\n<p><a href=\\\"https://asdf-vm.com/#/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">asdf</a> is a command that attempts to unify all the *env and *vm programs that developers use to manage build tools. Every dev tool seems to have one (or four): Node has <a href=\\\"https://github.com/nvm-sh/nvm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">nvm</a>, <a href=\\\"https://github.com/nodenv/nodenv\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">nodenv</a>, <a href=\\\"https://github.com/ekalinin/nodeenv\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">nodeenv</a>, <a href=\\\"https://github.com/tj/n\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">n</a>; Ruby has <a href=\\\"https://github.com/rvm/rvm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">rvm</a>, <a href=\\\"https://github.com/postmodern/chruby\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">chruby</a>, <a href=\\\"https://bitbucket.org/jonforums/uru/src/master/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">uru</a>, <a href=\\\"https://github.com/rbenv/rbenv\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">rbenv</a>; Python has <a href=\\\"https://github.com/pyenv/pyenv\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">pyenv</a>; etc. Each of them does the same job, but they usually work just a bit differently.</p>\\n\\n\\n\\n<p>asdf seeks to standardize these tools. You install a base tool, asdf, and then install plugins to manage specific tools. Plugins are analogous to other environment management tools, but all asdf plugins use options and subcommands.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-bash\\\">$ asdf plugin install nodejs\\n$ asdf nodejs install 10.16.3\\n$ asdf local nodejs 10.16.3\\n$ asdf plugin install python\\n$ asdf python install 3.7.7\\n$ asdf local python 3.7.7</code></pre>\\n\\n\\n\\n<p>Running <code>asdf plugin list all</code> will list all available plugins; there are 185 of them at the time of this writing. These include plugins for a number of command-line utilities aside from language interpreters, such as <a href=\\\"https://github.com/uesyn/asdf-ripgrep\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">ripgrep</a> and <a href=\\\"https://github.com/cLupus/asdf-sqlite\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">sqlite</a>.</p>\\n\\n\\n\\n<p>By default, asdf works like most other version managers. You add a script to your shell profile, and then create a <code>.tool-versions</code> file in a project directory that tells asdf what versions of what tools it should activate. When you&#8217;re in that directory, or a subdirectory, asdf activates the specified tools. asdf can also work with config files for most other version managers, like nodenv&#8217;s <code>.node-version</code> file.</p>\\n\\n\\n\\n<h3>direnv</h3>\\n\\n\\n\\n<p><a href=\\\"https://direnv.net/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">direnv</a> is a shell extension for various *nix shells (bash, zsh, tcsh, …) that lets you configure your environment on a per-directory basis. For example, when I cd into one of the Node-based projects I&#8217;m currently working on (the project root or a subdirectory), direnv will:</p>\\n\\n\\n\\n<ul><li>add some cloud testing service API keys to my shell environment</li><li>switch to a local install of Node.js v10</li><li>enable my locally-hosted npm registry (for publishing and installing test versions of packages)</li></ul>\\n\\n\\n\\n<p>When I leave the directory, direnv restores my shell environment to whatever it was previously.</p>\\n\\n\\n\\n<p>Direnv works by executing an <code>.envrc</code> file in a bash shell, capturing the output, and then applying that to the current shell. The &#8220;executing in a bash shell&#8221; part provides a lot of flexibility. For example, in Python projects I&#8217;ll often add an <code>.envrc</code> file like:</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-bash\\\">use tools python@3.7.5\\nuse pyenv</code></pre>\\n\\n\\n\\n<p>The first line is a custom command (defined in my <a href=\\\"https://github.com/jason0x43/dotfiles/blob/master/config/direnv/direnvrc\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">direnvrc</a>) that tells direnv I want to use Python 3.7.5, via asdf. If asdf doesn&#8217;t have a local install of Python 3.7.5 yet, it will get one.</p>\\n\\n\\n\\n<p>The second line is also a custom command. It tells direnv that I want a local Python environment for the current directory (basically, I want the Node.js + npm experience with Python).</p>\\n\\n\\n\\n<p>When I start a Python project, I can just drop this two line <code>.envrc</code> file into the project root, wait a few seconds, and my Python environment will be ready to go!</p>\\n\\n\\n\\n<p>You can install and use direnv by itself, such as with homebrew on a Mac. You can also install it as an asdf plugin, which will provide tighter integration between asdf and direnv.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-bash\\\">$ asdf plugin install direnv</code></pre>\\n\\n\\n\\n<p>As with asdf, direnv hooks into your shell via a command in one of your shell init files (<code>.zshrc</code>). However, you don&#8217;t need to add both asdf and direnv to your shell init. You can actually use direnv to manage asdf, which is a bit faster (direnv is a binary, so it&#8217;s setup time is a bit faster than asdf&#8217;s), and it also saves you from needing to duplicate settings for two different tools.</p>\\n\\n\\n\\n<h3>Powerlevel10k</h3>\\n\\n\\n\\n<p>When I wrote the previous version of this article I was using a modified version of the <a href=\\\"https://github.com/sindresorhus/pure\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">pure</a> zsh prompt theme. Pure is quite nice, but it&#8217;s fairly minimal. As I started using virtual environments more, I wanted my prompt to show more information about my current environment. That was possible with pure, but it required me to maintain a fair bit of code in my prompt setup file.</p>\\n\\n\\n\\n<p>Then I found <a href=\\\"https://github.com/romkatv/powerlevel10k\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Powerlevel10k</a> (p10k). It&#8217;s as awesome as its name suggests. This theme is feature rich, allowing me to easily add tags for all the interesting bits of my environment.</p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/image4.png\\\" alt=\\\"An Even More Modern Terminal-Based Development Environment\\\" class=\\\"wp-image-23989\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/image4.png 1686w, https://wp.sitepen.com/wp-content/uploads/2020/04/image4-300x16.png 300w, https://wp.sitepen.com/wp-content/uploads/2020/04/image4-1024x53.png 1024w, https://wp.sitepen.com/wp-content/uploads/2020/04/image4-768x40.png 768w, https://wp.sitepen.com/wp-content/uploads/2020/04/image4-1536x80.png 1536w\\\" sizes=\\\"(max-width: 1686px) 100vw, 1686px\\\" /></figure>\\n\\n\\n\\n<p>The line above the prompt is showing:</p>\\n\\n\\n\\n<ul><li>The current git branch</li><li>Whether direnv is active in the current directory (▼)</li><li>Whether I&#8217;m using a local npm registry</li><li>The current version of Node.js (if not the system default)</li><li>The current version of the npm package I&#8217;m working on</li></ul>\\n\\n\\n\\n<p>Most of those are built-in features of p10k, and the one that isn&#8217;t (npm registry) only required a couple lines of easy-to-read zsh script. The best part is that even with all of those features enabled, the prompt still renders instantly.</p>\\n\\n\\n\\n<p>Part of that speed is due to p10k&#8217;s inherent focus on performance. Another part is due to how I have asdf, direnv and p10k working together. By default, prompts that show tool info tend to call the tool every time a prompt is rendered to get the current version of the tool. For example, a prompt that displayed the Node.js version using nvm would call nvm version every time the prompt was rendered. For one tool that&#8217;s not a big deal, but have three or four different things and your prompt can start taking a couple seconds to render.</p>\\n\\n\\n\\n<p>Rather than use asdf with a <code>.tool-version</code> file, I use direnv to manage asdf through environment variables. The asdf support in p10k can work with asdf&#8217;s environment variables as well as version files. My prompt doesn&#8217;t have to call a bunch of different version managers whenever it renders — it can just look at environment variables — making it render instantly.</p>\\n\\n\\n\\n<h2>Improving copy and paste</h2>\\n\\n\\n\\n<p>The visual modes in tmux and vim provide a pretty good copy-and-paste experience, but there was definitely some room for improvement. Two issues I kept running into were having to select text halfway up a tmux pane and not being able to easily copy text from a remote session and paste it locally.</p>\\n\\n\\n\\n<h3>Fingers</h3>\\n\\n\\n\\n<p>A few months ago, one of my co-workers pointed me towards a neat tmux plugin that can make copying text to the clipboard much faster, <a href=\\\"https://github.com/Morantron/tmux-fingers\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">tmux-fingers</a>. Once this plugin is installed, you can activate it with <code>&lt;prefix&gt; F</code>. The plugin will desaturate the display and highlight strings that match its built-in regular expressions: file paths, SHA hashes, IP addresses, and a few other interesting patterns. You can also add custom patterns. Each highlighted string will have one or more hint characters at the start. Typing the hint will copy the string to the clipboard. It&#8217;s much faster than enabling copy-mode in tmux, and manually selecting text to copy.</p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/tmux-fingers.gif\\\" alt=\\\"using tmux-fingers to copy text\\\" class=\\\"wp-image-24035\\\"/></figure></div>\\n\\n\\n\\n<h3>Remote copying</h3>\\n\\n\\n\\n<p>A related issue I improved over the past year was in how data is copied to the clipboard. For a while I&#8217;ve been using pbcopy and pbpaste to copy data between the system clipboard and tmux. That&#8217;s fine on a Mac, but it doesn&#8217;t work on Linux. It also doesn&#8217;t work between systems. For example, if I&#8217;ve ssh&#8217;ed to a tmux session on a remote system, copying text with tmux on that system copies it into <em>that system&#8217;s</em> clipboard. That&#8217;s not generally what I want to do.</p>\\n\\n\\n\\n<p>After a bit (well, a lot) of scouring the internet, I learned about OSC 52, a terminal escape code that gives access to the local system clipboard, assuming the terminal supports OSC 52. Luckily for me, kitty does! There are numerous examples of how to use OSC 52 to copy text; I ended up using <a href=\\\"https://sunaku.github.io/tmux-yank-osc52.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">this one</a> as the basis for my own <a href=\\\"https://github.com/jason0x43/dotfiles/blob/master/bin/term_copy\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">term_copy</a> script. The script uses escape characters to copy text through the terminal, and also calls pbcopy or xclip to copy to the host clipboard. I use this script with both tmux and vim to copy text to the local clipboard, whether I&#8217;m working locally or ssh&#8217;ed into a remote system.</p>\\n\\n\\n\\n<p>This snippet in my <code>vimrc</code> maps <code>&lt;Leader> y</code> to the <code>term_copy</code> script:</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-bash\\\">function! Yank(text) abort\\nlet escape = system(\\\"term_copy\\\", a:text)\\nif v:shell_error\\nechoerr escape\\nelse\\ncall writefile([escape], '/dev/tty', 'b')\\nendif\\nendfunction\\n\\n# Selecting text and hitting ;y copies text to the local clipboard\\nnoremap <silent> <Leader>y y:<C-U>call Yank(@0)<CR></code></pre>\\n\\n\\n\\n<p>This bit of my <code>.tmux.conf</code> uses <code>term_copy</code> when using tmux&#8217;s copy mode and when copying with tmux-fingers:</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-bash\\\"># The standard 'yank' will copy with OSC 52\\nbind -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'term_copy < #{pane_tty}'\\n\\n# Getting tmux-fingers to use term_copy is easy, too\\nset -g @fingers-main-action 'term_copy < #{pane_tty}'</code></pre>\\n\\n\\n\\n<p>This setup means that whether I'm in a local or remote session, in the shell or in vim, I can select text and copy it to my local clipboard, then paste it wherever I need it.</p>\\n\\n\\n\\n<h2>NeoV(SCode)im</h2>\\n\\n\\n\\n<p>Probably the most significant change to my environment over the last year has been my move to <a href=\\\"https://github.com/neoclide/coc.nvim\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">coc.nvim</a> and its ecosystem of extensions. The goal of coc is to bring the power of VS Code to (Neo)Vim, which it does primarily by porting VS Code extensions. Coc is mostly written in JavaScript and runs in Node.js, so coc extensions actually can be ports of VS Code extensions rather than total rewrites. That also means extensions are fast, generally much quicker than pure vim script equivalents.</p>\\n\\n\\n\\n<p>Coc really shines when it comes to integrating language servers, which are servers implementing the Language Server Protocol, like TypeScript's tsserver or Microsoft's Python Language Server. These give coc a number of language-specific features like auto-completion, hover documentation, the ability to list and jump to references and definitions, error detection, auto-imports, and more.</p>\\n\\n\\n\\n<div class=\\\"wp-block-image\\\"><figure class=\\\"aligncenter\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/auto-import.gif\\\" alt=\\\"auto-importing a module in a TypeScript file using coc\\\" class=\\\"wp-image-24041\\\"/></figure></div>\\n\\n\\n\\n<p>Coc is more than just language servers, though. There are a number of standalone LSP plugins for vim, as well as a new native LSP implementation in neovim. However, LSP plugins don't provide supporting features like autocompletion popups, nor do they support external tools like Prettier. Coc provides an ecosystem of tools that all work well together, and that you don't have to manage individually. Install coc, use <code>:CocInstall</code> to install plugins, and coc will manage things from there.</p>\\n\\n\\n\\n<p>I've replaced many of my IDE-centric plugins with coc equivalents: YouCompleteMe and ALE with coc itself, typescript-tslint-plugin with coc-eslint, NERDtree with coc-explorer, and vim-prettier with coc-prettier. I've considered using coc's built in <code>:CocList</code> command instead of <a href=\\\"https://github.com/junegunn/fzf.vim\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">fzf.vim</a>, but I haven't made the switch yet; it's good, but it's not quite as fast as <a href=\\\"https://github.com/junegunn/fzf\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">fzf</a>.</p>\\n\\n\\n\\n<h2>Bonus: keyboard-controlled windows</h2>\\n\\n\\n\\n<p>Third party window managers are a tool that several of my co-workers use that I hadn't spent much time with until fairly recently. I had mostly been running apps in full screen mode, but there were enough quirks to doing that (particularly with multiple displays) and limitations (you can only split a display once in macOS), that I decided to try something new.</p>\\n\\n\\n\\n<p>I looked at a few different apps: <a href=\\\"https://manytricks.com/moom/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">moom</a>, <a href=\\\"https://www.spectacleapp.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Spectacle</a>, <a href=\\\"https://rectangleapp.com/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Rectangle</a>, and <a href=\\\"https://github.com/kasper/phoenix\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Phoenix</a>. I ended up with Phoenix, an open source window manager that's scriptable with JavaScript. Really, it's just a way to let you control windows with JavaScript; there's no default behavior. This makes setting up Phoenix a bit more work than the others, but it's infinitely flexible.</p>\\n\\n\\n\\n<p>Phoenix provides a straightforward API that lets you register global key listeners, get information about open windows, and move them around. For example, the following snippet would setup <code>ctrl+shift+h</code> to make a window fill the left half of the display and <code>ctrl+shift+l</code> to make it fill the right half:</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-javascript\\\">Key.on('h', ['ctrl', 'shift'], () => fill('left'))\\nKey.on('l', ['ctrl', 'shift'], () => fill('right'))\\n\\nfunction fill(area) {\\nconst window = Window.focused();\\nconst screenFrame = window.screen().flippedVisibleFrame();\\nconst frame = {\\n...screenFrame,\\nwidth: screenFrame.width / 2\\n};\\nif (area === 'right') {\\nframe.x += frame.width;\\n}\\nwindow.setFrame(frame);\\n}</code></pre>\\n\\n\\n\\n<p>The config script is stored in <code>~/.phoenix.js</code>. My <a href=\\\"https://github.com/jason0x43/dotfiles/blob/master/home/phoenix.js\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">phoenix config</a> isn't terribly complex (at least not compared to some of the <a href=\\\"https://github.com/kasper/phoenix/wiki#examples\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">examples</a>). Mostly I just use it to move and resize windows to fit into a few predefined regions, and to move windows around between Spaces and desktops, but there are many more possibilities! For example, you can allow windows to be freely resized, or activate pre-defined desktop layouts with a single keypress.</p>\\n\\n\\n\\n<figure class=\\\"wp-block-image\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/image5.jpg\\\" alt=\\\"\\\" class=\\\"wp-image-24704\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/image5.jpg 1999w, https://wp.sitepen.com/wp-content/uploads/2020/06/image5-300x166.jpg 300w, https://wp.sitepen.com/wp-content/uploads/2020/06/image5-1024x566.jpg 1024w, https://wp.sitepen.com/wp-content/uploads/2020/06/image5-768x424.jpg 768w, https://wp.sitepen.com/wp-content/uploads/2020/06/image5-1536x848.jpg 1536w\\\" sizes=\\\"(max-width: 1999px) 100vw, 1999px\\\" /></figure>\\n\\n\\n\\n<p>It's not directly related to a terminal environment, but if you have to deal with external windows, at least you can use a keyboard!</p>\\n\\n\\n\\n<h2>Conclusion</h2>\\n\\n\\n\\n<p>This article has presented some highlights of my current terminal-based development environment. Check out the <a href=\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/\\\">previous version</a> for more details about the complete setup.</p>\\n\\n\\n\\n<p>Do you have any terminal-based utilities, vim plugins, or usage patterns that make you productive? Consider <a href=\\\"https://github.com/jason0x43/dotfiles\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">sharing them</a>! GitHub contains thousands of <a href=\\\"https://github.com/search?q=dotfiles\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">dotfiles repos</a> (the standard term for user config files) showing what <a href=\\\"https://github.com/nicknisi/dotfiles\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">other people</a> have come up with to make their own lives easier. Also, feel free to post suggestions or questions about my setup to my <a href=\\\"https://github.com/jason0x43/dotfiles/issues\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">dotfiles repo</a>.</p>\\n\\n\\n\\n<p>Our team at SitePen is constantly looking for ways to improve our efficiency and productivity. If your organization needs help creating your next application or improving your current solutions, consider engaging with the SitePen team, where a few milliseconds of keypress latency is something to improve rather than accept. <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to learn how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>It&#8217;s been a year since I last talked about my development environment. Many things remain the same: I&#8217;m using neovim, zsh, and tmux. However, I have made a few changes to improve usability and make my day-to-day work feel faster. I&#8217;m using a new terminal application, my vim environment has changed dramatically (at least behind [&hellip;]</p>\\n\",\"protected\":false},\"author\":51,\"featured_media\":24703,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[488],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-–-more-modern-terminal@2x.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>An Even More Modern Terminal-Based Development Environment | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Tips, tools, and configuration changes that could improve the productivity of your development environment while making it your own.\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"An Even More Modern Terminal-Based Development Environment | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Tips, tools, and configuration changes that could improve the productivity of your development environment while making it your own.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2020-06-15T12:00:45+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-07-08T11:54:31+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-–-more-modern-terminal@2x.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"2400\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"1260\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-\\\\u2013-more-modern-terminal@2x.png\\\",\\\"width\\\":2400,\\\"height\\\":1260},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/\\\",\\\"name\\\":\\\"An Even More Modern Terminal-Based Development Environment | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/#primaryimage\\\"},\\\"datePublished\\\":\\\"2020-06-15T12:00:45+00:00\\\",\\\"dateModified\\\":\\\"2020-07-08T11:54:31+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\"},\\\"description\\\":\\\"Tips, tools, and configuration changes that could improve the productivity of your development environment while making it your own.\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/an-even-more-modern-terminal-based-development-environment/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\",\\\"name\\\":\\\"Jason Cheatham\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Jason Cheatham\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26244\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/51\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=26244\"}],\"version-history\":[{\"count\":2,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26244/revisions\"}],\"predecessor-version\":[{\"id\":26263,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26244/revisions/26263\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/24703\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=26244\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=26244\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=26244\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=26244\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":51,\"name\":\"Jason Cheatham\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jcheatham/\",\"slug\":\"jcheatham\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Jason Cheatham, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Jason Cheatham, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jcheatham/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/\\\",\\\"name\\\":\\\"Jason Cheatham, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\",\\\"name\\\":\\\"Jason Cheatham\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Jason Cheatham\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/51\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_forbidden\",\"message\":\"Sorry, you are not allowed to do that.\",\"data\":{\"status\":401}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:26:27 GMT"],["expires","Mon, 31 Aug 2020 15:26:27 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}