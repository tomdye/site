{"value":{"body":"[{\"id\":17094,\"date\":\"2019-01-03T05:14:42\",\"date_gmt\":\"2019-01-03T12:14:42\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=17094\"},\"modified\":\"2020-01-22T09:07:51\",\"modified_gmt\":\"2020-01-22T17:07:51\",\"slug\":\"updating-the-decorators-proposal-for-the-holidays\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/\",\"title\":{\"rendered\":\"Updating the Decorators Proposal for the Holidays\"},\"content\":{\"rendered\":\"<p><em>Photo by Annie Spratt on Unsplash</em></p>\\n<p>The <a href=\\\"https://github.com/tc39\\\">Ecma TC39 committee</a>, which standardizes the JavaScript language (officially known as ECMAScript), has been discussing a <a href=\\\"https://github.com/tc39/proposal-decorators\\\">decorators proposal</a> for several years. Transpilers like TypeScript and Babel implemented the initial version of the decorators proposal, allowing developers and frameworks to start using the proposal before the feature became an official part of the language standard. However, the proposal has seen significant changes through the standardization process. Decorators will soon arrive in JavaScript, and there are many questions to answer.</p>\\n<p><!--more--></p>\\n<h3>What are decorators and why should you care?</h3>\\n<p>Decorators are a <a href=\\\"https://en.wikipedia.org/wiki/Metaprogramming\\\">metaprogramming</a> language feature, which allows modifying declarations like classes. This pattern looks at program source code as data and allows analyzing and transforming of code. For example, decorators may add add logging to the inputs or outputs of methods. Alternatively, a decorator could add some metadata to a class to configure a framework.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n@addMetadata('name-for-library')\\r\\nclass MyClass {\\r\\n  constructor(database) {\\r\\n    This.db = database;\\r\\n  }\\r\\n\\r\\n  @logOutput\\r\\n  makeDatabaseCall(param) {\\r\\n    // call database\\r\\n    const results = this.db.call('query');\\r\\n    return results; // this value is automatically logged\\r\\n  }\\r\\n  \\r\\n  @bound\\r\\n  methodThatRetainsThis(flagVal) {\\r\\n    // Still knows what this is even when passed as a callback\\r\\n    this.flag = flagVal;\\r\\n  }\\r\\n}\\r\\n</pre>\\n<p>Similar to languages like Java and <a href=\\\"https://www.dartlang.org/\\\">Dart</a>, the decorators proposal uses an “@” symbol followed by the decorator name. The proposal champions have been working to align with the <a href=\\\"https://github.com/tc39/proposal-class-fields\\\">class fields proposal</a> so that annotations can get used on classes, class methods, class fields, and likely private fields. This should lead to classes that are powerful yet easy to understand. If you want to learn more, check out our <a href=\\\"https://www.sitepen.com/blog/2015/10/20/typescript-decorators/\\\">TypeScript Decorators</a> blog post describing the original decorators proposal.</p>\\n<h3>What needed to change? If I wrote a decorator, how would I update it?</h3>\\n<p>The original proposal (which was implemented by Babel and TypeScript and leveraged by various framweworks) had a design that passed the descriptor and the target (e.g. the class being decorated) at one time. However, this design was prone to conflicts between decorators. If two decorators wanted to add a property to a class, one decorator would override the other. Additionally, the original proposal was written before <a href=\\\"https://github.com/tc39/proposal-class-fields#private-fields\\\">private fields and methods</a> entered the standardization process. There were other less significant changes which needed to be made as well, such as removing ambiguity in the decorator syntax that conflicted with calculated property names.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// decorator 1\\r\\nfunction addMethod(target) {\\r\\n  target.prototype.toString = () =&gt; 'addMethod decorator';\\r\\n}\\r\\n// decorator 2\\r\\nfunction noIWantToAddTheMethod(target) {\\r\\n  // This will be overridden\\r\\n  target.prototype.toString = () =&gt; 'noIWantToAddTheMethod decorator';\\r\\n}\\r\\n\\r\\n@addMethod\\r\\n@noIWantToAddTheMethod\\r\\nclass IncommingConflict {}\\r\\n</pre>\\n<p>The updated proposal provides different phases for decorators to run. Decorators now return a <a href=\\\"https://github.com/tc39/proposal-decorators/blob/master/METAPROGRAMMING.md#api\\\">descriptor API</a> with optional initializer and finisher functions. This allows the language to throw an error if two decorators try to define the same descriptor. The new proposal also should enable creating and modifying private fields. However, these improvements require changes for existing decorator libraries and transpilers.</p>\\n<p>The original decorators proposal would pass the target object to the decorator function. The decorator could then modify the target in any manner. The new proposal still allows many changes but has a defined way to accomplish common changes. Any custom changes need to be made in either an initializer or a finisher function and the defined properties get passed via the descriptor.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction addLogger(descriptor) {\\r\\n  const {\\r\\n    kind, // This will be &quot;class&quot;\\r\\n    elements // Array of all class elements\\r\\n  } = descriptor;\\r\\n  \\r\\n  const updatedElements = elements.concat([{\\r\\n    kind: 'field',\\r\\n    placement: 'own',\\r\\n    key: 'logger',\\r\\n    descriptor: {}, // argument to Object.defineProperty\\r\\n    initializer: () =&gt; (...args) =&gt; console.log('Custom Logger', ...args)\\r\\n  }]);\\r\\n  \\r\\n  return {\\r\\n    kind,\\r\\n    elements: updatedElements,\\r\\n    finisher: () =&gt; console.log('The class has been created')\\r\\n}\\r\\n  \\r\\n// Create a bound version of the method as a field\\r\\n// This is taken from the proposal\\r\\nfunction bound(elementDescriptor) {\\r\\n  let {\\r\\n    kind, // This will be &quot;method&quot;\\r\\n    key,  // Name of the method that this is being used on\\r\\n    descriptor\\r\\n  } = elementDescriptor;\\r\\n  let {\\r\\n    value // method as it was defined on the class\\r\\n  } = descriptor\\r\\n  function initializer() {\\r\\n    return value.bind(this);\\r\\n  }\\r\\n  // Return both the original method and a bound function field that calls the method.\\r\\n  // (That way the original method will still exist on the prototype, avoiding\\r\\n  // confusing side-effects.)\\r\\n  let boundFieldDescriptor = { ...descriptor, value: undefined }\\r\\n  return {\\r\\n    ...elementDescriptor,\\r\\n    extras: [\\r\\n      { kind: &quot;field&quot;, key, placement: &quot;own&quot;, descriptor: boundFieldDescriptor, initializer }\\r\\n    ]\\r\\n  }\\r\\n}\\r\\n\\r\\n@addLogger\\r\\nclass YayDecorators {\\r\\n  @bound\\r\\n  methodThatRetainsThis(flagVal) {\\r\\n    // Still knows what this is even when passed as a callback\\r\\n    this.flag = flagVal;\\r\\n  }\\r\\n  \\r\\n}\\r\\n  \\r\\nconst instance = new YayDecorators();\\r\\nconst boundMethod = instance.methodThatRetainsThis;\\r\\nsetTimeout(() =&gt; boundMethod(true), 1000);\\r\\n</pre>\\n<h3>I’m just using decorators. What changes do I need to make?</h3>\\n<p>When migrating to the new decorators proposal, there are a few changes which you may encounter. The grammar for referencing decorators is now restricted. You cannot reference a decorator outputted by certain complex expressions such as a function call (e.g. <code>@gen().decorator</code>) or from a computed property accessor (e.g. <code>@lib[variable]</code>). However, you can easily access these more expressive syntaxes if you wrap the expression in parentheses (e.g. <code>@(lib[variable])</code>). For those using the legacy Babel decorators implementation, decorators on object properties were removed to match the proposal. The committee may consider adding this feature through a follow-up proposal.</p>\\n<p>The original decorators proposal placed the decorator before the <code>export</code keyword. The committee has gone back and forth on whether the placement should change to after <span class=\\\"mono\\\">export</span>. While not yet resolved, there is a high likelihood that the final proposal will settle on moving decorators after the export keyword. Not having the right placement will result in a syntax error, so be prepared to make a change.</p>\\n<p>Babel is the first implementor to update to use the latest version of the decorators proposal with the Babel 7 release and have published an <a href=\\\"https://babeljs.io/blog/2018/09/17/decorators\\\">update guide</a>. In addition to updating the decorators transform, a Babel-based <a href=\\\"https://github.com/nicolo-ribaudo/legacy-decorators-migration-utility\\\">migration utility</a> is available to wrap legacy decorators.</p>\\n<p>For those using decorators in TypeScript, you will need to continue using the <span class=\\\"mono\\\">experimentalDecorators</span> flag until the decorators proposal gets finalized. Today the TypeScript team typically waits for proposals to stabilize at Stage 3 before implementing. The team also has not published its upgrade strategy yet so watch the <a href=\\\"https://github.com/Microsoft/TypeScript/wiki/Roadmap\\\">TypeScript project roadmap</a> for details. If you must update to the latest decorators proposal, you can integrate TypeScript into a Babel build to retain type checking.</p>\\n<h3>What’s next?</h3>\\n<p>The decorators proposal is still at stage 2, so the standard is still subject to change before becoming an official part of the JavaScript language. Due to a specification bugfix change, the earliest that the proposal would be likely to advance would be January 2019. Once it reaches stage 3, browsers and transpilers (like TypeScript) will work towards implementing the new standard. Libraries with decorators will need to release updates with standard-compliant decorators. The <span class=\\\"mono\\\">@ember-decorators</span> library <a href=\\\"https://ember-decorators.github.io/ember-decorators/docs/stability-and-support\\\">demonstrates concurrent support</a> of both proposals. If other libraries adopt this pattern, it could help aid migration.</p>\\n<p>To stay current with the latest status of the proposal, watch the <a href=\\\"https://github.com/tc39/proposal-decorators\\\">official decorators GitHub repo</a> and the latest <a href=\\\"http://tc39.github.io/tc39-notes/\\\">TC39 meeting notes</a>. Keep an eye on the <a href=\\\"https://github.com/tc39/proposal-class-fields\\\">class fields proposal</a>, which is already at stage 3, because many of its features are relied upon by the decorators proposal. While it has taken some time, the decorators proposal is continuing to progress and the season for updating decorators is coming.</p>\\n<p>If you&#8217;d like to know more about the decorators proposal or if you need help leveraging newer ES features within your application, feel free to <a href=\\\"https://www.sitepen.com/contact\\\">reach out to us</a>, and we&#8217;ll be more than happy to help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Photo by Annie Spratt on Unsplash The Ecma TC39 committee, which standardizes the JavaScript language (officially known as ECMAScript), has been discussing a decorators proposal for several years. Transpilers like TypeScript and Babel implemented the initial version of the decorators proposal, allowing developers and frameworks to start using the proposal before the feature became an [&hellip;]</p>\\n\",\"protected\":false},\"author\":6,\"featured_media\":22038,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,3,11],\"tags\":[216],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Updating the Decorators Proposal for the Holidays | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Updating the Decorators Proposal for the Holidays | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Photo by Annie Spratt on Unsplash The Ecma TC39 committee, which standardizes the JavaScript language (officially known as ECMAScript), has been discussing a decorators proposal for several years. Transpilers like TypeScript and Babel implemented the initial version of the decorators proposal, allowing developers and frameworks to start using the proposal before the feature became an [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2019-01-03T12:14:42+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T17:07:51+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Updating the Decorators Proposal for the Holidays\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/\\\",\\\"name\\\":\\\"Updating the Decorators Proposal for the Holidays | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/#primaryimage\\\"},\\\"datePublished\\\":\\\"2019-01-03T12:14:42+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T17:07:51+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/f94bffc01417682f05b59f924614ef77\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/f94bffc01417682f05b59f924614ef77\\\",\\\"name\\\":\\\"Anthony Ciccarello\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Anthony Ciccarello\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17094\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/6\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=17094\"}],\"version-history\":[{\"count\":4,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17094/revisions\"}],\"predecessor-version\":[{\"id\":22042,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17094/revisions/22042\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22038\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=17094\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=17094\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=17094\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":6,\"name\":\"Anthony Ciccarello\",\"url\":\"https://www.ciccarello.me/\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/aciccarello/\",\"slug\":\"aciccarello\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Anthony Ciccarello, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Anthony Ciccarello, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/aciccarello/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/aciccarello/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/aciccarello/\\\",\\\"name\\\":\\\"Anthony Ciccarello, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/f94bffc01417682f05b59f924614ef77\\\",\\\"name\\\":\\\"Anthony Ciccarello\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Anthony Ciccarello\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/aciccarello/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/6\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22038,\"date\":\"2020-01-22T09:06:10\",\"slug\":\"updating-the-decorators-proposal-for-the-holidays-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/updating-the-decorators-proposal-for-the-holidays/updating-the-decorators-proposal-for-the-holidays-2/\",\"title\":{\"rendered\":\"Updating the Decorators Proposal for the Holidays\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Updating the Decorators Proposal for the Holidays | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Updating the Decorators Proposal for the Holidays | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T17:06:14+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\\\",\\\"name\\\":\\\"Updating the Decorators Proposal for the Holidays | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T17:06:10+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T17:06:14+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Updating the Decorators Proposal for the Holidays\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\",\"sizes\":{\"medium\":{\"file\":\"Updating-the-Decorators-Proposal-for-the-Holidays-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays-300x158.png\"},\"large\":{\"file\":\"Updating-the-Decorators-Proposal-for-the-Holidays-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays-1024x538.png\"},\"thumbnail\":{\"file\":\"Updating-the-Decorators-Proposal-for-the-Holidays-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays-150x150.png\"},\"medium_large\":{\"file\":\"Updating-the-Decorators-Proposal-for-the-Holidays-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays-768x403.png\"},\"full\":{\"file\":\"Updating-the-Decorators-Proposal-for-the-Holidays.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Updating-the-Decorators-Proposal-for-the-Holidays.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22038\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a574bf53c6d078a-LHR"],["cf-request-id","036a6dcd3e0000078a18ac0200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 18 Jun 2020 19:08:04 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d6c1cab9172b53f4ff45cbf8c1e3ccb461592507282; expires=Sat, 18-Jul-20 19:08:02 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}