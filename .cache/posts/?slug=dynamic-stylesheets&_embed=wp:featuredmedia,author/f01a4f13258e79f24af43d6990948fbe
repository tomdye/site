{"value":{"body":"[{\"id\":588,\"date\":\"2009-03-13T08:24:09\",\"date_gmt\":\"2009-03-13T15:24:09\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2009/03/13/dynamic-stylesheets-part-1/\"},\"modified\":\"2020-08-14T08:08:11\",\"modified_gmt\":\"2020-08-14T15:08:11\",\"slug\":\"dynamic-stylesheets\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/dynamic-stylesheets/\",\"title\":{\"rendered\":\"Dynamic Stylesheets\"},\"content\":{\"rendered\":\"<p>New to Dojo 1.2+ is <code>dojox.html.style</code>. This is a collection of methods which give you the ability to query the stylesheets collection in a document, add and remove rules, and dynamically create new sheets. In this article I&#8217;ll explain why and where this is of use, and walk through a split-panel demo that uses dynamic stylesheets to size a 2 column layout.</p>\\n<p><!--more--></p>\\n<h3>What is a Dynamic Stylesheet</h3>\\n<p>The concept is simple. Most times CSS is static. You define a set of rules with selectors to match certain elements and declarations to assign style property values to that element. The rules are predefined, in a document (embedded) or external stylesheet which is loaded along with the other static resources for the page.  The rules may match existing elements in the page, or during the lifetime of the page you may add new elements that match, or add classes to elements to cause them to match. The CSS itself doesn&#8217;t change though. </p>\\n<p>There are times, however, when the CSS can&#8217;t be static. It could be a width value that needs to be calculated at runtime based on viewport width. Or perhaps you need to allow arbitrary color or font-size to be set by the user via an on-screen picker. For example, the page could go through radical changes as user preferences are loaded, or the user interacts with the user interface. If the permutations are numerous enough to preclude bundling up CSS rules for every contingency, you have a few choices: </p>\\n<ol>\\n<li>Go around the stylesheets, and set style directly on the elements from JavaScript</li>\\n<li>Generate the stylesheet on the server and reload from the client-side</li>\\n<li>Generate or manipulate the stylesheet with JavaScript</li>\\n</ol>\\n<p>Server-side generated CSS can be simple: CSS is just text, and as long as you send the response with a text/css mime-type, you can use all the templating goodness your server framework allows. But this is not a path most people want to go down, and even in the best case it&#8217;s more round trips to the server, albeit in the background. This can be slow, and rules out a whole slew of interesting use cases. </p>\\n<p>Setting property values directly to the <code>node.style</code> object is by far the most common approach. All of the major JavaScript libraries provide a utility to make this as painless as it can be. Dojo has <code>dojo.style</code>. It is simple and effective, but the technique has some repercussions. I want to explore those before discussing dynamic styles, as we&#8217;ve lived with these shortcomings so long we tend to forget they exist. </p>\\n<h3>Why Dynamic Stylesheets?</h3>\\n<p>The basic problem is that inline styles don&#8217;t play well with external or embedded CSS rules, and reduce the value of the <em>Cascade</em> in CSS down to near zero. Properties set directly on the node&#8217;s style object have much higher specificity than stylesheet rules&mdash;which means they&#8217;ll win out over rules in your stylesheets that specify the same property. This might be what you want, but if it isn&#8217;t, your only recourse is to use an <code>!important</code> flag on those stylesheet rules. It can also be difficult to unset some properties set this way. Having set a property, you want to be able to undo the action to restore the element to its previous or default state. In some cases this is a simple matter: showing and hiding an element typically involves simply toggling between <code>display: block</code> and <code>display: none</code>. But what if a stylesheet had set that element to <code>display: inline-block</code>? When you start looking at properties like <code>margin, padding, background, font</code>&mdash;it becomes more complicated still. Chances are high that these properties have been set in a stylesheet, and even if they haven&#8217;t, knowing the right &#8220;default&#8221; value to set can be tricky. You can store the value before you override it (ugh, that&#8217;s a lot of book-keeping) or start string munging in <code>node.style.cssText</code>.</p>\\n<p>Remember, we&#8217;re talking about cases where adding and removing predefined classes is not an option. An example might help. Imagine a split panel, with a draggable divider. When the page first loads, the panels and the divider are rendered using styles provided by a stylesheet. When the user drags the divider, it moves, and width properties are set in the style attribute of <em>each</em> panel node. We&#8217;re now managing style, node-by-node, from JavaScript; the stylesheets don&#8217;t get a look-in. It&#8217;s not supposed to be that way.</p>\\n<p>Now, lets try the same scenario using a dynamic stylesheet. When the page loads, a dynamic stylesheet is created, using the <code>id</code> of the container to prefix all rules. As the divider is dragged, we update the values in this stylesheet. To restore the values, we can either empty out this dynamic stylesheet, or just add or remove a class that will re-engage the original values by specificity. Does that really work? It does. Can it possibly be fast enough to keep up with a mouse move? It can. </p>\\n<h3>How it Works</h3>\\n<p>Let&#8217;s look at some code. The <code>dyncssDemo</code> object gathers together the state information, properties and functions we&#8217;ll need. It&#8217;s not a Dijit widget, but clearly it could easily become one. Let&#8217;s focus on the specific code that gets the work done: </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nonMove: function(mover, leftTop) {\\r\\n  // summary: handle an onMove event from the divider\\r\\n\\r\\n  // make it a %age, btween 5 and 95%: \\r\\n  var contentWidth = this.containerWidth;\\r\\n  \\r\\n  var pcent = Math.min(\\r\\n    this.maxLeft, Math.max(\\r\\n      this.minLeft, \\r\\n      parseInt(leftTop.l / contentWidth * 10000, 10) / 100\\r\\n  ));\\r\\n  if(pcent !== this.lastLeft) {\\r\\n    // only update if the left value has actually changed\\r\\n    this.lastLeft = pcent;\\r\\n    this.updateContainer({\\r\\n      leftWidth: pcent+&quot;%&quot;, \\r\\n      rightWidth: 100-pcent+&quot;%&quot;, \\r\\n      containerId: this.containerId\\r\\n    });\\r\\n  }\\r\\n}</pre>\\n<p>This handler is connected to the move events that fire when you drag the nubbin. It calculates percent widths for the two columns, within some boundaries, and sends this along to <code>updateContainer</code>: </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction(props) {\\r\\n\\r\\n  var sheet = dojox.html.getDynamicStyleSheet(sheetName);\\r\\n  dojo.forEach(rules, function(rule) {\\r\\n    // sub in the actual values from the provided property bag\\r\\n    var declarationStr = dojo.string.substitute(rule.declarations.join(&quot;;\\\\n&quot;),props), \\r\\n      selector = dojo.string.substitute(rule.selector, props); \\r\\n\\r\\n    if(rulesMap[ selector ]) {\\r\\n      // removeCssRule needs to loop over the entire stylesheet \\r\\n      // to find a matching selector/delaration pair\\r\\n      // we minimize that cost by maintaining a hash of the rules we've added\\r\\n      // its then just a lookup to determine if matching rule exists already \\r\\n      // that needs to be removed to be redefined\\r\\n\\r\\n      // we already have rule of this name, remove it first\\r\\n      dojox.html.removeCssRule(selector, rulesMap[selector], sheetName);\\r\\n    }\\r\\n    var rs = dojox.html.insertCssRule(selector, declarationStr, sheetName);\\r\\n\\r\\n    // store it for fast lookup and later removal \\r\\n    rulesMap[selector] = declarationStr;\\r\\n  });\\r\\n};</pre>\\n<p>The props variable has those percent values. It loops over an array of rules (in scope here by closure&mdash;see the full source), and populates the placeholders in the selector and declaration strings with values from the dictionary object its been provided. While CSS obviously allows you to have multiple rules using the same selector, we don&#8217;t want that here, so we track and remove duplicate rules (with <code>dojox.html.removeCssRule</code>) before adding the new ones (with <code>dojox.html.insertCssRule</code>)</p>\\n<p>And that&#8217;s basically it. If you watch Firebug, you&#8217;ll see the new values being applied to each column element:</p>\\n<p><img src='https://wp.sitepen.com/wp-content/uploads/2009/03/dyncssfirebugscreenshot5.png' alt='Split-Panel demo, firebug HTML tab screenshot' style=\\\"border: 1px solid #333\\\"/></p>\\n<p>In the CSS tab, you can see the dynamic stylesheet created (it does not refresh in real time however&mdash;a quirk of Firebug&mdash;you&#8217;ll need to select the other stylesheet, then go back to see the changes):</p>\\n<p><img src='https://wp.sitepen.com/wp-content/uploads/2009/03/dyncssfirebugscreenshot4.png' alt='Split-Panel demo, firebug CSS tab screenshot'  style=\\\"border: 1px solid #333\\\"/></p>\\n<p>The rest of the code wires it all up, and shows how you can engage rules in the traditional manner (by adding a class to the container) without jeopardizing your ability to also manage the same style properties from script. </p>\\n<p>The little <strong>+</strong> button in top right adds new rows. Interesting huh? Because that is all there is to do here&mdash;the stylesheet is already in place to match the new elements, and it is the native CSS engine that applies the styles. You can imagine a lot of ways you might get new rows in there. Click away, then re-try the column-size nubbin. The speed is good&mdash;we&#8217;re down purely to CSS engine performance to apply those styles, no JavaScript DOM-crawling or function call / property setting overhead. </p>\\n<p><a href=\\\"https://wp.sitepen.com/wp-content/uploads/2020/08/split_panel_demo-master.zip\\\"><strong>Full Demo</strong></a>, updated courtesy of <a href=\\\"https://github.com/tomelam/split_panel_demo\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">Tom Elam</a></p>\\n<h3>Summary</h3>\\n<p>There&#8217;s a lot of mileage in dynamic stylesheets. This is not a technique that will fit everywhere, but as you get comfortable with the idea of manipulating stylesheets instead of nodes, I&#8217;m sure you&#8217;ll start to find applications everywhere you look. </p>\\n<p>In the next article in this series I&#8217;ll dig more into the performance implications here, and show that not only can dynamic stylesheets be fast enough for day to day use, but can bring meaningful performance improvements to heavy pages.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>New to Dojo 1.2+ is dojox.html.style. This is a collection of methods which give you the ability to query the stylesheets collection in a document, add and remove rules, and dynamically create new sheets. In this article I&#8217;ll explain why and where this is of use, and walk through a split-panel demo that uses dynamic [&hellip;]</p>\\n\",\"protected\":false},\"author\":32,\"featured_media\":16408,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,3,6],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dynamic Stylesheets | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"New to Dojo 1.2+ is dojox.html.style. This is a collection of methods which give you the ability to query the stylesheets collection in a document, add and remove rules, and dynamically create new sheets. In this article I&#039;ll explain why and where this is of use, and walk through a split-panel demo that uses dynamic stylesh\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/dynamic-stylesheets/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dynamic Stylesheets | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"New to Dojo 1.2+ is dojox.html.style. This is a collection of methods which give you the ability to query the stylesheets collection in a document, add and remove rules, and dynamically create new sheets. In this article I&#039;ll explain why and where this is of use, and walk through a split-panel demo that uses dynamic stylesh\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/dynamic-stylesheets/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2009-03-13T15:24:09+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-08-14T15:08:11+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/dynamic-stylesheets/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/dynamic-stylesheets/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/dynamic-stylesheets/\\\",\\\"name\\\":\\\"Dynamic Stylesheets | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/dynamic-stylesheets/#primaryimage\\\"},\\\"datePublished\\\":\\\"2009-03-13T15:24:09+00:00\\\",\\\"dateModified\\\":\\\"2020-08-14T15:08:11+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/d4323ca900e1784ac92847c0f5787c93\\\"},\\\"description\\\":\\\"New to Dojo 1.2+ is dojox.html.style. This is a collection of methods which give you the ability to query the stylesheets collection in a document, add and remove rules, and dynamically create new sheets. In this article I'll explain why and where this is of use, and walk through a split-panel demo that uses dynamic stylesh\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/dynamic-stylesheets/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/d4323ca900e1784ac92847c0f5787c93\\\",\\\"name\\\":\\\"Sam Foster\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/47cab2ff3dc96885564f32f27d1cd79d?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Sam Foster\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/588\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/32\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=588\"}],\"version-history\":[{\"count\":9,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/588/revisions\"}],\"predecessor-version\":[{\"id\":26381,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/588/revisions/26381\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/16408\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=588\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=588\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=588\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=588\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":32,\"name\":\"Sam Foster\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/sfoster/\",\"slug\":\"sfoster\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/47cab2ff3dc96885564f32f27d1cd79d?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/47cab2ff3dc96885564f32f27d1cd79d?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/47cab2ff3dc96885564f32f27d1cd79d?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Sam Foster, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Sam Foster, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/sfoster/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/47cab2ff3dc96885564f32f27d1cd79d?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/sfoster/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/sfoster/\\\",\\\"name\\\":\\\"Sam Foster, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/d4323ca900e1784ac92847c0f5787c93\\\",\\\"name\\\":\\\"Sam Foster\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/47cab2ff3dc96885564f32f27d1cd79d?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Sam Foster\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/sfoster/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/32\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:21:27 GMT"],["expires","Thu, 24 Sep 2020 13:21:27 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}