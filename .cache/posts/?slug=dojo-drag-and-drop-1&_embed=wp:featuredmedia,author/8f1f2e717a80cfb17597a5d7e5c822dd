{"value":{"body":"[{\"id\":358,\"date\":\"2008-06-10T00:02:35\",\"date_gmt\":\"2008-06-10T07:02:35\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2008/06/10/dojo-drag-and-drop-1/\"},\"modified\":\"2008-06-10T00:02:35\",\"modified_gmt\":\"2008-06-10T07:02:35\",\"slug\":\"dojo-drag-and-drop-1\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/dojo-drag-and-drop-1/\",\"title\":{\"rendered\":\"Dojo Drag and Drop, Part 1: dojo.dnd\"},\"content\":{\"rendered\":\"<div style=\\\"background:#FFFFCC; padding: 1em; font-weight:bold; border:1px solid #FFCC99; margin-bottom:1em\\\">NOTE: This post contains information pertaining to an older version of Dojo.<br /><a href=\\\"https://www.sitepen.com/blog/2011/12/05/dojo-drag-n-drop-redux/\\\">Read the updated version now!</a></div>\\n<p>Most anyone who&#8217;s looked at the feature list knows that one of Dojo&#8217;s core features is a drag and drop framework. What&#8217;s not immediately obvious is that Dojo actually has <em>two</em> drag and drop APIs. The first, <b>dojo.dnd</b>, is designed to manage the process of dragging items between two or more containers, including multiple selection, item acceptance filtering on drop targets, and other behavioral tweaks. The second API, <b>dojo.dnd.move</b>, is a bit lower-level in scope; it&#8217;s designed to manage the process of moving single objects around, without the concept of attaching items to containers. Both of these are very useful features to have at your disposal. In this article, we&#8217;ll cover dojo.dnd.</p>\\n<p><!--more--></p>\\n<h2>Simple Single Source DnD</h2>\\n<p>Meet Dylan. Collecting junk is his passion. A while back, he decided that he needed to get rid of some of it to make room for more interesting junk, so he got a booth at the local farmers&#8217; market and started a small junk outlet business. Like most people passionate about sharing their junk with the world, he decided to open an online storefront.<img src=\\\"https://wp.sitepen.com/wp-content/uploads/2011/12/dylans-original.jpg\\\" alt=\\\"Dylan's Original Junk Outlet\\\" style=\\\"float:right;margin:20px 0 20px 6px;\\\" /> His brother, currently working towards a degree in Marketing, convinced him that he needed to brand himself as a form of differentiation; thus was born <i>Dylan&#8217;s Original</i>. He decided that his best bet would be to create a user experience so ridiculously awesome that people wouldn&#8217;t be able to help buying his junk. That&#8217;s where we come in. To demonstrate drag and drop techniques, we&#8217;ll help build a mockup of <i>Dylan&#8217;s Original Junk Outlet</i>.</p>\\n<p>Let&#8217;s start with the basics. Just about the easiest way to get drag and drop working is to demonstrate a single list that the user can reorder dynamically. First, we&#8217;ll create our page skeleton, using Dojo from <a href=\\\"http://dev.aol.com/dojo\\\">AOL CDN</a>, spiced up with a bit of CSS. <a href=\\\"/labs/code/dnd/intro/dnd/0-dnd.html\\\">View the starting point</a>.</p>\\n<p>As you can see, we&#8217;re starting with a simple wish list:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;div id=&quot;store&quot;&gt;\\n    &lt;div class=&quot;wishlistContainer&quot;&gt;\\n        &lt;h2&gt;Wishlist&lt;/h2&gt;\\n        &lt;ol id=&quot;wishlistNode&quot; class=&quot;container&quot;&gt;\\n            &lt;li&gt;Wrist watch&lt;/li&gt;\\n            &lt;li&gt;Life jacket&lt;/li&gt;\\n            &lt;li&gt;Toy bulldozer&lt;/li&gt;\\n            &lt;li&gt;Vintage microphone&lt;/li&gt;\\n            &lt;li&gt;TIE fighter&lt;/li&gt;\\n        &lt;/ol&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n</pre>\\n<h3>The DnD Workhorse, dojo.dnd.Source</h3>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2011/12/wishlist-1.jpg\\\" alt=\\\"An online store wishlist\\\" style=\\\"float:right;margin:0 0 10px 10px;\\\" />To enable drag and drop, dojo.dnd gives us a class called <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.dnd.Source\\\">Source</a>, which is basically just what it sounds like: a source for dragged items (as well as a target for dropped items). To instantly turn a DOM node into such a source, create a dojo.dnd.Source out of it:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndojo.require(\\\"dojo.dnd.Source\\\");\\n\\nvar wishlist = new dojo.dnd.Source(\\\"wishlistNode\\\");\\nwishlist.insertNodes(false, [\\n    \\\"Wrist watch\\\",\\n    \\\"Life jacket\\\",\\n    \\\"Toy bulldozer\\\",\\n    \\\"Vintage microphone\\\",\\n    \\\"TIE fighter\\\"\\n]);\\n</pre>\\n<p>That&#8217;s all there is to it! <a href=\\\"/labs/code/dnd/intro/dnd/1-dnd.html\\\">View the single container DnD example</a>. If you&#8217;re the kind of person who likes to do markup-style quick prototyping, instantiate the node in markup with <code>dojoType=\\\"dojo.dnd.Source\\\"</code>, and use <code>class=\\\"dojoDndItem\\\"</code> on draggable child nodes, like so:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;ol dojoType=&quot;dojo.dnd.Source&quot; id=&quot;wishlistNode&quot; class=&quot;container&quot;&gt;\\n    &lt;li class=&quot;dojoDndItem&quot;&gt;Wrist watch&lt;/li&gt;\\n    &lt;li class=&quot;dojoDndItem&quot;&gt;Life jacket&lt;/li&gt;\\n    &lt;li class=&quot;dojoDndItem&quot;&gt;Toy bulldozer&lt;/li&gt;\\n    &lt;li class=&quot;dojoDndItem&quot;&gt;Vintage microphone&lt;/li&gt;\\n    &lt;li class=&quot;dojoDndItem&quot;&gt;TIE fighter&lt;/li&gt;\\n&lt;/ol&gt;\\n</pre>\\n<p>Of course, you have to make sure to <code>dojo.require(\\\"dojo.dnd.Source\\\")</code> and to turn on the parser, but there you go. <a href=\\\"/labs/code/dnd/intro/dnd/1-dnd.markup.html\\\">View the demo, markup style</a>.</p>\\n<p>What can you turn into a DnD source? Well sheesh, what <em>can&#8217;t</em> you turn into a DnD source? Take a look at the <a href=\\\"http://docs.google.com/View?docid=d764479_11fcs7s397\\\">technical documentation</a>. The dojo.dnd.Source will take into account the node type of your container when creating the child nodes:</p>\\n<ul>\\n<li>If the container is &lt;div&gt; or &lt;p&gt;, it will create &lt;div&gt; nodes.</li>\\n<li>If the container is &lt;ul&gt; or &lt;ol&gt;, it will create &lt;li&gt; nodes.</li>\\n<li>If the container is a &lt;table&gt;, it will create a set of &lt;tr&gt;&lt;td&gt; and add it to the table&#8217;s &lt;tbody&gt;.</li>\\n<li>All other times, it will create &lt;span&gt; nodes.</li>\\n</ul>\\n<p>So basically, turn whatever you want into a dojo.dnd.Source, and Dojo will intelligently set up your DOM. Pretty nifty. Out of the box, dojo.dnd.Source has quite a lot of functionality baked in:</p>\\n<ul>\\n<li><b>Multiple selection.</b> Each container has the notion of a selection; click on an item and it&#8217;s &#8220;selected.&#8221; Ctrl-/Command-click or Shift-click to do multiple selection, just like in a regular desktop application.</li>\\n<li><b>Child node introspection.</b> In addition to the <code>insertNodes()</code> method demonstrated above, the Source provides a few methods to work with the list of child nodes:\\n<ul>\\n<li><code>getAllNodes()</code> &#8211; returns a standard Dojo NodeList of the contained items.</li>\\n<li><code>forInItems(f, o)</code> &#8211; calls f in the context of o for each contained node. Similar to <code>dojo.forEach()</code>.</li>\\n<li><code>selectNone()</code>, <code>selectAll()</code>, <code>getSelectedNodes()</code>, <code>deleteSelectedNodes()</code> &#8211; just what they sound like, methods for manipulating the selection state.\\n<li>plus a few other things you can hook into for customizing the way the internal list gets handled. See the technical docs for details.</li>\\n</ul>\\n</li>\\n<li><b>Copy vs. move semantics.</b> By default nodes are moved when you drag them around. However, Ctrl-/Command-dragging does a copy operation instead, similar to the average desktop file manager. This is useful when you don&#8217;t want your DnD source to change in response to your drag operations.</li>\\n<li><b>Drag cancellation.</b> This isn&#8217;t technically a property of the Source, but it&#8217;s worth noting here that pressing the Esc key cancels the current drag operation. You can do this programmatically, too, if you need to.</li>\\n<li><b>Automatic avatar creation.</b> The dojo.dnd framework uses &#8220;avatars&#8221; to represent the nodes you drag around; it creates these for you automatically, based on the data itself. You can customize this, of course. More on that later.</li>\\n</ul>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2011/12/catalog-2.jpg\\\" alt=\\\"An online store product list, mid-drag\\\" style=\\\"float:right;margin:0 0 10px 10px;\\\" /></p>\\n<h2>Using Multiple Sources</h2>\\n<p>Of course, if you&#8217;re only using a single dojo.dnd.Source in your application, the move/copy distinction is only useful for duplicating nodes in the list. Let&#8217;s help Dylan expand. Check out <a href=\\\"/labs/code/dnd/intro/dnd/2-dnd.html\\\">Dylan&#8217;s Old Junk Outlet, version 2</a> (or, the <a href=\\\"/labs/code/dnd/intro/dnd/2-dnd.markup.html\\\">markup version</a>).</p>\\n<p>What have we changed? Well, for starters, we now have three Sources: the Catalog, the Cart, and the Wishlist. Now you can drag items back and forth between them to see multiple-container dojo.dnd in action. Some items are marked as &#8220;out of stock&#8221; (more on this in a bit), and&mdash;hey, some of these items aren&#8217;t junk at all: they&#8217;re food! Yes, while we weren&#8217;t looking, Dylan merged his junk outlet with <i>Dylan&#8217;s Nutritious Dietarium</i>, the company he uses to unload what he doesn&#8217;t eat from his garden.</p>\\n<h3>DnD Item Types</h3>\\n<p>The biggest change here is the introduction of item types. Notice how we&#8217;re declaring our containers:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar catalog = new dojo.dnd.Source(\\\"catalogNode\\\", {\\n    accept: [\\\"inStock,outOfStock\\\"]\\n});\\ncatalog.insertNodes(false, [\\n    { data: \\\"Wrist watch\\\",        type: [\\\"inStock\\\"] },\\n    { data: \\\"Life jacket\\\",        type: [\\\"inStock\\\"] },\\n    { data: \\\"Toy bulldozer\\\",      type: [\\\"inStock\\\"] },\\n    { data: \\\"Vintage microphone\\\", type: [\\\"outOfStock\\\"] },\\n    { data: \\\"TIE fighter\\\",        type: [\\\"outOfStock\\\"] },\\n    { data: \\\"Apples\\\",             type: [\\\"inStock\\\"] },\\n    { data: \\\"Bananas\\\",            type: [\\\"inStock\\\"] },\\n    { data: \\\"Tomatoes\\\",           type: [\\\"outOfStock\\\"] },\\n    { data: \\\"Bread\\\",              type: [\\\"inStock\\\"] }\\n]);\\ncatalog.forInItems(function(item, id, map){\\n    // set up CSS classes for inStock and outOfStock\\n    dojo.addClass(id, item.type[0]);\\n});\\n\\nvar cart = new dojo.dnd.Source(\\\"cartNode\\\", {\\n    accept: [\\\"inStock\\\"]\\n});\\nvar wishlist = new dojo.dnd.Source(\\\"wishlistNode\\\", {\\n    accept: [\\\"inStock\\\",\\\"outOfStock\\\"]\\n});\\n</pre>\\n<p>In the markup version it looks like so:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;div class=&quot;catalogContainer&quot;&gt;\\n    &lt;h2&gt;Catalog&lt;/h2&gt;\\n    &lt;ul dojoType=&quot;dojo.dnd.Source&quot; accept=&quot;inStock,outOfStock&quot;\\n        id=&quot;catalogNode&quot; class=&quot;container&quot;&gt;\\n        &lt;li class=&quot;dojoDndItem inStock&quot; dndType=&quot;inStock&quot;&gt;Wrist watch&lt;/li&gt;\\n        &lt;li class=&quot;dojoDndItem inStock&quot; dndType=&quot;inStock&quot;&gt;Life jacket&lt;/li&gt;\\n        &lt;li class=&quot;dojoDndItem inStock&quot; dndType=&quot;inStock&quot;&gt;Toy bulldozer&lt;/li&gt;\\n        &lt;li class=&quot;dojoDndItem outOfStock&quot; dndType=&quot;outOfStock&quot;&gt;\\n          Vintage microphone&lt;/li&gt;\\n        &lt;li class=&quot;dojoDndItem outOfStock&quot; dndType=&quot;outOfStock&quot;&gt;TIE fighter&lt;/li&gt;\\n        &lt;li class=&quot;dojoDndItem inStock&quot; dndType=&quot;inStock&quot;&gt;Apples&lt;/li&gt;\\n        &lt;li class=&quot;dojoDndItem inStock&quot; dndType=&quot;inStock&quot;&gt;Bananas&lt;/li&gt;\\n        &lt;li class=&quot;dojoDndItem outOfStock&quot; dndType=&quot;outOfStock&quot;&gt;Tomatoes&lt;/li&gt;\\n         &lt;li class=&quot;dojoDndItem inStock&quot; dndType=&quot;inStock&quot;&gt;Bread&lt;/li&gt;\\n    &lt;/ul&gt;\\n&lt;/div&gt;\\n\\n&lt;div class=&quot;cartContainer&quot;&gt;\\n    &lt;h2&gt;Cart&lt;/h2&gt;\\n    &lt;ol dojoType=&quot;dojo.dnd.Source&quot; accept=&quot;inStock&quot;\\n        id=&quot;cartNode&quot; class=&quot;container&quot;&gt;\\n    &lt;/ol&gt;\\n&lt;/div&gt;\\n\\n&lt;div class=&quot;wishlistContainer&quot;&gt;\\n    &lt;h2&gt;Wishlist&lt;/h2&gt;\\n    &lt;ol dojoType=&quot;dojo.dnd.Source&quot; accept=&quot;inStock,outOfStock&quot;\\n        id=&quot;wishlistNode&quot; class=&quot;container&quot;&gt;\\n    &lt;/ol&gt;\\n&lt;/div&gt;\\n</pre>\\n<p>Each DnD item can be given a type, specified in JavaScript as the <code>type</code> member of the object(s) you provide to, e.g, <code>insertNodes()</code>, or in markup as <code>dndType</code>. Correspondingly, each DnD container can be given a list of item types to accept. The default type, if you don&#8217;t specify it, is &#8220;text&#8221; for all nodes and containers. Here, we&#8217;re using the type to denote whether an item is in stock or not, and we&#8217;re using that to determine what can be dropped where: the Cart only accepts items that are in stock, while the Wishlist accepts anything. If you drag around multiple items at once, you&#8217;ll notice that you can only drop a set of items on a container that accepts every type of item in the set&mdash;no partial drops allowed!</p>\\n<p>You may have noticed a few issues with this demo:</p>\\n<ul>\\n<li>Unless you explicitly invoke copy semantics by pressing the appropriate key, dragging items removes them from the catalog, which doesn&#8217;t make much sense for this application.</li>\\n<li>You can do a copy/drag, but then it becomes easy to duplicate items.</li>\\n<li>Using simple lists like this doesn&#8217;t really give a great user experience for an establishment as dignified as <i>Dylan&#8217;s Original Junk Outlet / Dylan&#8217;s Nutritious Dietarium</i> (DOJO/DND, get it? I kill me (groan)).</li>\\n</ul>\\n<p>Let&#8217;s start with the appearance.</p>\\n<h2>Customizing Item Creation</h2>\\n<p>As I discussed above, the default drag and drop implementation is intelligent enough to create nodes according to the context in the DOM. However, if you want to display more than a string of text, the default can be lacking, since all it does is put the data into the new child node&#8217;s <code>.innerHTML</code>. Fortunately, dojo.dnd gives us a way to customize this: the <code>creator</code> function.</p>\\n<p>Since Dylan wants the product catalog to be both prettier and more informative, let&#8217;s give each item an image, short description, and quantity available. For example, for the wrist watch:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n{\\n    name: \\\"Wrist watch\\\",\\n    image: \\\"watch.jpg\\\",\\n    description: \\\"Tell time with Swiss precision\\\",\\n    quantity: 3\\n}\\n</pre>\\n<p>We&#8217;ll use this structure in the data field in the items we create. To create DOM nodes from this kind of object, we&#8217;ll need a function we can pass to the dojo.dnd.Source&#8217;s constructor:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// create the DOM representation for the given item\\nfunction catalogNodeCreator(item, hint) {\\n    // create a table/tr/td-based node structure; each item here needs an\\n    // image, a name, a brief description, and a quantity available\\n    var tr = document.createElement(\\\"tr\\\");\\n    var imgTd = document.createElement(\\\"td\\\");\\n    var nameTd = document.createElement(\\\"td\\\");\\n    var qtyTd = document.createElement(\\\"td\\\");\\n\\n    var img = document.createElement(\\\"img\\\");\\n    img.src = \\\"images/\\\" + (item.image || \\\"_blank.gif\\\");\\n    dojo.addClass(imgTd, \\\"itemImg\\\");\\n    imgTd.appendChild(img);\\n\\n    nameTd.appendChild(document.createTextNode(item.name || \\\"Product\\\"));\\n    if (item.description && hint != \\\"avatar\\\"){\\n        // avatars don't get the description\\n        var descSpan = document.createElement(\\\"span\\\");\\n        descSpan.innerHTML = item.description;\\n        nameTd.appendChild(document.createElement(\\\"br\\\"));\\n        nameTd.appendChild(descSpan);\\n    }\\n    dojo.addClass(nameTd, \\\"itemText\\\");\\n\\n    tr.appendChild(imgTd);\\n    tr.appendChild(nameTd);\\n\\n    if (hint != \\\"avatar\\\") {\\n        // avatars don't display the quantity\\n        qtyTd.innerHTML = item.quantity;\\n        dojo.addClass(qtyTd, \\\"itemQty\\\");\\n        tr.appendChild(qtyTd);\\n    }else{\\n        // put the avatar into a self-contained table\\n        var table = document.createElement(\\\"table\\\");\\n        var tbody = document.createElement(\\\"tbody\\\");\\n        tbody.appendChild(tr);\\n        table.appendChild(tbody);\\n        node = table;\\n    }\\n\\n    // use the quantity when determining the DnD item type\\n    var type = item.quantity ? [\\\"inStock\\\"] : [\\\"outOfStock\\\"];\\n\\n    return {node: tr, data: item, type: type};\\n}\\n</pre>\\n<p>Things to note here:</p>\\n<ul>\\n<li>Firstly, we&#8217;re going to be using tables for our DnD sources now. That&#8217;ll help improve the presentation (and no, not in the heretical tables-for-layout way).</li>\\n<li>In the bit at the end, we dynamically choose the DnD item type based on the quantity provided. Notice that the type specifier is actually an array; we can compile the types as combinations of property strings if we want, by adding items to the array.</li>\\n<li>The creator function takes a <code>hint</code> in the second parameter. When <code>hint==\\\"avatar\\\"</code> we&#8217;re being asked to create a DOM representation of the avatar, so our function takes that into account. Here we skip displaying the description and quantity when we make an avatar, and we put the entire avatar into its own table, since the default node that contains the avatar(s) is itself a table, and we don&#8217;t want to ruin our DOM.</li>\\n</ul>\\n<p style=\\\"text-align:center;\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2011/12/catalog-3.jpg\\\" alt=\\\"An online store product catalog\\\" style=\\\"padding:10px;border:1px solid #ccc;\\\"/></p>\\n<p>At this point, we can introduce <a href=\\\"/labs/code/dnd/intro/dnd/3-dnd.html\\\">version 3 of the demo</a> (we&#8217;re doing it all programmatically from here on out, so there&#8217;s no markup-style version). There&#8217;s a substantial overhaul in the appearance now, thanks to our table-based DnD sources. We&#8217;ve now put the wishlist and shopping cart into a couple of dijit.TitlePanes so we can easily toggle their visibility. This demonstrates a couple of concepts:</p>\\n<h3>Creating Pure Targets</h3>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar cart = new dojo.dnd.Target(\\\"cartPaneNode\\\", {accept: [\\\"inStock\\\"]});\\n</pre>\\n<p>We have a new class here: dojo.dnd.Target. This is just a thin wrapper around dojo.dnd.Source, but it sets an internal variable <code>isSource = false</code>, rendering it a pure target. You can drop items on it, but can&#8217;t drag them back out again! Incidentally, you can freely manipulate this field at runtime on a regular dojo.dnd.Source; we&#8217;ll do that later on.</p>\\n<h3>Changing the &#8220;Drop Parent&#8221;</h3>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ncart.parent = dojo.query(\\\"#cartNode tbody\\\")[0];\\n</pre>\\n<p>Here we use the dojo.dnd.Source&#8217;s internal <code>parent</code> field to change the drop behavior. You see, this object separates the concept of its 1) own node and the 2) node that&#8217;ll contain its children (mostly so tables work, since the children actually live underneath the <code>&lt;tbody&gt;</code>). We can take advantage of that by actually dropping items into a node further underneath the one that we create the TitlePane on. See, given the markup we&#8217;re using:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;div id=&quot;wishListAndCart&quot;&gt;\\n    &lt;div id=&quot;cartPaneNode&quot;&gt;\\n        &lt;table id=&quot;cartNode&quot;&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;\\n    &lt;/div&gt;\\n    &lt;div id=&quot;wishlistPaneNode&quot;&gt;\\n        &lt;table id=&quot;wishlistNode&quot;&gt;&lt;tbody&gt;&lt;/tbody&gt;&lt;/table&gt;\\n    &lt;/div&gt;\\n&lt;/div&gt;\\n</pre>\\n<p>We don&#8217;t want to drop items on a closed TitlePane (the <code>&lt;div&gt;</code>s) and create items as their immediate children; we want them to get put inside a table that lives <em>inside</em> the TitlePane, so the DOM stays legal (we&#8217;re moving <code>&lt;tr&gt;</code>s around, and we don&#8217;t want them to get attached directly to a <code>&lt;div&gt;</code>)</p>\\n<p>Things are starting to look better, but there are still a couple of changes we can make to demonstrate a few more concepts.</p>\\n<h2>Handling Events</h2>\\n<p>The drag and drop framework uses Dojo&#8217;s topic system to handle event communication. We can polish up a few things if we take advantage of this. For example, it would be nice if we could show the number of items in the wishlist and cart when they&#8217;re closed so we needn&#8217;t open them to check. Plus, it would clean things up visually if we cleared the selection states of our containers when we drop an item. We can do that.</p>\\n<h3>Building a Drop Handler</h3>\\n<p>Let&#8217;s hook into the drop notification. We can either listen for the DnD topics directly, or we can simply connect to the existing method handlers. Either one is fine; there is a subtle semantic difference, which we&#8217;ll discuss in a minute.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// calculate simple totals in the wishlist and cart titles\\nvar setupCartTitle = function(){\\n    var title = &quot;Shopping Cart&quot;;\\n    var cartLength = cart.getAllNodes().length;\\n    if(cartLength){\\n        var items = cartLength &gt; 1 ? &quot; items&quot; : &quot; item&quot;;\\n        title += &quot; (&quot; + cartLength + items + &quot;)&quot;;\\n    }\\n    cartPane.setTitle(title);\\n};\\nvar setupWishlistTitle = function(){\\n    var title = &quot;Wishlist&quot;;\\n    var wishlistLength = wishlist.getAllNodes().length;\\n    if(wishlistLength){\\n        var items = wishlistLength &gt; 1 ? &quot; items&quot; : &quot; item&quot;;\\n        title += &quot; (&quot; + wishlistLength + items + &quot;)&quot;;\\n    }\\n    wishlistPane.setTitle(title);\\n};\\ndojo.connect(cart, &quot;onDndDrop&quot;, setupCartTitle);\\ndojo.connect(wishlist, &quot;onDndDrop&quot;, setupWishlistTitle);\\n</pre>\\n<p>So here we connect to the cart&#8217;s and wishlist&#8217;s <code>onDndDrop()</code> respective methods and do some simple logic. However, be careful: these are fired by the topic system, so they both execute every time an item is dropped, no matter which container it&#8217;s dropped on. In other words, DnD notifications are broadcasted everywhere rather than sent to specific objects. In this particular case here, that&#8217;s no problem, since we&#8217;re just setting up the TitlePane titles; however, if you want to make sure your handler only executes for some particular object, you need something like this at the beginning of your function:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nif(dojo.dnd.manager().target !== this){\\n    return;\\n}\\n</pre>\\n<p>That&#8217;ll do it. Later on when we decide to add code specific to each object into these handler functions, we&#8217;ll be glad we&#8217;re using this method, but as-is, we&#8217;re not doing anything that can&#8217;t be handled by a single function that doesn&#8217;t care about the items being tracked (the drag source, target, etc.). If you&#8217;re thinking we wouldn&#8217;t need this <code>target</code> snippet if we had just <code>dojo.subscribe()</code>&#8216;d to the topic itself in the first place, you&#8217;d be absolutely correct. That&#8217;s the subtle semantic difference I mentioned above; for a global operation, listening for the drag topics makes sense; if you want to connect to a single object&#8217;s drag notifications, use the dojo.connect() style above, with the <code>.target</code> check snippet.</p>\\n<p>Speaking of that snippet, this is the first time we&#8217;ve seen dojo.dnd.manager(); this call gives us access to the singleton Manager object the DnD system uses to coordinate everything. This object handles all of the business logic of dragging and dropping, publishing the topics, initiates avatar creation, and so forth. It&#8217;s a handy source of information on the overall DnD system state. As above, see the technical docs for the details.</p>\\n<h3>Listening Directly to the Topics</h3>\\n<p>Since I mentioned that you can subscribe to the topics yourself when it makes sense, let&#8217;s cook up an example. When you start dragging items around, it&#8217;s not completely intuitive where you&#8217;re allowed to drop them; you have to keep dragging until the avatar turns green. On top of that, there&#8217;s no immediate feedback that your drop was successful. We can create a better experience than that.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nfunction highlightTargets(){\\n    var props = {\\n            margin: { start: '0', end: '-5', unit: 'px' },\\n            borderWidth: { start: '0', end: '5', unit: 'px' }\\n    };\\n    var m = dojo.dnd.manager();\\n    var hasZero = false;\\n    dojo.forEach(m.nodes, function(node){\\n        // check the selected item(s) to look for a zero quantity\\n        // so we know whether we can highlight the cart\\n        if(m.source.getItem(node.id).data.quantity == 0){\\n            hasZero = true;\\n        }\\n    });\\n    dojo.style(\\\"wishlistPaneNode\\\", \\\"borderColor\\\", \\\"#97e68d\\\");\\n    dojo.style(\\\"cartPaneNode\\\", \\\"borderColor\\\", \\\"#97e68d\\\");\\n    dojo.anim(\\\"wishlistPaneNode\\\", props, 250);\\n    if(!hasZero){\\n        dojo.anim(\\\"cartPaneNode\\\", props, 250);\\n        dojo.byId(\\\"cartPaneNode\\\").isHighlighted = true;\\n    }\\n}\\n\\nfunction unhighlightTargets(dropTarget){\\n    var props = {\\n            margin: { start: '-5', end: '0', unit: 'px' },\\n            borderWidth: { start: '5', end: '0', unit: 'px' }\\n    };\\n    cpn = dojo.byId(\\\"cartPaneNode\\\");\\n    var cartIsHighlighted = cpn.isHighlighted;\\n    cpn.isHighlighted = false;\\n    if(dropTarget && dropTarget.node && dropTarget.node.id){\\n        // dropTarget lets us know which node to highlight yellow\\n        switch(dropTarget.node.id){\\n            case \\\"wishlistPaneNode\\\":\\n                if(cartIsHighlighted){\\n                    dojo.anim(\\\"cartPaneNode\\\", props, 250);\\n                }\\n                dojo.style(\\\"wishlistPaneNode\\\", \\\"borderColor\\\", \\\"#ffff33\\\");\\n                dojo.anim(\\\"wishlistPaneNode\\\", props, 500, null, null, 750);\\n                break;\\n            case \\\"cartPaneNode\\\":\\n                dojo.anim(\\\"wishlistPaneNode\\\", props, 250);\\n                dojo.style(\\\"cartPaneNode\\\", \\\"borderColor\\\", \\\"#ffff33\\\");\\n                dojo.anim(\\\"cartPaneNode\\\", props, 500, null, null, 750);\\n                break;\\n            default:\\n                dojo.anim(\\\"wishlistPaneNode\\\", props, 250);\\n                if(cartIsHighlighted){\\n                    dojo.anim(\\\"cartPaneNode\\\", props, 250);\\n                }\\n        }\\n    }else{\\n        dojo.anim(\\\"wishlistPaneNode\\\", props, 250);\\n        if(cartIsHighlighted){\\n            dojo.anim(\\\"cartPaneNode\\\", props, 250);\\n        }\\n    }\\n}\\n</pre>\\n<p>Then, in our initialization function:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar resetSelections = function(){\\n    cart.selectNone();\\n    wishlist.selectNone();\\n    junkCatalog.selectNone();\\n    foodCatalog.selectNone();\\n};\\n\\n// highlight valid drop targets when a drag operation starts;\\ndojo.subscribe(\\\"/dnd/start\\\", null, highlightTargets);\\ndojo.subscribe(\\\"/dnd/cancel\\\", null, unhighlightTargets);\\n\\ndojo.subscribe(\\\"/dnd/drop\\\", function(){\\n    resetSelections();\\n    unhighlightTargets(dojo.dnd.manager().target);\\n});\\n</pre>\\n<p>Since we&#8217;re listening to the topic broadcast itself, we know these will only run once per event. Manipulating a bit of CSS with <code>dojo.anim()</code> helps make the drag and drop system a bit friendlier here, and that&#8217;s always a good thing.</p>\\n<p>Armed with knowledge of how to run code at various parts of the drag and drop timeline, we can see that it wouldn&#8217;t be difficult to extend this further. For example, our item quantities basically only determine whether you can drop something on the shopping cart, but it would be great if those updated when you did so (but not when you drop on the wishlist!). Since we have two separate DnD sources here, they each track their own selection state. Maybe we could set it up so that when you click on an item in one of the sources, it clears the selection on the other one. And of course, this little storefront doesn&#8217;t have any prices! In a real store you&#8217;d want to add that, and probably upgrade <code>setupCartTitle()</code> to calculate a subtotal. The sky&#8217;s the limit.</p>\\n<h3>Avoiding Duplicate Items</h3>\\n<p>One thing I hadn&#8217;t pointed out before was that in version 3 of our demo, in addition to specifying the node creator function when instantiating our dojo.dnd.Source objects, we also passed a parameter <code>copyOnly: true</code>. This overrides the default move semantics to do a copy operation by default, without requiring a special key press. This is nice because now we can avoid removing items from the catalog(s) when we drag them around, but the downside is that if you drop an item on the container where it already lives, it duplicates the item.</p>\\n<p>Huh. That&#8217;s interesting, because we&#8217;re not specifying the <code>accept</code> type for the catalogs, so they should default to <code>[\\\"text\\\"]</code>, which <em>should</em> keep us from dropping the products on them (we&#8217;re explicitly giving them different types, remember). However, it obviously doesn&#8217;t work the way we want. If you dig into the Dojo source, you&#8217;ll see that the reason is because the function that checks for matches between item types and container accept values automatically accepts &#8220;self drops,&#8221; short circuiting the item type check. Often, that&#8217;s the correct behavior, but for our <code>copyOnly</code>-style DnD here, this is backwards. Fortunately again, overriding this is easy: just replace the object&#8217;s <code>checkAcceptance()</code> function:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// based on dojo.dnd.Source.checkAcceptance()\\nfunction checkAcceptanceWithoutSelfDrop(source, nodes) {\\n    if(this == source){ return false; }\\n    for(var i = 0; i &lt; nodes.length; ++i){\\n        var type = source.getItem(nodes&amp;#91;i&amp;#93;.id).type;\\n        // type instanceof Array\\n        var flag = false;\\n        for(var j = 0; j &lt; type.length; ++j){\\n            if(type&amp;#91;j&amp;#93; in this.accept){\\n                flag = true;\\n                break;\\n            }\\n        }\\n        if(!flag){\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n&amp;#91;/code&amp;#93;\\n\\n&lt;p&gt;Then in our initialization code,&lt;/p&gt;\\n\\n\\njunkCatalog.checkAcceptance = checkAcceptanceWithoutSelfDrop;\\nfoodCatalog.checkAcceptance = checkAcceptanceWithoutSelfDrop;\\n</pre>\\n<p>But wait! That's not all. There's still a small bug here: self drops are properly blocked at first, but after you drop an item successfully on the wishlist or shopping cart, self drops are accepted again. The reason is basically due to the timing and placement of the internal calls that cache acceptance criteria inside dojo.dnd.Manager. I won't go into the details, but suffice it to say that we need to add this to our drop topic handler from before:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// reset the manager's drop flag to false, since in our\\n// case DnD operations always start on a container that\\n// will not allow \\\"self drops\\\"\\ndojo.dnd.manager().canDrop(false);\\n</pre>\\n<p>This way whenever a drag operation is initiated, we always start in a \\\"cannot drop\\\" state, and now all is right with the world. Take a look at <a href=\\\"/labs/code/dnd/intro/dnd/4-dnd.html\\\">version 4 of our demo</a> to see it all working together. Some of the code has been reorganized and/or moved to an external file to reduce clutter, but the new stuff is all there if you view the page source.</p>\\n<p style=\\\"text-align:center;\\\"><a href=\\\"/labs/code/dnd/intro/dnd/4-dnd.html\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2011/12/dylans-original-4.jpg\\\" alt=\\\"An online storefront\\\"/></a></p>\\n<h3>Tweaking DnD Behavior</h3>\\n<p>The final thing left to talk about for this demo is the set of buttons we introduce in version 4. We have buttons to clear the wishlist and shopping cart now, but notice the buttons at the bottom of the page. These demonstrate different ways to change the way DnD behaves. You can read the code to see how they work, but here's what they do:</p>\\n<ul>\\n<li><b><code>isSource</code> (\\\"enable DnD\\\"):</b> If you've ever wondered how to turn DnD on and off completely, here's one way. This toggles the <code>isSource</code> member of each of our sources; I mentioned this earlier, but recall that when this is false, the manager won't initiate any drag operations. Objects will still accept drops, but if there's nothing acting as a source, we've effectively disabled the DnD system.</li>\\n<li><b><code>withHandles</code> (\\\"drag via handles only\\\"):</b> If you give a DOM node the <code>dojoDndHandle</code> class, dojo.dnd will consider it a handle. Each Source has a member variable <code>withHandles</code> that determines whether you can drag <em>any</em> part of an item, or just the handle. This demo sets up the product images as the handles, so if you toggle the button, you'll see the drag behavior change accordingly.</li>\\n<li><b><code>skipForm</code> (\\\"no button in the demo\\\"):</b> If you have form elements in your drag items, you can use the <code>skipForm</code> field to toggle whether or not clicks inside them will initiate drags. Setting it to <code>true</code> will allow you to, say, select text in a <code>&lt;textarea&gt;</code> without dragging everything around.</li>\\n</ul>\\n<h2>Finishing Up</h2>\\n<p>For reference, here are the steps we've taken so far:</p>\\n<ul>\\n<li><a href=\\\"/labs/code/dnd/intro/dnd/0-dnd.html\\\">Step 0: skeleton page</a></li>\\n<li><a href=\\\"/labs/code/dnd/intro/dnd/1-dnd.html\\\">Step 1: a single list</a></li>\\n<li><a href=\\\"/labs/code/dnd/intro/dnd/2-dnd.html\\\">Step 2: multiple lists</a></li>\\n<li><a href=\\\"/labs/code/dnd/intro/dnd/3-dnd.html\\\">Step 3: customizing item creation</a></li>\\n<li><a href=\\\"/labs/code/dnd/intro/dnd/4-dnd.html\\\">Step 4: listening to events</a></li>\\n</ul>\\n<p>By putting our Javascript code into an external .js file and adding a bit of markup (that we remove via JS in the initialization sequence), we can even create a <a href=\\\"/labs/code/dnd/intro/dnd/5-dnd.html\\\">new version</a> that <a href=\\\"http://validator.w3.org/check?uri=https%3A%2F%2Fwww.sitepen.com%2Flabs%2Fcode%2Fdnd%2Fintro%2Fdnd%2F5-dnd.html&#038;charset=%28detect+automatically%29&#038;doctype=Inline&#038;group=0\\\">validates as XHTML 1.0 Strict</a>!</p>\\n<p>There's quite a lot to discuss in dojo.dnd. For example, we haven't really touched the CSS it uses to let your app know what's happening in DnD land (you can see what this demo uses in <a href=\\\"/labs/code/dnd/intro/dnd.css\\\">dnd.css</a>). There's also a whole discussion we could have on how to cleanly set up your own custom DnD sources by extending dojo.dnd.Source with <code>dojo.declare()</code>. A lot of dojo.dnd's internals are specifically set up to be easy to override with your own code so you can customize just about any part necessary. And finally, there's the dojo.dnd.move API, but as I said at the beginning, that's for next time.</p>\\n<p>Until then, happy dragging and dropping!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>NOTE: This post contains information pertaining to an older version of Dojo.Read the updated version now! Most anyone who&#8217;s looked at the feature list knows that one of Dojo&#8217;s core features is a drag and drop framework. What&#8217;s not immediately obvious is that Dojo actually has two drag and drop APIs. The first, dojo.dnd, is [&hellip;]</p>\\n\",\"protected\":false},\"author\":19,\"featured_media\":22075,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,3],\"tags\":[118,98,83,119],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dojo Drag and Drop, Part 1: dojo.dnd | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"NOTE: This post contains information pertaining to an older version of Dojo.Read the updated version now! Most anyone who&#039;s looked at the feature list knows that one of Dojo&#039;s core features is a drag and drop framework. What&#039;s not immediately obvious is that Dojo actually has two drag and drop APIs. The first, dojo.dnd, is\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/dojo-drag-and-drop-1/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dojo Drag and Drop, Part 1: dojo.dnd | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"NOTE: This post contains information pertaining to an older version of Dojo.Read the updated version now! Most anyone who&#039;s looked at the feature list knows that one of Dojo&#039;s core features is a drag and drop framework. What&#039;s not immediately obvious is that Dojo actually has two drag and drop APIs. The first, dojo.dnd, is\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/dojo-drag-and-drop-1/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2008-06-10T07:02:35+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-drag-and-drop-1/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-drag-and-drop-1/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/dojo-drag-and-drop-1/\\\",\\\"name\\\":\\\"Dojo Drag and Drop, Part 1: dojo.dnd | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-drag-and-drop-1/#primaryimage\\\"},\\\"datePublished\\\":\\\"2008-06-10T07:02:35+00:00\\\",\\\"dateModified\\\":\\\"2008-06-10T07:02:35+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/92f3b5395bb56e1652aae279b81c8623\\\"},\\\"description\\\":\\\"NOTE: This post contains information pertaining to an older version of Dojo.Read the updated version now! Most anyone who's looked at the feature list knows that one of Dojo's core features is a drag and drop framework. What's not immediately obvious is that Dojo actually has two drag and drop APIs. The first, dojo.dnd, is\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/dojo-drag-and-drop-1/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/92f3b5395bb56e1652aae279b81c8623\\\",\\\"name\\\":\\\"Revin Guillen\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Revin Guillen\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/358\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/19\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=358\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/358/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=358\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=358\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=358\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=358\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":19,\"name\":\"Revin Guillen\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/rguillen/\",\"slug\":\"rguillen\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Revin Guillen, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Revin Guillen, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/rguillen/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/rguillen/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/rguillen/\\\",\\\"name\\\":\\\"Revin Guillen, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/92f3b5395bb56e1652aae279b81c8623\\\",\\\"name\\\":\\\"Revin Guillen\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Revin Guillen\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/rguillen/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/19\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:45:43 GMT"],["expires","Wed, 09 Sep 2020 15:45:43 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}