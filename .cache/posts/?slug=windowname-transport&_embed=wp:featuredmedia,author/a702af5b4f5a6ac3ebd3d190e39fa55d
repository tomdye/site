{"value":{"body":"[{\"id\":378,\"date\":\"2008-07-22T00:04:20\",\"date_gmt\":\"2008-07-22T07:04:20\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2008/07/22/windowname-transport/\"},\"modified\":\"2008-07-22T00:04:20\",\"modified_gmt\":\"2008-07-22T07:04:20\",\"slug\":\"windowname-transport\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/windowname-transport/\",\"title\":{\"rendered\":\"window.name Transport\"},\"content\":{\"rendered\":\"<p>The window.name transport is a new technique for secure cross-domain browser based data transfer, and can be utilized for creating secure mashups with untrusted sources. window.name is implemented in <a href=\\\"http://dojotoolkit.org\\\">Dojo</a> in the new <a href=\\\"http://bugs.dojotoolkit.org/ticket/6893\\\"><code>dojox.io.windowName</code></a> module, and it is very easy to make web services available through the window.name protocol. window.name works by loading a cross-domain HTML file in an iframe. The HTML file then sets its window.name to the string content that should be delivered to the requester. The requester can then retrieve the window.name value as the response. The requested resource never has access to the requester&#8217;s environment (JavaScript variables, cookies, and DOM).</p>\\n<p><!--more--></p>\\n<h2>Dojo API</h2>\\n<p>To use the window.name transport, you can use <code>dojox.io.windowName</code>&#8216;s single function, <code>send</code>, with an API very similar to <code>dojo.xhr</code>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">dojox.io.windowName.send(method, args);</pre>\\n<p>The <code>method</code> parameter can be GET or POST. The <code>args</code> parameter is an object that provides the target URL and other information per the <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.__IoArgs\\\">Dojo ioArgs API</a>. When you call <code>dojox.io.windowName.send</code>, it will send the specified request and return a <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.Deferred\\\">dojo.Deferred</a> object, which you can listen to for the response. For example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">var deferred = dojox.io.windowName.send(\\\"GET\\\", {url:\\\"http://somesite.com/resource\\\"});\\ndeferred.addCallback(function(result){\\n  alert(\\\"The request returned \\\" + result);\\n});</pre>\\n<h2>Making Web Services Available with window.name</h2>\\n<p>In order to implement window.name with web services (REST or RPC), the server should simply look for requests that include a parameter <em>windowname</em>. If the <em>windowname</em> parameter is included, the server should respond to the request with an HTML document that sets its window.name to the string that is to be delivered to the client. For example, if a client makes a window.name request like:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">http://othersite.com/greeting?windowname=true\\n</pre>\\n<p>And if the server wants to respond to the client with <em>Hello</em>, it should return an html page:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;html&gt;\\n&lt;script type=&quot;text/javascript&quot;&gt;\\nwindow.name=&quot;Hello&quot;;\\n&lt;/script&gt;\\n&lt;/html&gt;\\n</pre>\\n<p>The value returned to the client will be <em>Hello</em>. One can easily transfer JSON data as well:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;html&gt;\\n&lt;script type=&quot;text/javascript&quot;&gt;\\nwindow.name='{&quot;foo&quot;:&quot;bar&quot;}';\\n&lt;/script&gt;\\n&lt;/html&gt;\\n</pre>\\n<p>The client will than receive the JSON data as a string which can then be parsed with a JSON parser like dojo.fromJson. On the client side, it is highly recommended you use a JSON or secure JavaScript validator if you want to prevent arbitrary code execution and unrestrained access to your environment from the target web service data. To securely parse the JSON, you can test the JSON with the dojox.secure.capability validator <strong>prior</strong> to calling fromJson:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar deferred = dojox.io.windowName.send(\\\"GET\\\", {url:\\\"http://somesite.com/resource\\\"});\\ndeferred.addCallback(function(result){\\n  // capability.validate will throw an error \\n  // if there is unsafe script code in the JSON\\n  dojox.secure.capability.validate(result,[],{});\\n  console.log(\\\"received object\\\", dojo.fromJson(result));\\n});</pre>\\n<p>Writing extensive multi-line JSON objects in a quoted string can be rather difficult and error-prone if you are manually creating resources. You can use this template HTML to easily create JSON data that will be delivered as a JSON string without having to manually escape the JSON as a string:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;html&gt;\\n&lt;script type=&quot;\\\\'text/javascript\\\\'&quot;&gt;\\n  window.name = document.getElementsByTagName(&quot;script&quot;)[0]\\n    .innerHTML.match(/temp\\\\s*=([\\\\w\\\\W]*)/)[1];\\n  temp= {foo:&quot;bar&quot;, // put json data here\\n\\n\\n\\n \\tbaz:&quot;foo&quot;}\\n&lt;/script&gt;\\n&lt;/html&gt;\\n</pre>\\n<p>Likewise, if you want to deliver HTML/XML data, here is a template for doing so without manually putting all the data in a string:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\n&lt;html&gt;\\n&lt;body&gt;\\n&lt;p id=&quot;content&quot;&gt;\\nsome &lt;strong&gt;html/xml-style&lt;/strong&gt;data\\n&lt;/p&gt;\\n&lt;/body&gt;\\n&lt;script type=&quot;\\\\'text/javascript\\\\'&quot;&gt;\\n window.name = document.getElementById(&quot;content&quot;).innerHTML;\\n&lt;/script&gt;\\n&lt;/html&gt;\\n</pre>\\n<p>This module has been tested on Firefox 2 and 3, Safari 3, IE 6 and 7, and Opera 9. You can see a simple <a href=\\\"https://www.sitepen.com/labs/code/secure/dojox/io/tests/windowName.html\\\">test/demo page</a> that loads data using the window.name protocol. By default, this demo loads data from our <a href=\\\"https://www.sitepen.com/labs/persevere.php\\\">Persevere</a> server, which now supports this protocol.</p>\\n<h2>Benefits</h2>\\n<p>This technique has several advantages over other cross-domain transports:</p>\\n<ul>\\n<li>It is secure, JSONP is not. That is, it is as secure as other frame based secure transports like <a href=\\\"http://dojotoolkit.org/pipermail/dojo-contributors/2006-July/003001.html\\\">fragment identifier messaging</a> (FIM), and <a href=\\\"http://research.microsoft.com/~helenw/papers/subspace.pdf\\\">Subspace</a>. (I)Frames also have their own security issues because frames can change other frames locations, but that is quite a different security exploit, and generally far less serious.</li>\\n<li>It is much faster than FIM, because it doesn&#8217;t have to deal with small packet size of a fragment identifier, and it doesn&#8217;t have as many &#8220;machine gun&#8221; sound effects on IE. It is also faster than Subspace. Subspace requires two iframes and two local HTML files to be loaded to do a request. window.name only requires one iframe and one local file.</li>\\n<li>It is simpler and more secure than Subspace and FIM. FIM is somewhat complicated, and Subspace is very complicated. Subspace also has a number of extra restrictions and setup requirements, like declaring all of the target hosts in advance and having DNS entries for a number of different particular hosts. window.name is very simple and easy to use.</li>\\n<li>It does not require any plugins (like Flash) or alternate technologies (like Java).</li>\\n</ul>\\n<h2>How does it work?</h2>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2008/07/windowname.png\\\" alt=\\\"windowname.png\\\" style=\\\"float:right\\\"/> Of course you can use the new windowName module without understanding how it works, but since this is a tool for protecting against miscreant web services, you may wish to understand how it provides protection. <code>name</code> is a property of the global/window object in the browser environment, and the value of the <code>name</code> property remains the same as new pages are navigated for the frame. By loading a resource in an iframe where the target page will set the <code>name</code> property for its frame, this <code>name</code> property value can be retrieved to access the information sent by the web service. The <code>name</code> property is only accessible for frames that are in the same domain. This means that Dojo must navigate the frame back to the origin domain after the remote web service page has been loaded, in order to access the <code>name</code> property. This same-origin policy also protects against other frames from accessing the <code>name</code> property while Dojo is retrieving the value. Once the <code>name</code> property is retrieved, the frame is destroyed.</p>\\n<p>At the top level, the <code>name</code> property is not secure, any information put in the <code>name</code> property is available for all subsequent pages. However, the windowName module always loads resources in an iframe. The iframe is destroyed once the data is retrieved, or when you navigate to a new page at the top level, so other pages never have access to the window.name property.</p>\\n<p>The principle vector of attack is for other frames to attempt to access the loading frame and navigate that frame to their own domain in order to access the <code>name</code> property (using the same technique that Dojo does). However, navigating frames that are not child or parent frames is not permitted in most browsers, and therefore the third party frames are blocked from this action by the browser. Only the main frame that is loading the resources can access this information. Unfortunately, Firefox 2 does not block this action. Consequently, the windowName module uses a set of three nested frames, where 1st frame blocks all frame traversal to the 2nd frame using dynamically installed getters that return null. This means that third party frames can never traverse the frames to get a reference to the 2nd or 3rd frames, and consequently can never induce navigation of the target frame (the 3rd frame) in order to access the <code>name</code> property. Same-origin security prevents the third party frame from removing the installed getter that protects access to the inner frames as well. These measures protect against attacks and ensure that data can be delivered securely.</p>\\n<p>The idea for the window.name transport is based <a href=\\\"http://www.thomasfrank.se/\\\">Thomas Franke</a>&#8216;s <a href=\\\"http://www.thomasfrank.se/sessionvars.html\\\">library for doing session variables with window.name</a>, but this obviously has a completely different goal.</p>\\n<h3>Cross Domain Builds</h3>\\n<p>If you are using Dojo from a CDN or a cross domain build, you will need to set dojo.config.dojoCallbackUrl (which can be set through the djConfig attribute in the dojo.js script tag) to the URL of a blank.html on your server.</p>\\n<h2>Conclusion</h2>\\n<p>The next generation of browsers will most likely include native capabilities for securely accessing resources from other sites, however it is extremely valuable to have a safe, efficient means for loading data from other domains with current browsers, in order to build secure mashups. The window.name transport provides an efficient secure mechanism for loading data and can play an important role as a foundation for client-side mashups for current and legacy browser technology. The new Dojo windowName module is an easy to use tool for leveraging this transport, and handles the cross-browser issues and protects against the different attack vectors so you can safely utilize this protocol.  The Dojo windowName module is available in nightly Dojo builds, and will be available with Dojo 1.2.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>The window.name transport is a new technique for secure cross-domain browser based data transfer, and can be utilized for creating secure mashups with untrusted sources. window.name is implemented in Dojo in the new dojox.io.windowName module, and it is very easy to make web services available through the window.name protocol. window.name works by loading a cross-domain [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":17557,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,45,3],\"tags\":[155,156,157,158],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>window.name Transport | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/windowname-transport/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"window.name Transport | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"The window.name transport is a new technique for secure cross-domain browser based data transfer, and can be utilized for creating secure mashups with untrusted sources. window.name is implemented in Dojo in the new dojox.io.windowName module, and it is very easy to make web services available through the window.name protocol. window.name works by loading a cross-domain [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/windowname-transport/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2008-07-22T07:04:20+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/windowname-transport/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/windowname-transport/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/windowname-transport/\\\",\\\"name\\\":\\\"window.name Transport | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/windowname-transport/#primaryimage\\\"},\\\"datePublished\\\":\\\"2008-07-22T07:04:20+00:00\\\",\\\"dateModified\\\":\\\"2008-07-22T07:04:20+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/windowname-transport/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/378\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=378\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/378/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17557\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=378\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=378\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=378\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=378\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:39:08 GMT"],["expires","Mon, 31 Aug 2020 15:39:08 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}