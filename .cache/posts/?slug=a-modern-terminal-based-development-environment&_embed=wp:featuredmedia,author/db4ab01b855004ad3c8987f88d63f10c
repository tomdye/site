{"value":{"body":"[{\"id\":17018,\"date\":\"2018-12-12T06:40:36\",\"date_gmt\":\"2018-12-12T13:40:36\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=17018\"},\"modified\":\"2020-01-22T09:20:40\",\"modified_gmt\":\"2020-01-22T17:20:40\",\"slug\":\"a-modern-terminal-based-development-environment\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/a-modern-terminal-based-development-environment/\",\"title\":{\"rendered\":\"A Modern Terminal-Based Development Environment\"},\"content\":{\"rendered\":\"<p>VS Code gets a lot of love today, and rightly so, but there’s still something to be said for a text-mode, fully keyboard-controlled development environment. With tools like zsh, tmux, tsserver, and Vim, you’ll find you rarely need to reach over to the rodent on your desk.</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/cat_typing.gif\\\" alt=\\\"\\\" width=\\\"300\\\" height=\\\"300\\\" class=\\\"aligncenter size-full wp-image-17020\\\" /></p>\\n<p>In this article I’ll go over some tools that I find useful in my own terminal based environment. As such, this article will focus on Macs, although most of the tools discussed here are also available on Linux. They will generally <em>not</em> be available on Windows unless you’re using <a href=\\\"https://docs.microsoft.com/en-us/windows/wsl/faq\\\">Windows Subsystem for Linux</a> or <a href=\\\"http://www.cygwin.com\\\">Cygwin</a>, at which point you’re basically using Linux.</p>\\n<p>I’ll also be pushing <a href=\\\"https://en.wikipedia.org/wiki/Vi#Interface\\\">vi-style (modal) key bindings</a> wherever possible. I’m a huge fan of Vi’s modal editing system and its associated key bindings. Luckily I’m not the only one; most modern command line tools that have customizable key<br />\\nbindings support vi-style bindings.</p>\\n<aside style=\\\"padding:1em;background:#eef;border-radius:6px;margin-bottom:1em;\\\">\\nAll of my terminal app configuration files are available in my <a href=\\\"https://github.com/jason0x43/dotfiles\\\">dotfiles</a> repository, so head over there if you want to see more info about something mentioned in this article. (“Dotfiles” are the common name for a user’s personal configuration files for tools like editors and shells.)</aside>\\n<h2>The Terminal</h2>\\n<p>The first thing you need in a terminal based environment is, well, a terminal. You may be using your system’s built in terminal (Terminal.app on a Mac), or you may be using a popular third-party alternative like <a href=\\\"https://www.iterm2.com/\\\">iTerm2</a>, or maybe you’ve even tried out <a href=\\\"https://hyper.is/\\\">Hyper</a> in all it’s Electron-ic glory. There are a lot of great options! iTerm2 supports all kinds of bells and whistles like split windows and autocomplete and automatically timestamped commands. Hyper is the web developer’s terminal; it’s written in and extendable with standard web technologies like JavaScript and CSS.</p>\\n<p>I’ve tried several terminal clients, but lately I’ve been sticking with Apple’s own Terminal.app. The real power of a terminal-based environment comes from the tools running in the terminal rather than the terminal app itself. There’s not as much benefit to having features built into the terminal when they will be replicated by terminal applications.</p>\\n<p>The only real configuration I use for Terminal.app is to change fonts and colors, which are set using Terminal.app “profiles”. I use the same font all the time (SF Mono), so the only difference between the themes I use is the color scheme. I sometimes like to switch color schemes on-the-fly, particularly when transitioning from day to night, so I wrote a simple theme switching script for that; it can be used to dynamically change the theme for all running Terminal sessions (not just the active one), and it also switches the macOS (Mojave) UI mode between light and dark.</p>\\n<p>To implement my dynamic theming system, first install some profiles for light and dark mode. I use the Ashes and Solarized Light <a href=\\\"https://github.com/vbwx/base16-terminal-app\\\">base16 themes</a> that someone helpfully put together for Terminal.app. Whether you’re using stock or third party profiles, you should make sure they’re both using the same font at the same size; this will prevent the terminal from resizing when changing themes.</p>\\n<p>Next, add the following <code>theme</code> script somewhere in your path:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">#!/bin/bash\\r\\n\\r\\ntheme=$1\\r\\n\\r\\nif [[ $theme == &quot;dark&quot; ]]; then\\r\\n  dark_mode=&quot;true&quot;\\r\\n  term_theme=&quot;Ashes&quot;\\r\\nelse\\r\\n  dark_mode=&quot;false&quot;\\r\\n  term_theme=&quot;Solarized Light&quot;\\r\\nfi\\r\\n\\r\\nosascript &lt;&lt;END\\r\\n  tell application &quot;System Events&quot;\\r\\n    tell appearance preferences\\r\\n      set dark mode to $dark_mode\\r\\n    end tell\\r\\n  end tell\\r\\nEND\\r\\n\\r\\nosascript &lt;&lt;END\\r\\n  tell application &quot;Terminal&quot;\\r\\n    set current settings of tabs of windows to settings set &quot;$term_theme&quot;\\r\\n    set default settings to settings set &quot;$term_theme&quot;\\r\\n  end tell\\r\\nEND\\r\\n</pre>\\n<p>Then experience the magic!</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/dark_mode.gif\\\" alt=\\\"\\\" width=\\\"1024\\\" height=\\\"517\\\" class=\\\"aligncenter size-large wp-image-17022\\\" /></p>\\n<h2>The shell</h2>\\n<p>Now that you have a terminal, you need a shell. Unless you’ve bothered to change your shell, it’s probably <a href=\\\"https://www.gnu.org/software/bash/\\\">bash</a>. Bash is a fine choice, offering a number of useful features including configurable command completion and fancy prompts.</p>\\n<p>Another popular shell amongst developers, and the one I’ve been using for the last few years, is <a. href=\\\"http://zsh.sourceforge.net\\\">zsh</a>, the Z-shell. It has a number of unique features that can really super-charge your command line usage:</p>\\n<ul>\\n<li>Change directories just by typing the directory name &#8212; no <code>cd</code> required! (You’ll need to add <code>set opt AUTO_CD</code> to your <code>~/.zshrc</code> file.)<br />\\n<img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/cd.gif\\\" alt=\\\"\\\" width=\\\"1408\\\" height=\\\"100\\\" class=\\\"aligncenter size-full wp-image-17021\\\" /></li>\\n<li>Tab-complete partial paths <img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/path_expansion.gif\\\" alt=\\\"\\\" width=\\\"1408\\\" height=\\\"100\\\" class=\\\"aligncenter size-full wp-image-17023\\\" /></li>\\n<li>Autocorrection for mistyped commands and directory names<br />\\n<img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/autocorrect.gif\\\" alt=\\\"\\\" width=\\\"1408\\\" height=\\\"100\\\" class=\\\"aligncenter size-full wp-image-17019\\\" /></li>\\n<li>Powerful built in command completion <img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/completion.gif\\\" alt=\\\"\\\" width=\\\"1408\\\" height=\\\"398\\\" class=\\\"aligncenter size-full wp-image-17025\\\" /></li>\\n<li>A rich ecosystem of plugins, like <a href=\\\"https://github.com/zsh-users/zsh-syntax-highlighting\\\">syntax highlighting</a> and <a href=\\\"https://github.com/tarruda/zsh-autosuggestions\\\">autosuggestion</a></li>\\n</ul>\\n<p>In the following sections I’ll describe a few features that I’ve found to be particularly useful.</p>\\n<h3>Key bindings</h3>\\n<p>First things first. Add the following to your <code>~/.zshrc</code> and run <code>exec zsh</code>.</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">bindkey -v</pre>\\n<p>There, that’s better.</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/sigh.gif\\\" alt=\\\"\\\" width=\\\"290\\\" height=\\\"226\\\" class=\\\"aligncenter size-full wp-image-17026\\\" /></p>\\n<p>If you haven’t used it before, zsh’s vi mode is pretty great. It supports all the basic vi commands like hitting <code>b</code> to jump back a word, or <code>dw</code> to delete the word after the cursor. It even supports cut-and-paste and undo!</p>\\n<h3>Plugins</h3>\\n<p>All shells are scriptable…and then there’s zsh. Zsh is all about extensibility. Users have written hundreds of plugins to enhance zsh in various ways, to the extent that multiple plugin management frameworks have sprung up to help deal with them. If you’re already using zsh, you may even be familiar with one or more of its plugin frameworks, like <a href=\\\"https://ohmyz.sh\\\">oh my zsh!</a>, <a href=\\\"https://github.com/sorin-ionescu/prezto\\\">prezto</a>, or <a href=\\\"http://antigen.sharats.me\\\">antigen</a>. These are great and can really simplify the process of trying out new functionality, although most zsh plugins can also be used outside of plugin system.</p>\\n<p>Some plugins that I find useful on a day-to-day basis are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/zsh-users/zsh-autosuggestions\\\">zsh-autosuggestions</a> is a really neat feature inspired by the <a href=\\\"https://fishshell.com\\\">Fish shell</a>. It will, based on what you’re typing, suggest the most likely command based on what you’ve typed before.<img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/autosuggest.gif\\\" alt=\\\"\\\" width=\\\"1472\\\" height=\\\"35\\\" class=\\\"aligncenter size-full wp-image-17027\\\" /></li>\\n<li><a href=\\\"https://github.com/zsh-users/zsh-completions\\\">zsh-completions</a> contains, as its name suggests, more completions. These is the testing ground for scripts that eventual be included in zsh, for commands like <code>bower</code>, <code>httpie</code>, and <code>mvn</code>.</li>\\n<li><a href=\\\"https://github.com/zsh-users/zsh-history-substring-search\\\">zsh-history-substring-search</a> is another Fish-inspired feature. It lets you type some part of a previous command, then repeated use arrow or vi keys to cycle through commands that match what you typed. <img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/history_search.gif\\\" alt=\\\"\\\" width=\\\"1472\\\" height=\\\"35\\\" class=\\\"aligncenter size-full wp-image-17028\\\" /></li>\\n<li><a href=\\\"https://github.com/lukechilds/zsh-nvm\\\">zsh-nvm</a> integrates <a href=\\\"https://github.com/creationix/nvm\\\">nvm</a> (Node Version Manager) more tightly into zsh, providing shell commands to update and use nvm and configure how it manages installed Node versions.</li>\\n</ul>\\n<h3>Completion</h3>\\n<p>Zsh’s completion system is one of its star attractions. Everyone is used to file completion at this point, but zsh can do so much more. Completion scripts can complete all kinds of things, from git branch names to npm subcommands. This is a killer feature for developers since it can make working with shell commands much faster. It’s also great if, like me, you want to see what you changed in a commit that you can’t <em>quite</em> remember the hash for.</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/stat.gif\\\" alt=\\\"\\\" width=\\\"1472\\\" height=\\\"190\\\" class=\\\"aligncenter size-full wp-image-17030\\\" /></p>\\n<p>There are many, many options in the zsh completion system. The largest of the <em>three</em> manpages for zsh’s completion system (there are more than 10 manpages covering the rest of zsh) is longer than the entire bash manpage. So…for now let’s just turn it on. In your <code>~/.zshrc</code>, make sure you have the following command (or something like it):</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">autoload -Uz compinit &amp;&amp; compinit -I</pre>\\n<p>One hiccup you might run into is that while zsh includes completion scripts for many, many commands, some applications (I’m looking at you, git) include their own completion scripts that don’t do as much as zsh’s default scripts. The easiest ways to disable particular third-party completion scripts is to remove them from your zsh’s site-functions directory, normally <code>/usr/share/zsh/site-functions</code> or <code>/usr/local/share/zsh/site-functions</code>.</p>\\n<h3>Prompt</h3>\\n<p>Prompt customization is one of the big draws of zsh. Zsh has a built-in prompt theming system, and the various plugin systems provide large numbers of themes to choose from. Zsh themes can set colors, add “widgets” to the prompt, render data on both the left and right sides of the terminal, and can show and hide information as you’re typing a command.</p>\\n<p>For developers, showing information about the current project repository can be particularly useful. Assuming you’re using git, the plugin options range from a fairly simple <a href=\\\"https://github.com/olivierverdier/zsh-git-prompt\\\">inline info widget</a> to a<br />\\n<a href=\\\"https://github.com/arialdomartini/oh-my-git\\\">quasi-graphical repo status line</a> that displays above the main prompt.</p>\\n<p>I use a relatively sedate set of markers to indicate when I’m in a git repo or using nvm, and to display some basic info about these environments when they’re active. This was my attempt at using zsh’s <code>zstyle</code> styling system, so it’s not the simplest prompt script ever, but it does the job. You can see it in my <a href=\\\"https://github.com/jason0x43/dotfiles/blob/master/zsh/functions/prompt_jason0x43_setup\\\">dotfiles repo</a>. At a high level, the prompt script calls several functions, including <code>git-info</code> and <code>node-info</code>, every time the prompt is redrawn; these functions determine information about the current environment and fill in placeholders in the prompt.</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/prompt.gif\\\" alt=\\\"\\\" width=\\\"1534\\\" height=\\\"484\\\" class=\\\"aligncenter size-full wp-image-17029\\\" /></p>\\n<h3>Aliases</h3>\\n<p>You have have noticed some weird commands in the gifs above, like <code>gco</code>. Those are shell aliases. Aliases are nothing new, although zsh makes them particularly powerful, because aliases get to use the completions for the underlying commands. That means my <code>gco</code> alias for <code>git checkout</code> gets to use the completions for <code>git checkout</code>, so hitting Tab on a partial commit hash or branch name will show me useful options.</p>\\n<p>Much of my command line time is spent with git, so I have around 50 aliases for commonly used git functions. Some of my most frequently used ones include:</p>\\n<ul>\\n<li><strong>ga</strong>: <code>git add</code></li>\\n<li><strong>gco</strong>: <code>git checkout</code></li>\\n<li><strong>gcp</strong>: <code>git cherry-pick --ff</code></li>\\n<li><strong>gd</strong>: <code>git diff</code></li>\\n<li><strong>ggl</strong>: <code>git grep --files-with-matches</code></li>\\n<li><strong>gl</strong>: <code>git log --graph --abbrev-commit --date-order --format=format:'%Cblue%h%Creset%C(bold red)%d%Creset %s &lt;%an&gt; %Cgreen(%ar)%Creset' --all</code></li>\\n<li><strong>gs</strong>: <code>git status --short</code></li>\\n</ul>\\n<p>I&#8217;m particularly fond of <code>gl</code>. Just look at that ASCII graph!</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/git_graph.gif\\\" alt=\\\"\\\" width=\\\"2016\\\" height=\\\"898\\\" class=\\\"aligncenter size-full wp-image-17031\\\" /></p>\\n<h2>Terminal multipexing</h2>\\n<p>If you’re using a terminal but you’re not using <a href=\\\"https://github.com/tmux/tmux\\\">tmux</a>, you’re missing out. It’s basically a<br />\\ntext-mode window manager, running between the terminal application and the shell and enabling a number of useful features:</p>\\n<ul>\\n<li>A terminal can be split into multiple virtual terminals</li>\\n<li>Virtual terminals can be shared between multiple terminal sessions, even across a network</li>\\n<li>A terminal can disconnect and reconnect from a multiplexer session. Your terminal app crashed? No problem! Just restart your terminal and connect to the multiplexer session &#8212; your workspace will still be there. This is also great for keeping a session alive between logins in a remote environment.</li>\\n<li>The standard window-manager functions, such as creating, resizing, and moving windows, can all be performed with the keyboard.</li>\\n</ul>\\n<p>With a terminal multiplexer you’ll be able to create, arrange, and close virtual windows (similar to tabs in a terminal app) and panes (window splits) as needed, so you generally can get by with a single terminal application window. When you do need an additional tab or window, it can be easily added to the tmux fold by opening a new tmux session in the new window/tab. You can also open an existing tmux session in a new window. This allows you to interact with the same session in two different terminal windows, which can be really useful in certain situations. For example, you may be doing work on different virtual desktops (“Spaces” in macOS) and need to shift your work temporarily to a new desktop. With tmux, there’s no need to shift windows around and disrupt your workspace; just open a terminal window in the new desktop and attach it to your existing tmux session. When you’re done, detach the window from your session and close it.</p>\\n<aside style=\\\"padding:1em;background:#eef;border-radius:6px;margin-bottom:1em;\\\">\\nBy default, tmux on macOS doesn’t have access to the system clipboard. This is unfortunate, because tmux allows you to select text, copy, and paste using the keyboard. To allow a tmux session to access the clipboard, install <a href=\\\"https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard\\\">reattach-to-user-namespace</a>. I’ll show you what to do with it in the config below.<br />\\n</aside>\\n<p>Check out my <a href=\\\"https://github.com/jason0x43/dotfiles/blob/master/home/tmux.conf\\\">tmux config</a> to see everything I have setup. Not surprisingly, I like to use vi bindings when interacting with tmux, and there are some other mnemonically useful bindings in there (like ‘|’ to split windows horizontally and ‘-’ to split them vertically).</p>\\n<p>As with zsh, there&#8217;s a plugin manager for tmux called <a href=\\\"https://github.com/tmux-plugins/tpm\\\">tpm</a>. The plugins I find most useful are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/tmux-plugins/tmux-resurrect\\\">tmux-resurrect</a> allows a tmux<br />\\nserver’s state to be saved</li>\\n<li><a href=\\\"https://github.com/tmux-plugins/tmux-continuum\\\">tmux-continuum</a> automatically<br />\\nsaves the server state every 15 minutes</li>\\n<li><a href=\\\"https://github.com/christoomey/vim-tmux-navigator\\\">vim-tmux-navigator</a> (in<br />\\nconjunction with a Vim plugin) allows you to transparently move between Vim<br />\\nsplits and tmux panes</li>\\n</ul>\\n<p>Putting it all together, you can do things like edit a file, split the window to start a dev server, split the window again to grep for a string, copy and paste within a pane, and copy and paste between panes, all with the keyboard!</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/using_tmux.gif\\\" alt=\\\"\\\" width=\\\"1664\\\" height=\\\"1840\\\" class=\\\"aligncenter size-full wp-image-17033\\\" /></p>\\n<h2>The editor</h2>\\n<p>At last we come to the editor. This is where most of your actual software development will take place. You’ll want something comfortable and easy to use, but also something you can tune to fit your development style. A few conveniences that make life easier would also be nice.</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/chair.gif\\\" alt=\\\"\\\" width=\\\"636\\\" height=\\\"636\\\" class=\\\"aligncenter size-full wp-image-17032\\\" /></p>\\n<p>As you may have guessed, I’m partial to <a href=\\\"https://www.vim.org\\\">Vim</a>, specifically the <a href=\\\"https://neovim.io\\\">Neovim</a> variant. Both are great, and scripts and plugins are largely interchangeable between the two of them, but I like Neovim’s development process and its openness to new and interesting features, like integrated <a href=\\\"https://microsoft.github.io/language-server-protocol/\\\">Language Server Protocol</a> (LSP) support.</p>\\n<h3>Plugins</h3>\\n<p>As with zsh, plugins are the standard way to add features to Vim. There are a huge number of useful Vim plugins, and much like zsh there are plugin managers to manage them. I don’t use a plugin manager with zsh, but I do with Vim, probably because I use 3 or 4 zsh plugins but closer to 50 Vim plugins. My current plugin manager of choice is <a href=\\\"https://github.com/junegunn/vim-plug\\\">vim-plug</a>. It’s easy to configure and makes the task of keeping plugins up-to-date very simple. The full list of plugins I use is in my <a href=\\\"https://github.com/jason0x43/dotfiles/blob/master/vim/vimrc\\\">vimrc</a> file.</p>\\n<h3>IDE features</h3>\\n<p>So, now that you have a plugin manager, what are some useful plugins? The big ones are completions and suggestions (often referred to as “IntelliType”), syntax highlighting, indenting / formatting, and linting. Some day, many of these features will be provided by universal LSP plugins talking to language servers like tsserver. However, we haven&#8217;t <em>quite</em> gotten there yet, so you’ll have to mix-and-match a bit.</p>\\n<p>The easiest way to get completions, suggestions, and live error indications for TypeScript and JavaScript is probably with <a href=\\\"https://valloric.github.io/YouCompleteMe/\\\">YouCompleteMe</a>. YCM is the plugin I love to hate. It&#8217;s slow to build and difficult to extend, but it&#8217;s also very solid and generally snappier than anything else I&#8217;ve tried. Eventually I’ll switch to an LSP plugin for language services (error indicators, symbol renaming, jump-to-definition, etc.) and a generic completion framework for as-you-type suggestions, but I haven’t yet found a combination of those that works quite as well as YCM.</p>\\n<p>Linting is where the situation starts to become a bit tricky. For TypeScript, you can use the <a href=\\\"https://github.com/Microsoft/typescript-tslint-plugin\\\">typescript-tslint-plugin</a> for tsserver. This integrates linting into the rest of the language services provided by tsserver, and it will therefore work with anything that uses tsserver (like YCM). For other languages you’ll need to use something else, such as <a href=\\\"https://github.com/w0rp/ale\\\">ALE</a>. The tricky thing is that ALE can also use language servers (such as tsserver), and it implements many of the things that YCM does, so you’ll be tempted to just use ALE. Then you’ll find out that ALE doesn’t support a feature you want, like symbol renaming, and you’ll want to tweak it <em>just enough</em> to support what you need. That way lies madness. And sometimes pull requests.</p>\\n<p>You’ll also need to upgrade at least some of your language support files. Vim comes with JavaScript syntax and indent files, but they’re not all that great, and it doesn’t include any TypeScript support by default. I use <a href=\\\"https://github.com/pangloss/vim-javascript\\\">vim-javascript</a> and <a href=\\\"https://github.com/mxw/vim-jsx\\\">vim-jsx</a> for JavaScript and JSX, and <a href=\\\"https://github.com/leafgarland/typescript-vim\\\">typescript-vim</a> and <a href=\\\"https://github.com/ianks/vim-tsx\\\">vim-tsx</a> for TypeScript and TSX.</p>\\n<p>The indent support isn’t really that important, because you’ll be using a formatter to clean up your code every time you save. You will be doing that, right? You should definitely do that. <a href=\\\"https://prettier.io\\\">Prettier</a>, and the <a href=\\\"https://github.com/prettier/vim-prettier\\\">vim-prettier</a> plugin, are the gold-standard for autoformatting front-end code (JS(X), TS(X), and HTML). It’s wonderful.</li>\\n</ul>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/vim.gif\\\" alt=\\\"\\\" width=\\\"1408\\\" height=\\\"962\\\" class=\\\"aligncenter size-full wp-image-17035\\\" /></p>\\n<h3>Other useful plugins</h3>\\n<p>There are hundreds of general-purpose plugins available for Vim, covering everything from fuzzy-finding files to aligning columns of text to making it easier to add parenthesis around text selections. A few that I find particularly useful are:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/junegunn/fzf.vim\\\">fzf.vim</a> is a plugin that integrates the amazing <a href=\\\"https://github.com/junegunn/fzf\\\">fzf</a> fuzzy finder into Vim. You can use it to quickly find and open files, buffers, or even lines within the current buffer. It’s async and extremely fast, so it doesn&#8217;t suffer from the caching-related issues or incomplete results that plagued earlier Vim fuzzy finders.</li>\\n<li><a href=\\\"https://github.com/tpope/vim-fugitive\\\">vim-fugitive</a> adds some Git commands to Vim, allowing you to walk through past verisons of files and show blame information</li>\\n<li><a href=\\\"https://github.com/airblade/vim-gitgutter\\\">vim-gitgutter</a> adds markers to the left side of the viewport indicating lines that have been added or modified</li>\\n<li><a href=\\\"https://github.com/tpope/vim-surround\\\">vim-surround</a> adds commands and mappings making it easy to add and remove surrounds (parens, brackets, quotes) from text selections</li>\\n<li><a href=\\\"https://github.com/tpope/vim-flagship\\\">vim-flagship</a> is one of many plugins that can be used to configure the Vim status line. (Some status line plugins have even spawned their own suites of sub-plugins.)</li>\\n<li><a href=\\\"https://github.com/scrooloose/nerdtree\\\">nerdtree</a> is a file explorer sidebar for Vim</li>\\n<li><a href=\\\"https://github.com/mbbill/undotree\\\">undotree</a> depends on the somewhat unique feature of Vim whereby it stores a file’s change history in a tree-like structure in memory (much like a git commit graph). undotree allows you to view and jump around in the undo history for the current file. You can use this to, for instance, grab that snippet of code you added and then removed 5 minutes ago and paste it into the current version of the file.</li>\\n</ul>\\n<h2>One more thing…</h2>\\n<p>I listed some of my git aliases earlier, and also mentioned some git plugins I use with Vim. (Maybe this article should have been titled “Integrating git with everything”….) Another git-related tool that I use on a daily basis is <a href=\\\"https://github.com/jonas/tig\\\">tig</a>. (<a href=\\\"https://github.com/jesseduffield/lazygit\\\">LazyGit</a> also looks promising, but I haven’t really gotten used to it yet.) Tig is a full-screen git terminal UI! Pfft, who needs SourceTree?</p>\\n<p>Tig is a fully featured client that that allows you to view git history, stage commits, and generally exercise most of git’s functionality. What I find it particularly useful for is working with the git index.</p>\\n<p>Start <code>tig</code> and hit <code>shift-s</code> and you’ll be taken to the Status view. From there you can easily stage and unstage files, chunks, or even <em>individual lines</em>. It’s incredibly useful when you’re trying to generate some clean commits after an<br />\\nintensive coding session.</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/tig.gif\\\" alt=\\\"\\\" width=\\\"2016\\\" height=\\\"898\\\" class=\\\"aligncenter size-full wp-image-17034\\\" /></p>\\n<h2>Conclusion</h2>\\n<p>In this article I’ve presented a very brief overview of some of the tools I use to create a fully featured terminal-based development environment, and there are so <a href=\\\"https://terminalsare.sexy\\\">many, many more</a>. Do you have your own bag of carefully cultivated terminal mode tricks? Consider <a href=\\\"https://github.com/jason0x43/dotfiles\\\">sharing them</a>! GitHub contains thousands of <a href=\\\"https://github.com/search?q=dotfiles\\\">dotfiles repos</a> (the standard term for user config files) showing what <a href=\\\"https://github.com/nicknisi/dotfiles\\\">other</a> <a href=\\\"https://github.com/bryanforbes/dotfiles\\\">people</a> have come up with to make their own lives easier.</p>\\n<p>SitePen is always looking for a few more great JS (and/or TS engineers). We work remotely, we focus on creating high quality apps and open source software, and we have solid work-life balance.  <a href=\\\"https://www.sitepen.com/careers/\\\">Check out opportunities to join our team!</a></p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>VS Code gets a lot of love today, and rightly so, but there’s still something to be said for a text-mode, fully keyboard-controlled development environment. With tools like zsh, tmux, tsserver, and Vim, you’ll find you rarely need to reach over to the rodent on your desk. In this article I’ll go over some tools [&hellip;]</p>\\n\",\"protected\":false},\"author\":51,\"featured_media\":22049,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[488],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>A Modern Terminal-Based Development Environment | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"VS Code gets a lot of love today, and rightly so, but there’s still something to be said for a text-mode, fully keyboard-controlled development environment. With tools like zsh, tmux, tsserver, and Vim, you’ll find you rarely need to reach over to the rodent on your desk.    In this article I’ll go over some tools\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"A Modern Terminal-Based Development Environment | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"VS Code gets a lot of love today, and rightly so, but there’s still something to be said for a text-mode, fully keyboard-controlled development environment. With tools like zsh, tmux, tsserver, and Vim, you’ll find you rarely need to reach over to the rodent on your desk.    In this article I’ll go over some tools\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2018-12-12T13:40:36+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T17:20:40+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"A Modern Terminal-Based Development Environment\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/\\\",\\\"name\\\":\\\"A Modern Terminal-Based Development Environment | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/#primaryimage\\\"},\\\"datePublished\\\":\\\"2018-12-12T13:40:36+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T17:20:40+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\"},\\\"description\\\":\\\"VS Code gets a lot of love today, and rightly so, but there\\\\u2019s still something to be said for a text-mode, fully keyboard-controlled development environment. With tools like zsh, tmux, tsserver, and Vim, you\\\\u2019ll find you rarely need to reach over to the rodent on your desk. In this article I\\\\u2019ll go over some tools\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/a-modern-terminal-based-development-environment/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\",\\\"name\\\":\\\"Jason Cheatham\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Jason Cheatham\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17018\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/51\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=17018\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17018/revisions\"}],\"predecessor-version\":[{\"id\":22050,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/17018/revisions/22050\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22049\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=17018\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=17018\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=17018\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=17018\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":51,\"name\":\"Jason Cheatham\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jcheatham/\",\"slug\":\"jcheatham\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Jason Cheatham, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Jason Cheatham, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jcheatham/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/\\\",\\\"name\\\":\\\"Jason Cheatham, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\",\\\"name\\\":\\\"Jason Cheatham\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Jason Cheatham\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/51\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22049,\"date\":\"2020-01-22T09:19:38\",\"slug\":\"terminal\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/a-modern-terminal-based-development-environment/terminal/\",\"title\":{\"rendered\":\"Terminal\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Terminal | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Terminal | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T17:19:43+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\\\",\\\"name\\\":\\\"Terminal | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T17:19:38+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T17:19:43+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"A Modern Terminal-Based Development Environment\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2018/12/Terminal.png\",\"sizes\":{\"medium\":{\"file\":\"Terminal-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal-300x158.png\"},\"large\":{\"file\":\"Terminal-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal-1024x538.png\"},\"thumbnail\":{\"file\":\"Terminal-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal-150x150.png\"},\"medium_large\":{\"file\":\"Terminal-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal-768x403.png\"},\"full\":{\"file\":\"Terminal.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/12/Terminal.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22049\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:23:56 GMT"],["expires","Thu, 24 Sep 2020 13:23:56 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}