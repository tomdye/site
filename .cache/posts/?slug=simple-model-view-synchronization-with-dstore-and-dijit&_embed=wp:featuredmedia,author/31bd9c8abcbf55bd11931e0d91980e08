{"value":{"body":"[{\"id\":10930,\"date\":\"2015-07-28T07:14:49\",\"date_gmt\":\"2015-07-28T14:14:49\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=10930\"},\"modified\":\"2015-07-28T07:14:49\",\"modified_gmt\":\"2015-07-28T14:14:49\",\"slug\":\"simple-model-view-synchronization-with-dstore-and-dijit\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/\",\"title\":{\"rendered\":\"Simple Model-View synchronization with dstore and Dijit\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2014/10/dstoreLogo.png\\\" alt=\\\"dstore\\\" width=\\\"149\\\" height=\\\"150\\\" class=\\\"alignright size-full wp-image-9938\\\" /></p>\\n<p>Nearly every sufficiently large web application looks for a mechanism to efficiently synchronize or bind data between the Model and the View. There are many large scale application frameworks and approaches focused on this, whether the binding is one-directional like <a href=\\\"https://facebook.github.io/react/\\\">React</A>, or follows other approaches such as those seen with <a href=\\\"https://ampersandjs.com/\\\">AmpersandJS</a>, <a href=\\\"http://angularjs.org/\\\">Angular</a>, <a href=\\\"http://aurelia.io/\\\">Aurelia</a>, <a href=\\\"http://backbonejs.org/\\\">Backbone</a>, <a href=\\\"http://emberjs.com/\\\">Ember</a>, <a href=\\\"http://knockoutjs.com/\\\">Knockout</a>, <a href=\\\"https://sitepen.github.io/mayhem/guide/\\\">Mayhem</a>, or <a href=\\\"http://todomvc.com/\\\">many others listed on ToDoMVC</a>.</p>\\n<h2>Simple Model-View synchronization</h2>\\n<p>Many of our customers use Dojo and Dijit, because it&#8217;s a comprehensive toolkit for building web applications that work today, and while it does not intend to be an MV* framework, it already includes a lightweight approach to getters and setters.</p>\\n<p><!--more--></p>\\n<p>We are sometimes asked to provide a general-purpose mechanism for creating view components that are only driven by the model, with data binding semantics build on top.</p>\\n<p>Some users will include Knockout or Angular or React with Dojo, while others might even just look to <a href=\\\"http://dgrid.io/\\\">dgrid</a> if they wanted to <a href=\\\"http://dgrid.io/demos/todo/\\\">build something simple like ToDoMVC</a>.</p>\\n<p>But what is a good general approach that would work with the things included in Dojo today? The basic approach would be to create a base mixin that includes templating, attribute setting, and a method to specify how items are rendered.</p>\\n<p>The benefits of this approach are that you can avoid the perils of trying to manually synchronize DOM state, widget properties, and model state. It also makes it so the user does not need to worry about removing or updating items in the DOM.</p>\\n<h2>Simple usage</h2>\\n<p>Ideally, we&#8217;ll end up with a pattern that can be used like this in simple cases:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndefine([\\n\\t'dojo/_base/declare',\\n\\t'dojo/dom-construct',\\n\\t'dojo/on',\\n\\t'dojo/_base/lang',\\n\\t'dijit/_WidgetBase',\\n\\t'custom/store/_DstoreDijitMixin',\\n\\t'dojo/query'\\n], function (declare, domConstruct, on, lang, _WidgetBase, _DstoreDijitMixin) {\\n\\treturn declare([_WidgetBase, _DstoreDijitMixin], {\\n\\t\\tpostCreate: function () {\\n\\t\\t\\tthis.inherited(arguments);\\n\\t\\t\\ton(this, 'div:click', lang.hitch(this,\\n\\t\\t\\t\\t\\t\\t'removeItemFromStore'));\\n\\t\\t},\\n\\t\\tremoveItemFromStore: function (event) {\\n\\t\\t\\tvar id = parseFloat(event.target.id, 10);\\n\\t\\t\\tthis.store.remove(id);\\n\\t\\t},\\n\\t\\t_renderItem: function (item, index) {\\n\\t\\t\\treturn domConstruct.create('div', {\\n\\t\\t\\t\\ttextContent: item.text,\\n\\t\\t\\t\\tid: item.id\\n\\t\\t\\t});\\n\\t\\t}\\n\\t});\\n});\\n</pre>\\n<p>A full <a href=\\\"https://sitepen.github.io/dstore-and-dijit/\\\">example in action</a> is available, as well as a <a href=\\\"https://github.com/SitePen/dstore-and-dijit\\\">GitHub example repo</a> that you can clone for your own use. Or continue reading if you would like to learn how this works.</p>\\n<h2>_DstoreDijitMixin</h2>\\n<p>Here we&#8217;ll cover a more in-depth approach for applying this pattern with the more recent <a href=\\\"http://dstorejs.io/\\\">dstore</a> package for solving this challenge of efficient synchronization and data binding. If you are not familiar with dstore, you may want to start with our <a href=\\\"http://dstorejs.io/tutorials/\\\">dstore tutorial series</a>.</p>\\n<p>We will create a custom module, <code>custom/store/_DstoreDijitMixin</code>, to allow Dijit widgets (View) to be driven by a dstore (Model).</p>\\n<p>First we begin with an AMD block, including Dojo&#8217;s mechanisms for creating mixins and simple DOM manipulation:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ndefine([\\n    'dojo/_base/declare',\\n    'dojo/dom-construct'\\n], function (declare, domConstruct) {\\n</pre>\\n<p>Then, we will add a couple of helper utilities. First, we will make sure that a dstore event is valid by checking to see if the store contains a <code>track</code> method, and making sure that both the <code>previousIndex</code> and <code>index</code> properties are defined. Otherwise the event will be ignored as it is presumably from a portion of the underlying data set that has been filtered out of the current collection of data.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n    function isValidEvent(store, event) {\\n        return !('track' in store) ||\\n            typeof event.previousIndex !== 'undefined' ||\\n            typeof event.index !== 'undefined';\\n    }\\n</pre>\\n<p>Then we will add a utility to make sure that the item is a widget:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n    function isWidget(item) {\\n        // The existence of a `postCreate` method on the item\\n        // will indicate that it's a widget\\n        return typeof item.postCreate === 'function';\\n    }\\n</pre>\\n<p>Then we will start the definition of the mixin itself, first by setting some default values to make it easier to inject dependencies such as a reference to the dstore instance in the constructor of the widgets including this mixin:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n    return declare(null, {\\n        store: null,\\n        _storeEvents: null,\\n        _viewsByItem: null,\\n</pre>\\n<p>We will then create a custom setter method for the widget instance, to override the setting of the store. In this method, we will check to see if the store has a <code>track</code> method, and then call <code>store.track()</code> and use its return value as `this.store`. Calling <code>track</code> here allows outside code to pass filtered collections of the original <code>store</code> other other store-backed widgets.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        _setStoreAttr: function (store) {\\n            this._set('store', (store &amp;&amp; store.track ? store.track() : store));\\n\\n            if (this._storeEvents) {\\n                // Remove all event listeners from the old store so that\\n                // changes to it do not continue to update this widget.\\n                this._storeEvents.forEach(function (handle) {\\n                    handle.remove();\\n                });\\n                this._storeEvents = null;\\n            }\\n\\n            if (store) {\\n                this._registerStoreEvents();\\n                this._render();\\n            }\\n        },\\n</pre>\\n<p>Note that <code>_registerStoreEvents</code> is a method we will create later for managing dstore&#8217;s add, update, and delete events.</p>\\n<p>In our constructor, we&#8217;ll create a new array that simply lists the views by item:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        constructor: function () {\\n            this._viewsByItem = [];\\n        },\\n</pre>\\n<p>We then can add a simple method for rendering a store item and injecting the resulting node/widget into this widget:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        insertPosition: 'last',\\n\\n        _insertItem: function (item, index) {\\n            var renderedItem = this._renderItem(item, index);\\n            var nextItem = this._viewsByItem[index];\\n            var position = nextItem ? 'before' : this.insertPosition;\\n\\n            if (isWidget(renderedItem)) {\\n                renderedItem.placeAt(nextItem || this, position);\\n            }\\n            else {\\n                domConstruct.place(\\n                    renderedItem,\\n                    nextItem || this.containerNode || this.domNode,\\n                    position\\n                );\\n            }\\n\\n            this._viewsByItem.splice(index, 0, renderedItem);\\n        },\\n</pre>\\n<p>We&#8217;ll then create a mechanism to listen for dstore&#8217;s add, update and delete events and handle them to either create a new item, update an existing item, or remove an item, respectively:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        _registerStoreEvents: function () {\\n            // summary:\\n            //        Add events listeners to the store to handle view changes.\\n\\n            var store = this.store;\\n\\n            if (store) {\\n                var self = this;\\n                this._storeEvents = [];\\n                this._storeEvents.push(store.on('add', function (event) {\\n                    if (isValidEvent(store, event)) {\\n                        self._insertItem(event.target, event.index);\\n                    }\\n                }));\\n                this._storeEvents.push(store.on('update', function (event) {\\n                    if (isValidEvent(store, event)) {\\n                        self._destroyItem(event.previousIndex);\\n                        self._insertItem(event.target, event.index);\\n                    }\\n                }));\\n                this._storeEvents.push(store.on('delete', function (event) {\\n                    if (isValidEvent(store, event)) {\\n                        self._destroyItem(event.previousIndex);\\n                    }\\n                }));\\n            }\\n        },\\n</pre>\\n<p>We then define a method to kick off the render process, and a function to kick off the rendering of each item in the store:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        _render: function () {\\n            // summary:\\n            //        Render the widget contents\\n\\n            // destroy any existing items\\n            this._destroyItems();\\n            this._renderItems();\\n        },\\n\\n        _renderItems: function () {\\n            // summary:\\n            //        Render store results\\n\\n            this.store &amp;&amp; this.store.forEach(this._insertItem, this);\\n        },\\n\\n</pre>\\n<p>And then we define a general method for rendering. The beauty of this approach is that each widget can then simply subclass this mixin with its own mechanism for items should be rendered! It receives two arguments, the item to rendering, and optionally an index of the item in the collection:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        _renderItem: function (item, index) {\\n            // returns: DomNode|dijit/_WidgetBase\\n        },\\n</pre>\\n<p>We then implement a mechanism to cleanly destroy an item, with a reference to its index before it is destroyed. This method will be called when the dstore is updated to remove an item from the store, and then tracked into the view:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        _destroyItem: function (/*number*/previousIndex) {\\n\\n            var renderedItem = this._viewsByItem.splice(previousIndex, 1)[0];\\n\\n            if (renderedItem) {\\n                // Since Dijit does not provide an `isWidget` method,\\n                // we rely on duck typing...\\n                if (isWidget(renderedItem)) {\\n                    renderedItem.destroyRecursive();\\n                } else {\\n                    domConstruct.destroy(renderedItem);\\n                }\\n            }\\n        },\\n</pre>\\n<p>And finally we have a mechanism to destroy all items within a widget instance. Note that <code>destroyDescendants</code> is a method provided by Dijit that, as you can guess from its name, will remove all descendants of a widget:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n        _destroyItems: function () {\\n            // summary:\\n            //        Destroy currently rendered items\\n\\n            this._viewsByItem = [];\\n\\n            // preserve the item DOM while destroying widgets\\n            // so we can remove all item DOM nodes in one shot\\n            var preserveDom = true;\\n            this.destroyDescendants(preserveDom);\\n\\n            domConstruct.empty(this.containerNode || this.domNode);\\n        }\\n    });\\n});\\n</pre>\\n<p>Then, to put this to use, we&#8217;ll simply include the mixin in our various widget definitions, and then override with specific <code>renderItem</code> methods, and instantiate a Trackable dstore instance. A full <a href=\\\"https://sitepen.github.io/dstore-and-dijit/\\\">example in action</a> is available, as well as a <a href=\\\"https://github.com/SitePen/dstore-and-dijit\\\">GitHub example repo</a> that you can clone for your own use.</p>\\n<h2>Learning more</h2>\\n<p>SitePen covers architecture and advanced Dijit and store usage, and much more in our <a href=\\\"https://www.sitepen.com/services/\\\">Dojo workshops</a> offered throughout the US, Canada, and Europe, or at your location. We also provide expert <a href=\\\"https://www.sitepen.com/services/\\\">Enterprise JavaScript and Dojo support</a> and <a href=\\\"https://www.sitepen.com/services/\\\">development</a> services. <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> for a free 30 minute consultation to discuss how we can help you and your organization achieve more with JavaScript!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Nearly every sufficiently large web application looks for a mechanism to efficiently synchronize or bind data between the Model and the View. There are many large scale application frameworks and approaches focused on this, whether the binding is one-directional like React, or follows other approaches such as those seen with AmpersandJS, Angular, Aurelia, Backbone, Ember, [&hellip;]</p>\\n\",\"protected\":false},\"author\":3,\"featured_media\":9970,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,396,356,3],\"tags\":[403],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Simple Model-View synchronization with dstore and Dijit | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Simple Model-View synchronization with dstore and Dijit | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Nearly every sufficiently large web application looks for a mechanism to efficiently synchronize or bind data between the Model and the View. There are many large scale application frameworks and approaches focused on this, whether the binding is one-directional like React, or follows other approaches such as those seen with AmpersandJS, Angular, Aurelia, Backbone, Ember, [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-07-28T14:14:49+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/\\\",\\\"name\\\":\\\"Simple Model-View synchronization with dstore and Dijit | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-07-28T14:14:49+00:00\\\",\\\"dateModified\\\":\\\"2015-07-28T14:14:49+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/simple-model-view-synchronization-with-dstore-and-dijit/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10930\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=10930\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10930/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/9970\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=10930\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=10930\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=10930\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=10930\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":3,\"name\":\"Dylan Schiemann\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dylan/\",\"slug\":\"dylan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dylan Schiemann, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dylan Schiemann, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dylan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dylan/\\\",\\\"name\\\":\\\"Dylan Schiemann, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a8080bb0a11072a-LHR"],["cf-request-id","03842ec8e50000072a8789a200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Tue, 23 Jun 2020 19:09:20 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d2278af102cd5f2b8f2e278c854fa4f141592939360; expires=Thu, 23-Jul-20 19:09:20 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}