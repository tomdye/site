{"value":{"body":"[{\"id\":18225,\"date\":\"2019-04-23T06:49:02\",\"date_gmt\":\"2019-04-23T13:49:02\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=18225\"},\"modified\":\"2020-01-21T07:12:06\",\"modified_gmt\":\"2020-01-21T15:12:06\",\"slug\":\"getting-started-with-assemblyscript\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/getting-started-with-assemblyscript/\",\"title\":{\"rendered\":\"Getting Started with AssemblyScript\"},\"content\":{\"rendered\":\"<p>In a previous post we looked at how to <a href=\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/\\\">compile the popular programming language Go to WebAssembly</a>. WebAssembly is a new programming language which provides a compact binary format for the web. In this post we&#8217;ll explore another WebAssembly target language called AssemblyScript. AssemblyScript allows developers to write strictly typed <a href=\\\"https://www.typescriptlang.org/\\\">TypeScript</a> (a typed superset of JavaScript) code and compile it to WebAssembly. </p>\\n<p><!--more--></p>\\n<p>Here we introduce how to get up and running with AssemblyScript. If you are not familiar with TypeScript and its syntax, please review the <a href=\\\"https://www.sitepen.com/blog/update-the-definitive-typescript-guide/\\\">TypeScript Definitive Guide</a>.</p>\\n<h3>Starting an AssemblyScript Project</h3>\\n<p>To get started with AssemblyScript we need to install AssemblyScript with our project. On the assumption that we have initialised with npm (<code>npm init</code>) we can continue to install AssemblyScript in the following manner:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    npm install --save-dev AssemblyScript/assemblyscript\\r\\n</pre>\\n<p>Next we will want to scaffold our AssemblyScript project. AssemblyScript provides a simple command line tool, <code>asinit</code>, which we can call within our target project folder using <code>npx</code>:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    npx asinit .\\r\\n</pre>\\n<p>You will see an interactive prompt in the following manner:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n  ./assembly\\r\\n  Directory holding the AssemblyScript sources being compiled to WebAssembly.\\r\\n\\r\\n  ./assembly/tsconfig.json\\r\\n  TypeScript configuration inheriting recommended AssemblyScript settings.\\r\\n\\r\\n  ./assembly/index.ts\\r\\n  Exemplary entry file being compiled to WebAssembly to get you started.\\r\\n\\r\\n  ./build\\r\\n  Build artifact directory where compiled WebAssembly files are stored.\\r\\n\\r\\n  ./build/.gitignore\\r\\n  Git configuration that excludes compiled binaries from source control.\\r\\n\\r\\n  ./index.js\\r\\n  Main file loading the WebAssembly module and exporting its exports.\\r\\n\\r\\n  ./package.json\\r\\n  Package info containing the necessary commands to compile to WebAssembly.\\r\\n</pre>\\n<p>This gives the overview of what command line tool provides and which files get created or updated. By pressing <code>y</code> we can continue to scaffold our project. As implied, this will update our project to have an <code>assembly</code> folder where our entry point lives for building our AssemblyScript program. By default it will contain the following code:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport function add(a: i32, b: i32): i32 {\\r\\n  return a + b;\\r\\n}\\r\\n</pre>\\n<p>Since this gives us a basic program (adding two 32 bit integers) out the box, we can actually compile the program using the provided <code>asc</code> tool. This tool has been added with appropriately targeted paths, to our <code>package.json</code>. We can then run the aliased command:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\nnpm run asbuild\\r\\n</pre>\\n<p>This command will produce files in 6 files in your build folder, an optimised and untouched wasm file, along with a source <code>map</code> and text format <code>wat</code> file for both. </p>\\n<h3>Running a WebAssembly Program</h3>\\n<p>WebAssembly can run in Node.js or in the browser. The approach for using a compiled WebAssembly (wasm file) in both environments is similar. The main difference is that with Node.js we can read files, where as in the browser we have to <code>fetch</code> a remote file instead. </p>\\n<p>There are a few ways to instantiate a <a href=\\\"https://webassembly.org/docs/modules/\\\">module</a> in WebAssembly:</p>\\n<ul>\\n<li><b>WebAssembly.Instance</b> &#8211; Synchronous instantiation</li>\\n<li><b>WebAssembly.instantiate</b> &#8211; Asynchronous instantiation</li>\\n<li><b>WebAssembly.instantiateStreaming</b> &#8211; Asynchronous streaming instantiation</li>\\n</ul>\\n<p><code>instantiateStreaming</code> is currently supported in modern environments except Node.js and Safari. Here is a simple polyfill that falls back to <code>instantiate</code> for Safari and Node.js:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nif (!WebAssembly.instantiateStreaming) {\\r\\n    WebAssembly.instantiateStreaming = async (resp, importObject) =&gt; {\\r\\n        const source = await (await resp).arrayBuffer();\\r\\n        return await WebAssembly.instantiate(source, importObject);\\r\\n    };\\r\\n}\\r\\n</pre>\\n<p>Now, how do we do we pick and leverage these functions? For Node.js, it might make sense to run the wasm code synchronously:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst wasmModule = new WebAssembly.Module(fs.readFileSync(__dirname + &quot;/build/optimized.wasm&quot;));\\r\\nconst instance = new WebAssembly.Instance(wasmModule, {});\\r\\nconst memory = new Uint8Array(instance.exports.memory.buffer);\\r\\n</pre>\\n<p>In the browser things are a bit different, and we can make use of the more efficient <code>instantiateStreaming</code>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nWebAssembly.instantiateStreaming(fetch('/build/optimized.wasm'), {})\\r\\n  .then(wasmModule =&gt; {\\r\\n    const exports = wasmModule.instance.exports;\\r\\n    const mem = new Uint32Array(exports.memory.buffer);\\r\\n  });\\r\\n</pre>\\n<p>Now that we have seen how to load our wasm files, let&#8217;s see how we can write more in depth AssemblyScript code.</p>\\n<h3>Overview of Writing AssemblyScript</h3>\\n<p>AssemblyScript allows you to write TypeScript code and compile it to WebAssembly. There are some <a href=\\\"https://github.com/AssemblyScript/assemblyscript/wiki/Limitations\\\">limitations</a> to this process. For example, because of the necessity of variables and arguments to be statically typed, it is not possible to write union types, use <code>any</code> or <code>undefined</code> as everything must be typed. We also must explicitly include return types.</p>\\n<p>Another thing weâ€™ll need to note is the types in AssemblyScript. For example, as we&#8217;ve noted in the brief auto-generated example, we cannot just use <code>number</code> like we would in TypeScript. Instead we have to specify types that WebAssembly can understand, like <code>i32</code> or <code>f32</code>. We can use <code>bool</code> and <code>string</code>.</p>\\n<p>One key thing to understand about AssemblyScript is that it uses linear memory. This means data in an AssemblyScript program is located at a specific offset. This memory comes in two parts; static memory and heap memory. Here the heap memory requires a memory allocator. Thankfully there are three allocators available, namely <code>arena</code>, <code>tlsf</code> and <code>buddy</code>. You can read more about the <a href=\\\"https://github.com/AssemblyScript/assemblyscript/wiki/Memory-Layout-&#038;-Management#heap\\\">AssemblyScript memory layout and management options</a>, but for the sake of simplicity we will use <code>tlsf</code>.</p>\\n<p>Managing the memory can be tricky, especially if you&#8217;re from a TypeScript or JavaScript background. As such, here we will use the <code>loader</code> provided by AssemblyScript, which provides utility functions for setting and getting data.</p>\\n<h3>Simple Programs with AssemblyScript</h3>\\n<p>We&#8217;re also going to need some setup. First we&#8217;re going to add a memory allocator and also export the <code>memory</code> object so we can work with <a href=\\\"https://github.com/AssemblyScript/assemblyscript/blob/master/lib/loader/README.md\\\">strings and arrays</a>. This looks a little something like this at the top of our AssemblyScript file:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// AssemblyScript\\r\\n\\r\\nimport &quot;allocator/tlsf&quot;;\\r\\nexport { memory };\\r\\n</pre>\\n<p>If you&#8217;re using a linter, it might complain about the exporting <code>memory</code> statement but this can be ignored. For the purpose of this post (and to reduce cognitive load) we will assume that we are working in a browser environment, and that we are writing source code in TypeScript. For the sake of brevity the following examples do not feature loading of the WebAssembly file (which is covered above).</p>\\n<p>Now that we&#8217;ve setup the initial AssemblyScript file, let&#8217;s look at writing some basic functions. Here we take some basic data types and pass them back to JavaScript from AssemblyScript with the help of the <code>loader</code>. </p>\\n<p>Let&#8217;s start with a basic greeting function. This will take a string from our JavaScript (TypeScript) code, run it in WebAssembly, and return it back.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// AssemblyScript\\r\\n\\r\\nexport function getGreeting(name: string): string {\\r\\n\\tconst hello = &quot;hello &quot;\\r\\n\\treturn hello + name;\\r\\n}\\r\\n\\r\\n// TypeScript - Browser\\r\\n\\r\\nconst name = wasmModule.newString(&quot;James&quot;);\\r\\nconst greeting = wasmModule.getGreeting(name);\\r\\nconst greetingStr = wasmModule.getString(greeting);\\r\\n</pre>\\n<p>Here <code>newString</code> and <code>getString</code> are functions that come from the <code>loader</code> (there has been work towards potentially <a href=\\\"https://github.com/AssemblyScript/assemblyscript/pull/411\\\">improving namespace support</a>). This works fine but does not showcase the benefit of WebAssembly. What about something more resource intensive? Let&#8217;s generate some <a href=\\\"https://en.wikipedia.org/wiki/Fibonacci_number\\\">Fibonacci numbers</a> with AssemblyScript:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// AssemblyScript\\r\\n\\r\\nexport function fibonacci(n: i32): i32 {\\r\\n\\tlet i: i32 = 1;\\r\\n\\tlet j: i32 = 0\\r\\n\\tlet k: i32;\\r\\n\\tlet t: i32;\\r\\n\\r\\n\\tfor (k = 1; k &lt;= Math.abs(n); k++) {\\r\\n\\t   t = i + j;\\r\\n\\t   i = j;\\r\\n\\t   j = t;\\r\\n\\t}\\r\\n\\tif (n &lt; 0 &amp;&amp; n % 2 === 0) {\\r\\n\\t\\tj = -j;\\r\\n\\t}\\r\\n\\treturn j;\\r\\n}\\r\\n\\r\\n\\r\\n// TypeScript - Browser\\r\\n\\r\\nconst n = 10000;\\r\\nconst wasmFibResult = wasmModule.fibonacci(n);\\r\\n</pre>\\n<p>Here we have generated the fibonnaci number <code>n</code> using an iterative approach. This works but the return data type is a simple 32 bit integer. What if we want to return an Array? Let&#8217;s write a <a href=\\\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\\\">Prime Sieve</a> in AssemblyScript. Prime Sieves return an array where one denotes a <a href=\\\"https://en.wikipedia.org/wiki/Prime_number\\\">prime</a> and zero denotes non-primes. In this case we will write the popular Sieve of Eratosthenes:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// AssemblyScript\\r\\n\\r\\nexport function sieveOfEratosthenes(n: i32): Int8Array {\\r\\n\\r\\n\\t//  Input: an integer n &gt; 1.\\r\\n\\t\\t\\r\\n\\t//  Let A be an array of Boolean values, indexed by integers 0 to n,\\r\\n\\t//  initially all set to true.\\r\\n\\tlet sieve = new Int8Array(n);\\r\\n\\tfor (let i = 0; i &lt; n; i++) {\\r\\n\\t\\tsieve[i] = 1;\\r\\n\\t}\\r\\n\\r\\n\\t// // 0 and 1 are not considered primes\\r\\n\\tsieve[0] = 0;\\r\\n\\tsieve[1] = 0;\\r\\n\\r\\n\\t//  for i = 2, 3, 4, ..., not exceeding ?n:\\r\\n\\t//    if A[i] is true:\\r\\n\\t//      for j = i2, i2+i, i2+2i, i2+3i, ..., not exceeding n:\\r\\n\\t//        A[j] := false.\\r\\n\\tfor (let i = 2; i &lt; Math.sqrt(n); i++) {\\r\\n\\t\\tif (sieve[i]) {\\r\\n\\t\\t\\tfor (let j = i*i, k = 1; j &lt; n; j = i*i+k*i, k = k+1) {\\r\\n\\t\\t\\t\\tsieve[j] = 0;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t//  Output: all i such that A[i] is true.\\r\\n\\treturn sieve;\\r\\n\\r\\n}\\r\\n\\r\\n// TypeScript - Browser\\r\\n\\r\\nconst n = 10000;\\r\\nwasmModule.sieveOfEratosthenes(size)\\r\\n\\r\\n</pre>\\n<p>The loader does not currently support support ordinal <code>Array</code>s so we need to specify the output as <code>Int8Array</code>. Hopefully here you can see some examples of increasing complexity and see how AssemblyScript might help, especially in writing CPU intensive code.</p>\\n<h3>Conclusion</h3>\\n<p>AssemblyScript is very powerful, allowing developers who already know TypeScript to write code that is consistently performant for the web. However, it is still relatively early in its development. Many features are still <a href=\\\"https://github.com/AssemblyScript/assemblyscript/wiki/Status-and-Roadmap\\\">on the roadmap</a>, including better support for Classes and standard library improvements, among a host of other things.</p>\\n<p>A final point of note is that in theory as long as you follow <a href=\\\"https://github.com/AssemblyScript/assemblyscript/wiki/Writing-portable-code\\\">AssemblyScripts guidance for portable code</a> you could write code in AssemblyScript and compile it to JavaScript and WebAssembly, conditionally loading either depending on target environment support. This is arguably a very powerful and appealing feature, and is promising for the future of AssemblyScript&#8217;s development.</p>\\n<h3>Getting help</h3>\\n<p>If youâ€™d like to know more about WebAssembly, AssemblyScript, TypeScript, and performance, or if you need help improving performance within your application, feel free to <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>In a previous post we looked at how to compile the popular programming language Go to WebAssembly. WebAssembly is a new programming language which provides a compact binary format for the web. In this post we&#8217;ll explore another WebAssembly target language called AssemblyScript. AssemblyScript allows developers to write strictly typed TypeScript (a typed superset of [&hellip;]</p>\\n\",\"protected\":false},\"author\":2,\"featured_media\":21974,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[6,11],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Getting Started with AssemblyScript | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"In a previous post we looked at how to compile the popular programming language Go to WebAssembly. WebAssembly is a new programming language which provides a compact binary format for the web. In this post we&#039;ll explore another WebAssembly target language called AssemblyScript. AssemblyScript allows developers to write stri\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Getting Started with AssemblyScript | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"In a previous post we looked at how to compile the popular programming language Go to WebAssembly. WebAssembly is a new programming language which provides a compact binary format for the web. In this post we&#039;ll explore another WebAssembly target language called AssemblyScript. AssemblyScript allows developers to write stri\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2019-04-23T13:49:02+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-21T15:12:06+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"2402\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"1350\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\\\",\\\"width\\\":2402,\\\"height\\\":1350},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/\\\",\\\"name\\\":\\\"Getting Started with AssemblyScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/#primaryimage\\\"},\\\"datePublished\\\":\\\"2019-04-23T13:49:02+00:00\\\",\\\"dateModified\\\":\\\"2020-01-21T15:12:06+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\"},\\\"description\\\":\\\"In a previous post we looked at how to compile the popular programming language Go to WebAssembly. WebAssembly is a new programming language which provides a compact binary format for the web. In this post we'll explore another WebAssembly target language called AssemblyScript. AssemblyScript allows developers to write stri\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18225\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=18225\"}],\"version-history\":[{\"count\":2,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18225/revisions\"}],\"predecessor-version\":[{\"id\":21975,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18225/revisions/21975\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/21974\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=18225\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=18225\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=18225\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=18225\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":2,\"name\":\"James Milner\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jmilner/\",\"slug\":\"jmilner\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>James Milner, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"James Milner, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jmilner/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jmilner/\\\",\\\"name\\\":\\\"James Milner, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":21974,\"date\":\"2020-01-21T07:11:47\",\"slug\":\"assemblyscript\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/getting-started-with-assemblyscript/assemblyscript/\",\"title\":{\"rendered\":\"AssemblyScript\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>AssemblyScript | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"AssemblyScript | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"2402\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"1350\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\\\",\\\"name\\\":\\\"AssemblyScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-21T15:11:47+00:00\\\",\\\"dateModified\\\":\\\"2020-01-21T15:11:47+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":2402,\"height\":1350,\"file\":\"2019/04/AssemblyScript.png\",\"sizes\":{\"medium\":{\"file\":\"AssemblyScript-300x169.png\",\"width\":300,\"height\":169,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript-300x169.png\"},\"large\":{\"file\":\"AssemblyScript-1024x576.png\",\"width\":1024,\"height\":576,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript-1024x576.png\"},\"thumbnail\":{\"file\":\"AssemblyScript-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript-150x150.png\"},\"medium_large\":{\"file\":\"AssemblyScript-768x432.png\",\"width\":768,\"height\":432,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript-768x432.png\"},\"1536x1536\":{\"file\":\"AssemblyScript-1536x863.png\",\"width\":1536,\"height\":863,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript-1536x863.png\"},\"2048x2048\":{\"file\":\"AssemblyScript-2048x1151.png\",\"width\":2048,\"height\":1151,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript-2048x1151.png\"},\"full\":{\"file\":\"AssemblyScript.png\",\"width\":2402,\"height\":1350,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/04/AssemblyScript.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/21974\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:36:44 GMT"],["expires","Wed, 09 Sep 2020 15:36:44 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}