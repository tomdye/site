{"value":{"body":"[{\"id\":12256,\"date\":\"2016-05-19T08:34:28\",\"date_gmt\":\"2016-05-19T15:34:28\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=12256\"},\"modified\":\"2016-05-19T08:34:28\",\"modified_gmt\":\"2016-05-19T15:34:28\",\"slug\":\"getting-classy-with-compose\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/getting-classy-with-compose/\",\"title\":{\"rendered\":\"Getting Classy with Compose\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/05/compose_og_img.jpg\\\" alt=\\\"Compose\\\" width=\\\"630\\\" class=\\\"wp-image-12275\\\" /></p>\\n<p>\\nIf you&#8217;re familiar with Dojo 1, you&#8217;re probably familiar with <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.10/declare/index.html\\\"><code>declare</code></a>. Declare provides a flexible but controlled way to handle inheritance in JavaScript. It builds on JavaScript&#8217;s prototypal inheritance with OO (Object Oriented) principles and provides single and multiple inheritance. This enables developers to create flexible components and powerful mixins.\\n</p>\\n<p>\\nAs we started working on Dojo 2, we knew that a class system was going to be an important foundational technology.\\n</p>\\n<p><!--more--></p>\\n<h3>TypeScript and ES6 enter the scene</h3>\\n<p>\\nDojo 1.0 was released in November 2007 and <code>declare</code> had a major overhaul in 2009 with Dojo 1.4.  In internet terms, that is ancient and the world has moved on.\\n</p>\\n<p>\\nWith Dojo 1.6 in 2010, we started introducing composition as a pattern, first with dojo/store, and later with dgrid. The idea was ahead of its time and people mostly responded with confused looks.\\n</p>\\n<p>\\nES6/ES2015 was ratified in June of 2015 and introduced some significant changes.  Also during that time, we had increasingly been using <a href=\\\"http://www.typescriptlang.org/\\\">TypeScript</a> on our projects, and were seeing significant advantages.\\n</p>\\n<p>\\nThe combination of TypeScript and ES6 not only introduced classes and a significant amount of the Object Oriented (OO) style inheritance that <code>declare</code> had been created to provide, but also the ability to do compile time type checking on these interfaces. TypeScript allowed access to the syntactical features of ES6 and a few other new language features, but could emit code that worked in the existing ES5 environments.  Because we felt these features were a significant boon to producing maintainable code, the choice was made to develop Dojo 2 using <a href=\\\"https://dojotoolkit.org/community/roadmap/vision.html\\\">TypeScript</a>.\\n</p>\\n<p>\\nIf you&#8217;re not familiar with TypeScript you can read more about it <a href=\\\"https://www.sitepen.com/blog/2013/12/31/definitive-guide-to-typescript/\\\">here</a>.\\n</p>\\n<h3>The Dilemma</h3>\\n<p>\\nThe choice to move to TypeScript came with many benefits, but it also presented a dilemma. ES6 and TypeScript do not support multiple inheritance or mixins as they existed in <code>declare</code>. These powerful patterns were used in Dojo, Dijit, dstore, and dgrid. Additionally, while OO programming is a useful and widespread paradigm, it is not without its flaws. The seemingly inevitable trend, despite the best intentions, is for class hierarchies to become more and more complex, and for stronger coupling to creep into class relationships.\\n</p>\\n<p>\\nSo while ES6 and TypeScript provided the <code>class</code> system, we were frustrated that TC39 had removed the original Harmony proposal for classes which provided for mixins or traits, saying that they would revisit it at some point in the future.  Currently, a year on from the ratification of ES6, there is still <a href=\\\"https://github.com/tc39/ecma262\\\">no formal proposal</a> for these features.\\n</p>\\n<h3>Composition with Compose</h3>\\n<p>\\nAfter looking at many options, the decision was made to move away from the ES6 class system, and create our own library to meet the needs of Dojo 2. <a href=\\\"https://github.com/dojo/compose\\\"><code>dojo/compose</code></a> is the result of that effort. Compose rejects the traditional OO notion of class hierarchies and takes a more functional approach. Instead, code reuse is enabled with a small API that provides the ability to create and combine, or compose, immutable factories or &#8216;classes&#8217;. Compose also fully utilizes TypeScript&#8217;s static type system to help ensure the correctness of your code.\\n</p>\\n<p>\\nThe Compose API is built around a few simple but powerful methods that can be used to create factories or classes.\\n</p>\\n<h4><code>create</code></h4>\\n<p>\\n<code>create</code>, also usable by simply invoking the <code>compose</code> function itself, is the base of the compose API and provides the ability to create a new compose factory.\\n</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nimport compose from 'dojo-compose/compose';\\n\\ninterface Foo {\\n    foo: Function,\\n    bar: string,\\n    qat: number\\n}\\ninterface FooOptions {\\n\\tfoo?: Function,\\n\\tbar?: string,\\n\\tqat?: number\\n}\\n\\nfunction fooInit(instance: Foo, options?: FooOptions) {\\n\\tif (options) {\\n\\t\\tfor (let key in options) {\\n\\t\\t\\tinstance[key] = options[key]\\n\\t\\t}\\n\\t}\\n}\\n\\nconst fooFactory = compose({\\n\\tfoo: function () {\\n\\t\\tconsole.log('foo');\\n\\t},\\n\\tbar: 'bar',\\n\\tqat: 1\\n}, fooInit);\\n\\nconst foo1 = fooFactory();\\nconst foo2 = fooFactory({\\n\\tbar: 'baz'\\n});\\n\\nfoo1.foo(); // Logs 'foo'\\nconsole.log(foo1.bar); // Logs 'bar'\\nconsole.log(foo2.bar); // Logs 'baz'\\n</pre>\\n<h4><code>extend</code>, <code>overlay</code>, <code>static</code>, <code>aspect</code>, and <code>mixin</code></h4>\\n<p>\\nThese functions provide the ability to take an existing compose factory or factories, and meaningfully combine them with each other, ES6 classes, or objects to produce new factories. Compose embraces immutability as a means to make it easier to reason about the state of your program, so none of the API modifies existing factories, and in fact they are frozen upon creation. The code below provides a quick demonstration of these methods in action, but more detailed examples and explanation can be found in the <a href=\\\"https://github.com/dojo/compose#dojo-compose\\\"><code>readme</code></a>\\n</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\n\\nimport compose from 'dojo-compose/compose';\\n\\ninterface Foo {\\n    foo: Function\\n}\\ninterface FooOptions {\\n\\tfoo: Function\\n}\\n\\nfunction fooInit(instance: Foo, options?: FooOptions) {\\n\\tif (options) {\\n\\t\\tfor (let key in options) {\\n\\t\\t\\tinstance[key] = options[key]\\n\\t\\t}\\n\\t}\\n}\\n\\nconst fooFactory = compose({\\n\\tfoo: function () {\\n\\t\\tconsole.log('foo');\\n\\t}\\n}, fooInit);\\n\\nconst foo1 = fooFactory();\\nconst foo2 = fooFactory({\\n\\tfoo() {\\n\\t\\tconsole.log('new foo');\\n\\t}\\n});\\n\\nfoo1.foo(); // Logs 'foo'\\nfoo2.foo(); // Logs 'new foo'\\n\\n// Extending an existing factory\\nconst fooBarFactory = fooFactory.extend({\\n    bar: 1\\n});\\n\\nlet foobar = fooBarFactory();\\n\\nconst bazFactory = compose.create({\\n\\tbaz: 'baz'\\n}, function(instance: { baz: string }) {\\n\\tinstance.baz = 'initialized';\\n});\\n\\n// Mixin an existing factory, chaining initializer functions\\nconst fooBarBazFactory = fooBarFactory.mixin(bazFactory);\\n\\nconst fooBarBaz = fooBarBazFactory();\\nconsole.log(fooBarBaz.baz); // logs 'initialized'\\n\\n// Overlay additional properties onto an existing factory without changing the type\\nconst myFooFactory = fooFactory.overlay(function (proto) {\\n    proto.foo = 'qat';\\n});\\n\\nconst myFoo = myFooFactory();\\nconsole.log(myFoo.foo); // logs &quot;qat&quot;\\n\\n// Add static properties to the factory itself\\nconst staticFoo = fooFactory.static({\\n\\tdoFoo(): string {\\n\\t\\treturn 'foo';\\n\\t}\\n});\\n\\nconsole.log(staticFoo.doFoo()); // logs 'foo'\\n\\n</pre>\\n<h4>A different kind of composition</h4>\\n<p>\\nThe name compose comes with certain connotations, since traditionally the use of composition over inheritance refers to the pattern of delegating to objects that are properties of a class or instance rather than using inheritance to share functionality. This connotation is intentional. While the API is taking factories, or &#8216;classes&#8217;, and &#8216;extending&#8217; them with additional functionality, or &#8216;mixing&#8217; them into each other, it does so in a way that is decidedly unlike traditional inheritance. The new class has no reference to the old, and there is no class hierarchy. Rather than calling <code>super</code>, a class must either use traditional composition to leverage another class&#8217; functionality, or explicitly aspect the desired functionality. While this is a bit of a departure from the type of inheritance some developers may be used to, we believe that it ultimately leads to code that is easier to write, read, and maintain.\\n</p>\\n<h4>Immutability</h4>\\n<p>\\nOne of the patterns that <code>declare</code> allowed, but we realized was a source of errors and enabled developers to shoot themselves (and others) in the foot was the use of mutable classes. The challenge with mutable classes is allowing downstream code to make changes (sometimes unintentionally) in upstream code, leading to unpredictable behavior and a highly coupled codebase.\\n</p>\\n<p>\\nWith Compose, we do our best to support a pattern where any mutation to a class creates a new class.  This means that the upstream code that depends on that class gets what it expects, helping reduce regressions and confusion.\\n</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nimport compose from 'dojo-compose/compose';\\n\\nconst createFoo = compose({\\n\\tfoo: 'bar'\\n});\\n\\nconst createFooExtended = createFoo.extend({\\n\\tbar: 1\\n});\\n\\nconsole.log(createFoo === createFooExtended); // logs false\\n</pre>\\n<h4>Factories</h4>\\n<p>\\nWhile <code>declare</code> used constructor functions, and ES6 classes are essentially syntactic sugar for constructor functions, we debated if that made the most sense. <a href=\\\"https://ericelliottjs.com/\\\">Eric Elliott</a> pointed out to us that constructor functions are actually the third most common way of creating instances in JavaScript:\\n</p>\\n<ol>\\n<li>The object literal (e.g. <code>const foo = { foo: 'bar' };</code>)</li>\\n<li>DOM Factories (e.g. <code>const node = document.createElement('div');</code>)</li>\\n<li>Constructor Functions (e.g. <code>const p = new Promise();</code>)</li>\\n</ol>\\n<p>\\nCompose uses initializers and a &#8220;decomposed&#8221; initialization functionality, where each initializer operates on the instance as a parameter, much like a car moving down the factory assembly line. We find factories to be a more semantically meaningful way of interacting with object instantiation. Factories also hide the details of the initializer&#8217;s implementation from the consumer. The <code>new</code> keyword forces a new context to be created, but a factory function allows the initializer to be bound to any context. This enables the use of patterns such as object pools, and allows more functionality to be changed without requiring corresponding changes in downstream code.\\n</p>\\n<h3>Getting started with compose today</h3>\\n<p>\\nCompose is currently in beta and should not be used in production yet, but the API is not expected to undergo significant changes at this point. The easiest way to get started with compose is to install it via <code>npm</code>:<br />\\n<code>$ npm install dojo-compose</code>\\n</p>\\n<p>\\nAlternatively the <a href=\\\"https://github.com/dojo/compose\\\"><code>dojo/compose</code></a> repository can be cloned and compose can be built locally using Grunt. If you&#8217;re using TypeScript or ES6 modules, once you&#8217;ve obtained a built version of compose you can import it and get started:\\n</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nimport compose from 'dojo-compose/compose';\\n\\nconst createFoo = compose({\\n    foo: 'foo'\\n}, (instance, options) =&gt; {\\n    /* do some initialization */\\n});\\n\\nconst foo = createFoo();\\n</pre>\\n<h3>Learning More</h3>\\n<p>\\nIf you&#8217;re interested in compose or the advantages that developing with TypeScript and ES6 can bring and want to learn more, we provide an in depth <a href=\\\"https://www.sitepen.com/workshops/private.html?workshop=12\\\">ES6 and Typescript fundamentals workshop</a>. This workshop is aimed to get you up to speed on the most important features of ES6 and TypeScript in a short amount of time. To register, check out our <a href=\\\"https://www.sitepen.com/workshops/\\\">workshop schedule</a>.\\n</p>\\n<p>\\nYou can also <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> directly to discuss how we can help your organization learn more about ES6 and TypeScript.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>If you&#8217;re familiar with Dojo 1, you&#8217;re probably familiar with declare. Declare provides a flexible but controlled way to handle inheritance in JavaScript. It builds on JavaScript&#8217;s prototypal inheritance with OO (Object Oriented) principles and provides single and multiple inheritance. This enables developers to create flexible components and powerful mixins. As we started working on [&hellip;]</p>\\n\",\"protected\":false},\"author\":66,\"featured_media\":12275,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[43],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Getting Classy with Compose | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"If you&#039;re familiar with Dojo 1, you&#039;re probably familiar with declare. Declare provides a flexible but controlled way to handle inheritance in JavaScript. It builds on JavaScript&#039;s prototypal inheritance with OO (Object Oriented) principles and provides single and multiple inheritance. This enables developers to create fl\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/getting-classy-with-compose/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Getting Classy with Compose | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"If you&#039;re familiar with Dojo 1, you&#039;re probably familiar with declare. Declare provides a flexible but controlled way to handle inheritance in JavaScript. It builds on JavaScript&#039;s prototypal inheritance with OO (Object Oriented) principles and provides single and multiple inheritance. This enables developers to create fl\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/getting-classy-with-compose/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2016-05-19T15:34:28+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-classy-with-compose/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-classy-with-compose/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/getting-classy-with-compose/\\\",\\\"name\\\":\\\"Getting Classy with Compose | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-classy-with-compose/#primaryimage\\\"},\\\"datePublished\\\":\\\"2016-05-19T15:34:28+00:00\\\",\\\"dateModified\\\":\\\"2016-05-19T15:34:28+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2976b5e062a9d0501076b7d90cf06dd5\\\"},\\\"description\\\":\\\"If you're familiar with Dojo 1, you're probably familiar with declare. Declare provides a flexible but controlled way to handle inheritance in JavaScript. It builds on JavaScript's prototypal inheritance with OO (Object Oriented) principles and provides single and multiple inheritance. This enables developers to create fl\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/getting-classy-with-compose/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2976b5e062a9d0501076b7d90cf06dd5\\\",\\\"name\\\":\\\"Bradley Maier\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/3ef6bd01cea0da25fca917b56bcbefb0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Bradley Maier\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/12256\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/66\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=12256\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/12256/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/12275\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=12256\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=12256\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=12256\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=12256\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":66,\"name\":\"Bradley Maier\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/bmaier/\",\"slug\":\"bmaier\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/3ef6bd01cea0da25fca917b56bcbefb0?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/3ef6bd01cea0da25fca917b56bcbefb0?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/3ef6bd01cea0da25fca917b56bcbefb0?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Bradley Maier, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Bradley Maier, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/bmaier/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/3ef6bd01cea0da25fca917b56bcbefb0?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/bmaier/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/bmaier/\\\",\\\"name\\\":\\\"Bradley Maier, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2976b5e062a9d0501076b7d90cf06dd5\\\",\\\"name\\\":\\\"Bradley Maier\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/3ef6bd01cea0da25fca917b56bcbefb0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Bradley Maier\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/bmaier/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/66\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:40:17 GMT"],["expires","Wed, 09 Sep 2020 15:40:17 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}