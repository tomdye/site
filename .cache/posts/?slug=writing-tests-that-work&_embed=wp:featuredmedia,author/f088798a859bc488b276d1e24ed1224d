{"value":{"body":"[{\"id\":26243,\"date\":\"2020-06-30T10:18:49\",\"date_gmt\":\"2020-06-30T17:18:49\",\"guid\":{\"rendered\":\"https://www.sitepen.com/?p=23808\"},\"modified\":\"2020-07-08T04:38:27\",\"modified_gmt\":\"2020-07-08T11:38:27\",\"slug\":\"writing-tests-that-work\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/writing-tests-that-work/\",\"title\":{\"rendered\":\"Writing Tests that Work\"},\"content\":{\"rendered\":\"\\n<p>Your team realizes that testing is valuable. Your team creates tests for already completed features. The result was encouraging and your team even found a few bugs hiding in the application. Your team returns to feature development and attempts to add new tests. Features took more time to complete because of the need to create corresponding tests, but your team remains committed to testing. However, some tests keep breaking and some aspects seem too difficult to test. The test suite begins to get neglected and trust in the tests fades. What went wrong? (Be sure to also catch part one of this two-part automated testing series &#8211; <a href=\\\"https://www.sitepen.com/blog/why-automated-testing-matters/\\\">Why Automated Testing Matters</a>)</p>\\n\\n\\n\\n<p>Just like poorly written code, poorly created tests become an impediment for progress. Poorly written tests become more of an impediment than missing tests because bad tests make it more difficult to make changes. Tests should facilitate faster development, so let’s look at some keys to writing effective and maintainable tests.</p>\\n\\n\\n\\n<h2>Key Terms</h2>\\n\\n\\n\\n<p><strong>Test Suite</strong>: A collection of tests run together.<br><strong>Unit Test</strong>: A test which runs a small “unit” of code in isolation, mocking out dependencies.<br><strong>Functional test</strong>: Also known as an End-to-End test, for web applications these test the functionality of the user interface by simulating interaction by a user.<br><strong>Mocking</strong>: Replacing a related section of code with an alternative to help isolate a test from other code or systems.<br><strong>Continuous Integration (CI)</strong>: Process for automatically building and testing a codebase when new code is added. Common tools for CI include Jenkins and Travis.<br><strong>Flakey Test</strong>: A test which sometimes passes and sometimes fails without code changes<br><strong>Test Runner</strong>: A software program to control running the tests of a codebase.<br><strong>Code Coverage</strong>: A measure of how much of the codebase is run during testing</p>\\n\\n\\n\\n<h2>Tests Should Pass</h2>\\n\\n\\n\\n<p>It may seem like a given, but a test suite should pass. Failing tests often end up in a codebase when a developer makes a quick change without running the tests, or when a dependency gets introduced that requires environment configuration. But one developer’s breaking change impedes the rest of their team from creating their own tests. Eventually, the team stops checking the tests altogether because there are already too many issues.</p>\\n\\n\\n\\n<p>To prevent breaking the test suite, tests should get automatically run in a Continuous Integration (CI) environment when new code gets added. If new changes cause tests to fail, the CI system should alert the team that a failure was introduced to the test suite so that the developer who broke the tests can resolve the issue quickly. This catches regressions quickly and allows developers to focus on delivering features.</p>\\n\\n\\n\\n<h2>Tests Should A<em>lways</em> Pass</h2>\\n\\n\\n\\n<p>This isn’t redundant. If the tests pass, the tests should always pass. A “flakey” test causes confusion by giving different results even when the code hasn’t changed. Examples include tests that might fail at different times of the day (or in different timezones) and tests that suffer from race conditions. These tests are problematic because it takes time to determine if a recent change broke the application or if the test is bad. Flakey tests may fail weeks after they were added and are often difficult to reproduce consistently.</p>\\n\\n\\n\\n<p>To reduce time debugging tests and retain confidence in a test suite, resolving flakey tests should become a priority. Taking note of unexplained test failures can help narrow down the issue. Sporadic test failures could point to an actual issue with the code, such as poor handling of daylight savings time. Unit tests can get stabilized by making tests independent of the time of the runtime environment. Functional tests can be harder to debug due to their more complex runtime environment such as mocking date utilities. Start functional tests with a consistent set of data and add checks to ensure data has fully loaded. Some situations, like interacting with an external system, can be difficult to reliably test in a functional test. In these cases a unit test where the environment can be more controlled and mocked is better than a flakey functional test. A stable testing suite makes test results clear and reduces time spent on debugging.</p>\\n\\n\\n\\n<h2>Tests Should Be Fast</h2>\\n\\n\\n\\n<p>Testing should bring value to software development teams, not waste developer time. Especially when writing tests, developers need quick feedback from the test runner. If it takes too long to run and diagnose tests, developers will avoid fully testing the application. Tests are usually slow because of a combination of complexity and test quantity. Running tests strategically will minimize the time costs of repeated testing while maximizing quality control.</p>\\n\\n\\n\\n<p>Unit tests which are isolated can be run very quickly because of their reduced complexity. Use these tests to validate multiple combinations and error handling scenarios on small units of code. Test runner software often supports options to get results more quickly such as automatically re-running the tests when a file changes or selecting a subset of tests to run relevant. Then, the entire unit test suite should be run just before introducing the change to the team codebase to ensure there are no regressions. By keeping individual tests limited in scope and using test tooling well, unit tests allow building out a great test suite without losing time.</p>\\n\\n\\n\\n<p>Unit tests may be fast, but functional tests demonstrate all the pieces of the application were deployed and work for the user. To do this, they take more time to set up and run and are more susceptible to returning the flakey results. Functional tests should focus on a few important workflows to validate that the application as a whole is running correctly. Focusing on key workflows allows covering a range of integrations without duplicating unit tests. If working on unrelated parts of the codebase, developers should be able to rely on a CI tool running the functional (and unit) tests automatically when changes get made so that all new work gets automatically validated. When used together, many fast unit tests and few key functional tests make an efficient balance of time and effectiveness.</p>\\n\\n\\n\\n<h2>Add New Tests When Adding New Code</h2>\\n\\n\\n\\n<p>Test writing should be part of your team’s development planning and process. Writing tests when implementing a feature helps avoid gaps in the test suite and helps teams to accurately estimate development efforts. Writing tests concurrently also pushes developers to have fully tested functionality before features get added to the codebase. Sometimes having additional test cases written by dedicated test engineers can work well, but typically only at a higher, functional test level. Having developers write their own tests ensures they understand the feature requirements and gives them the opportunity to make their code more efficient.</p>\\n\\n\\n\\n<p>In our experience getting teams in the habit of adding code and tests together happens by making tests an expectation of the code review process. Engineers can encourage each other to add tests while they are reviewing the feature. Tests also help engineers understand the code they are reviewing, reducing back-and-forth questions from unclear code. Some teams take this to the extreme and use a pattern called Test (or Behavior)-Driven Development (TDD/BDD) to define the requirements in tests before adding new code. This is a more advanced practice but any team that agrees to require tests with new code will have fewer regressions and rarely needs to stop all feature development to improve the test suite.</p>\\n\\n\\n\\n<h2>Tests Should Be Independent of Implementation Details</h2>\\n\\n\\n\\n<p>Violating the separation between tests and implementation details occurs frequently because it only becomes a problem when the underlying code changes. Tests that depend on implementation details fail to focus on the purpose of the component getting tested. For example, users don’t care how sorting gets implemented, they care that the order is correct. Developers should be free to refactor internal code with limited impact on the test suite.</p>\\n\\n\\n\\n<p>In many cases it may be impractical to avoid all implementation details. Querying for elements on a web page always involves some degree of implementation detail knowledge. However, there are approaches to creating more stable selectors. Instead of an XPath selector which will break if the element gets moved in the page, use a selector that isn’t dependent on parent elements like a unique CSS class. A better selector is one that won’t be changed for other reasons, like a [data-test] attribute selector. When testing classes, avoid testing internal class state. Focus on testing the parts of the class that are used by other parts of the codebase. This will reduce the amount of time needed to fix tests needlessly broken due to implementation details.</p>\\n\\n\\n\\n<h2>Tests Should Be Independent of Each Other</h2>\\n\\n\\n\\n<p>A test suite can start to feel overwhelming if one small change causes 50 tests to start failing. Additionally, it can be very challenging to diagnose errors if a test&#8217;s initial conditions get changed by other tests. Reduce the amount of time it takes to fix test failures by making each test case independent.</p>\\n\\n\\n\\n<p>Most test runners have an option to do setup in some kind of “beforeEach” block which gets run before each test. This is a great place to set up common preconditions for your tests so that each test has the same starting condition. Typically, this includes things like creating class instances and initializing mocks. Make sure that each unit test uses its own instance to avoid one test affecting others. For functional tests, it can be more time-costly to repeat setup in each test. If each test isn’t completely independent, try to make groups of tests independent by starting the tests at a predictable point and adding initial data specifically for that group. Isolating tests reduces debugging time when test failures occur by preventing one test failure from cascading and breaking other tests.</p>\\n\\n\\n\\n<h2>Track Your Testing Code Coverage</h2>\\n\\n\\n\\n<p>Use tooling to track how well your tests cover the codebase scenarios. Many unit testing tools are able to output reports of what percentage of the code was run by the test suite. Code coverage analysis gives a quantitative value to testing efforts and allows teams to track their progress. Teams should set a goal of maintaining at least 90% code coverage and run coverage reports regularly.</p>\\n\\n\\n\\n<p>Coverage reports are an important tool for highlighting where test coverage is missing. This number quantifies how much of the code was run by the testing suite, not actually tested. This means that the number of test cases doesn’t always correspond to test coverage percentage. Similarly, achieving 100% code coverage is not the goal since it often requires adding superfluous tests. Teams should use discretion to determine the specific test cases they need to cover. However, coverage reports are one valuable indication of how well a team is doing at thoroughly testing the codebase.</p>\\n\\n\\n\\n<h2>Conclusions</h2>\\n\\n\\n\\n<p>It is important to remember that working software is the goal of software development. Testing is one aspect to help achieve that. Teams should regularly consider how well their testing suite is helping the team deliver a quality product to users. When testing gets done effectively, the benefits should far outweigh the costs in the long term.</p>\\n\\n\\n\\n<p>Teams should start by getting their testing suite passing quickly and consistently. This will unlock the test suite as a validation tool. From there, teams should begin adding tests that pass independent of implementation details and other test failures. Add code coverage reports to give the team a quantitative value to watch and a goal as they begin to ship more stable features to users.</p>\\n\\n\\n\\n<p>Do you need help improving your current approach to testing and software architecture? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help you improve the reliability of your development workflow with solid testing best practices.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Your team realizes that testing is valuable. Your team creates tests for already completed features. The result was encouraging and your team even found a few bugs hiding in the application. Your team returns to feature development and attempts to add new tests. Features took more time to complete because of the need to create [&hellip;]</p>\\n\",\"protected\":false},\"author\":6,\"featured_media\":26237,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[506,450,496],\"tags\":[],\"series\":[525],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>How to Set Up Automated Software Testing for Apps | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Implementing a solid automated testing framework for your application is a key part of the development process. Learn how to write test that work here.\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/writing-tests-that-work/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"How to Set Up Automated Software Testing for Apps | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Implementing a solid automated testing framework for your application is a key part of the development process. Learn how to write test that work here.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/writing-tests-that-work/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2020-06-30T17:18:49+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-07-08T11:38:27+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/writing-tests-that-work/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/writing-tests-that-work/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/writing-tests-that-work/\\\",\\\"name\\\":\\\"How to Set Up Automated Software Testing for Apps | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/writing-tests-that-work/#primaryimage\\\"},\\\"datePublished\\\":\\\"2020-06-30T17:18:49+00:00\\\",\\\"dateModified\\\":\\\"2020-07-08T11:38:27+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/f94bffc01417682f05b59f924614ef77\\\"},\\\"description\\\":\\\"Implementing a solid automated testing framework for your application is a key part of the development process. Learn how to write test that work here.\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/writing-tests-that-work/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/f94bffc01417682f05b59f924614ef77\\\",\\\"name\\\":\\\"Anthony Ciccarello\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Anthony Ciccarello\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26243\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/6\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=26243\"}],\"version-history\":[{\"count\":2,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26243/revisions\"}],\"predecessor-version\":[{\"id\":26254,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26243/revisions/26254\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/26237\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=26243\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=26243\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=26243\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=26243\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":6,\"name\":\"Anthony Ciccarello\",\"url\":\"https://www.ciccarello.me/\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/aciccarello/\",\"slug\":\"aciccarello\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Anthony Ciccarello, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Anthony Ciccarello, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/aciccarello/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/aciccarello/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/aciccarello/\\\",\\\"name\\\":\\\"Anthony Ciccarello, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/f94bffc01417682f05b59f924614ef77\\\",\\\"name\\\":\\\"Anthony Ciccarello\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/82d112f62007f65d8445c918a9b5d407?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Anthony Ciccarello\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/aciccarello/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/6\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":26237,\"date\":\"2020-06-16T14:30:16\",\"slug\":\"blog_automatedtesting2-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog_automatedtesting2-2/\",\"title\":{\"rendered\":\"blog_automatedTesting2\"},\"author\":103,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>blog_automatedTesting2 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"blog_automatedTesting2 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\\\",\\\"name\\\":\\\"blog_automatedTesting2 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-06-16T21:30:16+00:00\\\",\\\"dateModified\\\":\\\"2020-06-16T21:30:16+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2020/06/blog_automatedTesting2.jpg\",\"sizes\":{},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog_automatedTesting2.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/26237\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/103\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b0195bccd35dc4f-LHR"],["cf-request-id","03d4dbe9f90000dc4f2205b200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:08:04 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d958092be6178f753fd57798239c2b4de1594292883; expires=Sat, 08-Aug-20 11:08:03 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}