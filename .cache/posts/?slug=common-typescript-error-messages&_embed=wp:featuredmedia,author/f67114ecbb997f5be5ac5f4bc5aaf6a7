{"value":{"body":"[{\"id\":15616,\"date\":\"2017-11-01T09:50:04\",\"date_gmt\":\"2017-11-01T16:50:04\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15616\"},\"modified\":\"2020-01-27T10:40:11\",\"modified_gmt\":\"2020-01-27T18:40:11\",\"slug\":\"common-typescript-error-messages\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/common-typescript-error-messages/\",\"title\":{\"rendered\":\"Common TypeScript Error Messages\"},\"content\":{\"rendered\":\"<p>Whenever you start working with a new programming language or framework, you need to learn a new collection of error messages and how to resolve them. Sometimes those messages are obvious, and others only become obvious as you gain experience with the new technology. Here we look at some of the common warnings you might find when you first start working with TypeScript, what they mean, and how to fix the errors within your source code.</p>\\n<p><!--more--></p>\\n<h2>Issue: Type fails to narrow</h2>\\n<p>Perhaps you decided to go the extra mile and strongly type a variable, only to have your TypeScript compiler persistently declare that 42 is <em>not</em> in type <code>Answer</code>. You soon realize no matter how many node modules you install or extra development tools and packages you get, your computer will never be capable of deep thought. The error message starts to flicker before your eyes:</p>\\n<p><code>Type 'number' is not assignable to type 'Answer'.</code></p>\\n<p>It&#8217;s strange, because the variable in question definitely looks like it falls within the <code>Answer</code> type:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ntype Answer = 42 | '42';\\r\\nconst answer = 42;\\r\\nconst result: Answer = answer;\\r\\n</pre>\\n<p>Never fear! The answer is actually quite simple: assigning <code>const answer = 42</code> implicitly types it as <code>number</code>, even though the specific value could be in <code>type Answer</code>. There are even two easy ways to force <code>answer</code> to be of type <code>Answer</code>: explicitly typing it when it is created, or casting it when it is used.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst answer: Answer = 42;\\r\\n</pre>\\n<p>or</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst result: Answer = answer as Answer;\\r\\n</pre>\\n<h2>Issue: Flexibly typing objects</h2>\\n<p>You would never describe yourself as a TypeScript &#8220;wizard&#8221; &#8212; that&#8217;s just asking for trouble &#8212; but you know a thing or two about creating good interfaces. You know where you stand, and just to make a point, you could easily type your position in either two-dimensional or three-dimensional coordinates:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ninterface Position {\\r\\n    x: number;\\r\\n    y: number;\\r\\n    z?: number;\\r\\n}\\r\\n\\r\\nconst point2d: Position = { x: 7, y: 6 };\\r\\nconst point3d: Position = { x: 3, y: 2, z: 7 };\\r\\n</pre>\\n<p>Especially with optional properties, you thought errors beginning with <code>Object literal may only specify known properties</code> were a thing of the past. Unfortunately, you have just been called upon to create an interface for all allowed HTML properties, and now you keep running into errors like <code>Object literal may only specify known properties, and 'aria-labelledby' does not exist in type TagProperties</code> for anything that begins with <code>aria-*</code> or <code>data-*</code>. It has dawned on you that it is impossible to directly include all possible tag attributes in your interface, but you&#8217;re not sure where to go from there.</p>\\n<p>Along come index signatures to the rescue! These provide much greater flexibility, but at the cost of reduced control. For example, the following interface will allow the addition of any string property to an object typed <code>TagProperties</code>:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ninterface TagProperties {\\r\\n    id: string;\\r\\n    disabled: boolean;\\r\\n    tabIndex: number;\\r\\n    ...\\r\\n    [key: string]: any;\\r\\n}\\r\\n</pre>\\n<p>It has the benefit of still allowing a type definition for the value, but the index signature means that any string index may be added to <code>TagProperties</code>, including invalid HTML properties.</p>\\n<h2>Issue: Third-party libraries and ambient type declarations</h2>\\n<p>Realistically, any project with any amount of complexity will use a number of third-party libraries, not all of which will necessarily be written in TypeScript. As per usual, the highest number of new grey hairs comes from trying to coax either tools or third-party libraries to play nicely with each other. Luckily, choosing TypeScript need not contribute to rising sales of hair dye or gin.</p>\\n<p>The error itself will probably look something like this:</p>\\n<p><code>Could not find a declaration file for module 'moduleName'. '/path/to/moduleName/lib/api.js' implicitly has an 'any' type.</code></p>\\n<p>First check DefinitelyTyped, where typings exist for nearly all common third-party JavaScript libraries. Assuming you can find the one you wish to use, install it with:</p>\\n<p><code>npm install @types/moduleName --save</code></p>\\n<p>This is all that is required to make those pesky declaration file errors disappear! Sit back and enjoy the immediate savings in wigs and alcohol.</p>\\n<h2>Issue: Conflicting function overloads</h2>\\n<p>Do all the other issues in this post seem obvious and overly basic? Then settle in, double your daily caffeine dosage, and get ready to debug some function overloads.</p>\\n<p>The first question to ask when creating, editing, or debugging function overloads is &#8220;do I really need function overloads?&#8221; There&#8217;s a decent change that union types or generics might be able to create the same type constraints more intuitively. For example, this:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfooMethod(a: string, b: string): void;\\r\\nfooMethod(a: number): void;\\r\\nfooMethod(a: any, b?: string): void;\\r\\n</pre>\\n<p>could just as easily be:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfooMethod(a: string | number, b?: string): void;\\r\\n</pre>\\n<p>A more complex example, where the return type depends on the type of the parameters, could be updated from this:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfooMethod(a: string): string;\\r\\nfooMethod(a: number): number;\\r\\nfooMethod(a: any): any;\\r\\n</pre>\\n<p>to this:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ntype FooA = string | number;\\r\\nfooMethod&lt;T extends FooA&gt;(a: T): T;\\r\\n</pre>\\n<p>However there are certainly cases where overloading is necessary, primarily when multiple parameters have interdependent types. In these cases, you may encounter the following error after about three cups of coffee:</p>\\n<p><code>Overload signature is not compatible with function definition</code></p>\\n<p>This refers to the fact that the implementation signature (also known by its more technical term, &#8220;the last one&#8221;) must be compatible with all the overloaded type signatures. For example, the following would create the above error for the second overload:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction fooMethod(a: string): string;\\r\\nfunction fooMethod(a: number): number;\\r\\nfunction fooMethod(a: any): string {\\r\\n\\treturn 'foo';\\r\\n}\\r\\n</pre>\\n<p>This is because the return type <code>number</code> is not compatible with the last return type of <code>string</code>. It could be solved by converting the last type signature to <code>fooMethod(a: any): any</code> or <code>fooMethod(a: any): string | number</code>.</p>\\n<h2>Issue: &lt;any&gt; or: how I learned to stop worrying and love type casting</h2>\\n<p>TypeScript&#8217;s version of nuclear proliferation is a codebase liberally sprinkled with <code>&lt;any&gt;</code> or <code>as any</code>. Sure, everything could turn out fine, but it will likely attract a bevy of concerned experts placing bets on what will explode first.</p>\\n<p>Type casting (or, more acurately, type assertion) is powerful because it forces the compiler to interpret the value in question as the provided type. This can be dangerous because you will no longer see type errors when you have missed something:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ninterface MovieCast {\\r\\n    strangelove: string;\\r\\n    president: string;\\r\\n    captain: string;\\r\\n}\\r\\nconst cast: MovieCast = {} as MovieCast;\\r\\n// hmmm.... forgot anything?\\r\\n</pre>\\n<p>On the other hand, there will always be edge cases and sometimes brute force really is the best solution. Here are two common situations when casting may be the best option:</p>\\n<ul>\\n<li>You know a DOM query will return an input element, but TypeScript doesn&#8217;t (and can&#8217;t).\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n  // It is necessary to cast to HTMLInputElement, or 'value' will not be available on inputElement\\r\\n  const inputElement = document.querySelector('.input') as HTMLInputElement;\\r\\n  const value: string = inputElement.value;\\r\\n  </pre>\\n</li>\\n<li>You need to stub a simpler version of a complex interface for testing</li>\\n</ul>\\n<h2>Other error messages?</h2>\\n<p>What error messages do you commonly run into? Share your thoughts in the comments, and we&#8217;ll update this post periodically.</p>\\n<p>Or if you are stuck on a particularly thorny TypeScript problem, and want to avoid the temptation to just put an </p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">&lt;any&gt;</pre>\\n<p> type on it, <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to learn how we can help.</p>\\n<hr />\\n<h2>Getting Help with TypeScript</h2>\\n<div>\\n<a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 2px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\"><a href=\\\"https://www.sitepen.com/contact/\\\">Let&#8217;s talk</a> about how we can help your organization benefit from incorporating TypeScript into your next project.</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Get help from <a href=\\\"https://www.sitepen.com/services/\\\">SitePen On-Demand Development</a>, our fast and efficient solutions to JavaScript development problems of any size.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Whenever you start working with a new programming language or framework, you need to learn a new collection of error messages and how to resolve them. Sometimes those messages are obvious, and others only become obvious as you gain experience with the new technology. Here we look at some of the common warnings you might [&hellip;]</p>\\n\",\"protected\":false},\"author\":82,\"featured_media\":22163,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,11],\"tags\":[56],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Common TypeScript Error Messages | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Whenever you start working with a new programming language or framework, you need to learn a new collection of error messages and how to resolve them. Sometimes those messages are obvious, and others only become obvious as you gain experience with the new technology. Here we look at some of the common warnings you might fin\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/common-typescript-error-messages/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Common TypeScript Error Messages | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Whenever you start working with a new programming language or framework, you need to learn a new collection of error messages and how to resolve them. Sometimes those messages are obvious, and others only become obvious as you gain experience with the new technology. Here we look at some of the common warnings you might fin\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/common-typescript-error-messages/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-11-01T16:50:04+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-27T18:40:11+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/common-typescript-error-messages/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Common TypeScript Error Messages\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/common-typescript-error-messages/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/common-typescript-error-messages/\\\",\\\"name\\\":\\\"Common TypeScript Error Messages | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/common-typescript-error-messages/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-11-01T16:50:04+00:00\\\",\\\"dateModified\\\":\\\"2020-01-27T18:40:11+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/9f3c35c8bc00d7b2a20167d7c7cbb4d7\\\"},\\\"description\\\":\\\"Whenever you start working with a new programming language or framework, you need to learn a new collection of error messages and how to resolve them. Sometimes those messages are obvious, and others only become obvious as you gain experience with the new technology. Here we look at some of the common warnings you might fin\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/common-typescript-error-messages/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/9f3c35c8bc00d7b2a20167d7c7cbb4d7\\\",\\\"name\\\":\\\"Sarah Higley\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Sarah Higley\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15616\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/82\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15616\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15616/revisions\"}],\"predecessor-version\":[{\"id\":22164,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15616/revisions/22164\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22163\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15616\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15616\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15616\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=15616\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":82,\"name\":\"Sarah Higley\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/shigley/\",\"slug\":\"shigley\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Sarah Higley, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Sarah Higley, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/shigley/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/shigley/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/shigley/\\\",\\\"name\\\":\\\"Sarah Higley, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/9f3c35c8bc00d7b2a20167d7c7cbb4d7\\\",\\\"name\\\":\\\"Sarah Higley\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/32c47af4816dc1e7907f4177eb0a61c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Sarah Higley\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/shigley/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/82\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22163,\"date\":\"2020-01-27T10:39:58\",\"slug\":\"common-typescript-error-messages-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/common-typescript-error-messages/common-typescript-error-messages-2/\",\"title\":{\"rendered\":\"Common TypeScript Error Messages\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Common TypeScript Error Messages | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Common TypeScript Error Messages | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-27T18:40:03+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\\\",\\\"name\\\":\\\"Common TypeScript Error Messages | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-27T18:39:58+00:00\\\",\\\"dateModified\\\":\\\"2020-01-27T18:40:03+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Common TypeScript Error Messages\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/11/Common-TypeScript-Error-Messages.jpg\",\"sizes\":{\"medium\":{\"file\":\"Common-TypeScript-Error-Messages-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages-300x158.jpg\"},\"large\":{\"file\":\"Common-TypeScript-Error-Messages-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Common-TypeScript-Error-Messages-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages-150x150.jpg\"},\"medium_large\":{\"file\":\"Common-TypeScript-Error-Messages-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages-768x403.jpg\"},\"full\":{\"file\":\"Common-TypeScript-Error-Messages.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/11/Common-TypeScript-Error-Messages.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22163\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:34:27 GMT"],["expires","Wed, 09 Sep 2020 15:34:27 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}