{"value":{"body":"[{\"id\":4686,\"date\":\"2012-06-11T08:17:28\",\"date_gmt\":\"2012-06-11T15:17:28\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=4686\"},\"modified\":\"2020-08-01T08:11:48\",\"modified_gmt\":\"2020-08-01T15:11:48\",\"slug\":\"dgrid-and-dojo-nano-build\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/\",\"title\":{\"rendered\":\"dgrid and Dojo Nano Build\"},\"content\":{\"rendered\":\"<p>You&#8217;ve likely read that the new <a href=\\\"http://dgrid.io/\\\">dgrid</a> can be as small as 32KB gzipped when including just its minimal dependencies. However, if you use the standard settings for the <a href=\\\"http://build.dojotoolkit.org/\\\">Dojo Web Builder</a> or a standard Dojo build profile, you end up with a build that&#8217;s closer to 100KB gzipped. So, how do you actually get dgrid and Dojo to be a small as possible? Use a custom build.</p>\\n<h2>Where to start with Dojo Builds</h2>\\n<p>The <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.7/build/\\\">Dojo build tutorial</a> is an excellent starting point for learning about builds, but it&#8217;s definitely not the simplest and most straightforward thing to learn when first using Dojo. And while the <a href=\\\"http://dojotoolkit.org/reference-guide/build/\\\">Dojo Build reference guide</a> is thorough, it can be a difficult starting point when you just want an example build. The <a href=\\\"https://github.com/csnover/dojo-boilerplate\\\">Dojo Boilerplate</a> is also a nice starting point for building an app, but it&#8217;s much more than you need when just trying to get a dgrid example up and running.</p>\\n<p><!--more--></p>\\n<h2>Example Build Profile</h2>\\n<p>So, instead, here&#8217;s a build profile you can start with and modify, with an explanation of each section of the build profile. For this example, I&#8217;m using a pre-release version of Dojo 1.8, Node 0.6.18, and dgrid beta 0.3.1. This should also work with Dojo 1.7.2 or the upcoming 1.7.3.</p>\\n<p>We start by placing our profiles in our base path to simplify URL issues. You should always define a releaseDir, because we&#8217;ve seen cases where you can accidentally overwrite your source tree without it.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">var profile = {\\r\\n\\tbasePath: './',\\r\\n\\r\\n\\treleaseDir: &quot;./release/dgrid&quot;,</pre>\\n<p>Next, we define our packages. Because each of the packages we&#8217;re including is &#8220;AMD-ready&#8221; and has a Dojo build file provided defining the package instructions for the Dojo build system, we can keep this simple:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\tpackages: [\\r\\n\\t\\t'dojo', 'dijit', 'dgrid', 'xstyle', 'put-selector'\\r\\n\\t],</pre>\\n<p>If a package did not have a package.json and a build file, you would need to use resource tags to explicitly state that a package is AMD, and to then exclude tests, define which files to only copy and not build/compile, etc.</p>\\n<p>We then specify a number of configuration flags. We remove CSS comments, we keep tests in our build, we use the Closure Compiler to optimize our code, we strip all console statements, and we use the lite selector engine since we don&#8217;t need the full overhead of Acme or Sizzle or Slick for dgrid in modern browsers.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\tcssOptimize: 'comments',\\r\\n\\t// include the tests for now\\r\\n\\tmini: false,\\r\\n\\toptimize: 'closure',\\r\\n\\tlayerOptimize: 'closure',\\r\\n\\tstripConsole: 'all',\\r\\n\\tselectorEngine: 'lite',</pre>\\n<p>Our build layers are the two JS files that are going to be created:</p>\\n<ul>\\n<li>Our dojo/dojo layer will write a file at dojo/dojo.js which simply contains dojo/dojo, which is Dojo&#8217;s AMD loader, and other very core features.\\n<ul>\\n<li>dojo/domReady is the AMD plugin for determining that the DOM is indeed ready, and dojo/_base/declare gives us support for basic class declarations.</li>\\n<li>boot: true means that this layer can be loaded with a script tag and knows how to kick off the AMD loader.</li>\\n<li>customBase: true means we do not wish to use the larger default Dojo Base, which weighs in at about 35KB gzipped.</li>\\n</ul>\\n</li>\\n<li>For the dgrid layer, we&#8217;ll write the layer file to dgrid/dgrid.js. We&#8217;re including the dependencies necessary to run a performance test that&#8217;s included as part of the standard dgrid package.</li>\\n</ul>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\tlayers: {\\r\\n\\t\\t'dojo/dojo': {\\r\\n\\t\\t\\tinclude: ['dojo/dojo', 'dojo/domReady', 'dojo/_base/declare'],\\r\\n\\t\\t\\tboot: true,\\r\\n\\t\\t\\tcustomBase: true\\r\\n\\t\\t},\\r\\n\\t\\t'dgrid/dgrid': {\\r\\n\\t\\t\\tinclude: [&quot;dgrid/List&quot;, &quot;dgrid/OnDemandGrid&quot;, &quot;dgrid/Selection&quot;, \\r\\n\\t\\t\\t\\t&quot;dgrid/Keyboard&quot;, &quot;dgrid/test/data/perf&quot;]\\r\\n\\t\\t}\\r\\n\\t},</pre>\\n<p>We then finish our profile file with some overrides for feature detection tests. Basically we want these tests to fail at build time, which will prevent the inclusion of these features within our build when we minify using the Closure compiler. You can also set features to true in the case that you want to unconditionally include a browser or platform-specific feature into your build.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">staticHasFeatures: {\\r\\n\\t\\t// The trace &amp;amp; log APIs are used for debugging the loader,\\r\\n\\t\\t// so we don’t need them in the build\\r\\n\\t\\t'dojo-trace-api': 0,\\r\\n\\t\\t'dojo-log-api': 0,\\r\\n\\t\\t// This causes normally private loader data to be exposed for debugging,\\r\\n\\t\\t// so we don’t need that either\\r\\n\\t\\t'dojo-publish-privates': 0,\\r\\n\\t\\t// We’re fully async, so get rid of the legacy loader\\r\\n\\t\\t'dojo-sync-loader': 0,\\r\\n\\t\\t// We aren’t loading tests in production\\r\\n\\t\\t'dojo-test-sniff': 0\\r\\n\\t}\\r\\n};</pre>\\n<p>The build output will now include two optimized JS files, contained within full source trees for Dojo and dgrid, as well as xstyle and put-selector, which are dgrid&#8217;s dependencies. The full source tree is there in case you need to include other modules that are part of those packages later.</p>\\n<p>In order to obtain dgrid, just <a href=\\\"https://github.com/sitepen/dgrid#readme\\\">follow the instructions</a> for downloading it, or ideally use CPM to install it. One issue I ran into on Mac OS X Lion was that I had to explicitly define the CPM_PATH when running the command or in my shell source.</p>\\n<h2>Using the Build</h2>\\n<p>First, <a href=\\\"https://www.sitepen.com/labs/code/performance/sitepen.profile.js\\\">download the build profile</a> and modify any path or other configuration settings as you see fit. As mentioned, we&#8217;ll typically place the build profile in the parent directory of dojo and dgrid. From the command line, with Node installed, we run the following command:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">util/buildscripts/build.sh -p sitepen.profile.js -r</pre>\\n<p>After about a minute, we&#8217;ll have our built files saved in the release directory. Note that this copies the entire source tree also, in case you later want to include other modules on-demand with Dojo, Dijit, or dgrid.</p>\\n<p>We&#8217;re not quite done yet. In our original markup for this simple test ( dgrid/test/performance.html ) , we have the following script include and require statement:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">&lt;script type=&quot;text/javascript&quot; src=&quot;../../dojo/dojo.js&quot;\\r\\n\\tdata-dojo-config=&quot;async: true&quot;&gt;&lt;/script&gt;\\r\\n&lt;script type=&quot;text/javascript&quot;&gt;\\r\\n\\trequire([&quot;dgrid/List&quot;, &quot;dgrid/OnDemandGrid&quot;,&quot;dgrid/Selection&quot;, &quot;dgrid/Keyboard&quot;, \\r\\n\\t\\t&quot;dojo/_base/declare&quot;, &quot;dgrid/test/data/perf&quot;, &quot;dojo/domReady!&quot;],\\r\\n\\t\\tfunction(List, Grid, Selection, Keyboard, declare, testPerfStore){\\r\\n\\t\\t...</pre>\\n<p>However, if we use our build layer for dgrid with this, it will still load separate modules for List, OnDemandGrid, etc. So, we use a nested require:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">&lt;script type=&quot;text/javascript&quot; src=&quot;../../dojo/dojo.js&quot;\\r\\n\\tdata-dojo-config=&quot;async: true&quot;&gt;&lt;/script&gt;\\r\\n&lt;script type=&quot;text/javascript&quot;&gt;\\r\\n\\trequire(['dgrid/dgrid'], function () {\\r\\n\\t    require([&quot;dgrid/List&quot;, &quot;dgrid/OnDemandGrid&quot;,&quot;dgrid/Selection&quot;, \\r\\n\\t\\t&quot;dgrid/Keyboard&quot;, &quot;dojo/_base/declare&quot;, &quot;dgrid/test/data/perf&quot;, \\r\\n\\t\\t&quot;dojo/domReady!&quot;],\\r\\n\\t\\tfunction(List, Grid, Selection, Keyboard, declare, testPerfStore){\\r\\n\\t\\t...\\r\\n</pre>\\n<p>This first loads the layer, and then once that is loaded, because each of the needed modules is already available through the Dojo loader, the separate modules are not re-requested.</p>\\n<h2>Results</h2>\\n<p>Let&#8217;s compare the before and after waterfall loading diagrams:</p>\\n<p><a href=\\\"https://wp.sitepen.com/wp-content/uploads/2012/06/screenshot-2012-06-01-at-8.40.06-.png\\\"><img class=\\\"alignnone size-full wp-image-4687\\\" style=\\\"width: 650px;\\\" title=\\\"Waterfall Diagram Before a Build\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2012/06/screenshot-2012-06-01-at-8.40.06-.png\\\" alt=\\\"\\\" /></a></p>\\n<p><a href=\\\"https://wp.sitepen.com/wp-content/uploads/2012/06/screenshot-2012-06-08-at-2.14.00-.png\\\"><img class=\\\"alignnone size-full wp-image-4745\\\" style=\\\"width: 650px;\\\" title=\\\"Waterfall Diagram After Build\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2012/06/screenshot-2012-06-08-at-2.14.00-.png\\\" alt=\\\"\\\" /></a></p>\\n<p>As you can see, this provides a dramatic improvement in load times (reduce the load by 75% on a fast network, likely greater on a slower network), the number of HTTP requests (from 42 to 6), and the total payload size (from 123KB to 31.6 KB, both gzipped).</p>\\n<h2>Making Your dgrid Fast</h2>\\n<p>To make your dgrid fast, you&#8217;ll want to update your layers in the build profile to optimize for the features you want to include in your grid and app.</p>\\n<p>We’re working hard with our customers to replace their massive grid implementations with dgrid and we can do the same for your application! <a href=\\\"https://www.sitepen.com/contact/\\\">Call us today</a> to get on the schedule to receive a full grid migration effort or sign up for one of our valuable <a href=\\\"https://www.sitepen.com/services/\\\">SitePen Support</a> plans to keep your developers productive and informed!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>You&#8217;ve likely read that the new dgrid can be as small as 32KB gzipped when including just its minimal dependencies. However, if you use the standard settings for the Dojo Web Builder or a standard Dojo build profile, you end up with a build that&#8217;s closer to 100KB gzipped. So, how do you actually get [&hellip;]</p>\\n\",\"protected\":false},\"author\":3,\"featured_media\":4687,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[350,45,6],\"tags\":[336,352],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>dgrid and Dojo Nano Build | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"You&#039;ve likely read that the new dgrid can be as small as 32KB gzipped when including just its minimal dependencies. However, if you use the standard settings for the Dojo Web Builder or a standard Dojo build profile, you end up with a build that&#039;s closer to 100KB gzipped. So, how do you actually get dgrid and Dojo to be a s\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"dgrid and Dojo Nano Build | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"You&#039;ve likely read that the new dgrid can be as small as 32KB gzipped when including just its minimal dependencies. However, if you use the standard settings for the Dojo Web Builder or a standard Dojo build profile, you end up with a build that&#039;s closer to 100KB gzipped. So, how do you actually get dgrid and Dojo to be a s\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2012-06-11T15:17:28+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-08-01T15:11:48+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/\\\",\\\"name\\\":\\\"dgrid and Dojo Nano Build | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/#primaryimage\\\"},\\\"datePublished\\\":\\\"2012-06-11T15:17:28+00:00\\\",\\\"dateModified\\\":\\\"2020-08-01T15:11:48+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\"},\\\"description\\\":\\\"You've likely read that the new dgrid can be as small as 32KB gzipped when including just its minimal dependencies. However, if you use the standard settings for the Dojo Web Builder or a standard Dojo build profile, you end up with a build that's closer to 100KB gzipped. So, how do you actually get dgrid and Dojo to be a s\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/dgrid-and-dojo-nano-build/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/4686\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=4686\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/4686/revisions\"}],\"predecessor-version\":[{\"id\":26352,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/4686/revisions/26352\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/4687\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=4686\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=4686\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=4686\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=4686\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":3,\"name\":\"Dylan Schiemann\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dylan/\",\"slug\":\"dylan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dylan Schiemann, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dylan Schiemann, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dylan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dylan/\\\",\\\"name\\\":\\\"Dylan Schiemann, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:15:41 GMT"],["expires","Thu, 24 Sep 2020 13:15:41 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}