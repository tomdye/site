{"value":{"body":"[{\"id\":15447,\"date\":\"2017-10-06T10:08:10\",\"date_gmt\":\"2017-10-06T17:08:10\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15447\"},\"modified\":\"2020-01-28T09:10:02\",\"modified_gmt\":\"2020-01-28T17:10:02\",\"slug\":\"improving-performance-with-the-paint-timing-api\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/improving-performance-with-the-paint-timing-api/\",\"title\":{\"rendered\":\"Improving Performance with the Paint Timing API\"},\"content\":{\"rendered\":\"<h2 id=\\\"introduction\\\">Introduction</h2>\\n<div class=\\\"tutorial-outline\\\" display:none;>\\n<h3>Outline</h3>\\n<ul>\\n<li><a href=\\\"#step1\\\">Accessing paint metrics from JavaScript</a></li>\\n<li><a href=\\\"#step2\\\">Reporting paint timing metrics to a server</a></li>\\n<li><a href=\\\"#step3\\\">Viewing paint metrics in the Chrome DevTools</a></li>\\n<li><a href=\\\"#step4\\\">Browser Implementations</a></li>\\n</ul>\\n</div>\\n<p>Traditionally, front-end performance focused primarily on page load times as an important performance metric. Commercial web performance dashboards would show granular level performance metrics for back-end aspects, like database lookup times, template compilation, server response times, etc.</p>\\n<p><!--more--></p>\\n<p>However when it came to the client-side, performance information was limited. This is partly due to limited performance metrics &amp; APIs browsers would offer. Ironically, some non-standard performance tracking techniques would themselves negatively impact performance. This is now changing thanks to new performance oriented APIs:</p>\\n<ul>\\n<li><a href=\\\"http://caniuse.com/#search=user%20timing\\\">User Timing API</a></li>\\n<li><a href=\\\"http://caniuse.com/#search=navigation%20timing\\\">Navigation Timing API</a></li>\\n<li><a href=\\\"http://caniuse.com/#search=network%20information%20api\\\">Network Information API</a></li>\\n<li><a href=\\\"http://caniuse.com/#search=resource%20timing\\\">Resource Timing API</a></li>\\n<li><a href=\\\"https://w3c.github.io/paint-timing\\\">Paint Timing API</a></li>\\n</ul>\\n<p>Here we will focus on the Paint Timing API, which marks two significant moments in the browser rendering pipeline: <strong>First Paint</strong> &amp; <strong>First Contentful Paint</strong>.</p>\\n<p>Paint metrics answer two useful questions for the user about your page:</p>\\n<ul>\\n<li>Is something happening? (First paint)</li>\\n<li>Is this useful? (First contentful paint)</li>\\n</ul>\\n<p>it is important to measure performance, but even more important to measure an end user’s perceived performance, which is typically influenced by these two metrics.</p>\\n<h3 id=\\\"first-paint\\\">First Paint</h3>\\n<p>This is the first render to the screen, this metric excludes the default background paint however it includes any user defined background paint, it is the point at which pixels are first drawn to the screen.</p>\\n<h3 id=\\\"first-contentful-paint\\\">First Contentful Paint</h3>\\n<p>This is the point at which the browser renders the first piece of DOM to the screen. This metric reports the time when the browser first rendered any text, images, canvas, or SVGs.</p>\\n<p>It represents the first point at which a user can start consuming content. For example, the Twitter and Nest home pages may look like this:</p>\\n<div class=\\\"two-stack\\\">\\n<img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_0-1.png\\\" alt=\\\"First contentful paint\\\" class=\\\"screenshot two-up alignnone size-full wp-image-15451\\\" /><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_1-1.png\\\" alt=\\\"First contentful paint\\\" class=\\\"screenshot two-up alignnone size-full wp-image-15453\\\" />\\n</div>\\n<h3 id=\\\"understanding-the-difference-with-code\\\">Understanding the difference with code</h3>\\n<p>To solidify your understanding of first paint vs. first contentful paint, consider the following code example which is also <a href=\\\"https://github.com/SitePen/paint-timing-blog-examples/blob/6c466715ad07659fc04541cfada1542677540879/paint-delay/index.html\\\">present on GitHub</a>.</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;!DOCTYPE html&gt;\\r\\n&lt;html lang=&quot;en&quot;&gt;\\r\\n&lt;head&gt;\\r\\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\\r\\n    &lt;title&gt;Paint delay example&lt;/title&gt;\\r\\n    &lt;script&gt;\\r\\n        const observer = new window.PerformanceObserver(list =&gt; {\\r\\n            list.getEntries().forEach(({name, startTime}) =&gt; {\\r\\n                console.log({name, startTime});\\r\\n            });\\r\\n        });\\r\\n\\r\\n        observer.observe({\\r\\n            entryTypes: ['paint']\\r\\n        });\\r\\n\\r\\n        function sleep(ms = 1000) {\\r\\n            return new Promise(resolve =&gt; setTimeout(resolve, ms));\\r\\n        }\\r\\n\\r\\n        // This triggers first-paint\\r\\n        sleep().then(() =&gt; document.body.style.backgroundColor = 'lightgrey');\\r\\n\\r\\n        // This triggers first-contentful-paint\\r\\n        sleep(2000).then(() =&gt; document.body.innerHTML += '&lt;p&gt;Hi there!&lt;/p&gt;');\\r\\n    &lt;/script&gt;\\r\\n&lt;/head&gt;\\r\\n&lt;body&gt;\\r\\n\\r\\n&lt;/body&gt;\\r\\n&lt;/html&gt;\\r\\n</pre>\\n<p>Note from the author: The code example above does not highlight best practices in any way! For example, setting inline styles in this manner should be avoided. It is only used as a demonstration.</p>\\n<p>Before we move onto the output from viewing this page, take note of the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\\\"><code>PerformanceObserver()</code></a><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\\\"> API</a> usage. This API allows you to observe various performance metrics in your application source code and then act upon them, for example by sending metrics to a server for further processing.</p>\\n<p>Here is the result from the console panel when viewing the page:</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_2.png\\\" alt=\\\"Paint metrics in DevTools\\\" class=\\\"screenshot alignnone size-full wp-image-15454\\\" /></p>\\n<p>Notice the following metrics:</p>\\n<ul>\\n<li>First paint occurs around the one second mark</li>\\n<li>First contentful paint occurs around the two second mark</li>\\n</ul>\\n<p>These metrics can be directly linked to code which triggers these metrics to occur. This code in particular triggers first paint:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nsleep().then( () =&gt; document.body.style.backgroundColor = 'lightgrey' )\\r\\n</pre>\\n<p>First paint may not always offer great value to understanding the user’s perception of performance, however it is correctly identified as the first point at which pixels are drawn to the screen.</p>\\n<p>This code below triggers first contentful paint.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nsleep(2000).then(() =&gt; document.body.innerHTML += '&lt;p&gt;Hi there!&lt;/p&gt;')\\r\\n</pre>\\n<p>In this case, real content is drawn to the page after two seconds.</p>\\n<p>While this is an intentionally contrived and simple example, it should demonstrate the various triggers for first paint and first contentful paint.</p>\\n<h2 id=\\\"step1\\\" class=\\\"step\\\"><span class=\\\"step-number\\\">1</span> Accessing paint metrics from JavaScript</h2>\\n<h3>Approach 1: Querying for paint metrics</h3>\\n<p>There are two approaches for assessing paint metrics. For the first approach, you can open Chrome DevTools right now and try this line of code in the console panel:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nperformance.getEntriesByType('paint')\\r\\n</pre>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_3-1.png\\\" alt=\\\"Paint metrics in DevTools\\\" class=\\\"screenshot alignnone size-full wp-image-15455\\\" /></p>\\n<p>You can use the Performance API, specifically <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType\\\"><code>Performance.getEntriesByType()</code></a>, to retrieve available performance metrics. For the first paint metric, an individual performance entry looks like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n{\\r\\n  &quot;name&quot;: &quot;first-paint&quot;,\\r\\n  &quot;entryType&quot;: &quot;paint&quot;,\\r\\n  &quot;startTime&quot;: 1494.9050000000002,\\r\\n  &quot;duration&quot;: 0\\r\\n}\\r\\n</pre>\\n<p>As part of the JSON object returned from a call to <code>Performance.getEntriesByType()</code>, there are four properties:</p>\\n<ul>\\n<li><strong>Name</strong>: The individual metric name</li>\\n<li><strong>Entry Type</strong>: The category type to which this metric belongs (Note: this is the key to use to filter for metrics which belong to a specific category: <code>Performance.getEntriesByType('paint')</code>)</li>\\n<li><strong>Start Time</strong>: A <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp\\\">high resolution timestamp</a> which represents the time at which the metric occurred</li>\\n<li><strong>Duration</strong>: For paint metrics, this will always be zero, since the first-paint and first-contentful-paint metrics do not represent durations, but rather, specific points in time </li>\\n</ul>\\n<h3>Approach 2: Listening for paint metrics</h3>\\n<p>The first technique to acquire paint metric events invokes a targeted method in JavaScript to return all available paint metrics. This second approach involves <a href=\\\"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\\\">listening</a> for changes by registering an observer. In practical terms, this means creating a <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\\\">performance observer</a> instance:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst observer = new PerformanceObserver(list =&gt; {\\r\\n    // `list` provides access to performance metrics\\r\\n});\\r\\n\\r\\nobserver.observe({entryTypes: ['paint']});\\r\\n</pre>\\n<p>The performance observer interface allows you to observe for particular types of performance metrics. In the code example above, we listen for paint metrics. This observer patterns follows similar characteristics to the <a href=\\\"https://github.com/tc39/proposal-observable\\\">observable proposal in JavaScript</a>, an interface allowing you to listen for a collection of data over time.</p>\\n<h2 id=\\\"step2\\\" class=\\\"step\\\"><span class=\\\"step-number\\\">2</span> Reporting paint timing metrics to a server</h2>\\n<p>To derive value from paint metrics, you can automatically capture metrics from the client and report them to your server for analysis and processing. We will cover two approaches, the first approach involves using Google Analytics, and the second approach uses a slightly more vanilla approach to send performance metrics to a Node.js web server.</p>\\n<h3>Approach 1: Google Analytics</h3>\\n<p>Using Google Analytics, you can send across paint metrics to the analytics dashboard:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nga('send', 'event', {\\r\\n    eventCategory: 'Paint Metrics',\\r\\n    eventAction: 'first-paint',\\r\\n    eventValue: 100,\\r\\n    nonInteraction: true,\\r\\n});\\r\\n</pre>\\n<p>This process is documented in further detail in <a href=\\\"https://developers.google.com/web/updates/2017/06/user-centric-performance-metrics\\\">Leveraging the Performance Metrics that Most Affect User Experience</a>. Google Analytics also offers dedicated <a href=\\\"https://developers.google.com/analytics/devguides/collection/analyticsjs/user-timings\\\">user timing documentation</a> for reporting timing information.</p>\\n<h3>Approach 2: Reporting metrics to a Node.js web server</h3>\\n<p>This approach involves collecting paint timing metrics in client-side JavaScript code, and then using an appropriate API to send the metrics to a web server. The complete client-side code and server-side code is <a href=\\\"https://github.com/SitePen/paint-timing-blog-examples/tree/6c466715ad07659fc04541cfada1542677540879/report-to-node\\\">on GitHub</a>.</p>\\n<p>Here’s the starting point of the client page:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;!DOCTYPE html&gt;\\r\\n&lt;html lang=&quot;en&quot;&gt;\\r\\n&lt;head&gt;\\r\\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\\r\\n    &lt;title&gt;Reporting to Node.js&lt;/title&gt;\\r\\n    &lt;script&gt;\\r\\n        const observer = new window.PerformanceObserver(list =&gt; {\\r\\n            list.getEntries().forEach(({name, startTime}) =&gt; {\\r\\n                console.log({name, startTime});\\r\\n\\r\\n                // Need to report to a server here\\r\\n                const data = {\\r\\n                    name,\\r\\n                    startTime\\r\\n                };\\r\\n\\r\\n                navigator.sendBeacon('http://127.0.0.1:3000', JSON.stringify(data));\\r\\n            });\\r\\n        });\\r\\n\\r\\n        observer.observe({\\r\\n            entryTypes: ['paint']\\r\\n        });\\r\\n    &lt;/script&gt;\\r\\n&lt;/head&gt;\\r\\n&lt;body&gt;\\r\\n\\r\\n    &lt;p&gt;Hi there&lt;/p&gt;\\r\\n\\r\\n&lt;/body&gt;\\r\\n&lt;/html&gt;\\r\\n</pre>\\n<p>The <code>forEach()</code> callback finally gives us access to paint timing metrics. At this point, it would be fairly trivial to execute a <code>fetch()</code> request with the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\\\">Fetch API</a> and submit the paint timing metrics as query string parameters or as a POST body payload. There is another API suitable for this use case supported in almost all modern browsers, the <a href=\\\"http://caniuse.com/#search=beacon\\\">Beacon API</a>, which provides an excellent candidate for beaconing metrics to a server:</p>\\n<ul>\\n<li>Beacons can be sent even after a page has been closed</li>\\n<li>Beacons are sent asynchronously meaning they do not block the main thread upon invoking the API</li>\\n<li>Beacon requests are scheduled by the browser to not compete with high-priority network requests</li>\\n<li>Beacon requests can be coalesced by the browser to be sent more efficiently on low powered devices</li>\\n<li>Beacon requests do not block user interactivity</li>\\n</ul>\\n<p>Using the beacon API from client-side JavaScript with the performance observer is relatively straightforward:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nlist.getEntries().forEach(({name, startTime}) =&gt; {\\r\\n    const data = {\\r\\n        name,\\r\\n        startTime\\r\\n    };\\r\\n\\r\\n    navigator.sendBeacon('http://127.0.0.1:3000', JSON.stringify(data));\\r\\n});\\r\\n</pre>\\n<p>The server component (Node.js) can receive data using the <a href=\\\"https://github.com/zeit/micro\\\">Micro server</a>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst {json} = require('micro');\\r\\n\\r\\nmodule.exports = async req =&gt; {\\r\\n    console.log(await json(req));\\r\\n    return 200;\\r\\n};\\r\\n</pre>\\n<p>Notice the very minimal amount of source code required to get this simple example working!</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_4-1.png\\\" alt=\\\"Node.js web server to handle paint metrics\\\"  class=\\\"screenshot alignnone size-full wp-image-15456\\\" /></p>\\n<p>The screen above demonstrates the end result: to retrieve structured performance data on the back-end. You can incorporate these techniques into your production website and use it to raise awareness of paint performance within your team. For example, from Node.js you can:</p>\\n<ul>\\n<li>Send paint metrics into a visualisation platform like <a href=\\\"https://graphiteapp.org/\\\">Graphite</a></li>\\n<li>Incorporate metrics within an alerting or monitoring platform like <a href=\\\"https://zmon.io/\\\">ZMON</a></li>\\n<li>Include the <code>first-contentful-paint</code> metric in your automated tests so that page tests fail when they exceed an acceptable first contentful paint time. You can do this with a testing tool like <a href=\\\"https://github.com/theintern/intern\\\">Intern</a></li>\\n</ul>\\n<h2 id=\\\"step3\\\" class=\\\"step\\\"><span class=\\\"step-number\\\">3</span> Viewing paint metrics in the Chrome DevTools</h3>\\n<p>Chrome DevTools has an experimental feature which allows you to see paint timing metrics overlaid on a performance panel recording. </p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_5-1.png\\\" alt=\\\"Paint metrics in the DevTools performance panel\\\" class=\\\"screenshot alignnone size-full wp-image-15457\\\" /></p>\\n<p>In the screenshot above, notice dashed vertical lines going down the recording. These vertical lines indicate significant milestones in a page load. Milestones can include:</p>\\n<ul>\\n<li>First paint</li>\\n<li>First meaningful paint / First contentful paint</li>\\n<li>Page load</li>\\n</ul>\\n<p>You can hover over the topmost portion of the dashed vertical lines to identify which metric the line belongs to. </p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_6-1.png\\\" alt=\\\"Paint metrics in the DevTools performance panel\\\" class=\\\"screenshot alignnone size-full wp-image-15458\\\" /></p>\\n<p>In the screenshot above, the dashed vertical line represents the first meaningful paint. You can view the related screenshots to understand which visual components were on the page at this point in time. In this example, the header and page heading were drawn.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_7-1.png\\\" alt=\\\"Paint metrics in the DevTools performance panel\\\" class=\\\"screenshot alignnone size-full wp-image-15459\\\" /></p>\\n<p>Here&#8217;s a quick screencast demonstrating this feature if you&#8217;d like to follow along:</p>\\n<div class=\\\"inline-video\\\">\\n<iframe src=\\\"https://www.youtube.com/embed/N65S0bH1Xko\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\n</div>\\n<p>If you would like to try this yourself, ensure the ‘Timeline: paint timing markers’ experiment is enabled within Chrome DevTools. This has been verified in Chrome version 63.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_8.png\\\" alt=\\\"Enabling an experiment in DevTools\\\"  class=\\\"screenshot alignnone size-full wp-image-15460\\\" /></p>\\n<p>You should also enable the ‘Screenshots’ checkbox in the performance panel, so that you can relate the visual completeness of a page along with paint timing markers:</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_9.png\\\" alt=\\\"Screenshot checkbox in the DevTools performance panel\\\" class=\\\"screenshot alignnone size-full wp-image-15461\\\" /></p>\\n<h2 id=\\\"step4\\\" class=\\\"step\\\"><span class=\\\"step-number\\\">4</span> Browser Implementations</h3>\\n<p>There are <a href=\\\"https://github.com/w3c/web-platform-tests/tree/aa02ad5e2b40bd8caf953ecb539d6d0ed4af4fcd/paint-timing\\\">web platform tests for paint timing</a>. While targeted at browser vendors, they can offer you, a web developer, some extra insight into how paint timing should behave. For example:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/w3c/web-platform-tests/blob/aa02ad5e2b40bd8caf953ecb539d6d0ed4af4fcd/paint-timing/first-contentful-bg-image.html\\\">first-contentful-bg-image.html</a> demonstrates how first contentful paint is triggered upon a background image download</li>\\n<li><a href=\\\"https://github.com/w3c/web-platform-tests/blob/aa02ad5e2b40bd8caf953ecb539d6d0ed4af4fcd/paint-timing/first-contentful-canvas.html\\\">first-contentful-canvas.html</a> demonstrates how first contentful paint is triggered after rendering a non blank canvas</li>\\n</ul>\\n<p>If you are still curious, you could even dive into the Chrome source code to familiarise yourself with first paint behaviour. For example:</p>\\n<ul>\\n<li>This <a href=\\\"https://github.com/nwjs/chromium.src/blob/4657efa55cd1c6a3df5cb63210ab0dbf920364a9/third_party/WebKit/Source/core/paint/PaintTiming.cpp#L51-L59\\\"><code>PaintTiming::MarkFirstPaint()</code></a> function appears to be the handler for first paint indicators</li>\\n<li>Within the <a href=\\\"https://github.com/nwjs/chromium.src/blob/4657efa55cd1c6a3df5cb63210ab0dbf920364a9/third_party/WebKit/Source/core/paint/SVGRootPainter.cpp#L80\\\">SVGRootPainter.cpp</a> file, presumably responsible for painting SVGs, there is the line of code: <code>timing.MarkFirstContentfulPaint()</code>. An interesting takeaway here is observing the exact point at which the first contentful paint metric is marked</li>\\n</ul>\\n<h2 id=\\\"further-reading\\\">Further reading</h2>\\n<ul>\\n<li><a href=\\\"https://www.w3.org/TR/paint-timing/\\\">Paint Timing API</a> &#8211; Specification</li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/PerformancePaintTiming\\\">Performance Paint Timing</a> &#8211; MDN</li>\\n<li><a href=\\\"https://docs.google.com/document/d/1BR94tJdZLsin5poeet0XoTW60M0SjvOJQttKT-JK8HI/view#\\\">Time to First Meaningful Paint</a> &#8211; A layout-based approach</li>\\n<li><a href=\\\"https://docs.google.com/document/d/1eMA9YWTLFCJomyiKUO4Be4PeVIOBFMfXMdE8bpudL_o/edit#heading=h.oqp46zxwsqwh\\\">First Meaningful Paint</a> &#8211; manual evaluation</li>\\n<li><a href=\\\"https://docs.google.com/document/d/1Owfs6arciEnWgT2-8bWCcHdYRIKRKZ0Xj8UtqRx4c3k/edit#\\\">Time-to-first-X-paint metrics</a>: status and refinement plans</li>\\n</ul>\\n<h2 id=\\\"conclusion\\\">Conclusion</h2>\\n<p>We covered a wide spectrum of topics related to paint timing. We took a deeper look at what the first paint and first contentful paint metrics represent, and how the visual completeness of a page relates to these metrics.  We saw how to retrieve these metrics in JavaScript and also send them to a remote web server with the Beacon API.</p>\\n<p>Finally, we saw an experimental Chrome DevTools feature which overlays paint timing metrics onto the performance panel recordings, making it easier to align paint events with activity on the page.</p>\\n<p>The paint timing API enables website creators to track and monitor the important metrics which affects perceived performance. Consider that 53% of users will abandon a site if it takes longer than 3 seconds to load (<a href=\\\"https://developers.google.com/web/progressive-web-apps/\\\">source</a>). Being able to keep your paint times low is likely to keep your users happy and improve the perceived performance of your site.</p>\\n<p>The paint timing API is currently in Chrome stable.</p>\\n</p>\\n<hr />\\n<h2>Next steps</h2>\\n<div>\\n<a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 2px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Is your application as fast as possible? If not, <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to discuss how we can help identify and eliminate performance bottlenecks in your application!</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Get help from <a href=\\\"https://www.sitepen.com/services/\\\">SitePen On-Demand Development</a>, our fast and efficient solutions to JavaScript development problems of any size.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Introduction Outline Accessing paint metrics from JavaScript Reporting paint timing metrics to a server Viewing paint metrics in the Chrome DevTools Browser Implementations Traditionally, front-end performance focused primarily on page load times as an important performance metric. Commercial web performance dashboards would show granular level performance metrics for back-end aspects, like database lookup times, template [&hellip;]</p>\\n\",\"protected\":false},\"author\":83,\"featured_media\":22174,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[3,6,333],\"tags\":[456,14,291],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Improving Performance with the Paint Timing API | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/improving-performance-with-the-paint-timing-api/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Improving Performance with the Paint Timing API | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Introduction Outline Accessing paint metrics from JavaScript Reporting paint timing metrics to a server Viewing paint metrics in the Chrome DevTools Browser Implementations Traditionally, front-end performance focused primarily on page load times as an important performance metric. Commercial web performance dashboards would show granular level performance metrics for back-end aspects, like database lookup times, template [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/improving-performance-with-the-paint-timing-api/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-10-06T17:08:10+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-28T17:10:02+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/improving-performance-with-the-paint-timing-api/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Improving Performance with the Paint Timing API\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/improving-performance-with-the-paint-timing-api/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/improving-performance-with-the-paint-timing-api/\\\",\\\"name\\\":\\\"Improving Performance with the Paint Timing API | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/improving-performance-with-the-paint-timing-api/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-10-06T17:08:10+00:00\\\",\\\"dateModified\\\":\\\"2020-01-28T17:10:02+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/improving-performance-with-the-paint-timing-api/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\"}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15447\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15447\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15447/revisions\"}],\"predecessor-version\":[{\"id\":22175,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15447/revisions/22175\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22174\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15447\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15447\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15447\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":83,\"name\":\"Umar Hansa\",\"url\":\"https://umaar.com/\",\"description\":\"Front-end web developer in London!\",\"link\":\"https://wp.sitepen.com/blog/author/uhansa/\",\"slug\":\"uhansa\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Umar Hansa, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Umar Hansa, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/uhansa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/uhansa/\\\",\\\"name\\\":\\\"Umar Hansa, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\",\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22174,\"date\":\"2020-01-28T09:09:50\",\"slug\":\"paint-timing-api\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/improving-performance-with-the-paint-timing-api/paint-timing-api/\",\"title\":{\"rendered\":\"Paint Timing API\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Paint Timing API | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Paint Timing API | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-28T17:09:54+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\\\",\\\"name\\\":\\\"Paint Timing API | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-28T17:09:50+00:00\\\",\\\"dateModified\\\":\\\"2020-01-28T17:09:54+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Improving Performance with the Paint Timing API\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/10/Paint-Timing-API.jpg\",\"sizes\":{\"medium\":{\"file\":\"Paint-Timing-API-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API-300x158.jpg\"},\"large\":{\"file\":\"Paint-Timing-API-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Paint-Timing-API-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API-150x150.jpg\"},\"medium_large\":{\"file\":\"Paint-Timing-API-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API-768x403.jpg\"},\"full\":{\"file\":\"Paint-Timing-API.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Paint-Timing-API.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22174\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a774cec9f810686-LHR"],["cf-request-id","037e6e67dc000006867508d200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:21:07 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d9dc3665d6665d3f03dff5204d197b8e81592842866; expires=Wed, 22-Jul-20 16:21:06 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}