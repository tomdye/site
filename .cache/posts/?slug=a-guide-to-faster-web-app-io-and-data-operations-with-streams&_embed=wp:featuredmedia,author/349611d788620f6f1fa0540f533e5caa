{"value":{"body":"[{\"id\":15390,\"date\":\"2017-10-02T12:31:22\",\"date_gmt\":\"2017-10-02T19:31:22\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15390\"},\"modified\":\"2020-01-28T09:13:18\",\"modified_gmt\":\"2020-01-28T17:13:18\",\"slug\":\"a-guide-to-faster-web-app-io-and-data-operations-with-streams\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/\",\"title\":{\"rendered\":\"A Guide to Faster Web App I/O and Data Operations with Streams\"},\"content\":{\"rendered\":\"<h2>Why should you care about streams?</h2>\\n<p>On the modern web platform, many interesting features appear which enable <strong>new</strong> functionality which were not previously possible, for example, <a href=\\\"https://webbluetoothcg.github.io/web-bluetooth/\\\">Web Bluetooth</a>, <a href=\\\"https://wicg.github.io/BackgroundSync/spec/\\\">Background Sync</a> &amp; <a href=\\\"https://w3c.github.io/webvr/spec/1.1/\\\">Web VR</a>. For new features in JavaScript specifically, many are just <a href=\\\"https://en.wikipedia.org/wiki/Syntactic_sugar\\\">syntactic sugar</a> for things you could already do in an alternative way, like template literals, arrow functions &amp; the spread operator. There is an important characteristic about those previous three examples: they benefit the developer (better productivity and code maintainability) more than the user. Contrast this with the <a href=\\\"https://streams.spec.whatwg.org/\\\">Streams Specification</a>: using streams changes the way you read, write &amp; process data. Depending on your use case, code complexity can increase.</p>\\n<p><!--more--></p>\\n<p>However, streams can enable efficient processing of data leading to better memory performance, which can benefit the user because:</p>\\n<ul>\\n<li>There is less memory being consumed, saving more resources for other applications</li>\\n<li>Improved battery life on portable devices</li>\\n<li>There is a faster/snappier experience when using the web application</li>\\n</ul>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/1-2.png\\\" alt=\\\"\\\" class=\\\"screenshot alignnone size-full wp-image-15433\\\" /></p>\\n<p>A note from the author: Never having studied computer science, I always thought concepts like streams and buffers were concepts I would never touch or experience directly when working on the web. Streams are now a living standard and the primitives already exist in some modern browsers. Not only are they necessary for me to learn, but in doing so, I can craft better experiences for my users.</p>\\n<h3>Node.js vs. the Streams Specification</h3>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/2.png\\\" alt=\\\"\\\" class=\\\"screenshot alignnone size-full wp-image-15434\\\" /></p>\\n<p>You might assume the streams we are referring to are the same as <a href=\\\"https://nodejs.org/api/stream.html\\\">streams in Node.js</a>. If you havenâ€™t worked with Node.js streams directly, you may know of them through certain build pipelines like Gulp, which heavily <a href=\\\"https://github.com/gulpjs/gulp/blob/c4d219e1a2318b9b4a3f921257818113cdd026dc/docs/writing-a-plugin/dealing-with-streams.md\\\">uses streams</a>. The version of streams we refer to in this article are an <a href=\\\"https://streams.spec.whatwg.org/\\\">official specification</a> from the WHATWG (Web Hypertext Application Technology Working Group).</p>\\n<p>While the Streams Specification and Node.js streams share similar concepts, there are some differences which are <a href=\\\"https://github.com/whatwg/streams/blob/master/FAQ.md#what-are-the-main-differences-between-these-streams-and-nodejs-streams\\\">documented in the Streams FAQ</a>.</p>\\n<h2>A brief overview of streams</h2>\\n<p>Streams enable you to consume pieces of data. Rather than loading all data into memory (RAM), you can read data piece by piece. This enables your web app to improve its memory usage, which can be noticeable on under-powered devices.</p>\\n<p>Streams are useful for representing underlying sources of I/O data, such as data from the network. Streams enable memory efficient software because when you are finished consuming a chunk, the garbage collector can clear that specific chunk from memory.</p>\\n<p>There are only two types of streams in the WHATWG specification, readables and writables. They have certain characteristics.</p>\\n<h3>Characteristics of streams</h3>\\n<div class=\\\"pull-right\\\">\\n<img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/streams-illustration-1.gif\\\" alt=\\\"Streams illustration\\\" class=\\\"alignnone size-full wp-image-15438\\\" /></p>\\n<p class=\\\"citation\\\">Source: <a href=\\\"https://jakearchibald.com/2016/streams-ftw/\\\">https://jakearchibald.com/2016/streams-ftw/</a></em></p>\\n</div>\\n<ul style=\\\"margin-top:20px\\\">\\n<li><strong>They can have the concept of a start and an end</strong></li>\\n<li><strong>They can be cancelled</strong> &#8211; To cancel a stream is to signal a loss of interest by readable stream reader using the <code>cancel()</code> method</li>\\n<li><strong>They can be piped</strong> &#8211; To <a href=\\\"https://en.wikipedia.org/wiki/Pipeline_%28Unix%29\\\">pipe</a> a stream is to transmit chunks from a readable stream into a writable stream</li>\\n<li><strong>They can be forked</strong> &#8211; To fork a stream is to obtain two new readable streams using the <code>tee()</code> method</li>\\n<li><strong>They store values internally for future consumption</strong></li>\\n<li><strong>A stream can only have a single reader, unless the stream is forked</strong></li>\\n</ul>\\n<h2>Use cases of streams</h2>\\n<p>The WHATWG Streams specification also covers this topic, but generally, streams are a suitable replacement for consuming one large buffer representing I/O data. Video is a practical example, instead of downloading a video over the network and processing that video as one large buffer, you can consume the video in chunks, applying video processing (like decoding or video effects) to each chunk sequentially.</p>\\n<p>As another example, consider you have a 100 KB text file to display to the user in a web page. If the file is downloaded via  background HTTP Request, your code might look like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst url = 'https://jsonplaceholder.typicode.com/photos';\\r\\nconst response = await fetch(url);\\r\\ndocument.body.innerHTML = await response.text();\\r\\n</pre>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/3.png\\\" alt=\\\"\\\" class=\\\"screenshot alignnone size-full wp-image-15435\\\" /></p>\\n<p>In the above screenshot, the network download is represented by a grey rectangular bar, it contains the text <strong>photos</strong>. Notice that rendering can only begin once the network download has completed in its entirety.</p>\\n<p>In the screenshot below, the network resource is downloaded but consumed incrementally using the Streams API, which the Fetch API makes use of through a <a href=\\\"https://www.chromestatus.com/feature/5804334163951616\\\">streaming response body</a>.</p>\\n<p><img loading=\\\"lazy\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/4.png\\\" alt=\\\"When the network does not block rendering\\\" width=\\\"930\\\" height=\\\"603\\\" class=\\\"screenshot alignnone size-full wp-image-15436\\\" /></p>\\n<p>In the above screenshot, notice that rendering begins even when the download is not complete. This benefits the user as they can start to consume information earlier than without streaming.</p>\\n<h2 id=\\\"readable-streams\\\">Readable Streams</h2>\\n<p>Data flows out of a readable stream. A readable stream can be consumed by a reader, of which there can only be one.</p>\\n<p>A readable stream includes the concept of an underlying source, the source of internal data. For an outside consumer to receive chunks from a stream, the chunks would originate from the underlying source as the underlying source is where chunks are enqueued.</p>\\n<p>To recap, when you enqueue a chunk of data, it remains in the underlying source. An outside consumer can consume these chunks.</p>\\n<p>If data is enqueued into a readable stream regardless of whether it is being consumed by a consumer, this is a push source. If data is only enqueued into a readable stream when a consumer requests data, this is a pull source.</p>\\n<p>To consume a readable stream, there is only a single concept you need to know about, and that is a reader. A reader can be obtained from a readable stream:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst reader = readableStream.getReader();\\r\\nreader.read();\\r\\n</pre>\\n<p>If you would like to try out a practical example of consuming a readable stream, here is one you can paste into the console panel of Chrome DevTools:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n(async () =&gt; {\\r\\nconst response = await fetch(location.href);\\r\\nconst reader = response.body.getReader();\\r\\nconst chunk1 = await reader.read();\\r\\nconsole.log(chunk1);\\r\\n})();\\r\\n</pre>\\n<p>The above code snippet does the following:</p>\\n<ol>\\n<li>Fetch the current page contents via the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\\\">Fetch API</a></li>\\n<li>Opens a reader of the response body (The response body is a readable stream)</li>\\n<li>Reads (or consumes) one chunk from the reader</li>\\n<li>Logs the chunk to the console</li>\\n</ol>\\n<p>If the response body is not a readable stream, a readable stream reader would not be able to consume data from the response body.</p>\\n<p><strong>Tip</strong>: As the response body is a readable stream, you can inspect response.body.constructor.prototype to log interesting methods &amp; properties of the readable stream class.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_5.png\\\" alt=\\\"Viewing the readable stream constructor\\\" class=\\\"screenshot alignnone size-full wp-image-15401\\\" /></p>\\n<p>Notice in the screenshot above, there is also a cancel method on the readable stream prototype. As you might guess, this cancels a stream which enables a powerful behaviour if you consider the ability to cancel a network request after consuming just a few chunks from it.</p>\\n<p>The <code>tee()</code> method (also see the <a href=\\\"https://en.wikipedia.org/wiki/Tee_%28command%29\\\">Tee command</a>) closes the stream and then creates two new streams. Memory efficiency is achievable when a stream can only be consumed once, this is why single-use stream readers are the default behaviour. You cannot access two readers from a single readable stream. You may also note there is a locked property on the readable stream class. This specifies whether or not an active reader exists.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst stream = new ReadableStream()\\r\\nconsole.log(stream.locked) // false\\r\\nconst reader = stream.getReader()\\r\\nconsole.log(stream.locked) // true\\r\\nreader.releaseLock()\\r\\nconsole.log(stream.locked) // false\\r\\n</pre>\\n<h3>Constructing a readable stream</h3>\\n<p>So far, we have primarily focused upon <strong>consuming</strong> an existing stream. For many use cases, that may be all you need. However, you can also construct a readable stream which can be consumed by readable stream readers.</p>\\n<p>To construct a readable stream, consider the following example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst stream = new ReadableStream({\\r\\n  start(controller) {\\r\\n    controller.enqueue(1);\\r\\n    controller.enqueue(2);\\r\\n    controller.enqueue(3);\\r\\n    controller.close();\\r\\n  }\\r\\n});\\r\\n</pre>\\n<p>Note: The readable stream constructor accepts an object, that object can have methods including <code>pull()</code> and <code>cancel()</code>, however for demonstrative purposes, only the <code>start()</code> method is shown.</p>\\n<p>As an exercise, now that you can create a readable stream, try to also consume it. </p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/5.png\\\" alt=\\\"Consuming a readable stream\\\" class=\\\"screenshot alignnone size-full wp-image-15437\\\" /></p>\\n<p>As for the reader itself, it contains a few other methods in addition to <code>read()</code>. These include:</p>\\n<ul>\\n<li><code>cancel()</code> &#8211; Cancels the stream to signal a loss of interest</li>\\n<li><code>releaseLock()</code> &#8211; Disconnects the active reader from the stream. This allows a new reader to be obtained from the readable stream</li>\\n</ul>\\n<p>Reminder: A readable stream reader is not identical to a readable stream. A readable stream represents a source of data and can be programmatically created. A readable stream reader is an object which is obtained from a readable stream, and can read chunks from the readable stream it was obtained from.</p>\\n<h2>The stream controller</h2>\\n<p>A readable stream controller contains methods which provide control over the internal queue of a readable stream. You can enqueue data into a readable stream through the <code>enqueue()</code> method part of the controller object.</p>\\n<p>You may recall, from the earlier code example of constructing your own readable stream, a controller argument is passed into the start method.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst stream = new ReadableStream({\\r\\n  start(controller) {\\r\\n    controller.enqueue(1);\\r\\n  },\\r\\n  pull(controller) {\\r\\n    controller.enqueue(2);\\r\\n    controller.close();\\r\\n  }\\r\\n});\\r\\n</pre>\\n<p>There are a few characteristics of the controller:</p>\\n<ul>\\n<li>The controller is also passed into the <code>pull()</code> method</li>\\n<li>The controller offers an interface to enqueue data, or close the stream</li>\\n<li>The controller exposes a few methods, two of which are: controller.<code>enqueue()</code> and controller.<code>close()</code></li>\\n<li>If an <strong>outside</strong> consumer continues to call reader.<code>read()</code> and the stream does not have enough queued data in the underlying source, your <code>pull()</code> method is invoked</li>\\n</ul>\\n<p>Inside a <code>pull()</code> method, your stream has the option to enqueue more data, close the stream, or do nothing. If you proactively enqueue data from within the <code>start()</code> method, your stream resembles a <strong>push source</strong>. You may wish to proactively enqueue data if youâ€™re certain it will all be read by a consumer.</p>\\n<p>If you only enqueue data into the stream when then <code>pull()</code> method is invoked, your stream resembles a <strong>pull source</strong>. Itâ€™s useful to enqueue data only as and when itâ€™s needed since the process of acquiring data can itself be computationally expensive or require large payloads to be downloaded over the network. Since a consumer is able to cancel a stream, or simply not read remaining chunks, enqueuing data chunks as and when itâ€™s needed is preferable to avoid potentially wasted bandwidth.</p>\\n<h2 id=\\\"writable-streams\\\">Writable Streams</h2>\\n<p>A writable stream represents a destination for data. When you write to a writable stream from a writable stream writer, data eventually ends up into the underlying sink. An underlying sink is an internal queue of data which a writable stream contains.</p>\\n<p>If chunks are written into a writable stream at a faster rate than which the stream can process, the chunks are queued up internally within the writable stream before they enter the underlying sink one by one. Chunks are unqueued based on the success of a previous write to the underlying sink. The stream implementation ensures a write operation to the underlying sink can only be called only after previous writes have succeeded.</p>\\n<p>Code which writes into a writable stream is known as a <strong>producer</strong> which offers several capabilities. A producer can abort a stream if it wishes to discard chunks of data not yet written to the underlying sink, often to conserve memory. A producer may also wish to abort a stream, putting the stream into an errored state that can be caught in application source code and used to update the user.</p>\\n<p>A producer can obtain a writer (via <code>getWriter()</code>) in the same way a consumer can obtain a reader via the <code>getReader()</code> method of a readable stream.</p>\\n<table>\\n<tbody>\\n<tr class=\\\"header\\\">\\n<th>Feature</th>\\n<th>Readable Stream</th>\\n<th>Writable Stream</th>\\n</tr>\\n<tr>\\n<td>Data transmission</td>\\n<td><code>getReader()</code></td>\\n<td><code>getWriter()</code></td>\\n</tr>\\n<tr>\\n<td>Data transmission name</td>\\n<td>Consumer</td>\\n<td>Producer</td>\\n</tr>\\n<tr>\\n<td>Internal store</td>\\n<td>Underlying source</td>\\n<td>Underlying sink</td>\\n</tr>\\n<tr>\\n<td>Method to signal a loss of interest</td>\\n<td><code>cancel()</code></td>\\n<td><code>close()</code></td>\\n</tr>\\n<tr>\\n<td>Piping</td>\\n<td>Is piped from</td>\\n<td>Is piped into</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>A writable stream can only have one writer at a time. You can call the locked property of the stream to discover if the stream is locked. To release the writerâ€™s lock on the writable stream, simply call: <code>writer.releaseLock()</code>.</p>\\n<h2 id=\\\"piping\\\">Piping</h2>\\n<p>A readable stream can be piped into a writable stream. Piping enables you to pipe inputs into outputs, and transform chunks along the way. Piping is useful when you wish to consume a single source of data, and pipe chunks of the data into various transformations, in order to reach a single output.</p>\\n<p>As a practical example, imagine downloading a large encoded video file over the network. Rather than waiting for the entire video to download so you can decode &amp; play the video, you can pipe chunks of the video into a video decoder stream. Each time a new chunk is downloaded, it is decoded, and then played to the user.</p>\\n<p>In the code example below, the following steps occur:</p>\\n<ol>\\n<li>A new readable stream is created</li>\\n<li>The readable stream is initialised with three chunks of data</li>\\n<li>A new writable stream is created</li>\\n<li>The writable stream is piped into the readable stream</li>\\n<li>The result of the piping operation returns a promise. This is waited upon before code execution continues</li>\\n</ol>\\n<p>You can find this <a href=\\\"https://github.com/SitePen/javascript-streams-blog-examples/blob/4d471bb53e4eecaec8c052c12414b107ee73aff9/piping/main.js\\\">example on GitHub</a>.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst readableStream = new ReadableStream({\\r\\n  start(controller) {\\r\\n    controller.enqueue(1);\\r\\n    controller.enqueue(2);\\r\\n    controller.enqueue(3);\\r\\n    controller.close();\\r\\n  }\\r\\n});\\r\\n\\r\\nconst writableStream = new WritableStream();\\r\\n\\r\\n// This examples pipes the data from a readable stream, into a writable stream.\\r\\nawait readableStream.pipeTo(writableStream);\\r\\nconsole.log('Piping has finished');\\r\\n</pre>\\n<h2 id=\\\"backpressure\\\">Backpressure</h2>\\n<p>When you pipe a readable stream into a writable stream, you form a pipe chain. The speed at which data flows from one stream into another stream can be too fast for chunks to be processed by the receiving end of a chain. Streams offer a powerful feature known as backpressure. Backpressure is the process of sending a stop signal backwards through a pipe chain, it is based on the internal queues of a writable or readable stream. Backpressure is covered in greater detail in the <a href=\\\"https://streams.spec.whatwg.org/#pipe-chains\\\">Streams specification</a>.</p>\\n<p>As a brief example, observe the following code:</p>\\n<p>You can find this <a href=\\\"https://github.com/SitePen/javascript-streams-blog-examples/blob/4d471bb53e4eecaec8c052c12414b107ee73aff9/backpressure/main.js\\\">example on GitHub</a>.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst countStrategy = new CountQueuingStrategy({\\r\\n  highWaterMark: 2\\r\\n});\\r\\n\\r\\nconst writableStream = new WritableStream({}, countStrategy);\\r\\n\\r\\nconst writer = writableStream.getWriter();\\r\\n\\r\\nconsole.log(writer.desiredSize); // 2\\r\\nwriter.write('1');\\r\\nconsole.log(writer.desiredSize); // 1\\r\\nwriter.write('1');\\r\\nconsole.log(writer.desiredSize); // 0\\r\\nawait writer.write('1'); // Notice the await keyword\\r\\nconsole.log(writer.desiredSize); // 2\\r\\n</pre>\\n<p>The writable stream is created with a â€˜high water markâ€™. This mark is compared against the <strong>total size of all chunks in the internal queue,</strong> and is then used to determine the desired size.</p>\\n<p>There are a few points of interest to discuss here, based on the code above:</p>\\n<ol>\\n<li>An instance of a <a href=\\\"https://streams.spec.whatwg.org/#cqs-class\\\">Count Queuing Strategy</a> is created. This instance defines a <a href=\\\"https://streams.spec.whatwg.org/#high-water-mark\\\">high water mark</a> which specifies the maximum total size of all chunks in a queue</li>\\n<li>A writable stream instance is created. During creation, the count queuing strategy created in step #1 is applied to the writable stream</li>\\n<li>A writer is obtained from the writable stream</li>\\n<li>The code then demonstrates how a producer (the writer created in step #3) can observe the desired size </li>\\n<li>Writes to a writable stream writer return a promise. This can be used with <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\\\">async/await</a>. The code example demonstrates awaiting for a write to complete successfully</li>\\n<li>The desired size of the stream increases after step #5. Contrast this with previous write examples in the code snippet where write calls are rapidly invoked without awaiting for their result</li>\\n</ol>\\n<h2 id=\\\"code-examples\\\">Code examples</h2>\\n<h3>Constructing a readable stream and consuming it</h3>\\n<p>This example demonstrates creating a readable stream and initialising it with three chunks. The consumer (the readable stream reader) is able to consume chunks of data one by one. Notice the pull method enqueues more data. The benefit this approach serves is that the consumer is able request data at a suitable time, compared to the approach of receiving all data at once, and it being left to the consumer to split data into manageable chunks.</p>\\n<p>You can find this <a href=\\\"https://github.com/SitePen/javascript-streams-blog-examples/blob/4d471bb53e4eecaec8c052c12414b107ee73aff9/readable-basic/main.js\\\">example on Github</a>.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst stream = new ReadableStream({\\r\\n  start(controller) {\\r\\n    controller.enqueue(1);\\r\\n    controller.enqueue(2);\\r\\n    controller.enqueue(3);\\r\\n  },\\r\\n\\r\\n  pull(controller) {\\r\\n    console.log('Data was pulled from me!', controller);\\r\\n\\r\\n    controller.enqueue(4);\\r\\n    controller.enqueue(5);\\r\\n    controller.enqueue(6);\\r\\n    controller.close();\\r\\n  },\\r\\n\\r\\n  cancel(reason) {\\r\\n    console.log('Stream was cancelled because: ', reason);\\r\\n  }\\r\\n});\\r\\n\\r\\nconst reader = stream.getReader();\\r\\n\\r\\nconsole.log(await reader.read());\\r\\nconsole.log(await reader.read());\\r\\nconsole.log(await reader.read());\\r\\nconsole.log(await reader.read());\\r\\nconsole.log(await reader.read());\\r\\nconsole.log(await reader.read());\\r\\nconsole.log(await reader.read());\\r\\n</pre>\\n<h3>Streaming with the Fetch API</h3>\\n<p>This example executes a network fetch to a text file. Progress updates are displayed on each chunk which is downloaded. In this particular example, progress updates are added to the page per chunk download, however as an exercise, you can modify this example to write the textual representation of the chunk to the page.</p>\\n<p>The benefit received from displaying progress updates on the page on each chunk download can include:</p>\\n<ul>\\n<li>Expectations are managed as the end-user is aware of progress, and estimated time remaining</li>\\n<li>Perceived performance is increased as updates are streamed incrementally to the page, therefore the user is able to consume information at a quicker point in time</li>\\n</ul>\\n<p>You can find this <a href=\\\"https://github.com/SitePen/javascript-streams-blog-examples/blob/4d471bb53e4eecaec8c052c12414b107ee73aff9/streaming-fetch/main.js\\\">example on Github</a>.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst url = 'file.txt';\\r\\nconst response = await fetch(url);\\r\\nconst reader = response.body.getReader();\\r\\nconst contentLengthHeader = response.headers.get('Content-Length');\\r\\nconst resourceSize = parseInt(contentLengthHeader, 10);\\r\\n\\r\\nasync function read(reader, totalChunkSize = 0, chunkCount = 0) {\\r\\n  const {value: {length} = {}, done} = await reader.read();\\r\\n\\r\\n  if (done) {\\r\\n    return chunkCount;\\r\\n  }\\r\\n\\r\\n  const runningTotal = totalChunkSize + length;\\r\\n  const percentComplete = Math.round((runningTotal / resourceSize) * 100);\\r\\n\\r\\n  const progress = `${percentComplete}% (chunk ${chunkCount})`;\\r\\n\\r\\n  console.log(progress);\\r\\n  document.body.innerHTML += progress + '&lt;br /&gt;';\\r\\n\\r\\n  return read(reader, runningTotal, chunkCount + 1);\\r\\n}\\r\\n\\r\\nconst chunkCount = await read(reader);\\r\\nconsole.log(`Finished! Received ${chunkCount} chunks.`);\\r\\n</pre>\\n<h2 id=\\\"code-observations\\\">Code observations</h2>\\n<p>In this section, we mention four existing implementations of streams through an exploratory perspective.</p>\\n<ul>\\n<li>WHATWG reference implementation</li>\\n<li>Dojo 2 streams implementation in TypeScript</li>\\n<li>Chrome &amp; Opera implementation of streams</li>\\n<li>Safari implementation of streams</li>\\n</ul>\\n<p>When learning about modern web platform features or JavaScript APIs, itâ€™s common to use tutorials and live demos as reference material. A lesser known technique of grasping a new topic is to scan through existing implementations:</p>\\n<p>With the Streams API, there are several open source implementations, as well as preliminary native browser implementations.</p>\\n<h3>WHATWG Reference Implementation</h3>\\n<p>Link: <a href=\\\"https://github.com/whatwg/streams/tree/master/reference-implementation\\\">https://github.com/whatwg/streams/tree/master/reference-implementation</a></p>\\n<p>To cherry pick just one example, take a look at <a href=\\\"https://github.com/whatwg/streams/blob/9a5cdd38dfc0d5a91dabde2628415da9c5ec5060/reference-implementation/lib/readable-stream.js\\\">readable-stream.js</a>. It contains an implementation of a Readable Stream. It defines a <a href=\\\"https://github.com/whatwg/streams/blob/9a5cdd38dfc0d5a91dabde2628415da9c5ec5060/reference-implementation/lib/readable-stream.js#L67\\\"><code>getReader()</code></a> method on the class which we discussed earlier. Within the reference implementation, there are other files of interest:</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/image_7.png\\\" alt=\\\"WHATWG Streams reference implementation\\\" class=\\\"screenshot alignnone size-full wp-image-15403\\\" /></p>\\n<p>The W3C <a href=\\\"https://github.com/w3c/web-platform-tests\\\">Web Platform tests</a> contains a <a href=\\\"https://github.com/w3c/web-platform-tests/tree/57536a77e554f65bbc1173d3e84dbcfb3984e995/streams\\\">rich suite of tests</a> for conformance with the streams specification</p>\\n<h3>Dojo 2 Streams Implementation in TypeScript</h3>\\n<p>Link: <a href=\\\"https://github.com/dojo/streams\\\">https://github.com/dojo/streams</a></p>\\n<div class=\\\"pull-right\\\">\\n<img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/typescript-dojo-streams.gif\\\" alt=\\\"TypeScript Dojo Streams\\\" class=\\\"screenshot alignnone size-full wp-image-15404\\\" />\\n</div>\\n<p>There is an implementation for the Streams API written in TypeScript which is available as a Dojo 2 package. The codebase is well documented and well tested. As itâ€™s using TypeScript, it can also be helpful to read through the <a href=\\\"https://github.com/dojo/streams/blob/dc00cfec86d63e0b20f155682e633e46cc80aade/src/ReadableStream.ts#L36-L75\\\">Interfaces</a> to understand the public API for a particular class. TypeScript also offers code editor enhancements, which when combined with a new API, can make writing code a smoother process.</p>\\n<p>There is also an <a href=\\\"https://github.com/dojo/streams/blob/440c0daeda848b0867ae97f0ff3bcc90e6559b05/src/TransformStream.ts\\\">implementation of a Transform Stream</a> which is part of the Streams API <a href=\\\"https://streams.spec.whatwg.org/#ts-model\\\">specification</a>, however it is not yet implemented in modern browsers due to <a href=\\\"https://github.com/whatwg/streams/labels/transform%20streams\\\">in-progress specification work</a>.</p>\\n<p>In the file <a href=\\\"https://github.com/dojo/streams/blob/0536f342b26f5094a31efbb2e107093a19764f9a/src/ReadableStream.ts#L288\\\">src/ReadableStream.ts</a>, you can take note of the usual getReader method. You can also observe the unit test which ensures a stream is in a <a href=\\\"https://github.com/dojo/streams/blob/440c0daeda848b0867ae97f0ff3bcc90e6559b05/tests/unit/ReadableStream.ts#L384\\\">locked state when a reader is active</a>.</p>\\n<p>Note: The WHATWG Streams Specification goes through frequent changes, so third party reference implementations can spend a lot of time just to keep up. The Dojo team are <a href=\\\"https://github.com/dojo/streams/issues/2\\\">exploring updating Dojo/streams</a> to match the latest version of the Streams API.</p>\\n<h3>Chrome &amp; Opera implementation of streams</h3>\\n<p><strong><a href=\\\"https://en.wikipedia.org/wiki/Blink_%28web_engine%29\\\">(Blink engine)</a></strong></p>\\n<p>Link: <a href=\\\"https://github.com/nwjs/chromium.src/tree/nw25/third_party/WebKit/Source/core/streams\\\">https://github.com/nwjs/chromium.src/tree/nw25/third_party/WebKit/Source/core/streams</a></p>\\n<p>Under the hood, large parts of browser internals are written in the C++ language, however increasingly, more modern web platform features are being developed, partially, in JavaScript.</p>\\n<p>Here is the <a href=\\\"https://github.com/nwjs/chromium.src/blob/0b63552f611b573b34a25b16834a92316faaafae/third_party/WebKit/Source/core/streams/ReadableStream.js#L183\\\"><code>getReader()</code></a><a href=\\\"https://github.com/nwjs/chromium.src/blob/0b63552f611b573b34a25b16834a92316faaafae/third_party/WebKit/Source/core/streams/ReadableStream.js#L183\\\"> method</a> on the readable stream class.</p>\\n<h3>Safari implementation of streams</h3>\\n<p><strong><a href=\\\"https://en.wikipedia.org/wiki/WebKit\\\">(WebKit engine)</a></strong></p>\\n<p>Link: <a href=\\\"https://github.com/WebKit/webkit/blob/master/Source/WebCore/Modules/streams\\\">https://github.com/WebKit/webkit/blob/master/Source/WebCore/Modules/streams</a></p>\\n<p>The WebKit implementation includes interface files which gives a convenient hint as to what API a class exposes, for example, hereâ€™s the <a href=\\\"https://github.com/WebKit/webkit/blob/a163804725afd77cbfda4b5974123a3355680e0c/Source/WebCore/Modules/streams/ReadableStream.idl#L38-L44\\\">interface for a readable stream</a>.</p>\\n<p>Here is the <a href=\\\"https://github.com/WebKit/webkit/blob/a163804725afd77cbfda4b5974123a3355680e0c/Source/WebCore/Modules/streams/ReadableStream.js#L86\\\"><code>getReader()</code></a><a href=\\\"https://github.com/WebKit/webkit/blob/a163804725afd77cbfda4b5974123a3355680e0c/Source/WebCore/Modules/streams/ReadableStream.js#L86\\\"> method</a> on a readable stream class.</p>\\n<p>While on the subject of code implementations of JavaScript streams, itâ€™s worth a mention that Node.js readable streams exist here: <a href=\\\"https://github.com/nodejs/readable-stream\\\">https://github.com/nodejs/readable-stream</a>.</p>\\n<h2 id=\\\"observables\\\">Observables</h2>\\n<p>Observables share similar concepts to streams. For example, they also have the concept of consuming chunks over time. Dojo 2 Core includes an <a href=\\\"https://github.com/dojo/shim/blob/61a30db18a1d9c4accaaae71aaf703bed660314f/docs/Observable.md\\\">implementation of observables</a>. Notice the similarity to the Fetch API + Streams that observables demonstrate:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst response = await request('file.txt');\\r\\n\\r\\nresponse.data.subscribe(chunk =&gt; {\\r\\n  // do something with chunk\\r\\n});\\r\\n</pre>\\n<p>Note: The above code example uses <a href=\\\"https://github.com/dojo/core/blob/a51adb2aca86aefd7f9c7dd8b4ddd0b3b0824eac/docs/request.md#receiving-raw-data\\\">Dojo 2 core</a>.</p>\\n<p>From the same Dojo 2 core repository, notice the observables tests which provide an excellent resource to acquaint yourself with the proposed ES.Next Observables API. For example, this <a href=\\\"https://github.com/dojo/core/blob/1d661a2ddff6b00380077563547d656df3ad83e7/tests/unit/Observable.ts#L334-L350\\\">observable concatenation test</a> demonstrates how to:</p>\\n<ul>\\n<li>Merge observables</li>\\n<li>Subscribe to a sequence of values from a collection</li>\\n</ul>\\n<p>The Dojo implementation of observables are offered as a shim within <a href=\\\"https://github.com/dojo/shim/blob/master/src/Observable.ts\\\">dojo/shim</a>, and offers an interface which can be studied.</p>\\n<p>The Streams FAQ has a section on <a href=\\\"https://github.com/whatwg/streams/blob/master/FAQ.md#how-do-readable-streams-relate-to-observables-or-eventtarget\\\">how streams relate to observables</a>. One point to note as mentioned in the spec: observables do not include the concept of backpressure and are consequently not the best choice for I/O, such as writing to disk, or reading from the network. </p>\\n<h2 id=\\\"further-reading\\\">Further Reading</h2>\\n<p>There is substantial existing material available about streams. Hereâ€™s a collection of resources including code examples, blogs, guides, API documentation &amp; browser implementations.</p>\\n<ul>\\n<li>Practical examples of using <a href=\\\"https://github.com/pguth/node-streams\\\">Node.js streams</a></li>\\n<li>Chrome Status\\n<ul>\\n<li><a href=\\\"https://www.chromestatus.com/features/6605041225957376\\\">Streams API</a></li>\\n<li><a href=\\\"https://www.chromestatus.com/features/6067348976959488\\\">Streams API: Piping</a></li>\\n<li><a href=\\\"https://www.chromestatus.com/features/5928498656968704\\\">Streams API: Writable Stream</a></li>\\n</ul>\\n</li>\\n<li>MDN Documentation\\n<ul>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\\\">Using Readable Streams</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/WritableStream\\\">Using writable Streams</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://github.com/w3c/web-platform-tests/tree/master/streams\\\">Web Platform Tests for Streams</a></li>\\n<li><a href=\\\"https://github.com/whatwg/streams/tree/master/reference-implementation\\\">Reference Implementation (transcription of the spec into JavaScript) </a></li>\\n<li><a href=\\\"https://github.com/whatwg/streams/blob/master/FAQ.md\\\">Frequently Asked Questions</a> on Streams</li>\\n<li>An implementation of <a href=\\\"https://github.com/dojo/streams\\\">Streams in TypeScript</a></li>\\n<li>The <a href=\\\"https://fetch.spec.whatwg.org/#streams\\\">Fetch API specification</a> in relation to Streams</li>\\n<li>The Chrome &amp; Opera (Blink) <a href=\\\"https://github.com/nwjs/chromium.src/tree/nw25/third_party/WebKit/Source/core/streams\\\">implementation</a></li>\\n<li>Safari (WebKit) <a href=\\\"https://github.com/WebKit/webkit/blob/master/Source/WebCore/Modules/streams\\\">implementation</a></li>\\n<li>Fetch API + <a href=\\\"https://domenic.github.io/streams-demo/\\\">Streams Live Demo</a></li>\\n<li>Microsoft Developer Network <a href=\\\"https://docs.microsoft.com/en-us/microsoft-edge/dev-guide/performance/streams-API\\\">document on Streams </a></li>\\n<li><a href=\\\"https://msdn.microsoft.com/library/mt709019\\\">Edge Support</a> for Streams</li>\\n<li>2016 &#8211; <a href=\\\"https://jakearchibald.com/2016/streams-ftw/\\\">the year of web streams</a></li>\\n</ul>\\n<h2 id=\\\"conclusion\\\">Conclusion</h2>\\n<p>JavaScript streams provide a powerful and flexible way to manage large sources of data in a memory efficient way. You can already experiment with JavaScript streams in Chrome, Edge, Opera &amp; Safari. Once you are comfortable with consuming an existing stream (reminder: the Fetch API response body offers a readable stream), you can create your own streams from scratch.</p>\\n</p>\\n<hr />\\n<h2>Next steps</h2>\\n<div>\\n<a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 2px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Do you need help creating your next data-centric app? Are you struggling to find the right architecture to efficiently process large data sets in real-time? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help!</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Get help from <a href=\\\"https://www.sitepen.com/services/\\\">SitePen On-Demand Development</a>, our fast and efficient solutions to JavaScript development problems of any size.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Why should you care about streams? On the modern web platform, many interesting features appear which enable new functionality which were not previously possible, for example, Web Bluetooth, Background Sync &amp; Web VR. For new features in JavaScript specifically, many are just syntactic sugar for things you could already do in an alternative way, like [&hellip;]</p>\\n\",\"protected\":false},\"author\":83,\"featured_media\":22178,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[3,28,333],\"tags\":[383,14,263,455],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>A Guide to Faster Web App I/O and Data Operations with Streams | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Why should you care about streams?  On the modern web platform, many interesting features appear which enable new functionality which were not previously possible, for example, Web Bluetooth, Background Sync &amp; Web VR. For new features in JavaScript specifically, many are just syntactic sugar for things you could alrea\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"A Guide to Faster Web App I/O and Data Operations with Streams | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Why should you care about streams?  On the modern web platform, many interesting features appear which enable new functionality which were not previously possible, for example, Web Bluetooth, Background Sync &amp; Web VR. For new features in JavaScript specifically, many are just syntactic sugar for things you could alrea\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-10-02T19:31:22+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-28T17:13:18+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Guide to Faster Web App I/O\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/\\\",\\\"name\\\":\\\"A Guide to Faster Web App I/O and Data Operations with Streams | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-10-02T19:31:22+00:00\\\",\\\"dateModified\\\":\\\"2020-01-28T17:13:18+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\"},\\\"description\\\":\\\"Why should you care about streams? On the modern web platform, many interesting features appear which enable new functionality which were not previously possible, for example, Web Bluetooth, Background Sync &amp; Web VR. For new features in JavaScript specifically, many are just syntactic sugar for things you could alrea\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\"}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15390\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15390\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15390/revisions\"}],\"predecessor-version\":[{\"id\":22179,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15390/revisions/22179\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22178\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15390\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15390\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15390\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=15390\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":83,\"name\":\"Umar Hansa\",\"url\":\"https://umaar.com/\",\"description\":\"Front-end web developer in London!\",\"link\":\"https://wp.sitepen.com/blog/author/uhansa/\",\"slug\":\"uhansa\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Umar Hansa, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Umar Hansa, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/uhansa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/uhansa/\\\",\\\"name\\\":\\\"Umar Hansa, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\",\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22178,\"date\":\"2020-01-28T09:13:05\",\"slug\":\"faster-web-app\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/a-guide-to-faster-web-app-io-and-data-operations-with-streams/faster-web-app/\",\"title\":{\"rendered\":\"Faster Web App\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Faster Web App | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Faster Web App | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-28T17:13:10+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\\\",\\\"name\\\":\\\"Faster Web App | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-28T17:13:05+00:00\\\",\\\"dateModified\\\":\\\"2020-01-28T17:13:10+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Guide to Faster Web App I/O\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/10/Faster-Web-App.jpg\",\"sizes\":{\"medium\":{\"file\":\"Faster-Web-App-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App-300x158.jpg\"},\"large\":{\"file\":\"Faster-Web-App-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Faster-Web-App-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App-150x150.jpg\"},\"medium_large\":{\"file\":\"Faster-Web-App-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App-768x403.jpg\"},\"full\":{\"file\":\"Faster-Web-App.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/Faster-Web-App.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22178\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:16:06 GMT"],["expires","Thu, 24 Sep 2020 13:16:06 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}