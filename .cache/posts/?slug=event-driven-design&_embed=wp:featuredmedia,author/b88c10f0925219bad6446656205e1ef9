{"value":{"body":"[{\"id\":653,\"date\":\"2009-03-03T01:04:01\",\"date_gmt\":\"2009-03-03T08:04:01\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2009/03/03/event-driven-design/\"},\"modified\":\"2020-06-29T08:24:07\",\"modified_gmt\":\"2020-06-29T15:24:07\",\"slug\":\"event-driven-design\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/event-driven-design/\",\"title\":{\"rendered\":\"Simplifying Maintenance With Event Driven Design\"},\"content\":{\"rendered\":\"<p>Dojo is big, but it&#8217;s not unwieldy. You don&#8217;t have to learn it all to be productive. There are probably large pieces of the toolkit that you&#8217;ll never even need, but Dojo is built so that if you don&#8217;t need something, it doesn&#8217;t weigh you down. Where it counts, Dojo is actually quite lean. In the most basic unit of the toolkit&mdash;<code>dojo.js</code> itself&mdash;you&#8217;ll find enough power to get real work done. It&#8217;s worth looking at what you buy when you spend 26KB (gzipped) on JavaScript code rather than a pretty PNG. I think you&#8217;ll like what you find.</p>\\n<p>Let&#8217;s start with event handling. I&#8217;ll cover the basic techniques first, then finish with a real-world implementation of the concept by looking at <a href=\\\"/labs/queued/\\\">Queued</a>, our AIR-based Netflix queue manager.</p>\\n<p><!--more--></p>\\n<p>One of the main reasons people start using JavaScript on a web page is to react to events so you can run validation code or change something on the page without needing to load an entirely new page from the server. This is so common now that having JavaScript in place handling page behavior is considered a basic beginner-level piece of web development. Dojo&#8217;s not just for experts; even at this stage of development, the toolkit helps make common tasks easier.</p>\\n<h2>Enter dojo.connect</h2>\\n<p><code>dojo.connect</code> is a workhorse. It allows you to arbitrarily run any function when some event occurs. This makes it trivial to set up code to react to clicks, keypresses, etc.:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.connect(dojo.byId(&quot;someDiv&quot;), &quot;onclick&quot;, function(){\\r\\n    console.log(&quot;You clicked someDiv!&quot;);\\r\\n});\\r\\n</pre>\\n<p>It&#8217;s very simple. Why not just do <code>dojo.byId(\\\"someDiv\\\").onclick = function(){...}</code>? For a couple of reasons. First, what if you already had useful code in the click handler for the <code>#someDiv</code> node? It&#8217;d be clobbered. With <code>dojo.connect</code>, you can do the following, and the Right Thing happens:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.connect(dojo.byId(&quot;someDiv&quot;), &quot;onclick&quot;, function(){\\r\\n    console.log(&quot;You clicked someDiv!&quot;);\\r\\n});\\r\\n\\r\\ndojo.connect(dojo.byId(&quot;someDiv&quot;), &quot;onclick&quot;, function(){\\r\\n    console.log(&quot;Some other code is running!&quot;);\\r\\n});\\r\\n</pre>\\n<p>The second reason to get in the habit of using <code>dojo.connect</code> is because it handles more than just DOM events&mdash;it can connect arbitrary functions together. This is awesome. Thus, Dojo gives you a common API for telling the browser, &#8220;when event <em>A</em> happens, run code <em>B</em>.&#8221; Here&#8217;s a simple example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction innocentMethod(){\\r\\n    console.log(&quot;I'm minding my own business.&quot;);\\r\\n}\\r\\n\\r\\ndojo.connect(&quot;innocentMethod&quot;, function(){\\r\\n    console.log(&quot;An interloper!&quot;);\\r\\n}\\r\\n\\r\\ninnocentMethod(); // prints both messages to the console\\r\\n</pre>\\n<p>If you&#8217;re the kind of person who loves design patterns, think of it as Dojo turning the original function into an Observer. You can call <code>dojo.connect</code> over and over again to connect any number of functions to something, and it handles all of the tedious tracking itself rather than bothering you with it. When you&#8217;re done with the relationship, you call <code>dojo.disconnect</code> to end it (see the <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/1.2/dojo.connect\\\">API documentation</a> for details).</p>\\n<h2>Event Driven Design</h2>\\n<p>The more you use <code>dojo.connect</code>, the less it will be to simply handle DOM events, and the more it will be to conveniently synchronize code. But really, is there any difference between a DOM event firing and something calling an ordinary function? No. It&#8217;s just a block of code executing. When you look at things that way (and facilitated by the fact that you make the same <code>dojo.connect</code> call in every circumstance), it becomes very simple to lay out larger packages of code so they follow the same event driven pattern of execution as the DOM. That&#8217;s pretty convenient, because it makes for systems that are very easy to maintain. For example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar obj = {\\r\\n    doSomething: function(arrayOfMessages){\\r\\n        var message;\\r\\n        for (var i=0; i&lt;arrayOfMessages; i++) {\\r\\n            message = arrayOfMessages[i] || &quot;Doing something&quot;;\\r\\n            console.log(message);\\r\\n        }\\r\\n    }\\r\\n};\\r\\n\\r\\nobj.doSomething([&quot;foo&quot;, &quot;bar&quot;]); // prints both strings to the console\\r\\n</pre>\\n<p>What happens if you want to run some other code at various points in this &#8220;algorithm&#8221; (using the term loosely)? There&#8217;s only one place you can connect to, and if you <code>dojo.connect(obj, \\\"doSomething\\\", function(){...})</code>, it&#8217;ll just run when <code>obj.doSomething</code> is done. Obviously, adding code to this loop would be trivially easy, but what if the algorithm was more complicated, and what if it was in a library used by a lot of other code? Sometimes you just can&#8217;t risk breaking other stuff.</p>\\n<p>This is where event driven design comes in. The concept is laughably simple: create a stub function for any point where you want somebody to be able to connect, and call it. Even if the function is empty&mdash;actually, <em>especially</em> if the function is empty:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar obj = {\\r\\n    onStart: function(){},\\r\\n    onItem: function(){},\\r\\n    onEnd: function(){},\\r\\n\\r\\n    doSomething: function(arrayOfMessages){\\r\\n        var message;\\r\\n        this.onStart();\\r\\n        for(var i=0; i&lt;arrayOfMessages; i++){\\r\\n            message = arrayOfMessages[i] || &quot;Doing something&quot;;\\r\\n            this.onItem(message);\\r\\n            console.log(message);\\r\\n        }\\r\\n        this.onEnd();\\r\\n    }\\r\\n};\\r\\n\\r\\nobj.doSomething([&quot;foo&quot;, &quot;bar&quot;]); // still prints both strings to the console\\r\\n\\r\\n// this will get called each time through the loop in obj.doSomething()\\r\\ndojo.connect(obj, &quot;onItem&quot;, function(msg){\\r\\n    console.log(&quot;Processing item: &quot;, msg);\\r\\n});\\r\\n</pre>\\n<p>All we&#8217;ve done is create a few empty functions and call them in strategic places, but this opens up some new doors; now you can connect to the <code>onStart</code>, <code>onItem</code>, or <code>onEnd</code> methods and run anything you need without getting in the way of the original code (insofar as the stubs were added). This pattern promotes loose coupling of components, which is a well-known way to make even large systems maintainable.</p>\\n<h2>How About Some Real-World Code?</h2>\\n<p>In the interests of teaching the basic concept from scratch, I&#8217;ve deliberately kept the example code trivial. Here&#8217;s a situation where I recently imposed a little bit of event driven design in a real project.</p>\\n<p>I&#8217;ve been using <a href=\\\"http://dojocampus.org/content/2008/03/26/cleaning-your-markup-with-dojobehavior/\\\"><code>dojo.behavior</code></a> quite a bit lately. As I mentioned in the <a href=\\\"/blog/queued/\\\">post introducing Queued</a>, we used it for most if not all of the DOM behavior handlers in that app. Depending on how you construct behaviors, <code>dojo.behavior</code> uses either <code>dojo.connect</code> or <code>dojo.publish</code> as the mechanism for hooking up the actual functions you define (the way we used it in Queued, it&#8217;s all <code>dojo.connect</code>).</p>\\n<p>Near the end of the push to Queued 1.0, I ran into a situation where I needed one piece of code to listen for an action happening somewhere else, then react to that. Specifically, in search results, if you click a movie&#8217;s title or box art to open the More Info dialog, then click the &#8220;Add&#8221; button to add the movie to your DVD queue, the dialog would close, but the &#8220;Add&#8221; button that appears directly in the search results wouldn&#8217;t update to match the new state (you can see it in the screencast; I add The Office from the dialog, and the &#8220;Add&#8221; button in the search results list doesn&#8217;t change to &#8220;In Q&#8221; like it should). I had code like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// create this as an object so we can use it on multiple selectors below\\r\\nvar movieDialogAddHandler = {\\r\\n    onclick: function(evt){\\r\\n        // code to add the movie to the queue, redacted\\r\\n    }\\r\\n}\\r\\n\\r\\n// wire up the DOM behaviors\\r\\ndojo.behavior.add({\\r\\n    // various handlers, redacted; then:\\r\\n    &quot;#movieInfoTemplateNode .movie span.addButton&quot;: movieDialogAddHandler\\r\\n});\\r\\n</pre>\\n<h2>Using an Event Stub</h2>\\n<p>You might expect to be able to simply do <code>dojo.connect(movieDialogAddHandler, \\\"onclick\\\", function(){...})</code>, but that didn&#8217;t work; my function wasn&#8217;t being called. Ever. The reason was because <code>dojo.connect</code> actually replaces the connected function with a custom function that calls the original one followed by the listeners. So by the time my connection was made, the original function didn&#8217;t exist at the right spot.</p>\\n<p>I had a few options:</p>\\n<ul>\\n<li>Add a state variable to the current scope to indicate whether or not the click that invoked the More Info dialog came from the search results list (the dialog can be invoked from all over the app), and add a few lines to the original function to re-process the results list after any Add operations that happen in that case. Quick and dirty, but also ugly. Queued is supposed to be an example of good code design.</li>\\n<li>Rewrite the code such that I was able to address the function in question by name. I didn&#8217;t like this option because we were so close to release (I <em>had</em> already recorded the screencast, after all) and I wasn&#8217;t too keen on adding to our testers&#8217; load. And from a technical standpoint, I wasn&#8217;t particularly happy with the nested <code>if</code> chain that it would take to get the connected function to do its stuff only under the right circumstances (similar to the state variable in the first choice).</li>\\n<li>Insert an event stub and connect to that. Simple. I could make the connection <em>only</em> when the dialog was invoked from the search results list, and we could avoid tracking the extra state.</li>\\n</ul>\\n<p>So now we come down to it. I was able to add an empty function whose reason for existence is expressly to facilitate wiring up code. In the end, the new code was dead simple to add and didn&#8217;t require a whole new round of testing. Roughly, it went like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction onTitleAddedFromDialog(){} // empty stub, connect to me\\r\\n\\r\\n// create this as an object so we can use it on multiple selectors below\\r\\nvar movieDialogAddHandler = {\\r\\n    onclick: function(evt){\\r\\n        // code to add the movie to the queue, redacted; then:\\r\\n        onTitleAddedFromDialog();\\r\\n    }\\r\\n}\\r\\n\\r\\n// wire up the DOM behaviors\\r\\ndojo.behavior.add({...}); // same as what we saw earlier\\r\\n\\r\\n// connect to the stub\\r\\nvar __h = dojo.connect(&quot;onTitleAddedFromDialog&quot;, function(){\\r\\n    dojo.disconnect(__h);\\r\\n    //\\r\\n    // modify the button state here\\r\\n    //\\r\\n});\\r\\n</pre>\\n<p>So I added the stub and the connected function at the same time, but if I had been smarter up front, the stub would already have been there, and all I would&#8217;ve had to do was create the connection. The actual code is a touch more complicated because of the specifics of the app; if you&#8217;d like to read it, it&#8217;s in the Queued repository on Google Code, at the bottom of <a href=\\\"http://code.google.com/p/queued/source/browse/trunk/src/js/dev/qd/app/movies.js\\\">/js/dev/qd/app/movies.js</a>.</p>\\n<p>Did I invent this concept? Heck no! You see it all over the place&mdash;lots of Dojo is built this way, even. However, if you&#8217;ve never been exposed to this concept, it can change the way you structure your code. The ability to arbitrarily connect and disconnect pieces of code is a game-changer.</p>\\n<h2>Keep It Simple</h2>\\n<p>To sum up, the basic <code>dojo.js</code> is full of great tools that make everyday tasks easier; in particular, <code>dojo.connect</code> is awesome, and putting it to targeted use can make code easier to read and easier to maintain. Though dead simple, the concept of creating stub functions to act as connection targets is a handy tool to have at hand. Using it to fire your own events by spreading stubs throughout your code can make your systems very easy to extend.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Dojo is big, but it&#8217;s not unwieldy. You don&#8217;t have to learn it all to be productive. There are probably large pieces of the toolkit that you&#8217;ll never even need, but Dojo is built so that if you don&#8217;t need something, it doesn&#8217;t weigh you down. Where it counts, Dojo is actually quite lean. In [&hellip;]</p>\\n\",\"protected\":false},\"author\":19,\"featured_media\":22075,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,3],\"tags\":[305],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Simplifying Maintenance With Event Driven Design | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/event-driven-design/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Simplifying Maintenance With Event Driven Design | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Dojo is big, but it&#8217;s not unwieldy. You don&#8217;t have to learn it all to be productive. There are probably large pieces of the toolkit that you&#8217;ll never even need, but Dojo is built so that if you don&#8217;t need something, it doesn&#8217;t weigh you down. Where it counts, Dojo is actually quite lean. In [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/event-driven-design/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2009-03-03T08:04:01+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-06-29T15:24:07+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/event-driven-design/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/event-driven-design/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/event-driven-design/\\\",\\\"name\\\":\\\"Simplifying Maintenance With Event Driven Design | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/event-driven-design/#primaryimage\\\"},\\\"datePublished\\\":\\\"2009-03-03T08:04:01+00:00\\\",\\\"dateModified\\\":\\\"2020-06-29T15:24:07+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/92f3b5395bb56e1652aae279b81c8623\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/event-driven-design/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/92f3b5395bb56e1652aae279b81c8623\\\",\\\"name\\\":\\\"Revin Guillen\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Revin Guillen\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/653\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/19\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=653\"}],\"version-history\":[{\"count\":4,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/653/revisions\"}],\"predecessor-version\":[{\"id\":26226,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/653/revisions/26226\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=653\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=653\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=653\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=653\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":19,\"name\":\"Revin Guillen\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/rguillen/\",\"slug\":\"rguillen\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Revin Guillen, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Revin Guillen, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/rguillen/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/rguillen/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/rguillen/\\\",\\\"name\\\":\\\"Revin Guillen, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/92f3b5395bb56e1652aae279b81c8623\\\",\\\"name\\\":\\\"Revin Guillen\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/90368795910d217696d3456dbfb2f628?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Revin Guillen\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/rguillen/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/19\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b01ae7b5af4e66c-LHR"],["cf-request-id","03d4eb61180000e66cc2a12200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:24:57 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d0d475d76444806adbbac7ff150a232ef1594293897; expires=Sat, 08-Aug-20 11:24:57 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}