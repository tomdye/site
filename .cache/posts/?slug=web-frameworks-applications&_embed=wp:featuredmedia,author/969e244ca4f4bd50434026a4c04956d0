{"value":{"body":"[{\"id\":14781,\"date\":\"2017-08-03T09:51:42\",\"date_gmt\":\"2017-08-03T16:51:42\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=14781\"},\"modified\":\"2020-03-30T06:38:23\",\"modified_gmt\":\"2020-03-30T13:38:23\",\"slug\":\"web-frameworks-applications\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-applications/\",\"title\":{\"rendered\":\"Web Frameworks: Applications\"},\"content\":{\"rendered\":\"<!-- Added by Post/Page specific custom CSS plugin, thank you for using! -->\\n<style type=\\\"text/css\\\">.title span {\\r\\ndisplay:block;\\r\\nfont-weight:inherit !important;\\r\\n}\\r\\nli {\\r\\nmargin-bottom:.5em !important;\\r\\n}\\r\\nblockquote {\\r\\nmargin-top:-5px;\\r\\nfloat:right;\\r\\nmargin-right:-10%;\\r\\nmax-width:450px;\\r\\nmargin-left:20px;\\r\\nmargin-bottom:20px;\\r\\nbackground:#f4f7f9;\\r\\npadding:20px;\\r\\nborder-left:5px solid #dfe6ea;\\r\\n}\\r\\nblockquote p {\\r\\nline-height:1.3em;\\r\\nmargin-top:0;\\r\\nmargin-bottom:0;\\r\\n}\\r\\n.rule {\\r\\nheight:1px;\\r\\nwidth:100%;\\r\\ndisplay:block;\\r\\nclear:both;\\r\\nmargin-bottom:40px;\\r\\nmargin-top:40px;\\r\\nbackground:#EAEAEA;\\r\\n}\\r\\n.feature-icon {\\r\\ndisplay: block;\\r\\nmargin-left:auto;\\r\\nmargin-right:auto;\\r\\nwidth:130px;\\r\\nmargin-bottom:10px;\\r\\n}\\r\\n.feature-item {\\r\\ntext-align:center;\\r\\nmargin-top: 10px !important;\\r\\nmargin-bottom:30px !important;\\r\\n}\\r\\n.pull-right {\\r\\nmax-width:600px;\\r\\nfloat:right;\\r\\nmargin-right:-100px;\\r\\nmargin-left:20px;\\r\\nmargin-bottom:20px;\\r\\n}\\r\\n.jump-to {\\r\\nmargin:0 !important;\\r\\ntext-align:center;\\r\\n}\\r\\n.jump-to li {\\r\\nmargin:0 !important;\\r\\nwidth:15%;\\r\\ndisplay:inline-block;\\r\\npadding:5px;\\r\\n}\\r\\n.jump-nav {\\r\\nposition:fixed;\\r\\nbottom:0px;\\r\\nleft:0px;\\r\\nwidth:100%;\\r\\n}\\r\\n@media screen and (max-width: 1150px) {\\r\\n.pull-right {\\r\\nmax-width:400px;\\r\\nmargin-right:0;\\r\\n}\\r\\nblockquote {\\r\\nmargin-right:0;\\r\\nmargin-top:1.5rem;\\r\\n}\\r\\n}\\r\\n@media screen and (max-width: 768px) {\\r\\n.pull-right {\\r\\nmax-width:inherit;\\r\\nfloat:none;\\r\\nmargin-bottom:0;\\r\\nmargin-left:0;\\r\\n}\\r\\nblockquote {\\r\\nfloat:none;\\r\\ndisplay:block;\\r\\nmargin-left:auto;\\r\\nmargin-right:auto;\\r\\nborder-left:none;\\r\\nmax-width:85%;\\r\\ntext-align:center;\\r\\n}\\r\\n}</style>\\n<p>Applications built with web technologies, something that was a curiosity a few short years ago, have emerged onto the scene as a must have for most organizations. Transcending websites and providing users with a more open and unbounded experience, web applications are everywhere. Likely the main reason you are reading this series is to determine how modern frameworks enable you to build web applications.</p>\\n<p><!--more--></p>\\n<p>In <a href=\\\"https://www.sitepen.com/blog/2017/06/13/if-we-chose-our-javascript-framework-like-we-chose-our-music/\\\">previous posts in this series</a>, we have discovered how our frameworks interact with us and how to put the basics together, but now it is time to really take in the whole <em>album</em>. In this post, we are going to explore how frameworks conceive of an application. That said, applications are never standalone. They will almost invariably need to get and send information and we may need them to work offline.</p>\\n<p>This is part of a series on web frameworks. If you&#8217;ve missed our previous posts, you may want to start with <a href=\\\"https://www.sitepen.com/blog/2017/06/13/if-we-chose-our-javascript-framework-like-we-chose-our-music/\\\">If we chose our JavaScript framework like we choose our music&#8230;</a></p>\\n<h2 id=\\\"approach\\\">Approach</h2>\\n<p>The term <em>application</em> can mean different things to different people and frameworks, so we need to understand what a framework considers to be an application. We will also explain the major architectural components of an application in the framework and if the framework enforces any particular application model.</p>\\n<h2 id=\\\"state-management\\\">State management</h2>\\n<p>Applications have <em>state</em>, which changes as users interact with an application. Frameworks manage state in different ways. Some frameworks have very strong opinions about how to manage application state, while others focus more on creating the application interface and leave the <em>how</em> up to the developer.</p>\\n<h2 id=\\\"data-integration-and-persistence\\\">Data integration and persistence</h2>\\n<p>Most web applications will need to retrieve data from another system, often from the web server that hosts the application code. Retrieving business data from a server is a very common task for a web application. In addition to being able to retrieve the data, there is the need to send the data back to the server or even persist the data locally. We will review how the frameworks provide help for these common use cases.</p>\\n<h2 id=\\\"service-integration-and-orchestration\\\">Service integration and orchestration</h2>\\n<p>While a well-designed service architecture should make it easy to create a front-end application, the reality often falls far short of that expectation. Whether trying to integrate calls to several back-end services, or facing off against a microservices architecture which requires the client to orchestrate calls to the various services, persisting data from one call to the next, our web applications end up doing more than might be <em>ideal</em>. Because of the rapid rate of change that a web application may accommodate, enterprises often put the application in the driver&#8217;s seat of managing the business process. If that ends up being the case, it is good to know what, if any, help the web framework can provide for us.</p>\\n<h2 id=\\\"offline\\\">Offline</h2>\\n<p>While Progressive Web Applications (<abbr title=\\\"Progressive Web Applications\\\">PWA</abbr>) define more of a set of good practices coupled with a few standards, one of the key requirements is <em>offline</em> capability. While the industry tends to focus on this feature for mobile, there are many use cases where not having reliable connectivity to the internet is an important application consideration. We will look at this particular aspect to see what these frameworks offer.</p>\\n<h4 style=\\\"text-align: center;\\\">Jump to:</h4>\\n<ul class=\\\"jump-to\\\">\\n<li><a href=\\\"#angular\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#react\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#vue\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#dojo\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#ember\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#aurelia\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n</ul>\\n<div id=\\\"angular\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Angular 2+</h2>\\n<h3 id=\\\"approach-1\\\">Approach</h3>\\n<p>Angular 2+ approaches applications with the main focus on two-way data binding between the component and the template. In Angular 2+ terms, a <em>component</em> controls a patch of the screen called a <em>view</em>. Angular 2+ templates are dynamic, and attributes and directives in the template augment the run-time behavior.</p>\\n<p>Angular 2+ has the concept of services, an abstract concept of any sort of class that provides some sort of service. Angular 2+ encourages abstracting out services from components but does not enforce this separation.</p>\\n<p>Angular 2+ heavily relies upon the concept of dependency injection, which is a run-time situation where instances of services are injected into instances of components. Services are registered with the <em>Injector</em> which then supplies the services to the components.</p>\\n<p>Angular 2+ uses its own <em>overlay</em> on the JavaScript module system, calling these modules <em>ngModules</em>. Angular 2+ also relies heavily upon metadata, injected into JavaScript classes, to augment the behavior of the Angular run-time libraries.</p>\\n<h3 id=\\\"state-management-1\\\">State management</h3>\\n<p>Angular 2+ does not have a distinct concept of state management. It encourages a pattern whereby services are created and injected into components. Those services can be part of an application state or other data, like configuration information, data retrieval, etc. Angular 2+ focuses much more on authoring front-end components, described as templates, versus enforcing a higher-order concept of an application.</p>\\n<h3 id=\\\"data-integration-and-persistence-1\\\">Data integration and persistence</h3>\\n<p>Angular 2+ provides the ability to communicate with RESTful services via its <code>@angular/common/http</code> module. This module exports a <code>HttpClientModule</code> which allows users to integrate this into components or create services which can be injected into components.</p>\\n<p>Outside of this module, there are no official services that provide integration in other ways and no data abstraction API. There are several third-party components which provide services that interface with IndexedDB and LocalStorage as well as integrating with things like GraphQL.</p>\\n<h3 id=\\\"service-integration-and-orchestration-1\\\">Service integration and orchestration</h3>\\n<p>There are no specific tools for service integration and orchestration within Angular 2+. These high-order concepts tend to be built as services, which, when offered up as modules, can be re-used in applications.</p>\\n<h3 id=\\\"offline-1\\\">Offline</h3>\\n<p>Angular 2+ considers offline to be a <em>mobile</em> feature. Angular 2+ previously provided <em>out-of-the-box</em> support for scaffolding a mobile application with offline capabilities via a service worker, but currently, the Angular CLI does not support offline and it is not clear when and if it will be supported again. The main <a href=\\\"https://mobile.angular.io/\\\">landing page</a> for the feature indicates that it is <em>alpha</em> but the instructions recommend using an outdated version of the Angular CLI and suggest using options that are not supported on the current version of the Angular CLI.</p>\\n<p>There are several tutorials available which provide some instructions on how to incorporate offline functionality into an Angular 2+ application.</p>\\n<div id=\\\"react\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">React + Redux</h2>\\n<h3 id=\\\"approach-2\\\">Approach</h3>\\n<p>Redux provides the APIs for what is traditionally considered an application, while React provides the user interface. React and Redux are designed to work together or independently.</p>\\n<p>Redux adheres to a strict unidirectional flow of data. A Redux store contains the application state where changes are applied to the state with <em>reducers</em>, which are <em>pure</em> functions that do not have side effects and contain no hidden state. Therefore, given <em>X</em> input to a pure function, you are guaranteed to get <em>Y</em> output. The Redux store is called with an <em>action</em> that identifies which reducer should be applied and what arguments are supplied to that reducer.</p>\\n<p>The architecture is designed to reduce the amount of cross-dependency between different parts of the application and to make it possible to separate parts of the application and make it easier to test every possible permutation in isolation, reducing the need for knowledge of other sections of the application.</p>\\n<p>React is then designed to deal with a state container like Redux. React splits the concept into two different types of components, presentational and container components. Presentational components are not aware of the Redux state container, they simply render the <em>properties</em> that are set on their instances and invoke callbacks that are set as part of their properties when appropriate. <em>Container</em> components are explicitly aware of the Redux state container, subscribe to changes of the Redux state and dispatch Redux actions. These could be considered more <em>controller</em>-like in the lexicon of MVC type application patterns.</p>\\n<h3 id=\\\"state-management-2\\\">State management</h3>\\n<p>Redux focuses on state management of the application, using the dispatched actions to change the state of the application and <em>container</em> components to be connected to the application&#8217;s state store. This creates an entire <em>reactive</em> model that causes changes to the application state to be reflected in the presentation of the application.</p>\\n<p>Connecting <em>presentational</em> components to the application state is usually done through a <em>container</em> component which interacts with the application <em>store</em>. For example, if you had a Todo Item List like:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction TodoList({ items, onTodoClick }) {\\r\\n  const todoItems = props.items.map((item) =&gt;\\r\\n    &lt;li onClick={() =&gt; onTodoClick(item.id)}&gt;{item}&lt;/li&gt;\\r\\n  );\\r\\nreturn &lt;ul&gt;{todoItems}&lt;/ul&gt;;\\r\\n</pre>\\n<p>You would create a <em>container</em> component which would provide the visible todo items to the presentational component, along with the functionality needed to interact with the application store:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { connect } from 'react-redux';\\r\\nimport TodoList from './TodoList';\\r\\n\\r\\nfunction getVisibleTodos(todos, filter) {\\r\\n  switch (filter) {\\r\\n    case 'SHOW_ALL':\\r\\n      return todos;\\r\\n    case 'SHOW_COMPLETED':\\r\\n      return todos.filter((t) =&gt; t.completed);\\r\\n    case 'SHOW_ACTIVE':\\r\\n      return todos.filter((t) =&gt; !t.completed);\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction mapStateToProps(state) {\\r\\n  return {\\r\\n    todos: getVisibleTodos(state.todos, state.visibilityFilter)\\r\\n  };\\r\\n}\\r\\n\\r\\nfunction mapDispatchToProps(dispatch) {\\r\\n  return {\\r\\n    onTodoClick(id) {\\r\\n      dispatch(toggleTodo(id));\\r\\n    }\\r\\n  };\\r\\n}\\r\\n\\r\\nconst VisibleTodoList = connect(\\r\\n    mapStateToProps,\\r\\n    mapDispatchToProps\\r\\n)(TodoList);\\r\\n</pre>\\n<h3 id=\\\"data-integration-and-persistence-2\\\">Data integration and persistence</h3>\\n<p>Redux’s simplistic approach to state management is nice but is limited by design. For example, actions must be objects that contain a <code>type</code> property. This can complicate business logic that may need to perform asynchronous actions such as fetching data from a server. This pattern of simply dispatching actions can be extended.</p>\\n<p>Middleware lets a user wrap the store’s <code>dispatch</code> method and add more functionality. This means that the value passed to <code>dispatch</code> can be a function instead of an action. That function will receive the <code>dispatch</code> method as an argument, which can be called from within the function after an asynchronous call, for example. The Redux middleware (thunk) can be applied using the <code>applyMiddleware</code> function from Redux.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { createStore, applyMiddleware } from 'redux';\\r\\nimport thunk from 'redux-thunk';\\r\\n\\r\\nconst store = createStore(counter, applyMiddleware(thunk));\\r\\n\\r\\nstore.dispatch((dispatch) =&gt; {\\r\\n    setTimeout(() =&gt; { dispatch({ type: 'DECREMENT' })}, 1000);\\r\\n});\\r\\n</pre>\\n<p>A <code>dispatch</code> action passed into the component can then make calls to a server, perform business logic, and then dispatch an action:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction mapStateToProps(state) {\\r\\n    return {\\r\\n        count: state.count\\r\\n    };\\r\\n}\\r\\n\\r\\nfunction mapDispatchToProps(dispatch) {\\r\\n    return {\\r\\n        increment() {\\r\\n            return dispatch({ type: 'INCREMENT' })\\r\\n        },\\r\\n        incrementAsync() {\\r\\n            fetch('https://fetch-action.com')\\r\\n                .then((response) =&gt; response.json())\\r\\n                .then((action) =&gt; dispatch(action));\\r\\n        }\\r\\n    };\\r\\n}\\r\\n\\r\\nfunction App(props) {\\r\\n    return &lt;div&gt;\\r\\n        &lt;h1&gt;Hello, World!&lt;/h1&gt;\\r\\n        &lt;Counter onIncrement={props.incrementAsync} count={props.count}/&gt;\\r\\n    &lt;/div&gt;;\\r\\n}\\r\\n\\r\\nexport default connect(\\r\\n    mapStateToProps,\\r\\n    mapDispatchToProps\\r\\n)(App);\\r\\n</pre>\\n<p>There are several third-party libraries that abstract data integration further and provide abstractions that work well for interfacing with local persistent storage including IndexedDB.</p>\\n<h3 id=\\\"service-integration-and-orchestration-2\\\">Service integration and orchestration</h3>\\n<p>Both React and Redux are quite focused on the specific problems they are trying to solve. They promote a more pure JavaScript approach to problems by using simple, assumed immutable data structures and rely on built-in language features and APIs, especially those found in ES6+. React and Redux might be used as a foundation for an application, but more complex business logic and interfacing with services would need to be provided, though this straightforward pattern generally makes it easy to integrate additional libraries and tools.</p>\\n<h3 id=\\\"offline-2\\\">Offline</h3>\\n<p>While neither Redux nor React provide an explicit offline capability, by containing all the application state in a single store, with the ability to insert middleware, it is easy to persist the state within the browser. Because all changes to the application state can be <em>known</em>, this enables the ability to add features like <em>time travel</em> where the changes to the application state can be stored to be replayed later, primarily for the purpose of debugging.</p>\\n<p>There are some third-party solutions that provide a more robust <em>framework</em> for creating and managing the Redux state store in an offline mode.</p>\\n<p>Because React + Redux lacks a specific framework, the biggest challenge comes from creating the right patterns in any <em>container</em> components that deal with modifying the state in an <em>offline</em> mode in a graceful way. This requires adopting a third-party solution or having the appropriate knowledge of how to ensure the state is kept in a consistent fashion and continues to be functional when disconnected.</p>\\n<div id=\\\"vue\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Vue.js</h2>\\n<h3 id=\\\"approach-3\\\">Approach</h3>\\n<p>Vue.js does not mandate a project or application structure. For applications, Vue.js provides a few key areas of functionality which are combined together to form an application:</p>\\n<ul>\\n<li>Web Component like functionality</li>\\n<li>Reactive/observable JavaScript objects</li>\\n<li>An application state container with <a href=\\\"https://vuex.vuejs.org/en/intro.html\\\">Vuex</a></li>\\n</ul>\\n<p>The main focus of Vue.js is to provide a JavaScript-based, flexible, <abbr title=\\\"Model View ViewModel\\\">MVVM</abbr> library, where Vue.js provides the <em>ViewModel</em> with two-way data bindings between JavaScript objects and the DOM view.</p>\\n<p>The <code>vue-cli</code> package can scaffold projects for a variety of purposes.</p>\\n<h3 id=\\\"state-management-3\\\">State management</h3>\\n<p>For simple applications, the state of a Vue.js application will just be the values of all the <code>data</code> properties in its components. Components that need to share state can use shared objects or data stores, and a non-rendered component can be used as a global event bus.</p>\\n<p>For more complex scenarios, Vue.js provides a reactive state library inspired by <a href=\\\"https://facebook.github.io/flux/\\\">Flux</a> called <a href=\\\"https://vuex.vuejs.org/en/intro.html\\\">Vuex</a>. This library provides a central store for the entire application state and the means to update the state in a consistent and predictable manner. For large applications, Vuex allows a store to be separated into modules, where each module is essentially a self-contained store with its own state and mutation logic.</p>\\n<h3 id=\\\"data-integration-and-persistence-3\\\">Data integration and persistence</h3>\\n<p>Neither the core Vue.js library nor Vuex provides any direct support for data persistence. There is an official Vue.js library providing Firebase bindings, and a number of third-party libraries providing access to local storage, RESTful resources, and more.</p>\\n<p>Vue.js previously recommended <code>vue-resource</code> as the <em>official</em> HTTP client library for Vue.js, but the Vue.js team eventually concluded that this type of functionality was really outside the scope of Vue.js, and no longer recommend any particular solution.</p>\\n<h3 id=\\\"service-integration-and-orchestration-3\\\">Service integration and orchestration</h3>\\n<p>Vue.js focuses on providing libraries to create applications. It does not provide any official pattern for integrating with services or orchestration of services within applications. Vue.js assumes that developers may express whatever logic they prefer within the ViewModel.</p>\\n<h3 id=\\\"offline-3\\\">Offline</h3>\\n<p>Vue.js does not offer any specific offline support. However, individual Vue.js component states may be serialized, as can the entire Vuex application store. By using other libraries, it would be easy to store the application state and restore it later.</p>\\n<div id=\\\"dojo\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Dojo 2</h2>\\n<h3 id=\\\"approach-4\\\">Approach</h3>\\n<p>Dojo 2 provides functionality for creating full-featured web applications, including user interface components, routing, state management, code splitting, lazy loading, offline support, interfacing with external resources and robust testing.</p>\\n<p>Dojo 2 encourages the use of unidirectional data flow, with the application state being set as properties on a top-level widget which propagates those properties to additional widgets. Widgets generate higher-order events for user input in which a <em>controller</em> would modify the application properties/state and the widget system reacts to those property changes. Dojo 2 discourages storage of state within widgets/components and has introduced the concept of <em>meta</em> providers to manage transient application state on behalf of widgets, being able to intelligently invalidate widgets to cause them to re-render.</p>\\n<p>The scaffolding of applications is accomplished via the CLI command <code>dojo create app</code>.</p>\\n<h3 id=\\\"state-management-4\\\">State management</h3>\\n<p>The <a href=\\\"https://github.com/dojo/stores\\\"><code>@dojo/stores</code></a> package provides a state management approach for Dojo 2 applications, making it easy to use with large data sets, and leveraging the Container/Injector to bind that data to widgets. Existing state management packages such as Redux may easily be used directly with Dojo 2, by creating a binding between the Redux store and an <em>application</em> widget&#8217;s properties, leveraging the <a href=\\\"https://github.com/dojo/interop/@dojo/interop\\\"><code>@dojo/interop</code></a> package.</p>\\n<h3 id=\\\"data-integration-and-persistence-4\\\">Data integration and persistence</h3>\\n<p>The <code>@dojo/core</code> package provides the <code>request</code> API which is very similar to the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\\\">Fetch API</a> to be able to interface with RESTful services in an isomorphic manner.</p>\\n<p>Dojo 2 provides a fully-featured state management package which supports the concept of <em>resources</em> to enable developers to describe a complex application data model.</p>\\n<h3 id=\\\"service-integration-and-orchestration-4\\\">Service integration and orchestration</h3>\\n<p>Dojo 2 does not currently provide any specific tools to streamline service integration or orchestration. Dojo 2 being a flexible and open framework though means that it should be straightforward to integrate other packages that might provide this higher order orchestration. Also, as the concept of a Dojo 2 application develops, there may be more opinionated ways of managing service integration and orchestration.</p>\\n<h3 id=\\\"offline-4\\\">Offline</h3>\\n<p>Full Progressive Web App support is being integrated into Dojo 2, which provides support for Service Workers to make it easier to enable offline support. Dojo 2 provides a more structured approach for persisting the application state to make it easy to allow offline support.</p>\\n<div id=\\\"ember\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Ember</h2>\\n<h3 id=\\\"approach-5\\\">Approach</h3>\\n<p>Ember.js has a very structured approach to building applications which follows an <abbr title=\\\"Model View Controller\\\">MVC</abbr> architecture approach. Every application in Ember is one that is an instance of a class that extends <code>Ember.Application</code>. This manages the <em>state</em> of the application and coordinates the flow of the application.</p>\\n<p>Logically, an Ember application defines routes, which are managed by the Router. When these routes are navigated to, they affect the model and <em>navigate</em> to a template. A template contains components which can act as a <em>View</em> or a <em>Controller</em> for a model.</p>\\n<p>Ember also relies heavily on the concept of dependency injection, where the application contains a registry of different classes that make up the application and can instantiate and inject instances into the application.</p>\\n<h3 id=\\\"state-management-5\\\">State management</h3>\\n<p>An Ember application will have an application store which contains the single version of truth for the application. Controllers interact with the Models of the application to handle changes and respond to user input to affect the state of the application.</p>\\n<h3 id=\\\"data-integration-and-persistence-5\\\">Data integration and persistence</h3>\\n<p>Ember Data standardizes on a set of conventions called <a href=\\\"http://jsonapi.org/about/\\\">JSON-API</a> to provide easy integration with back-end data and services. Effectively JSON-API is a set of conventions to create RESTful services without the need to debate the implementation details. Ember Data adheres to these conventions.</p>\\n<h3 id=\\\"service-integration-and-orchestration-5\\\">Service integration and orchestration</h3>\\n<p>Ember.js applications have higher order concepts of <em>Services</em> and the <em>Run Loop</em> which provide a framework for creating, scheduling and managing queues of long-running processes. This provides a level of marshaling of work to provide efficient scheduling of business logic. Ember uses the Run Loop to provide some internal work management, but it is also designed for application developers to manage asynchronous workflow.</p>\\n<h3 id=\\\"offline-5\\\">Offline</h3>\\n<p>There is no offline solution provided directly by the Ember.js project. There are several third-party solutions which make it possible to persist the application store in an offline state, as well other tools which make it easy to integrate offline functionality.</p>\\n<div id=\\\"aurelia\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Aurelia</h2>\\n<h3 id=\\\"approach-6\\\">Approach</h3>\\n<p>Aurelia focuses on providing a structured MVVM application framework to power <em>single page applications</em>. At the same time, Aurelia focuses on being a modular system which does not strictly enforce it being used in an MVVM way.</p>\\n<p>Aurelia applications bootstrap themselves, with the convention of a <em>main</em> module which exports a function named <code>configure()</code> which operates on the application object to set up the application. Like some server-side frameworks, the concept of <em>plugging</em> in functionality to the application via middleware is present. Aurelia promotes a fairly decentralized approach from that perspective, where different Views, built of Templates/Components are bound to ViewModels, which in turn interact with the application&#8217;s Models, navigating through the single page application via Routes.</p>\\n<p>Like Angular 2+ feels familiar to those who used Angular 1, Aurelia will also feel similar. The Aurelia team worked heavily with Angular 1 and joined the Angular 2 team, but decided to start Aurelia after there were divergent views of the direction of the projects. Aurelia goes further in embracing modern JavaScript and TypeScript, striving to avoid divergent patterns from the underlying language.</p>\\n<h3 id=\\\"state-management-6\\\">State management</h3>\\n<p>Aurelia was originally designed to be an MVVM framework, meaning that two-way data binding between the View and the View Model allowed the View Model to act on the applications Models, which contain state. As the pattern of container state has become popular, Aurelia appears to have tried to pivot and support the use of <a href=\\\"https://www.sitepoint.com/managing-state-aurelia-with-redux/\\\">Redux</a> for application state. In the end, Aurelia tries to not be too dogmatic its about approach and focuses on providing tools which can create feature-rich web applications.</p>\\n<h3 id=\\\"data-integration-and-persistence-6\\\">Data integration and persistence</h3>\\n<p>Aurelia provides an abstraction to the <a href=\\\"http://aurelia.io/hub.html#/doc/article/aurelia/fetch-client/latest/http-services/2\\\">Fetch API</a> as well as the <a href=\\\"http://aurelia.io/hub.html#/doc/article/aurelia/fetch-client/latest/http-services/3\\\">HTTP Client/XHR API</a>. These appear to be the limit of Aurelia&#8217;s official support, depending upon third-party packages and solutions to provide further access to data.</p>\\n<h3 id=\\\"service-integration-and-orchestration-6\\\">Service integration and orchestration</h3>\\n<p>As mentioned above, there are abstractions for Fetch and XHR, which would allow a developer to interact with services on a server, but there are no higher order concepts that are provided <em>out-of-the-box</em>.</p>\\n<h3 id=\\\"offline-6\\\">Offline</h3>\\n<p>There is a module for <a href=\\\"https://github.com/aurelia/cache/\\\">caching</a>, but outside of this module, Aurelia does not offer an out of the box solution to supporting offline applications. There are a few open issues in the Aurelia repositories discussing support for Progressive Web Applications, though they seem to be focused on scaffolding a project, versus providing any higher order functionality to manage the application via service workers in an offline context.</p>\\n<h2 id=\\\"summary\\\">Summary</h2>\\n<h3 id=\\\"angular-2-1\\\">Angular 2+</h3>\\n<p>Angular 2+ does not provide a strict application model. It is possible to create a more formal application structure, like MVC, MVP, or MVVM on top of Angular 2+. It does rely on several very specific Angular ways of development that might make it awkward to integrate with other frameworks or libraries.</p>\\n<p>Most of the <em>logic</em> of the application is left to the end developer, with Angular 2+ focusing more on facilitating the tying of logic to components that are part of bigger views, which is very reminiscent of the form and control application model, where the user is provided forms with controls which interact with and create a directive application flow.</p>\\n<h3 id=\\\"react-redux-1\\\">React + Redux</h3>\\n<p>React + Redux are two tools that help build applications that heavily rely upon modern JavaScript constructs. Each tool is specifically designed to do their main purpose well and not much more. This is best suited for situations where there is a lot of knowledge in the development team of how to build web applications. When that knowledge is available, very effective applications can be built rapidly.</p>\\n<p>If there is not sufficient knowledge and technical leadership, React + Redux applications can quickly become unmaintainable and overly complex and fail to meet their business objectives.</p>\\n<h3 id=\\\"vue.js-1\\\">Vue.js</h3>\\n<p>Vue.js focuses on providing the ViewModel of an MVVM application. Adding Vuex provides an application state container similar to Redux. If you want to follow the pattern of MVVM, or you want to incrementally re-wire an existing web application to a more modern architecture, then Vue.js is likely to work for you.</p>\\n<p>While Vue.js focuses on providing a few key features, instead of an entire framework, it does not feel as <em>open-ended</em> as React + Redux, meaning that it can be <em>safer</em> to use with teams with less knowledge and technical leadership than is required with React + Redux.</p>\\n<h3 id=\\\"dojo-2-1\\\">Dojo 2</h3>\\n<p>Dojo 2 provides a <em>front-end</em> to an application, which is flexible enough to be integrated with other tools to create a whole application. If you are looking for a more structured and opinionated reactive style solution, then Dojo 2 is worth consideration.</p>\\n<h3 id=\\\"ember.js-1\\\">Ember.js</h3>\\n<p>Ember.js adheres to a structured MVC model. It is strongly opinionated and has a breadth of concepts beyond application state management, to deal with an application as a holistic concern. Ember provides extensive documentation and a <em>right way</em> to architect and build Ember applications. If you want a framework for building full web applications, where patterns and anti-patterns are clearly defined and the MVC application model is aligned with your architecture, then Ember could be a strong candidate for you.</p>\\n<p>The <em>risk</em> is that there are higher order APIs that are built on top of the standards, meaning that Ember applications will likely stay as Ember applications and changing libraries or approaches is likely to mean wholesale re-writes down the road. This is, of course, a risk with any library chosen, but the breadth of functionality of Ember is more likely to lead to framework lock-in.</p>\\n<h3 id=\\\"aurelia-1\\\">Aurelia</h3>\\n<p>Aurelia was designed to try to support an MVVM application model, though it does not strictly enforce it. Aurelia is a flexible framework that will feel very familiar to users of Angular 1, with attempts to fully leverage modern JavaScript and TypeScript instead of introducing patterns that are specific to the framework. In theory, this makes Aurelia easier to integrate third-party solutions but also migrate to other patterns in the future.</p>\\n<p>Because Aurelia applications are <em>easy</em> to extend, it can be quite easy to end up with a sprawling application that has grown organically over time. Teams need to ensure that they establish conventions and patterns up front to help ensure that the application continues to be maintainable over the long term. Because Aurelia is flexible, it would be quite easy to end up with an application that is vast and complex and inconsistent in the way it operates.</p>\\n<h2 id=\\\"up-next\\\">Up next</h2>\\n<p>Now that we have explored the core of what we are likely looking for in a framework, in the next post we will be exploring the situations for which each framework is best suited, and see if they have any magic up their sleeves for those use cases. We will find that while some bands are multi-genre and hard to pin down, some might only be good at playing one tune.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Applications built with web technologies, something that was a curiosity a few short years ago, have emerged onto the scene as a must have for most organizations. Transcending websites and providing users with a more open and unbounded experience, web applications are everywhere. Likely the main reason you are reading this series is to determine [&hellip;]</p>\\n\",\"protected\":false},\"author\":67,\"featured_media\":22214,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[444,445,214,448,2,215,3,16,29,11,234],\"tags\":[],\"series\":[447],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks: Applications | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/web-frameworks-applications/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks: Applications | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Applications built with web technologies, something that was a curiosity a few short years ago, have emerged onto the scene as a must have for most organizations. Transcending websites and providing users with a more open and unbounded experience, web applications are everywhere. Likely the main reason you are reading this series is to determine [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/web-frameworks-applications/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-08-03T16:51:42+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-03-30T13:38:23+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-applications/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Web Frameworks: Applications\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-applications/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/web-frameworks-applications/\\\",\\\"name\\\":\\\"Web Frameworks: Applications | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-applications/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-08-03T16:51:42+00:00\\\",\\\"dateModified\\\":\\\"2020-03-30T13:38:23+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/web-frameworks-applications/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14781\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=14781\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14781/revisions\"}],\"predecessor-version\":[{\"id\":22215,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14781/revisions/22215\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22214\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=14781\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=14781\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=14781\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=14781\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":67,\"name\":\"Kit Kelly\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kkelly/\",\"slug\":\"kkelly\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kit Kelly, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kit Kelly, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kkelly/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kkelly/\\\",\\\"name\\\":\\\"Kit Kelly, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22214,\"date\":\"2020-02-03T11:43:19\",\"slug\":\"web-frameworks-applications-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-applications/web-frameworks-applications-2/\",\"title\":{\"rendered\":\"Web Frameworks- Applications\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks- Applications | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks- Applications | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-03T19:43:29+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\\\",\\\"name\\\":\\\"Web Frameworks- Applications | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-02-03T19:43:19+00:00\\\",\\\"dateModified\\\":\\\"2020-02-03T19:43:29+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Web Frameworks: Applications\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/08/Web-Frameworks-Applications.jpg\",\"sizes\":{\"medium\":{\"file\":\"Web-Frameworks-Applications-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications-300x158.jpg\"},\"large\":{\"file\":\"Web-Frameworks-Applications-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Web-Frameworks-Applications-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications-150x150.jpg\"},\"medium_large\":{\"file\":\"Web-Frameworks-Applications-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications-768x403.jpg\"},\"full\":{\"file\":\"Web-Frameworks-Applications.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"1\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Applications.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22214\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b01977ef9260672-LHR"],["cf-request-id","03d4dd035b000006720d1fd200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:09:16 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=db5bb2b7b2847bc11af38fb1b6f064b3d1594292956; expires=Sat, 08-Aug-20 11:09:16 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}