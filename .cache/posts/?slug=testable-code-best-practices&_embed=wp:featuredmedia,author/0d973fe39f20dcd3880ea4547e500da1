{"value":{"body":"[{\"id\":9044,\"date\":\"2014-07-11T12:03:48\",\"date_gmt\":\"2014-07-11T19:03:48\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=9044\"},\"modified\":\"2019-12-11T08:02:45\",\"modified_gmt\":\"2019-12-11T16:02:45\",\"slug\":\"testable-code-best-practices\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/testable-code-best-practices/\",\"title\":{\"rendered\":\"Testable code best practices\"},\"content\":{\"rendered\":\"<p>Many of the best practices for writing testable code also conform to general code best practices. Code that is easily testable often also tends to be highly maintainable and resilient against changing business requirements. This blog post provides a brief overview of key criteria for writing highly testable code.</p>\\n<p><!--more--></p>\\n<h2 id=\\\"separation-of-concerns\\\">Separation of concerns</h2>\\n<p>One of the keys to writing highly testable code is to ensure that there is a strong separation between the different parts of an application, with clear, simple APIs for interaction between those parts. Distinct areas of functionality like data retrieval, data processing, data display, and event handling should typically be separated into individual subsystems and further broken up into individual modules.</p>\\n<p>Aside from aiding in general code maintenance, ensuring a strong level of separation between different parts of your code makes it possible for components to be easily replaced with mock objects during testing. This allows units of code to be tested in total isolation from the rest of the system, eliminating failures caused by unintentional side-effects or incorrect interactions between multiple parts of the system, and also makes writing tests easier by reducing the amount of setup that needs to occur in order to run application components successfully.</p>\\n<p>For example, if component B is inappropriately modifying the internals of component A at runtime, those two components can no longer be separated or maintained in isolation. This is bad for your codebase’s maintainability, and it also makes it much more difficult to author unit tests for component A since you have to also have a copy of component B that needs to be configured to affect the desired change on component A. This is a simplified example; in normal apps, there can be tens of interrelated components like this, which can make real unit testing all but impossible.</p>\\n<p>Separating concerns also allows tests to be smaller, which makes any test failures that occur faster and easier to investigate and correct than they would be in a less granular system. For example, not knowing that component B modifies component A, if some part of component B changes that causes a test failure in component A, much more work is necessary in order to isolate that the source of the problem is actually coming from unrelated code running in component B. This sort of problem is again exacerbated in real apps that will often have multiple layers of indirection when not properly authored.</p>\\n<h2 id=\\\"object-oriented-code-design\\\">Object-oriented code design</h2>\\n<p>Along the same vein as separation of concerns, following an object-oriented code design pattern is also extremely important when writing testable code. Code that runs procedurally in response to an external condition, like an anonymous function that executes when a browser DOM becomes ready, is impossible to unit test because there are no individual units of functionality that can be called, only one large blob of code held in closure. It also means that there is no way for multiple tests to execute fully independently of each other, which often leads to difficult-to-debug test failures caused by side effects being carried forward from previous tests.</p>\\n<p>Using an object-oriented code design pattern with constructor functions means that each test can instantiate a fresh copy of any object under test. This ensures that the potential for state being carried from one test to the next is minimised. It also makes it possible to use dependency injection to define mock dependencies during testing, which is described in more detail below.</p>\\n<h2 id=\\\"loose-coupling-dependency-injection\\\">Loose coupling / dependency injection</h2>\\n<p>Tight coupling between components, where component A specifically requests module B instead of exposing a mechanism where a module like B can be passed to component A, increases testing difficulty by requiring the explicit dependencies of the component to be redefined from within the module loader instead of simply passing an alternative to component A during testing. It also makes it difficult to modify the behaviour of components at runtime by making it impossible for alternative implementations of external dependencies to be provided to different instances of a component. The name of the mechanism for passing dependencies into an object, instead of having an object reaching outside of itself for its dependencies, is called <dfn>dependency injection</dfn>.</p>\\n<p>For example, instead of here, where a specific store is given as an explicit dependency:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">define([ 'app/stores/storeSingleton' ], function (storeSingleton) {\\r\\n    function Component() {}\\r\\n    Component.prototype.show = function (id) {\\r\\n        storeSingleton.get(id).then(function () {\\r\\n            // ...\\r\\n        });\\r\\n    };\\r\\n\\r\\n    return Component;\\r\\n});\\r\\n</pre>\\n<p>You could instead write the component so it accepts a store instance at construction time:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">define([], function () {\\r\\n    function Component(store) {\\r\\n        this.store = store;\\r\\n    }\\r\\n    Component.prototype.show = function (id) {\\r\\n        this.store.get(id).then(function () {\\r\\n            // ...\\r\\n        });\\r\\n    };\\r\\n\\r\\n    return Component;\\r\\n});\\r\\n</pre>\\n<p>Communication between components can also be tightly or loosely coupled. A component that listens for events on another object would need a direct reference to the object in order to be able to listen for changes if the object only emits the events on itself:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">define([], function () {\\r\\n    function Component(store) {\\r\\n        store.on('insert', function (record) {\\r\\n            // ...\\r\\n        });\\r\\n    }\\r\\n\\r\\n    return Component;\\r\\n});\\r\\n</pre>\\n<p>This is fine for components that normally have direct relationships, but works poorly in cases where a component may want to respond to events on multiple instances of an object, or where a component may want to respond to events on objects that that would either leak with a direct reference, or are created at unknown future moments, or that come from unknown places. In these instances, the use of a pub/sub hub, such as that provided by <code>dojo/topic</code>, allows “global” notifications to be generated that can be handled by anyone at any time:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">define([ 'dojo/topic' ], function (topic) {\\r\\n    function Component() {\\r\\n        topic.subscribe('/store/insert', function (store, record) {\\r\\n            // ...\\r\\n        });\\r\\n    }\\r\\n\\r\\n    return Component;\\r\\n});\\r\\n</pre>\\n<p>While this does introduce a direct dependency to the pub/sub hub, it enables components within the application to interact in complete isolation from each other, which means tests can simply dispatch compatible topics to test consumers, and monitor the hub for the correct messages from producers.</p>\\n<h2 id=\\\"elimination-of-globals\\\">Elimination of globals</h2>\\n<p>One of the primary goals of the AMD module system is to provide a mechanism that eliminates global variables in place of explicitly requested, relocatable module dependencies. This explicit dependency requirement becomes especially relevant when performing testing, for three reasons:</p>\\n<ol>\\n<li>Use of global variables encourages state to be shared across different components and tests. The order in which test suites are executed should not impact the correct functionality of any other test, but reusing objects that maintain any sort of state will cause brittle cross-dependencies between tests that should not exist.</li>\\n<li>Components tested in isolation will not be able to rely on global variables that have been defined in scripts declared in the HTML parent, since when components are tested in isolation, they are no longer loaded along with the original HTML file. For example, if your main HTML file defines a global variable that defines where a service endpoint should exist, code that relies on that variable being populated will fail.</li>\\n<li>Using a module system like AMD provides a standard mechanism (the <code>map</code> configuration) that guarantees that even explicit dependencies can be mocked without the possibility of race conditions. When using global variables, it becomes more difficult to ensure that a script will not load and hold a reference to an object inside the global scope that needs to be replaced with a mock object for testing.</li>\\n</ol>\\n<p>In the case where application-global or system-global variables are necessary to simplify the architecture of an application, these properties are best either placed on a global application singleton module that can be relocated by the module loader, or stored on an object that can be generated in tests and passed to children as an injected dependency.</p>\\n<h2 id=\\\"api-naming-conventions\\\">API naming conventions</h2>\\n<p>When writing unit tests, it is important to be able to determine which properties and methods of an object are public and which are private implementation details of the object itself. This is because unit tests should only test the publicly defined APIs, as these are the only APIs that are guaranteed to exist and produce stable results. As long as the implementation of a public method generates the same results, it should not matter to unit tests how that result is produced. An added bonus of not testing private APIs is that, in conjunction with code coverage analysis, dead code belonging to implementations that have been subsequently factored out of use can be easily identified and removed. In JavaScript, private/protected properties and methods are conventionally annotated using an underscore prefix.</p>\\n<h2 id=\\\"clear-code-and-documentation\\\">Clear code and documentation</h2>\\n<p>Tests are not a substitute for a clear, well-maintained codebase. In fact, in order to write accurate tests, it is necessary that code is kept clean enough that test authors and future maintainers can quickly understand the purpose of each unit of code being tested and how it fits into the overall application.</p>\\n<p>One of the most effective ways to ensure this level of visibility for test authors is to ensure that general best practices for code authorship are followed. At a minimum:</p>\\n<ul>\\n<li>Public classes, properties, methods, and parameters should be documented using a standard code documentation format like <a href=\\\"http://usejsdoc.org/\\\">JSDoc</a></li>\\n<li>Variables and parameters should be clear and understandable, with no abbreviations, truncations, or non-standard terminology that will cause the meaning of the code to be lost or distorted</li>\\n<li>Code comments should be provided for potentially confusing or odd-looking code, describing why (not what) the code is doing what it is doing</li>\\n</ul>\\n<p>As touched upon when discussing API naming conventions, using idioms that are common to the language and libraries being used will ensure that test authors are able to complete their work quickly and without confusion.</p>\\n<p>By following these guidelines when authoring your own code, you’ll ensure that your applications are in excellent shape for testing and will run well long into the future.</p>\\n<p>If you’re still not sure where to start, or would like extra assistance making your code more testable and reliable, <a href=\\\"https://www.sitepen.com/services/\\\">we’re here to help</a>! Get in touch today for a free 30-minute consultation.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Many of the best practices for writing testable code also conform to general code best practices. Code that is easily testable often also tends to be highly maintainable and resilient against changing business requirements. This blog post provides a brief overview of key criteria for writing highly testable code.</p>\\n\",\"protected\":false},\"author\":41,\"featured_media\":22075,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[353,356,375,3],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Testable code best practices | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/testable-code-best-practices/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Testable code best practices | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Many of the best practices for writing testable code also conform to general code best practices. Code that is easily testable often also tends to be highly maintainable and resilient against changing business requirements. This blog post provides a brief overview of key criteria for writing highly testable code.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/testable-code-best-practices/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2014-07-11T19:03:48+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2019-12-11T16:02:45+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/testable-code-best-practices/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/testable-code-best-practices/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/testable-code-best-practices/\\\",\\\"name\\\":\\\"Testable code best practices | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/testable-code-best-practices/#primaryimage\\\"},\\\"datePublished\\\":\\\"2014-07-11T19:03:48+00:00\\\",\\\"dateModified\\\":\\\"2019-12-11T16:02:45+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/testable-code-best-practices/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\",\\\"name\\\":\\\"Colin Snover\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Colin Snover\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9044\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/41\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=9044\"}],\"version-history\":[{\"count\":2,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9044/revisions\"}],\"predecessor-version\":[{\"id\":19758,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9044/revisions/19758\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=9044\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=9044\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=9044\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=9044\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":41,\"name\":\"Colin Snover\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/csnover/\",\"slug\":\"csnover\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Colin Snover, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Colin Snover, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/csnover/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/csnover/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/csnover/\\\",\\\"name\\\":\\\"Colin Snover, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7cc9a4368c266b3ad7e0c1ff2d2b8b5a\\\",\\\"name\\\":\\\"Colin Snover\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/8efa8507d7b9ebc52aa5fb183e11c356?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Colin Snover\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/csnover/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/41\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b01a583f880071a-LHR"],["cf-request-id","03d4e5c67d0000071ace0be200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:18:50 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d96fa14560fc5aef1544ce7d12693486c1594293530; expires=Sat, 08-Aug-20 11:18:50 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}