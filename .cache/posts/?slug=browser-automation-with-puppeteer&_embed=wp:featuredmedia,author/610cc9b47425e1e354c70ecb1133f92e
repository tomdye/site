{"value":{"body":"[{\"id\":15343,\"date\":\"2017-10-04T10:10:19\",\"date_gmt\":\"2017-10-04T17:10:19\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15343\"},\"modified\":\"2017-10-04T10:10:19\",\"modified_gmt\":\"2017-10-04T17:10:19\",\"slug\":\"browser-automation-with-puppeteer\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/browser-automation-with-puppeteer/\",\"title\":{\"rendered\":\"Browser Automation with Puppeteer\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/blog-image.jpg\\\" alt=\\\"\\\" class=\\\"alignnone size-full wp-image-15496\\\" /></p>\\n<p>Automating browsers provide many benefits including faster execution of repetitive tasks, ability to parallelise workloads and improved test coverage for your website. Google recently announced Puppeteer, a new tool to assist with Chrome browser automation.</p>\\n<p><!--more--></p>\\n<p>Code examples are included so you can follow along. If you are familiar with browser automation already, feel free to jump to the section titled “Puppeteer: A practical example” which includes more advanced usage of Puppeteer.</p>\\n<p>Here we will cover:</p>\\n<ol>\\n<li>A quick introduction to browser automation: How it’s typically done &amp; use cases.</li>\\n<li>What is a headless browser: How it differs from non-headless.</li>\\n<li>Chrome Headless: The command to run Chrome in a headless environment.</li>\\n<li>Puppeteer: Controlling Chrome programmatically.</li>\\n<li>Puppeteer: A practical example (includes code).</li>\\n<li>Firefox Headless: An update about headless support.</li>\\n<li>Conclusion: Recap</li>\\n</ol>\\n<h2 id=\\\"a-quick-introduction-to-browser-automation-including-use-cases\\\">A quick introduction to browser automation, including use cases</h2>\\n<p>Browser automation enables you to programmatically control a browser. For example, you could do some of the following:</p>\\n<ul>\\n<li>Observe product pricing updates on an online store to discover the best time to purchase a particular product.</li>\\n<li>Log into your online banking account to download statements on a periodic basis.</li>\\n<li>Write functional tests or acceptance tests against a website you develop, in order to validate user functionality.</li>\\n<li>Complete a long and tedious HTML form which typically requires repetitive manual entry.</li>\\n</ul>\\n<p>All modern browsers may be automated, including Chrome, Firefox, Edge &amp; Safari. You can also automate <a href=\\\"http://appium.io/\\\">mobile browsers</a>. This post will briefly cover Chrome &amp; Firefox.</p>\\n<p>For most use cases, to control a browser programmatically, you should use high level browser automation software. One popular choice is <a href=\\\"http://www.seleniumhq.org/projects/webdriver/\\\">WebDriver</a>, which we leverage for automating functional testing with <a href=\\\"https://theintern.io/\\\">Intern</a>.\\n</p>\\n<h2 id=\\\"what-is-a-headless-browser\\\">What is a headless browser?</h2>\\n<p>You are most likely reading this article in a browser. Notice that the browser has supporting elements for your use, such as a menu bar, address bar, and toolbar. These items are part of the GUI (Graphical User Interface). A headless browser has no GUI and no visual components. It runs as a <a href=\\\"https://en.wikipedia.org/wiki/Process_%28computing%29\\\">process</a>, and will expose a mechanism to enable outside interaction from source code or other software programs.</p>\\n<h3 id=\\\"chrome-headless\\\">Chrome Headless</h3>\\n<p>To run a version of Chrome (nightly Canary builds) in a headless environment, you can use one of the following commands:</p>\\n<h4>Mac OS X</strong>:</h4>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\n/Applications/Google\\\\ Chrome\\\\ Canary.app/Contents/MacOS/Google\\\\ Chrome\\\\ Canary --headless --remote-debugging-port=9222 --disable-gpu\\n</pre>\\n<h4>Linux</strong>:</h4>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\ngoogle-chrome --headless --remote-debugging-port=9222 --disable-gpu\\n</pre>\\n<h4>Windows</strong>:</h4>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\nchrome.exe --headless --remote-debugging-port=9222 --disable-gpu\\n</pre>\\n<p>The remote debugging flag enables you to use DevTools for some remote inspection of the headless browser tab.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/1.png\\\" alt=\\\"\\\" class=\\\"screenshot alignnone size-full wp-image-15430\\\" /></p>\\n<p>In the past, you may have used <a href=\\\"http://phantomjs.org/\\\">PhantomJS</a> to achieve your browser automation tasks, however Chrome headless runs faster and also <a href=\\\"https://medium.com/@hartator/benchmark-headless-chrome-vs-phantomjs-e7f44c6956c\\\">consumes less memory</a>.</p>\\n<p>To programmatically interact with this headless version of Chrome, you can send commands over the <a href=\\\"https://chromedevtools.github.io/devtools-protocol/\\\">Chrome DevTools protocol</a>. Using the DevTools protocol, you can do most things you would do in your usual <em>browser</em> DevTools. Here’s an example of communicating over the DevTools Protocol via WebSockets to retrieve the current page URL from the inspected page:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// Gist: https://gist.github.com/umaar/ebc170660f15aa894fa4880f4b76e77d\\n\\n// You would use your own URL here\\n\\nconst devtools = new WebSocket('ws://localhost:9222/devtools/page/69990451-aaab-4ef8-87b1-ea77b8101b2a');\\n\\ndevtools.onmessage = ({data}) =&gt; {\\n\\tconst {result: {result: {value}}} = JSON.parse(data);\\n\\tconsole.log('WebSocket Message Received: ', value)\\n};\\n\\ndevtools.send(JSON.stringify({\\n\\tid: 1,\\n\\tmethod: 'Runtime.evaluate',\\n\\tparams: {\\n\\t\\texpression: `'The current URL is: ' + location.href`\\n\\t}\\n}));\\n</pre>\\n<p>As you can see, considering what it does, the code above is low-level and verbose. <a href=\\\"https://github.com/GoogleChrome/puppeteer\\\">Puppeteer</a> provides a more concise API to automate browser operations. </p>\\n<h2 id=\\\"puppeteer\\\">Puppeteer</h2>\\n<p>The automation code you write using the Puppeteer API actually makes calls over the DevTools Protocol API, which is exactly what’s covered in the previous section. Instead of having to craft WebSocket payloads, you can call APIs such as: </p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">page.goto(‘&lt;a href=&quot;https://example.com&quot;&gt;https://example.com&lt;/a&gt;‘)</pre>\\n<p>.</p>\\n<p>As shown in the Puppeteer documentation, you can run Puppeteer from Node.js code like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nconst puppeteer = require('puppeteer');\\n\\n(async () =&gt; {\\n  const browser = await puppeteer.launch();\\n  const page = await browser.newPage();\\n  await page.goto('https://example.com');\\n  await page.screenshot({path: 'example.png'});\\n  browser.close();\\n})();\\n</pre>\\n<p>The example above does the following:</p>\\n<ol>\\n<li>Launches Chrome.</li>\\n<li>Opens a new tab.</li>\\n<li>Navigates to example.com.</li>\\n<li>Takes a screenshot of the current page.</li>\\n<li>Closes the browser.</li>\\n</ol>\\n<p>Puppeteer includes <a href=\\\"https://github.com/GoogleChrome/puppeteer/tree/master/examples\\\">code examples</a> and <a href=\\\"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md\\\">API documentation</a>.</p>\\n<h3 id=\\\"puppeteer-a-practical-example\\\">Puppeteer: A practical example</h3>\\n<p>You could call the previous example (taking a screenshot of a page) the ‘<a href=\\\"https://en.wikipedia.org/wiki/%22Hello,_World!%22_program\\\">Hello world</a>’ of browser automation! It is useful to have a more practical example, or an example which uses a wider set of APIs, for demonstrative purposes.</p>\\n<p>The SitePen <a href=\\\"https://www.sitepen.com/contact/\\\">contact page</a> includes a contact form. After some debugging with DevTools, notice the form fields are customised from a CMS (Content Management System), the fields themselves are created after a client-side JavaScript request.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/2.png\\\" alt=\\\"Contact Page JSON\\\" class=\\\"screenshot alignnone size-full wp-image-15491\\\" /></p>\\n<p>Firstly, consider the following hypothetical scenario: we have some browser automation tests which navigate to the SitePen contact page, fills in form fields and submits the form. Before we discuss a solution, let’s understand the potential problems.</p>\\n<h3>In browser automation scenarios, what are the potential problems which can arise when allowing third party resources to download?</h3>\\n<p>Tip: Notice that some of these problems are not unique to third party requests. Imagine your website fetches some comments for a blog post from your own server via Ajax, think about what problems listed below would also apply to that example.</p>\\n<h4>Speed</strong></h4>\\n<p>Browser automation is notoriously <a href=\\\"https://www.google.co.uk/search?q=browser+automation+slow\\\">slow</a>. Often due to varying factors, like hard ‘sleeps’ rather than polling for changes, third-party scripts which are slow to download and slow to modify the page (which automation frameworks usually wait for), and many other aspects.</p>\\n<p>In this example: Network speed is a small issue.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/3.png\\\" alt=\\\"Contact form point time\\\" class=\\\"screenshot alignnone size-full wp-image-15492\\\" /></p>\\n<p>As you might notice, the form itself appeared at the 1.58 second mark, which is almost half a second after the first paint. You might think saving a few hundred milliseconds is not a big deal, but consider that many companies run large suites of browser automation tests frequently throughout the day, as the codebase changes. Seconds add up!</p>\\n<h4>Reliability</strong></h4>\\n<p>Third party services can:</p>\\n<ul>\\n<li>Go down for maintenance.</li>\\n<li>Unexpectedly return challenge pages (e.g. captchas) when they detect high traffic from the same IP address.</li>\\n<li>Charge you money for higher than usual API access.</li>\\n</ul>\\n<p>These issues can add to the frustration of working with your browser automation setup.</p>\\n<h4>Consistency:</strong></h4>\\n<p>Imagine your automation scripts target elements on the page via CSS selectors. If these same elements can appear or disappear based on what returns from a CMS, your automation scripts will likely fail. Dynamic data (rather than static data) can be challenging to work with in automation scripts as your code must accommodate multiple scenarios. This can also increase the complexity of your automation codebase.</p>\\n<p>Notice how speed, reliability &amp; consistency are three potential problems which you can alleviate by <a href=\\\"https://www.sitepen.com/blog/2014/07/14/mocking-data-with-intern/\\\">mocking resources</a> to third-party services. Generally, your goal is to manipulate a resource to cater to your specific use case.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/09/form-intercepted.png\\\" alt=\\\"Form Intercepted\\\" class=\\\"screenshot alignnone size-full wp-image-15353\\\" /></p>\\n<p>Notice how the form field labels include the text <em>‘intercepted’</em>. </p>\\n<p>You can find a <a href=\\\"https://github.com/umaar/puppeteer-sitepen-contact-example\\\">complete code example</a> which creates the screenshot above, on GitHub. The code example on GitHub does the following:</p>\\n<ul>\\n<li>Starts a static web server to serve the mock file.</li>\\n<li>Enables request interception via Puppeteer.</li>\\n<li>Navigates to the SitePen contact page.</li>\\n<li>Observes all network requests.</li>\\n<li>Intercepts the network request which populates the contact form.</li>\\n<li>Forwards the request onto a static resource on the filesystem.</li>\\n</ul>\\n<h2 id=\\\"firefox-headless\\\">Firefox Headless</h2>\\n<p>Firefox also offers a <a href=\\\"https://developer.mozilla.org/en-US/Firefox/Headless_mode\\\">headless</a> mode. Additionally, Mozilla offers <a href=\\\"https://github.com/mdn/headless-examples\\\">JavaScript</a> and <a href=\\\"https://github.com/mdn/headless-examples/tree/master/headlessfirefox-gradle\\\">Java</a> code examples for how to utilise Firefox’s headless mode. At the time of this writing, Firefox headless is only supported on Windows, with plans to support other platforms in the near future. There is a <a href=\\\"https://intoli.com/blog/running-selenium-with-headless-firefox/\\\">guide for connecting WebDriver to a headless version of Firefox</a> here:</p>\\n<h2 id=\\\"conclusion\\\">Conclusion</h2>\\n<p>We covered a number of topics:</p>\\n<ul>\\n<li><strong>Headless Browsers:</strong> Chrome and Firefox are able to run without a GUI. There are <a href=\\\"https://github.com/dhamaniasad/HeadlessBrowsers\\\">more options out there</a> for other browsers (e.g. Safari &amp; Edge)</li>\\n<li><strong>DevTools Protocol: </strong> This offers an <a href=\\\"https://chromedevtools.github.io/devtools-protocol/\\\">API</a> for controlling Chrome over WebSockets. We saw how you can drive a remote browser from a client side web page using the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\\\">WebSocket interface</a>.</li>\\n<li><strong>Chrome Headless</strong>: Chrome can run in a <a href=\\\"https://developers.google.com/web/updates/2017/04/headless-chrome\\\">headless</a> environment. Native support for this came out recently.</li>\\n<li><strong>Puppeteer</strong>: This software offers a high level API to control the Chrome browser via the DevTools protocol.</li>\\n<li><strong>Network Interception with Puppeteer</strong>: To demonstrate a more interesting use case, we saw how to modify network requests on the fly to provide a stable and speedier automation setup.</li>\\n<li><strong>Firefox Headless:</strong> Firefox can also run in a <a href=\\\"https://developer.mozilla.org/en-US/Firefox/Headless_mode\\\">headless</a> environment. Native support for this came out recently.</li>\\n</ul>\\n<p>Leveraging these techniques for browser automation, we can develop solutions to solve problems, whether it’s for quality assurance, productivity enhancements or data aggregation.</p>\\n</p>\\n<hr />\\n<h2>Next steps</h2>\\n<div>\\n<a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 2px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Do you need help creating a testing strategy for your next project? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help!</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Get help from <a href=\\\"https://www.sitepen.com/services/\\\">SitePen On-Demand Development</a>, our fast and efficient solutions to JavaScript development problems of any size.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Automating browsers provide many benefits including faster execution of repetitive tasks, ability to parallelise workloads and improved test coverage for your website. Google recently announced Puppeteer, a new tool to assist with Chrome browser automation.</p>\\n\",\"protected\":false},\"author\":83,\"featured_media\":15497,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[19,3,28,450,333],\"tags\":[451,452,453,263,454],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Browser Automation with Puppeteer | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/browser-automation-with-puppeteer/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Browser Automation with Puppeteer | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Automating browsers provide many benefits including faster execution of repetitive tasks, ability to parallelise workloads and improved test coverage for your website. Google recently announced Puppeteer, a new tool to assist with Chrome browser automation.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/browser-automation-with-puppeteer/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-10-04T17:10:19+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/browser-automation-with-puppeteer/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/browser-automation-with-puppeteer/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/browser-automation-with-puppeteer/\\\",\\\"name\\\":\\\"Browser Automation with Puppeteer | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/browser-automation-with-puppeteer/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-10-04T17:10:19+00:00\\\",\\\"dateModified\\\":\\\"2017-10-04T17:10:19+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/browser-automation-with-puppeteer/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\"}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15343\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15343\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15343/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/15497\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15343\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15343\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15343\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":83,\"name\":\"Umar Hansa\",\"url\":\"https://umaar.com/\",\"description\":\"Front-end web developer in London!\",\"link\":\"https://wp.sitepen.com/blog/author/uhansa/\",\"slug\":\"uhansa\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Umar Hansa, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Umar Hansa, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/uhansa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/uhansa/\\\",\\\"name\\\":\\\"Umar Hansa, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\",\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a774aeb5fbbce8b-LHR"],["cf-request-id","037e6d27190000ce8b441c3200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:19:44 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d2a9929dea85855836c0aa1d41cb184671592842784; expires=Wed, 22-Jul-20 16:19:44 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}