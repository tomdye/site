{"value":{"body":"[{\"id\":702,\"date\":\"2009-04-01T00:04:43\",\"date_gmt\":\"2009-04-01T07:04:43\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2009/04/01/queued-and-air-issues-part-i/\"},\"modified\":\"2019-12-11T05:17:38\",\"modified_gmt\":\"2019-12-11T13:17:38\",\"slug\":\"queued-and-air-issues-part-i\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/queued-and-air-issues-part-i/\",\"title\":{\"rendered\":\"Queued and AIR Issues, Part I\"},\"content\":{\"rendered\":\"<p>During the course of developing <a href=\\\"https://www.sitepen.com/labs/queued\\\">Queued</a>, we ran across a number of challenges developing with <a href=\\\"http://get.adobe.com/air\\\">AIR</a> that we needed to solve.  Some were very difficult to get around, while others were the result of our team needing to think outside the web-based paradigm.  In this post, I&#8217;ll talk about four issues we ran across that ended up shaping part of the <a href=\\\"http://code.google.com/p/queued\\\">Queued codebase</a>.</p>\\n<p><!--more--></p>\\n<h2>Cross-Window Communication: the OAuth Handshake</h2>\\n<p>One of the most challenging issues we needed to solve was how to do the <a href=\\\"http://developer.netflix.com/docs/Security#0_18325\\\">OAuth handshake with Netflix</a>.  As a quick review, the handshake is a process in which the user is directed to a web page on the application&#8217;s server&mdash;where they can enter their authentication information and receive a token in response:</p>\\n<p><a href='https://wp.sitepen.com/wp-content/uploads/2009/03/handshake.jpg' title='Queued’s OAuth handshake'><img src='https://wp.sitepen.com/wp-content/uploads/2009/03/handshake.jpg' alt='Queued’s OAuth handshake' /></a></p>\\n<h3>The Problem</h3>\\n<p>Adobe has done a great job in melding the web development paradigm with the desktop application paradigm; among the things that they&#8217;ve done is to apply some of the same sandbox security principles to any window created that applies to most browsers.  Unfortunately for us, part of this sandbox applies to any window that loads an HTML page that does not originate from the same domain&mdash;which meant that when we load the authorization page from Netflix&#8217;s servers, <em>we no longer had any kind of script or event access to that window</em>.  This includes access to things like the <em>window.onload</em> event&#8230;which meant that we had no real way of knowing what happens within the window.</p>\\n<p>Unfortunately, the OAuth handshake is designed such that the user is normally redirected to a web page on the originating server, with a parameter passed to it that the originating server then uses to redirect the user back with an access token.</p>\\n<h3>The Solution</h3>\\n<p>What we discovered was that we had access to the created window&#8217;s <code>window.location</code> property and the <em>onClose</em> event of the window object we used, so in the end my friend and colleague <a href=\\\"https://www.sitepen.com/blog/author/mwilcox/\\\">Mike Wilcox</a> simply polled the open window for a change in URL.  Here&#8217;s the code in question (abbreviated):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar seenOnce = false;\\r\\nvar v = setInterval(function(){\\r\\n\\tvar wurl = win1._window.location;\\r\\n\\tif(wurl != url){\\r\\n\\t\\tif(!seenOnce &amp;&amp; wurl==&quot;https://api-user.netflix.com/oauth/login&quot;){\\r\\n\\t\\t\\tseenOnce = true;\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t} \\r\\n\\t\\telse if(wurl==&quot;http://www.netflix.com/TermsOfUse&quot;){\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\telse if(wurl.indexOf(&quot;Failed&quot;)&gt;0){\\r\\n\\t\\t\\treturn;\\r\\n\\t\\t}\\r\\n\\t\\tclearInterval(v);\\r\\n\\t\\tv = null;\\r\\n\\t\\twin1.close();\\r\\n\\t}\\r\\n}, 1000);\\r\\nvar c2 = dojo.connect(win1, &quot;onClose&quot;, function(){\\r\\n\\tif(v){\\r\\n\\t\\tdfd.errback(&quot;user&quot;);\\r\\n\\t\\tclearInterval(v);\\r\\n\\t\\tdojo.disconnect(c2);\\r\\n\\t\\treturn;\\r\\n\\t}\\r\\n\\r\\n\\t//\\twe're good to go, so go get the access token\\r\\n\\tdojo.xhrGet(dojox.io.OAuth.sign(&quot;GET&quot;, {\\r\\n\\t\\turl: &quot;http://api.netflix.com/oauth/access_token&quot;,\\r\\n\\t\\thandleAs: &quot;text&quot;,\\r\\n\\t\\terror: function(err, ioArgs){\\r\\n\\t\\t\\tdfd.errback(&quot;auth&quot;);\\r\\n\\t\\t},\\r\\n\\t\\tload: function(response, ioArgs){\\r\\n\\t\\t\\tvar a = response.split(&quot;&amp;&quot;), o = {};\\r\\n\\t\\t\\tdojo.forEach(a, function(item){\\r\\n\\t\\t\\t\\tvar p = item.split(&quot;=&quot;);\\r\\n\\t\\t\\t\\to[p[0]] = unescape(p[1]);\\r\\n\\t\\t\\t});\\r\\n\\t\\t\\tqd.app.authorize(o.oauth_token,\\r\\n\\t\\t\\t\\t o.oauth_token_secret, o.user_id);\\r\\n\\t\\t\\tdfd.callback(o.user_id);\\r\\n\\t\\t}\\r\\n\\t}, token), false);\\r\\n});\\r\\n</pre>\\n<p>What the above code does is poll for a change in the URL of the opened window, and acts upon that change. If the boolean <em>seenOnce</em> ends up as true, we know that the user has authorized Queued for access to their Netflix information, and can finalize the OAuth handshake by getting the actual access token using <code>dojo.xhrGet</code> and <code>dojox.io.OAuth</code>.</p>\\n<h2>dojo.connect vs. AIR&#8217;s EventListener</h2>\\n<p>Another problem we ran across was the fact that all of the AIR objects made available to you during development were essentially incompatible with Dojo&#8217;s signals and slots workhorse, <a href=\\\"http://docs.dojocampus.org/dojo/connect\\\">dojo.connect</a>.  For those who don&#8217;t know Dojo all that well, <code>dojo.connect</code> is an ingenious way of attaching functions to other functions.  It does this by swapping out the original function with another one, that will execute a queue of <em>connected</em> functions that have been applied by <code>connect</code>.</p>\\n<h3>The Problem</h3>\\n<p>The issue here is that dojo.connect assumes that the object being connected to is a JavaScript Function object; however, methods on AIR objects <em>are not true JavaScript Function objects at all</em>.  This basically means that the following code example will not compile with AIR:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.connect(air.NativeApplication.nativeApplication, air.Event.USER_IDLE, \\r\\n\\tfunction(evt){\\r\\n\\t\\tdoSomething();\\r\\n});\\r\\n</pre>\\n<p>Coming from a pure Ajax development environment, this can throw anyone for a curve.</p>\\n<h3>The solution</h3>\\n<p>The workaround for this was the following approach:</p>\\n<ol>\\n<li>Create a private function</li>\\n<li>Create a function that is attached to the wrapping JavaScript object</li>\\n<li>Call the private function with <em>another</em> function, passed to the native AIR object&#8217;s <code>addEventListener</code> method.</li>\\n</ol>\\n<p>Using the example from above (and assuming this is within an object), here&#8217;s the code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar self = this;\\r\\n\\r\\n// The private function\\r\\nfunction onIdle(evt){\\r\\n    self.onIdle(evt);\\r\\n}\\r\\n\\r\\n// The public function\\r\\nthis.onIdle = function(evt){\\r\\n    // this is an event stub that can be connected to by\\r\\n    // other objects.\\r\\n};\\r\\n\\r\\n// attach the private function to the AIR object\\r\\nair.NativeApplication.nativeApplication.addEventListener(air.Event.USER_IDLE, \\r\\n\\tonIdle);\\r\\n</pre>\\n<p>The pattern is a little verbose, but now we can do something like this, elsewhere in the application:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.connect(qd.app, &quot;onIdle&quot;, function(evt){\\r\\n    // and now we can make use of the app's onIdle event\\r\\n    // from anywhere else in Queued.\\r\\n});\\r\\n</pre>\\n<p>Once we figured out this pattern, we were able to take full advantage of events fired off by AIR&#8217;s native objects using the familiar <code>dojo.connect</code> paradigm.</p>\\n<h2>AIR&#8217;s New Encrypted Database and the Asynchronous Connection</h2>\\n<p>One of the exciting new features included with AIR 1.5 is the new <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/devappshtml/WS5b3ccc516d4fbf351e63e3d118666ade46-7d29.html\\\">encrypted SQL database</a>, based on <a href=\\\"http://sqlite.org/\\\">the SQLite engine</a>.  We use this database to cache all of the Netflix title information that has been viewed, as well as the user&#8217;s queue information and the transaction queue (used for synchronization when returning from offline mode).  One of the neatest things about the new engine is that you can open either a synchronous or an <em>asynchronous</em> connection to the database.</p>\\n<p>The advantage of using an asynchronous connection is that <em>all actions performed against the database are executed on a separate thread</em>.  This means that doing some major SQL will <strong>not</strong> interrupt the thread that the user interface is run on&mdash;resulting in a faster-performing application.</p>\\n<h3>The Problem</h3>\\n<p>Aside from the complexity this introduces in code (see the <a href=\\\"http://code.google.com/p/queued/source/browse/trunk/src/js/dev/qd/services/data.js\\\"> qd.services.data</a> object), we discovered something else&mdash;on faster machines, throwing a large number of SQL statements at the database in a short period of time would lock the database file.</p>\\n<p>This was particularly problematic when trying to store all of the Netflix titles that might exist in someone&#8217;s queue.  As an example, in my own account I have rented over 350 titles over the lifetime of my membership (I&#8217;ve been a Netflix member since 2003); when viewing my rental history with Queued for the first time, Queued attempts to store the information for all 350+ titles so that I can view that information offline if I want to.</p>\\n<h3>The Solution</h3>\\n<p>Since we were able to reproduce this issue consistently (some of my colleagues are avid movie watchers and have rented a <em>lot</em> of titles), the solution was to implement an internal queue of our own (oh, the irony!) within the <code>qd.services.data</code>.  We could do this because we wrapped AIR&#8217;s database access with our own, to simplify the interface and to allow for other parts of the application to <code>connect</code> to various events fired by qd.services.data.  Here&#8217;s the basic code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar queue = [];\\r\\nfunction exec(){\\r\\n    var o = queue.shift();\\r\\n    if(o){\\r\\n        o.deferred.addCallback(exec);\\r\\n        o.deferred.addErrback(exec);\\r\\n        o.statement.execute();\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>(You can see the full code <a href=\\\"http://code.google.com/p/queued/source/browse/trunk/src/js/dev/qd/services/data.js\\\">here</a>, starting at line 238.)</p>\\n<p>In Queued, every query sent to the database is <em>prepared</em> with a <a href=\\\"http://docs.dojocampus.org/dojo/Deferred\\\">dojo.Deferred</a> object; this deferred is the primary callback mechanism used throughout Queued to handle async requests.  What the above code does is search the internal queue for the next statement&mdash;and if it finds it, attaches the private <code>exec</code> function to the statement&#8217;s callback chain, ensuring that it will only execute the next statement when the previous one has completed.</p>\\n<p>By adding in this internal queue, we solved the database locking issues.</p>\\n<h2>Storing the Password for the Encrypted Database</h2>\\n<p>The encrypted database included with AIR requires the use of a password for opening it; you set the password when you create the database.  Because the database is encrypted using the <a href=\\\"http://en.wikipedia.org/wiki/AES_(cipher)\\\">AES</a> cipher, the length of the password is important; it must be exactly 16 bytes long.</p>\\n<p>Asking a user to create this password and use it to login to Queued each time the application was run seemed a bit heavy-handed to us (especially if we needed to start padding that password to meet the 16 byte requirement), so we needed to come up with a way of dealing with this without user intervention.</p>\\n<h3>The solution</h3>\\n<p>To solve this issue, we generate a random password the first time Queued is run, like so:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*&quot; + \\r\\n     &quot;~?0123456789-_abcdefghijklmnopqrstuvwxyz&quot;,\\r\\n     key = &quot;&quot;;\\r\\nfor(var i=0; i&lt;16; i++){\\r\\n    key += tab.charAt(Math.round(Math.random()*tab.length));\\r\\n}\\r\\n</pre>\\n<p>This is not particularly robust by crypto standards, but we felt it was more than sufficient for Queued.</p>\\n<p>From there, we took full advantage of the <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/devappshtml/WS5b3ccc516d4fbf351e63e3d118666ade46-7e31.html\\\">Encrypted Local Storage</a> (or ELS), also included with AIR.  This local storage is different from the encrypted database; it&#8217;s much smaller and cannot handle large amounts of data (I&#8217;ll talk about this in Part II).</p>\\n<p>But it is perfect for storing a password to a different data store.  So we pop this password into the storage once it&#8217;s generated.  Here&#8217;s the full code (run onLoad):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nqd.services.init = function(){\\r\\n    qd.app.splash(&quot;Getting database password&quot;);\\r\\n    pwd = storage.item(dbProp);\\r\\n    if(!pwd){\\r\\n        qd.app.splash(&quot;Generating database password&quot;);\\r\\n        var tab = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&amp;*&quot; + \\r\\n            &quot;~?0123456789-_abcdefghijklmnopqrstuvwxyz&quot;,\\r\\n            key = &quot;&quot;;\\r\\n        for(var i=0; i&lt;16; i++){\\r\\n            key += tab.charAt(Math.round(Math.random()*tab.length));\\r\\n        }\\r\\n        pwd = storage.item(dbProp, key);\\r\\n        qd.app.splash(&quot;Password generated (&quot; + pwd.length + &quot;)&quot;);\\r\\n    }\\r\\n\\r\\n    qd.app.splash(&quot;Initializing network monitor&quot;);\\r\\n    qd.services.network.start();\\r\\n    qd.app.splash(&quot;Initializing database services&quot;);\\r\\n    qd.services.data.init(pwd, db, qd.services._forceCreate);\\r\\n};\\r\\n</pre>\\n<p>The above code looks to the ELS for an existing password, and if it doesn&#8217;t find it it will create it and force the database services to create the database.  In this way, we&#8217;re able to take full advantage of AIR&#8217;s encrypted storage facilities without forcing user interaction.</p>\\n<h2>Other issues</h2>\\n<p>In part II of this post, I&#8217;ll talk about five other issues we ran across during the course of Queued&#8217;s development&mdash;the application sandbox, initial window placement, the ELS and performance, issues with capturing and handling the application&#8217;s exit, and the loading of icons for the tray/dock.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>During the course of developing Queued, we ran across a number of challenges developing with AIR that we needed to solve. Some were very difficult to get around, while others were the result of our team needing to think outside the web-based paradigm. In this post, I&#8217;ll talk about four issues we ran across that [&hellip;]</p>\\n\",\"protected\":false},\"author\":15,\"featured_media\":22075,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[288,45,307],\"tags\":[146,52,14,305],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Queued and AIR Issues, Part I | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-i/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Queued and AIR Issues, Part I | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"During the course of developing Queued, we ran across a number of challenges developing with AIR that we needed to solve. Some were very difficult to get around, while others were the result of our team needing to think outside the web-based paradigm. In this post, I&#8217;ll talk about four issues we ran across that [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-i/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2009-04-01T07:04:43+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2019-12-11T13:17:38+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-i/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-i/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-i/\\\",\\\"name\\\":\\\"Queued and AIR Issues, Part I | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-i/#primaryimage\\\"},\\\"datePublished\\\":\\\"2009-04-01T07:04:43+00:00\\\",\\\"dateModified\\\":\\\"2019-12-11T13:17:38+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/8d656940c34d66b3b8abb8d96024a77d\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-i/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/8d656940c34d66b3b8abb8d96024a77d\\\",\\\"name\\\":\\\"Tom Trenka\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Tom Trenka\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/702\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/15\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=702\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/702/revisions\"}],\"predecessor-version\":[{\"id\":19717,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/702/revisions/19717\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=702\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=702\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=702\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=702\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":15,\"name\":\"Tom Trenka\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/ttrenka/\",\"slug\":\"ttrenka\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Tom Trenka, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Tom Trenka, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/ttrenka/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/ttrenka/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/ttrenka/\\\",\\\"name\\\":\\\"Tom Trenka, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/8d656940c34d66b3b8abb8d96024a77d\\\",\\\"name\\\":\\\"Tom Trenka\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Tom Trenka\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/ttrenka/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/15\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b01abe6f874e684-LHR"],["cf-request-id","03d4e9c45d0000e6842422f200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:23:12 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d4423703b33cb56b93293bcfeae0aa4fe1594293791; expires=Sat, 08-Aug-20 11:23:11 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}