{"value":{"body":"[{\"id\":16270,\"date\":\"2018-09-19T08:30:32\",\"date_gmt\":\"2018-09-19T15:30:32\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=16270\"},\"modified\":\"2020-01-23T11:04:12\",\"modified_gmt\":\"2020-01-23T19:04:12\",\"slug\":\"the-return-of-sharedarraybuffers-and-atomics\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/\",\"title\":{\"rendered\":\"The Return of SharedArrayBuffers and Atomics\"},\"content\":{\"rendered\":\"<p>A common complaint of modern web apps is the concept of <em>jank</em>; web pages being unresponsive to user input and frame rates being low. Left unmitigated, this problem leads to a poor quality experience for end users of our web applications. You might ask: is this what causes jank? One common cause apart from complex/inefficient animations are <em>blocking operations.</em></p>\\n<p>JavaScript is single threaded, and as such, it can only be executing one thing at a time, so if a long-running task <em>blocks</em> the browser&#8217;s main thread, the browser struggles to render. For example, if we were to traverse and perform operations on a large data structure, this might cause rendering to choke and our Frames Per Second (FPS) to nosedive.</p>\\n<p><!--more--></p>\\n<p>To improve animation performance, we can use <code>requestAnimationFrame</code> to schedule DOM and styling updates before a render. For shorter tasks, we can use <code>requestIdleCallback</code> to schedule work when the browser is idle (usually between frame renders). However, because the browser attempts to render a frame every 16 milliseconds (to achieve 60 FPS) if the tasks are long in duration, an application ends up skipping frames. One solution to this problem is to use <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\\\">Web Workers</a>, which are ideal for long-running tasks as they run in a separate thread, allowing the main thread to respond to user input and rendering frames. Web Workers allow parallel execution in the browser context. However, Web Workers are not without their drawbacks; for example, there is a <a href=\\\"https://www.loxodrome.io/post/web-worker-performance/\\\">cost of transferring data to and from the Worker thread</a>. The browser uses the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\\\">Structured Clone algorithm</a> to duplicate an object. This cost, depending on circumstance, can outweigh the benefit of transferring to the Worker thread.</p>\\n<h3>What if we could avoid copying data?</h3>\\n<p>One way to circumvent this problem is by leveraging <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\\\">SharedArrayBuffer</a>, part of the ECMAScript 2017 standard. For JavaScript developers, this construct allows us to create views on shared, typed memory. Rather than copying the data from the main thread to the Worker and back again, we can update the same shared memory from both sides. In practice creating a SharedArrayBuffer and corresponding shared array might look something like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n// Creating a shared buffer\\r\\nconst length = 10;\\r\\n // Get the size we want in bytes for the buffer\\r\\nconst size = Int32Array.BYTES_PER_ELEMENT * length;\\r\\n // Create a buffer for 10 integers\\r\\nconst sharedBuffer = new SharedArrayBuffer(size);\\r\\nconst sharedArray = new Int32Array(sharedBuffer);\\r\\n\\r\\n</pre>\\n<p>Now we have a shared buffer that we can pass to a worker context and also have an integer Array that leverages that shared buffer. To pass this buffer reference to the worker:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n// main.js\\r\\nworker.postMessage(sharedBuffer);\\r\\n\\r\\n</pre>\\n<p>This buffer allows us to create another shared array on the worker side:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n// worker.js\\r\\nconstsharedArray = new Int32Array(m.data);\\r\\n\\r\\n</pre>\\n<p>We&#8217;ve created a corresponding array on both the main and worker side, but how do we access and sensibly update that array? In the next section, we look at the solution to accessing and updating SharedArrayBuffers from multiple contexts.</p>\\n<h3>Introducing Atomics</h3>\\n<p>The problem with being able to update things from multiple threads is that we can end up with a situation where we are racing around updating and reading memory in a difficult to control manner. This problem gets solved by <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics\\\">Atomics</a>. Atomic operations ensure that we have a standardized way of reading and writing data in a predictable order, waiting for such operations to have finished before starting the next. Essentially, it helps us handle <a href=\\\"https://en.wikipedia.org/wiki/Race_condition\\\">race conditions</a>.</p>\\n<p>Letâ€™s say from the main thread we wanted to set an array of ten 0s; we could do that using <code>Atomic.load</code>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n// main.js\\r\\nconst worker = new Worker('worker.js');\\r\\nconst length = 10;\\r\\nconst size = Int32Array.BYTES_PER_ELEMENT * length;\\r\\n // Create a buffer for 10 integers\\r\\nconst sharedBuffer = new SharedArrayBuffer(size);\\r\\nconst sharedArray = new Int32Array(sharedBuffer);\\r\\nfor (let i = 0; i &lt; 10; i++) {\\r\\n\\tAtomics.store(sharedArray, i, 0);\\r\\n}\\r\\nworker.postMessage(sharedBuffer);\\r\\n\\r\\n</pre>\\n<p>You can then access the changed data from the worker:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n// worker.js\\r\\nself.addEventListener('message', (event) =&gt; {\\r\\n\\tconst sharedArray = new Int32Array(event.data);\\r\\n\\tfor (let i = 0; i &lt; 10; i++) {\\r\\n\\t\\tconst arrayValue = Atomics.load(sharedArray, i);\\r\\n\\t\\tconsole.log(`The item at array index ${i} is ${arrayValue}`);\\r\\n\\t}\\r\\n}, false);\\r\\n\\r\\n</pre>\\n<p>What if we wanted to update the array from the worker? We have two options for these updates using Atomics. We can use <code>store</code> which we&#8217;ve seen used previously, or we can use <code>exchange</code>. The difference here is that <code>store</code> returns the value gets stored, and <code>exchange</code> returns the value that gets replaced. Let&#8217;s see how that works in practice:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n// worker.js\\r\\nself.addEventListener('message', (event) =&gt; {\\r\\n\\tconst sharedArray = new Int32Array(event.data);\\r\\n\\tfor (let i = 0; i &lt; 10; i++) {\\r\\n\\t\\tif (i%2 === 0) {\\r\\n\\t\\t\\tconst storedValue = Atomics.store(sharedArray, i, 1);\\r\\n\\t\\t\\tconsole.log(`The item at array index ${i} is now ${storedValue}`);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tconst exchangedValue = Atomics.exchange(sharedArray, i, 2);\\r\\n\\t\\t\\tconsole.log(`The item at array index ${i} was ${exchangedValue}, now 2`);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}, false);\\r\\n\\r\\n</pre>\\n<p>Now we can read and update the array from both the main thread and the worker thread. Atomics have a few other methods we can use to our advantage for managing our new shared arrays. Two of the most useful methods are <code>wait</code> and <code>wake</code>. <code>wait</code> allows us to wait on a change on an array index and then continue with operations. In practice this might look something like this on the worker side:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\nself.addEventListener('message', (event) =&gt; {\\r\\n\\tconst sharedArray = new Int32Array(event.data);\\r\\n\\tconst arrayIndex = 0;\\r\\n\\tconst expectedStoredValue = 50;\\r\\n\\t// An optional 4th argument can be passed which is a timeout\\r\\n\\tAtomics.wait(sharedArray, arrayIndex, expectedStoredValue);\\r\\n\\t// Log the new value\\r\\n\\tconsole.log(Atomics.load(sharedArray, arrayIndex));\\r\\n}, false);\\r\\n\\r\\n</pre>\\n<p>Here we are waiting on a change on <code>arrayIndex</code> 0 where the expected stored value is to be 50. Then we can tell it to wake up from the main thread when we&#8217;ve changed the value at the index:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\nconst newArrayValue = 100;\\r\\nAtomics.store(sharedArray, 0, newArrayValue);\\r\\n// The index that is being waited on\\r\\nconst arrayIndex = 0;\\r\\n// The first agent waiting on the value\\r\\nconst queuePos = 1;\\r\\nAtomics.wake(sharedArray, arrayIndex, queuePos);\\r\\n\\r\\n</pre>\\n<p>Other functions get provided for convenience such as <code>add</code> and <code>sub</code> which add or subtract from the array index respectively. If you are interested in <a href=\\\"https://en.wikipedia.org/wiki/Bitwise_operation\\\">Bitwise operations</a>, there are some provided including <code>or</code>, <code>and</code> and <code>xor</code>.</p>\\n<h3>What about transferring other data types?</h3>\\n<p>Much of the time we might want to do operations with data that isn&#8217;t floats or integers. A typical case, for example, is strings. To pass strings, we need to convert them to a numeric representation, for example a known standard for encoding such as UTF-16. We can achieve this by following by doing the following:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\nfunction sharedArrayBufferToUtf16String(buf) {\\r\\n\\tconst array = new Uint16Array(buf);\\r\\n\\treturn String.fromCharCode.apply(null, array);\\r\\n}\\r\\n\\r\\nfunction utf16StringToSharedArrayBuffer(str) {\\r\\n\\t// 2 bytes for each char\\r\\n\\tconst bytes = str.length *2;\\r\\n\\tconst buffer = new SharedArrayBuffer(bytes);\\r\\n\\tconst arrayBuffer = new Uint16Array(buffer);\\r\\n\\tfor (let i = 0, strLen = str.length; i &lt; strLen; i++) {\\r\\n\\t\\tarrayBuffer[i] = str.charCodeAt(i);\\r\\n\\t}\\r\\n\\treturn { array: arrayBuffer, buffer: buffer };\\r\\n}\\r\\n\\r\\nconst exampleString = &quot;Hello world, this is an example string!&quot;;\\r\\nconst sharedArrayBuffer = utf16StringToSharedArrayBuffer(exampleString).buffer;\\r\\nconst backToString = sharedArrayBufferToUtf16String(sharedArrayBuffer);\\r\\n\\r\\n</pre>\\n<p>This approach works well, but it&#8217;s also constrained to UTF-16. Here some might ask about using native browser APIs and a more straightforward way of doing this. Valid native browser APIs exist for this behavior, namely <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\\\">TextDecoder</a> and <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\\\">TextEncoder</a>. Unfortunately, we <strong>cannot</strong> (currently) use these directly alongside SharedArrayBuffers. This limitation is a shame as it would allow us to do various encodings and leverage the speed of native execution. If you require UTF-8 the following should be sufficient for use with SharedArrayBuffers:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\nfunction encodeUf8StringToSharedArrayBuffer(string) {\\r\\n\\t// Calculate the byte size of the UTF-8 string\\r\\n\\tlet bytes = string.length;\\r\\n\\tfor (let i = string.length -1; i &lt;= 0; i--) {\\r\\n\\t\\tconst code = string.charCodeAt(i);\\r\\n\\t\\tif (code &gt; 0x7f &amp;&amp; code &lt;= 0x7ff) {\\r\\n\\t\\t\\tbytes++;\\r\\n\\t\\telse if (code &gt; 0x7ff &amp;&amp; code &lt;= 0xffff) {\\r\\n\\t\\t\\tbytes+=2;\\r\\n\\t\\tif (code &gt;= 0xdc00 &amp;&amp; code &lt;= 0xdfff) {\\r\\n\\t\\t\\ti--; // trail surrogate\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tconst buffer = new SharedArrayBuffer(bytes);\\r\\n\\tconst arrayBuffer = new Uint8Array(buffer);\\r\\n\\tconst encoded = unescape(encodeURIComponent(string));\\r\\n\\tfor (var i = 0; i &lt; encoded.length; i++) {\\r\\n\\t\\tarrayBuffer[i] = encoded[i].charCodeAt(0);\\r\\n\\t}\\r\\n\\treturn { array: arrayBuffer, buffer: buffer };\\r\\n}\\r\\n\\r\\nfunction decodeUtf8StringFromSharedArrayBuffer(array) {\\r\\n\\tvar encodedString = String.fromCharCode.apply(null, array);\\r\\n\\tvar decodedString = decodeURIComponent(escape(encodedString));\\r\\n\\treturn decodedString;\\r\\n}\\r\\n\\r\\n</pre>\\n<p>In theory, you could take these methods a step further to break down functions or other types using <code>toString</code> on the encoding side and <code>new Function(\\\"return \\\" + decodedFuncStr)()</code> on the returned value to generate a new function, but this would be unadvised unless you have strong reasons for doing so. Also, functions would have to be <a href=\\\"https://en.wikipedia.org/wiki/Pure_function\\\">pure</a> to work correctly.</p>\\n<h3>Browser Support</h3>\\n<p>Many browsers support SharedArrayBuffers, however, because of issues with the <a href=\\\"https://meltdownattack.com/\\\">Spectre and Meltdown</a> exploits disclosed in January 2018, most vendors have disabled them. As a reference, you can read <a href=\\\"https://webkit.org/blog/8048/what-spectre-and-meltdown-mean-for-webkit/\\\">the post from the Webkit (Safari) team</a> about how it affects browsers. Mitigations have been worked on by many of the browser vendors, and Chrome recently switched SharedArrayBuffers back on, with Firefox turning it back on behind a flag from version 57. Edge plans to <a href=\\\"https://blogs.windows.com/msedgedev/2018/01/03/speculative-execution-mitigations-microsoft-edge-internet-explorer/\\\">restore SharedArrayBuffers when they feel confident it cannot get exploited on the platform</a>. Overall there is a willingness to support SharedArrayBuffers amongst browser vendors, but the hangover from these exploits is still apparent.</p>\\n<h3>Conclusion</h3>\\n<p>Here you can see how we can leverage SharedArrayBuffers to share memory between various thread contexts. We have also demonstrated how we can avoid race conditions and do predictable updates to an array using the Atomics methods. Furthermore, we explored how we can, with a bit of work, share strings between execution contexts allowing for more flexibility in dealing with data between execution contexts. Overall, the future of SharedArrayBuffers and Atomics looks bright. With mitigations being worked on for Spectre and Meltdown, and with SharedArrayBuffers and Atomics already being re-enabled in Chrome, we see a push for their comeback.</p>\\n<h3>Next Steps</h3>\\n<p>Are you looking for help building applications that leverage modern best practices? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>A common complaint of modern web apps is the concept of jank; web pages being unresponsive to user input and frame rates being low. Left unmitigated, this problem leads to a poor quality experience for end users of our web applications. You might ask: is this what causes jank? One common cause apart from complex/inefficient [&hellip;]</p>\\n\",\"protected\":false},\"author\":2,\"featured_media\":22086,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,3,6],\"tags\":[5],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>The Return of SharedArrayBuffers and Atomics | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"A common complaint of modern web apps is the concept of jank; web pages being unresponsive to user input and frame rates being low. Left unmitigated, this problem leads to a poor quality experience for end users of our web applications. You might ask: is this what causes jank? One common cause apart from complex/inefficient\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"The Return of SharedArrayBuffers and Atomics | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"A common complaint of modern web apps is the concept of jank; web pages being unresponsive to user input and frame rates being low. Left unmitigated, this problem leads to a poor quality experience for end users of our web applications. You might ask: is this what causes jank? One common cause apart from complex/inefficient\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2018-09-19T15:30:32+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-23T19:04:12+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"The Return of SharedArrayBuffers and Atomics\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/\\\",\\\"name\\\":\\\"The Return of SharedArrayBuffers and Atomics | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/#primaryimage\\\"},\\\"datePublished\\\":\\\"2018-09-19T15:30:32+00:00\\\",\\\"dateModified\\\":\\\"2020-01-23T19:04:12+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\"},\\\"description\\\":\\\"A common complaint of modern web apps is the concept of jank; web pages being unresponsive to user input and frame rates being low. Left unmitigated, this problem leads to a poor quality experience for end users of our web applications. You might ask: is this what causes jank? One common cause apart from complex/inefficient\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16270\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=16270\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16270/revisions\"}],\"predecessor-version\":[{\"id\":22087,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16270/revisions/22087\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22086\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=16270\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=16270\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=16270\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=16270\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":2,\"name\":\"James Milner\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jmilner/\",\"slug\":\"jmilner\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>James Milner, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"James Milner, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jmilner/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jmilner/\\\",\\\"name\\\":\\\"James Milner, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22086,\"date\":\"2020-01-23T11:03:57\",\"slug\":\"sharedarraybuffers\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/the-return-of-sharedarraybuffers-and-atomics/sharedarraybuffers/\",\"title\":{\"rendered\":\"SharedArrayBuffers\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>SharedArrayBuffers | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"SharedArrayBuffers | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-23T19:04:03+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\\\",\\\"name\\\":\\\"SharedArrayBuffers | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-23T19:03:57+00:00\\\",\\\"dateModified\\\":\\\"2020-01-23T19:04:03+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"The Return of SharedArrayBuffers and Atomics\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2018/09/SharedArrayBuffers.jpg\",\"sizes\":{\"medium\":{\"file\":\"SharedArrayBuffers-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers-300x158.jpg\"},\"large\":{\"file\":\"SharedArrayBuffers-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers-1024x538.jpg\"},\"thumbnail\":{\"file\":\"SharedArrayBuffers-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers-150x150.jpg\"},\"medium_large\":{\"file\":\"SharedArrayBuffers-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers-768x403.jpg\"},\"full\":{\"file\":\"SharedArrayBuffers.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/09/SharedArrayBuffers.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22086\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:34:15 GMT"],["expires","Wed, 09 Sep 2020 15:34:15 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}