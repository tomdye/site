{"value":{"body":"[{\"id\":14513,\"date\":\"2017-06-27T09:57:18\",\"date_gmt\":\"2017-06-27T16:57:18\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=14513\"},\"modified\":\"2020-03-30T06:40:33\",\"modified_gmt\":\"2020-03-30T13:40:33\",\"slug\":\"web-frameworks-user-experience-design\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-user-experience-design/\",\"title\":{\"rendered\":\"Web Frameworks: User Experience Design\"},\"content\":{\"rendered\":\"<!-- Added by Post/Page specific custom CSS plugin, thank you for using! -->\\n<style type=\\\"text/css\\\">.title span {\\r\\ndisplay:block;\\r\\nfont-weight:inherit !important;\\r\\n}\\r\\nli {\\r\\nmargin-bottom:.5em !important;\\r\\n}\\r\\n.rule {\\r\\nheight:1px;\\r\\nwidth:100%;\\r\\ndisplay:block;\\r\\nclear:both;\\r\\nmargin-bottom:40px;\\r\\nmargin-top:40px;\\r\\nbackground:#EAEAEA;\\r\\n}\\r\\n.feature-icon {\\r\\ndisplay: block;\\r\\nmargin-left:auto;\\r\\nmargin-right:auto;\\r\\nwidth:130px;\\r\\nmargin-bottom:10px;\\r\\n}\\r\\n.feature-item {\\r\\ntext-align:center;\\r\\nmargin-top: 10px !important;\\r\\nmargin-bottom:30px !important;\\r\\n}\\r\\n.jump-to {\\r\\nmargin:0 !important;\\r\\ntext-align:center;\\r\\n}\\r\\n.jump-to li {\\r\\nmargin:0 !important;\\r\\nwidth:15%;\\r\\ndisplay:inline-block;\\r\\npadding:5px;\\r\\n}\\r\\n.jump-nav {\\r\\nposition:fixed;\\r\\nbottom:0px;\\r\\nleft:0px;\\r\\nwidth:100%;\\r\\n}</style>\\n<p>While instruments such as guitar and drums are part of a band, how they are used by the musicians define the style of the band&#8217;s music. Similarly, the elements of an application user interface connected together define the user experience. In this post as part of our ongoing series about frameworks, we are going to explore in depth the ways in which frameworks enable an overall UX design.</p>\\n<p><!--more--></p>\\n<p>Many of us in software engineering look at UX design as a bit of a mystical art, populated by overtly creative people, wearing checked shirts, who get upset when the button is one pixel off from their original design, is just the wrong shade of pink, or does not have the right snap within an animation. For those in UX design, the software engineering teams may be thought of as the modern day construction workers, who never estimate anything correctly, and fail to build things as designed.</p>\\n<p>At the end of the design and development partnerships, the users of our applications have their own expectations, voiced and unvoiced, which we are trying to satiate. Our choice of framework has a significant impact on our ability to meet these needs.</p>\\n<p><img class=\\\"alignnone size-full wp-image-14553\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/expectations3.gif\\\" alt=\\\"\\\" /></p>\\n<h2>Design ethos</h2>\\n<p>Some JavaScript frameworks offer an overall design ethos, of how not only the UI should look and feel, but offer strong options of how a transaction is completed. Depending on your development needs, having a well designed and coherent design ethos will make it easier to rapidly provide an application which has a look and feel that is familiar and intuitive. In some cases though, your unique selling point might be the overall design of the application, providing a user experience that differentiates you in the marketplace. The ease of expressing a UX design would be of greater import to you when providing a differentiated user experience.</p>\\n<h2>Customizing look and feel</h2>\\n<p>Even if you adopt the supplied design philosophy, the ability to tweak the look and feel to meet your needs is likely to be a requirement. While we touched on this subject in the <a href=\\\"https://www.sitepen.com/blog/2017/06/16/web-frameworks-user-interface-development/\\\">previous post</a> in this series, it is good to revisit some of these concepts in the context of the entire user experience.</p>\\n<h2>Design workflow</h2>\\n<p>Materializing a design vision can be difficult, often with designers and software engineers speaking two different languages. How this workflow is achieved in practice will impact your delivery timelines. Do frameworks offer anything to make this process easier?</p>\\n<h4 style=\\\"text-align: center;\\\">Jump to:</h4>\\n<ul class=\\\"jump-to\\\">\\n<li><a href=\\\"#angular\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#react\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#vue\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#dojo\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#ember\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#aurelia\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n</ul>\\n<div id=\\\"angular\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Angular 2+</h2>\\n<h3 id=\\\"design-ethos-1\\\">Design ethos</h3>\\n<p>On its own, Angular 2+ does not express any opinions on theming an application. The framework focuses on defining components from a code and template perspective and leaves the styling options to the developer.</p>\\n<p>The <a href=\\\"https://material.angular.io/\\\">Material 2</a> project does encapsulate Google&#8217;s <a href=\\\"https://material.io/guidelines/\\\">Material Design</a>. Material 2 includes four pre-built themes and offers a framework for customizing and/or creating new themes.</p>\\n<h3 id=\\\"customizing-look-and-feel-1\\\">Customizing look and feel</h3>\\n<p>Assuming Angular Material is used, the look and feel of an Angular 2+ application can be customized by defining a custom theme with the <a href=\\\"http://sass-lang.com/\\\">SASS</a> pre-compiler. Gesture support is provided by Angular Material&#8217;s applications by including <a href=\\\"https://hammerjs.github.io/\\\">HammerJS</a> into the application.</p>\\n<h3 id=\\\"design-workflow-1\\\">Design workflow</h3>\\n<p>Angular does provide guidance for how to design a user experience from the top down. Most of the documentation focuses on the implementation level. Angular components are HTML template based. HTML mockups with accompanying CSS could be a starting point for creating components, but many of the user interactions and relationship to the application likely would not be easy to express in an HTML + CSS mockup.</p>\\n<div id=\\\"react\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">React + Redux</h2>\\n<h3 id=\\\"design-ethos-2\\\">Design ethos</h3>\\n<p><em>React</em> focuses on the architecture of writing components and does not offer opinions on design aesthetics. There are no officially maintained libraries of React components. There are several third-party libraries that are built on top of React which do offer an opinionated design ethos.</p>\\n<h3 id=\\\"customizing-look-and-feel-2\\\">Customizing look and feel</h3>\\n<p>Styling React components is accomplished in a straightforward manner using either the <code>className</code> or <code>style</code> JSX attribute. Beyond providing these mechanisms to parse and apply styles and classes to rendered DOM respectively, React offers no mechanism to switch out component themes dynamically or to modify behavior based on device type.</p>\\n<p>Because React applications expect an ES6+ runtime environment and thus inherently rely on transpilation, it is very common to process a React application using a build tool like <a href=\\\"https://webpack.js.org/\\\">Webpack</a>. By using Webpack, CSS class names can be imported into a React component and optionally localized using CSS modules; these imported class names can then be applied to specific nodes during the component&#8217;s <code>.render()</code> method:</p>\\n<p><strong>MyComponent.css</strong></p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">.root {\\r\\n    background: blue;\\r\\n}</pre>\\n<p><strong>MyComponent.jsx</strong></p>\\n<pre class=\\\"brush: javafx; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport React from 'react';\\r\\nimport styles from './MyComponent.css';\\r\\n\\r\\nexport default function MyComponent(props) {\\r\\n    return (\\r\\n        &lt;div className={ styles.root }&gt;\\r\\n            { children }\\r\\n        &lt;/div&gt;\\r\\n    );\\r\\n}\\r\\n</pre>\\n<h3 id=\\\"design-workflow-2\\\">Design workflow</h3>\\n<p>A React + Redux application lends itself to a separation of concerns when it comes to design and development as well as any other JavaScript framework. Design teams can articulate their intentions in the form of mock-ups or static examples that use HTML and CSS. These mock-ups can then be translated into rendered DOM within a component and styled as necessary. Because there is no opinionated abstraction for themes, the long-term maintainability of the look and feel of a library of React components requires up-front thought and planning.</p>\\n<div id=\\\"vue\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Vue.js</h2>\\n<h3 id=\\\"design-ethos-3\\\">Design ethos</h3>\\n<p><em>Vue.js</em> does not express any design ethos. Its primary concern is with the structure of an application, not the look and feel. There are available third-party component libraries for Vue.js which express a design ethos.</p>\\n<h3 id=\\\"customizing-look-and-feel-3\\\">Customizing look and feel</h3>\\n<p>Vue.js provides an HTML-based template syntax and some convenience methods for managing CSS classes and inline styles on elements. However, the look and feel decisions for a Vue.js app are left entirely to the developer.</p>\\n<h3 id=\\\"design-workflow-3\\\">Design workflow</h3>\\n<p>Vue.js itself is not concerned with the UX design process and provides no specific tools to help. Because its components are HTML template based, HTML mocks can be a starting point for the design process. Because there is no opinionated abstraction for themes, the long-term maintainability of the look and feel of a library of components requires up-front thought and planning.</p>\\n<div id=\\\"dojo\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Dojo 2</h2>\\n<h3 id=\\\"design-ethos-4\\\">Design ethos</h3>\\n<p>The Dojo 2 out of the box <a href=\\\"https://github.com/dojo/widgets\\\">widgets</a> are being built to a consistent user interface design. Dojo 2 has a default theme and design guidelines. The post Dojo 2.0 release has plans for at least two additional themes that can be adapted and tailored as needed.</p>\\n<h3 id=\\\"customizing-look-and-feel-4\\\">Customizing look and feel</h3>\\n<p>Dojo 2 is designed to leverage CSS modules. It also designed to leverage the <a href=\\\"http://postcss.org/\\\">postcss</a> post processor that focuses authoring of modern CSS but <em>down-emitting</em> to ensure older browser support. This system allows the code to be tightly coupled with the styles it requires. The build tooling ensures that the required CSS is available at run-time and is namespaced to avoid class name collisions. The tooling also provides the necessary information to allow easy integration to the IDE. For example, you would author a CSS module and import it as you would any other JavaScript or TypeScript module, receiving code completion if using a TypeScript language services aware IDE:</p>\\n<p><strong>MyWidget.m.css</strong></p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">.root {\\r\\n    background: black;\\r\\n}\\r\\n\\r\\n.selected {\\r\\n    color: red;\\r\\n    font-weight: bold;\\r\\n}\\r\\n</pre>\\n<p><strong>MyWidget.ts</strong></p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">import { v } from '@dojo/widget-core/d';\\r\\nimport { WidgetBaseProperties } from '@dojo/widget-core/interfaces';\\r\\nimport WidgetBase from '@dojo/widget-core/WidgetBase';\\r\\nimport * as css from './MyWidget.m.css';\\r\\n\\r\\ninterface MyWidgetProperties extends WidgetBaseProperties {\\r\\n    label: string | null;\\r\\n    selected?: boolean;\\r\\n}\\r\\n\\r\\nexport default class MyWidget extends WidgetBase {\\r\\n    render() {\\r\\n        return v('div', {\\r\\n            classes: [\\r\\n                css.root,\\r\\n                this.properties.selected ? true : false\\r\\n            }\\r\\n        }, [ this.properties.label ]);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>Dojo 2 also offers a theming system, which creates the concept of <em>themeable</em> classes versus those that are structural and therefore <em>fixed</em>. When a <code>theme</code> is then applied to the properties of a themeable widget, the classes from the theme will be substituted. An example of creating a themeable widget:</p>\\n<p><strong>MyThemeWidget.ts</strong></p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">import { v } from '@dojo/widget-core/d';\\r\\nimport { theme, ThemeableMixin, ThemeableProperties } from '@dojo/widget-core/mixins/Themeable';\\r\\nimport WidgetBase from '@dojo/widget-core/WidgetBase';\\r\\nimport * as css from './MyWidget.m.css';\\r\\n\\r\\ninterface MyThemeWidgetProperties extends ThemeableProperties {\\r\\n    label: string | null;\\r\\n    selected?: boolean;\\r\\n}\\r\\n\\r\\nconst ThemedBase = ThemedMixin(WidgetBase);\\r\\n\\r\\n@theme(css)\\r\\nexport default class MyThemeWidget extends ThemedBase {\\r\\n    render() {\\r\\n        return v('div', {\\r\\n            classes: [ this.theme(selected &amp;&amp; css.selected), css.rootFixed]\\r\\n        }, [ this.properties.label ]);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>And applying a theme:</p>\\n<p><strong>index.ts</strong></p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">import { w } from '@dojo/widget-core/d';\\r\\nimport Projector from '@dojo/widget-core/mixins/Projector';\\r\\nimport WidgetBase from '@dojo/widget-core/WidgetBase';\\r\\nimport theme from './themes/dark';\\r\\nimport MyThemeWidget from './MyThemeWidget';\\r\\n\\r\\nclass App extends WidgetBase {\\r\\n    render() {\\r\\n        w(MyThemeWidget, {\\r\\n            key: 'mythemewidget',\\r\\n            theme\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\\r\\nconst ProjectorApp = Projector(App);\\r\\nconst projector = new ProjectorApp();\\r\\nprojector.append();\\r\\n</pre>\\n<p>Dojo 2 makes it easy to provide support for gestures and other user input events without the developer needing to know the details of the DOM event system.</p>\\n<h3 id=\\\"design-workflow-4\\\">Design workflow</h3>\\n<p>Dojo 2 was specifically designed to make it easier to integrate different roles in the workflow. By providing a pattern for separating structural styles from thematic styles, it is possible for the <em>look and feel</em> to be created independently, but work in an integrated way at design time.</p>\\n<p>Dojo 2 does prefer a functional style for describing the DOM structure of a widget. Using this style means there is no direct path from an HTML + CSS mock-up to a widget. Dojo 2 does support <a href=\\\"https://www.typescriptlang.org/docs/handbook/jsx.html\\\">TSX</a>, the <a href=\\\"https://jsx.github.io/\\\">JSX</a> extensions for TypeScript which would allow an HTML-like template to be embedded in a widget.</p>\\n<div id=\\\"ember\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Ember</h2>\\n<h3 id=\\\"design-ethos-5\\\">Design ethos</h3>\\n<p><em>Ember.js</em> components are built with <a href=\\\"http://handlebarsjs.com/\\\">Handlebars</a> templates, so theming and styling are left entirely up to the user. There are third-party component libraries which provide components that embody a particular design ethos.</p>\\n<h3 id=\\\"customizing-the-look-and-feel\\\">Customizing the look and feel</h3>\\n<p>Class names can be set in the template when the component is invoked, or dynamically using a bound property. Ember.js focuses on a two-way data binding methodology, therefore attributes in the template are bound to the JavaScript object and bound to values in the application.</p>\\n<p>In 2017, the Ember project created <a href=\\\"https://glimmerjs.com/\\\">Glimmer</a>, which is separate from Ember.js. Written and available in Typescript, Glimmer uses ES6 class syntax and eliminates the sometimes-confusing Ember configuration object.</p>\\n<p>For example, Ember.js syntax:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">export default Ember.Component.extend({\\r\\n  tagName: 'input',\\r\\n  attributeBindings: ['disabled', 'type:kind'],\\r\\n  disabled: true,\\r\\n  kind: 'range'\\r\\n});\\r\\n</pre>\\n<p>And in Glimmer:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">&lt;input class=&quot;{{type}}&quot; disabled=&quot;disabled&quot; type=&quot;range&quot; /&gt;</pre>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">import Component from '@glimmer/component';\\r\\n\\r\\nexport default class extends Component {\\r\\n  type = 'primary'\\r\\n}\\r\\n</pre>\\n<h3 id=\\\"design-workflow-5\\\">Design workflow</h3>\\n<p>Theming with Ember.js is left entirely to the developer. Classes can be added within templates just as they would be in static HTML files, and style sheets are not integrated into the framework. There are though several third-party libraries that provide a design framework as well as user input abstractions like gestures.</p>\\n<div id=\\\"aurelia\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Aurelia</h2>\\n<h3 id=\\\"design-ethos-6\\\">Design ethos</h3>\\n<p>While not a requirement for using Aurelia, <a href=\\\"https://github.com/aurelia/ux\\\">Aurelia UX</a> expresses an opinionated design ethos. It encourages encapsulating styles within an element and allows for data binding within styles. Aurelia UX has the concept of hosts (web, Cordova, Electron, etc.), platforms (web, iOS, Android), and design languages (Material Design, iOS Design). The host and platform are detected by <em>Aurelia UX</em>, and this information is all accessible from the component&#8217;s styles and can be used via the in-style data binding to tailor the component&#8217;s styles.</p>\\n<p>The <em>Aurelia UX</em> source code repository provides some basic components as well as the tools for providing additional styling and theming. There is an additional <a href=\\\"https://github.com/aurelia/app-ux-showcase\\\">Aurelia UX showcase</a> which highlights some of the functionality and components.</p>\\n<h3 id=\\\"customizing-look-and-feel-5\\\">Customizing look and feel</h3>\\n<p><em>Aurelia UX</em> provides a solution for the <em>look</em> of components and the project team has plans to address the <em>feel</em> in a similar way, though it is currently a work in progress. According to the <a href=\\\"https://github.com/aurelia/ux/wiki#interaction-movement-and-flow\\\"><em>interaction, movement, and flow</em></a> section of the Aurelia wiki, Aurelia UX <em>will</em> build on top of its components and add these higher-level features. However, while the patterns may still be in development, there is already the <a href=\\\"https://github.com/aurelia/animator-css\\\">animator-css library</a> for performing animations.</p>\\n<p>Here&#8217;s an example of extending the snippet in the UI section to make a themed widget</p>\\n<p><strong>Todo.ts</strong>:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">import {customElement, bindable, ViewResources, View, processAttributes} from 'aurelia-templating';\\r\\nimport {inject} from 'aurelia-dependency-injection';\\r\\nimport {StyleEngine} from 'aurelia-ux/styles/style-engine';\\r\\nimport {Themable} from 'aurelia-ux/styles/themable';\\r\\nimport {processDesignAttributes} from 'aurelia-ux/designs/design-attributes';\\r\\n\\r\\n@inject(ViewResources, StyleEngine)\\r\\n@customElement('todo')\\r\\n@processAttributes(processDesignAttributes)\\r\\nexport class Todo implements Themable {\\r\\n    @bindable public fontSize = null;\\r\\n    @bindable public color = null;\\r\\n    @bindable public hue = null;\\r\\n    @bindable public theme = null;\\r\\n    @bindable items: string[];\\r\\n    public view: View;\\r\\n\\r\\n    constructor(public resources: ViewResources, private styleEngine: StyleEngine) {}\\r\\n\\r\\n    public created(_: any, myView: View) {\\r\\n        this.view = myView;\\r\\n    }\\r\\n\\r\\n    public bind() {\\r\\n        if (this.theme) {\\r\\n            this.styleEngine.applyTheme(this, this.theme);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    public themeChanged(newValue: any) {\\r\\n        this.styleEngine.applyTheme(this, newValue);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p><strong>Todo.html</strong>:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;!-- styles.todo attribute tells Aurelia UX to apply a \\r\\n    unique class to apply the theme styles to this element --&gt;\\r\\n&lt;template styles.todo&gt;\\r\\n    &lt;require from=&quot;./todo-theme&quot;&gt;&lt;/require&gt;\\r\\n    &lt;ul&gt;\\r\\n        &lt;li repeat.for=&quot;item of items&quot; class=&quot;\\r\\n                        ${fontSize !== null ? fontSize : $todoTheme.fontSize}\\r\\n                        ${color !== null ? color : $todoTheme.color}\\r\\n                        ${hue !== null ? hue : $todoTheme.hue}&quot;&gt;\\r\\n            ${item}\\r\\n        &lt;/li&gt;\\r\\n    &lt;/ul&gt;\\r\\n&lt;/template&gt;\\r\\n</pre>\\n<p><strong>TodoTheme.ts</strong>:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">import {styles} from 'aurelia-ux';\\r\\n\\r\\n@styles()\\r\\nexport class TodoTheme {\\r\\n    public fontSize = 'medium'; // small, medium or large\\r\\n    public color = 'primary'; // primary or accent\\r\\n    public hue = 'default'; // default, dark, or light\\r\\n}\\r\\n</pre>\\n<p><strong>todo.css</strong>:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">styles.todo li.small {\\r\\n    font-size: 8px;\\r\\n}\\r\\n\\r\\nstyles.todo li.medium {\\r\\n    font-size: 13px;\\r\\n}\\r\\n\\r\\nstyles.todo li.large {\\r\\n    font-size: 24px;\\r\\n}\\r\\n\\r\\nstyles.todo li.primary.default {\\r\\n    background-color: ${background || $design.primary};\\r\\n    color: ${foreground || $design.primaryForeground};\\r\\n}\\r\\n\\r\\nstyles.todo li.primary.light {\\r\\n    background-color: ${background || $design.primaryLight};\\r\\n    color: ${foreground || $design.primaryLightForeground};\\r\\n}\\r\\n\\r\\nstyles.todo li.primary.dark {\\r\\n    background-color: ${background || $design.primaryDark};\\r\\n    color: ${foreground || $design.primaryDarkForeground};\\r\\n}\\r\\n\\r\\nstyles.todo li.accent.default {\\r\\n    background-color: ${background || $design.accent};\\r\\n    color: ${foreground || $design.accentForeground};\\r\\n}\\r\\n\\r\\nstyles.todo li.accent.light {\\r\\n    background-color: ${background || $design.accentLight};\\r\\n    color: ${foreground || $design.accentLightForeground};\\r\\n}\\r\\n\\r\\nstyles.todo li.accent.dark {\\r\\n    background-color: ${background || $design.accentDark};\\r\\n    color: ${foreground || $design.accentDarkForeground};\\r\\n}\\r\\n</pre>\\n<h3 id=\\\"design-workflow-6\\\">Design workflow</h3>\\n<p>While it seems that Aurelia has not given specific considerations for a design workflow, it has a fairly robust system for supporting different contexts and designs within a single application. Aurelia also uses HTML templates and CSS, which can make it easy to adapt HTML + CSS mock-ups into components. The abstraction of the <em>feel</em> is still evolving and how that will work in practice is not completely clear at this time.</p>\\n<h2 id=\\\"summary\\\">Summary</h2>\\n<h3 id=\\\"angular-2-1\\\">Angular 2+</h3>\\n<p>If you like Google&#8217;s <a href=\\\"https://material.io/guidelines/\\\">Material Design</a> then <a href=\\\"https://material.angular.io/\\\">Material 2</a> delivers on that with a fairly robust system for tailoring components and creating new ones. There is also an increasing number of third-party alternatives that can help you.</p>\\n<h3 id=\\\"react-redux-1\\\">React + Redux</h3>\\n<p>React is far more focused on being a toolkit and does not provide a higher order framework for UX design. There are several third-party libraries, but with varying degrees of maturity. If you are building your own UX design and have the engineering skills to build it properly, then React can be a tool to help <em>render</em> that on the screen.</p>\\n<h3 id=\\\"vue.js-1\\\">Vue.js</h3>\\n<p>Vue.js focuses on the application, often used in situations where there is an existing UI/UX that needs a modern application framework to power it. There are quite a few third-party component libraries that provide a fairly complete UX design and additional abstractions to make it easy to maintain. There are also no real limitations to building your own component library.</p>\\n<h3 id=\\\"dojo-2-1\\\">Dojo 2</h3>\\n<p>Currently, Dojo 2 provides some strong abilities for creating and managing the <em>look</em> of components and the <em>feel</em> aspect is under development. There is an intent to make it easy to create and manage reusable libraries of components and provide the systems and patterns for managing the UX design, though that vision is yet to be fully delivered.</p>\\n<h3 id=\\\"ember.js-1\\\">Ember.js</h3>\\n<p>Ember.js is focused on the application. There are a significant amount of third-party components, but without an opinionated way to manage the <em>look</em>, integrating these components into a coherent UX design can be challenging. There are some larger libraries of components as well as libraries that allow expression of themes and user input management. Like some of the other frameworks, if the Ember.js application framework is for you and you want to create your own UX, then you will find many options to accelerate your efforts.</p>\\n<h3 id=\\\"aurelia-1\\\">Aurelia</h3>\\n<p><em>Aurelia UX</em> provides an existing UX design as well as an advanced set of tools that allow expressing the <em>look</em> of components. The Aurelia UX team have expressed their intent to mature the <em>feel</em> aspects and Aurelia is one of the more advanced frameworks that has identified the challenges of dealing with a UX design and how to manage it in practice.</p>\\n<h2>Up next</h2>\\n<p>Now that we have wandered down the aisles of the local web framework shop, and may be narrowed down how we want things to look and feel, we need to go back to the basics. Especially with the rapidly changing web platform, we need to look at the frameworks in context of how they support the standards, what sort of foundational APIs they supply, and how they help make our code future proof.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>While instruments such as guitar and drums are part of a band, how they are used by the musicians define the style of the band&#8217;s music. Similarly, the elements of an application user interface connected together define the user experience. In this post as part of our ongoing series about frameworks, we are going to [&hellip;]</p>\\n\",\"protected\":false},\"author\":67,\"featured_media\":22252,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[444,445,214,448,2,215,3,16,11,234],\"tags\":[446],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks: User Experience Design | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/web-frameworks-user-experience-design/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks: User Experience Design | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"While instruments such as guitar and drums are part of a band, how they are used by the musicians define the style of the band&#8217;s music. Similarly, the elements of an application user interface connected together define the user experience. In this post as part of our ongoing series about frameworks, we are going to [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/web-frameworks-user-experience-design/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-06-27T16:57:18+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-03-30T13:40:33+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-experience-design/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Web Frameworks: User Experience Design\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-experience-design/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-experience-design/\\\",\\\"name\\\":\\\"Web Frameworks: User Experience Design | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-experience-design/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-06-27T16:57:18+00:00\\\",\\\"dateModified\\\":\\\"2020-03-30T13:40:33+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/web-frameworks-user-experience-design/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14513\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=14513\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14513/revisions\"}],\"predecessor-version\":[{\"id\":22253,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14513/revisions/22253\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22252\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=14513\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=14513\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=14513\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":67,\"name\":\"Kit Kelly\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kkelly/\",\"slug\":\"kkelly\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kit Kelly, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kit Kelly, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kkelly/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kkelly/\\\",\\\"name\\\":\\\"Kit Kelly, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22252,\"date\":\"2020-02-06T11:19:06\",\"slug\":\"web-frameworks-user-experience-design-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-user-experience-design/web-frameworks-user-experience-design-2/\",\"title\":{\"rendered\":\"Web Frameworks- User Experience Design\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks- User Experience Design | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks- User Experience Design | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-06T19:37:35+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\\\",\\\"name\\\":\\\"Web Frameworks- User Experience Design | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-02-06T19:19:06+00:00\\\",\\\"dateModified\\\":\\\"2020-02-06T19:37:35+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Web Frameworks: User Experience Design\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/06/Web-Frameworks-User-Experience-Design.jpg\",\"sizes\":{\"medium\":{\"file\":\"Web-Frameworks-User-Experience-Design-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design-300x158.jpg\"},\"large\":{\"file\":\"Web-Frameworks-User-Experience-Design-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Web-Frameworks-User-Experience-Design-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design-150x150.jpg\"},\"medium_large\":{\"file\":\"Web-Frameworks-User-Experience-Design-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design-768x403.jpg\"},\"full\":{\"file\":\"Web-Frameworks-User-Experience-Design.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Experience-Design.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22252\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a7749b82ced35fa-LHR"],["cf-request-id","037e6c6719000035fa432b0200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:18:55 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d7620a73d538220adf7fb0a2692bfc36f1592842735; expires=Wed, 22-Jul-20 16:18:55 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}