{"value":{"body":"[{\"id\":300,\"date\":\"2008-04-15T10:50:23\",\"date_gmt\":\"2008-04-15T17:50:23\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2008/04/15/unit-testing-custom-code-with-the-dojo-objective-harness/\"},\"modified\":\"2020-08-01T08:18:38\",\"modified_gmt\":\"2020-08-01T15:18:38\",\"slug\":\"unit-testing-custom-code-with-the-dojo-objective-harness\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/\",\"title\":{\"rendered\":\"Unit Testing Custom Code with the Dojo Objective Harness\"},\"content\":{\"rendered\":\"<div style=\\\"background:#FFFFB1; padding:1em;\\\"><strong>Notice:</strong> We now recommend the DOH replacement, <a href=\\\"http://theintern.io/\\\">Intern</a>. Read our <a href=\\\"https://www.sitepen.com/blog/?s=intern\\\">posts about Intern</a> for more information.</div>\\n<p>Many <a href=\\\"http://www.dojotoolkit.org\\\">Dojo</a> developers are aware of the <a href=\\\"http://download.dojotoolkit.org/release-1.10.0/dojo-release-1.10.0/util/doh/\\\">Dojo Objective Harness</a> (DOH) that the Dojo Toolkit <a href=\\\"http://download.dojotoolkit.org/release-1.10.0/dojo-release-1.10.0/util/doh/runner.html\\\">uses for unit testing</a>.  Many people, however, want to use DOH for testing their own code or even non-Dojo code that they have written. While DOH has always supported this, there currently aren&#8217;t many examples of doing so.  Let&#8217;s see if we can help that out.</p>\\n<p>Out of the box, DOH has supported custom code since the beginning.  Tests can include any custom namespaces or code by easily using standard JS techniques.  Coming to an understanding of how custom namespaces work with Dojo and how and when DOH loads tests will help us illustrate how you can take advantage of DOH in your own code.</p>\\n<p><!--more--></p>\\n<h2>How do custom namespace lookups work in Dojo?</h2>\\n<p>Dojo&#8217;s system for using custom namespaces is quite simple to understand and use.  Dojo maps the top level namepaces (ie, &#8216;dojo&#8217; or &#8216;company&#8217;) relative to the location of the <code>dojo.js</code> file.  The <code>dojo</code> namespace itself is mapped to the directory where <code>dojo.js</code> is located.  The other major Dojo projects that are distributed with or alongside of the toolkit are typically located at <code>../module</code>.  Let&#8217;s look at a Dojo checkout:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojotoolkit/\\r\\n    dojo/\\r\\n        dojo.js\\r\\n    dijit/\\r\\n    dojox/\\r\\n    util/\\r\\n</pre>\\n<p>If we wanted to include custom namespaces with the least amount of effort, adding additional modules inside of the dojotoolkit directory above would suffice.  Dojo would automatically resolve any mappings to this location.  For example if you <code>dojo.require(\\\"company.widget.foo\\\")</code>, Dojo will attempt to load the <em>foo</em> resource from <code>dojotoolkit/dojo/../company/widget/foo.js</code>.  While this is easy, it often means that you would have to intermingle your own code with the Dojo source which can be difficult to upgrade and/or use svn:externals with.  We would prefer a structure that doesn&#8217;t intermingle code.  The common structure is something like this:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\njs/\\r\\n    dojotoolkit/\\r\\n        dojo/\\r\\n        dijit/\\r\\n        dojox/\\r\\n        util\\r\\n     company/\\r\\n        moduleA/\\r\\n        widget/\\r\\n</pre>\\n<p>Unfortunately, when you <code>dojo.require(\\\"company.widget.foo\\\")</code>, you would get an error because it is looking, by default, in the <code>js/dojotoolkit/dojo/../company</code> directory and not finding anything except a 404.  The solution to this, in normal code, is to use <a href=\\\"http://api.dojotoolkit.org/jsdoc/dojo/HEAD/dojo.registerModulePath\\\">dojo.registerModulePath</a>.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.registerModulePath(&quot;company&quot;, &quot;../../company&quot;);\\r\\n</pre>\\n<p>This solves the location problem, and forces the module&#8217;s root to be located at <code>../../company</code> relative to the <code>dojo.js</code> file.  </p>\\n<h2>What&#8217;s the problem then?</h2>\\n<p>If DOH can support custom code and Dojo provides a mechanism for registering new namespaces, then everything should be ok, right?  Close, but not quite.  Not only is the code loaded by using the Dojo package system, but so are the tests.  Before your test code can be run (where it can use dojo.registerModulePath), the DOH is attempting to load your tests modules using the loader.  If your test code is located in <code>js/dojotoolkit/company/</code> this will be fine because Dojo would automatically look in <code>../company</code> for that namepace.  As mentioned above, however, that is not ideal, so we put our code in <code>js/company</code> instead, which of course, Dojo fails to automatically recognize. At the same time, there is no simple way to register those module paths so the custom namespace can be recognized.  Tests are launched by naming the tests that you want to run in the URL.  If there is no matching resource for a provided test package, it will fail.  </p>\\n<h2>How are tests launched?</h2>\\n<p>Typically, there is an HTML file that is simply a redirect to DOH&#8217;s runner.html with a single query parameter, <em>testModule</em>, that defines what resource the runner should load. For example, for <em>dojo.rpc</em>, in the <code>dojox/tests/</code> directory, there is a runTests.html file that serves this purpose. This file can exist anywhere, so long as it redirects to the runner. </p>\\n<p>Let’s take a look at the redirect:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;meta http-equiv=&quot;REFRESH&quot; content=&quot;0;\\r\\n     url=../../../util/doh/runner.html?testModule=dojox.rpc.tests.module&quot;&gt;\\r\\n</pre>\\n<p> Of course if we&#8217;re testing our own code, we want to include our module instead</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;meta http-equiv=&quot;REFRESH&quot; content=&quot;0;\\r\\n     url=../../../util/doh/runner.html?testModule=company.tests.foo&quot;&gt;\\r\\n</pre>\\n<p>Without any additional data, runner.html will be unable to locate company.tests.foo to load this resource.  To solve this problem, last week I introduced an additional query parameter, <em>registerModulePath</em>, that can be passed to the runner.  Additional modules specified here will be registered prior to loading the test files, which allows tests in custom namespaces to work.  The above example would be rewritten as:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;meta http-equiv=&quot;REFRESH&quot; content=&quot;0;\\r\\n    url=../../../util/doh/runner.html?testModule=company.tests.foo\\r\\n          &amp;registerModulePath=company,../../company&quot;&gt;\\r\\n</pre>\\n<p>While I don&#8217;t believe it is really necessary, you can register multiple namespaces by separating them with a semicolon. (Note: this additional parameter is currently only available in SVN, however for those of you who wish to use this with an older version of Dojo, copying the current DOH code over the old code should present no problems).</p>\\n<h2>What about non-Dojo code?</h2>\\n<p>The above examples are great if you have a Dojo project and you are following the common patterns seen when developing and deploying Dojo. If you want to write tests for your non-Dojo code you can too, though you still have to follow Dojo/DOH semantics when writing the tests themselves. Let’s look at an example project directory structure. </p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n/project \\r\\n   index.html \\r\\n   foo.html \\r\\n   js/ \\r\\n   css/ \\r\\n   images/ \\r\\n   tests/ \\r\\n</pre>\\n<p>As you can see this has no relation to how a Dojo project is normally structured. And for this project we don&#8217;t have any need for including Dojo in the actual running code, but we&#8217;d still like to take advantage of the tests. Here is a simple way to do so without changing directory structure. Include the Dojotoolkit in your tests directory so it looks like: </p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n/project \\r\\n    tests/ \\r\\n        dojotoolkit/ \\r\\n      \\t    dojo/ \\r\\n      \\t    util/ \\r\\n                 doh/ \\r\\n</pre>\\n<p>Since we don’t want to redo our directory structure to include the tests, we need to map the root of our project relative to <code>dojo.js</code> as its own module. For example: </p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;meta http-equiv=&quot;REFRESH&quot; content=&quot;0;\\r\\n     url=../../../util/doh/runner.html?testModule=project.tests.module\\r\\n           &amp;registerModulePath=project,../../../..&quot;&gt;\\r\\n</pre>\\n<p>We then put our test, <code>modules.js</code>, inside of the tests directory as you would expect. Our runTests.html goes in this same directory as well, so from the top level we don’t really have to follow the typical Dojo pattern.  A user or developer of &#8216;project&#8217; can just go into the tests directory and load <code>runTests.html</code>.</p>\\n<h2>What’s in the test file itself?</h2>\\n<p>The test file is structured just as any other DOH unit test is and needs to include <code>dojo.provide(\\\"project.tests.module\\\")</code> at the top to satisfy packaging requirements. The typical pattern is to define <code>dojo.require()</code>s for individual groups of tests in the <code>module.js</code> file and then the individual tests would be included in those required resources, but this is by no means a necessity. Here is an example module.js done this way: </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.provide(&quot;project.tests.module&quot;); \\r\\n\\r\\ndojo.require(&quot;project.tests.functions&quot;); \\r\\ndojo.require(&quot;project.tests.features&quot;); \\r\\ndojo.require(&quot;project.tests.errorHandling&quot;); \\r\\n</pre>\\n<p>An individual test file can vary drastically in structure, but I would recommend reading the Dojo Book for an <a href=\\\"http://dojotoolkit.org/book/dojo-book-0-9/part-4-meta-dojo/d-o-h-unit-testing\\\">example of some of these tests</a>. A simple test might look like this: </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.provide(&quot;project.tests.functions&quot;); \\r\\n</pre>\\n<p>if you are using Dojo already, something like this can include your code </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.require(&quot;project.someModule&quot;); \\r\\n</pre>\\n<p>If not, you might want to include code like this, or you might also want to look at URL based tests below.  This is relative to the runner.html file in util/doh. </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndojo.io.script.get({ \\r\\n       url:&quot;../../../../someModule.js&quot; \\r\\n}); \\r\\n</pre>\\n<p>The tests themselves:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndoh.register(&quot;project.tests.TestGroupA&quot;, \\r\\n       [ \\r\\n               { \\r\\n                       name: &quot;My Function Test [_myfunc()]&quot;, \\r\\n                       timeout: 4000, \\r\\n                       runTest: function(){ \\r\\n                              var result = _myFunc(&quot;a&quot;, &quot;b&quot;); \\r\\n                              doh.assertEqual(&quot;Foo&quot;, result); \\r\\n                            } \\r\\n                 } \\r\\n   ] \\r\\n); \\r\\n</pre>\\n<p>That’s not too bad. You can also create a &#8216;normal&#8217; HTML page with your code and your tests included. This is especially useful in the non-Dojo case. Inclusion simply uses <em>registerUrl</em> instead of register: </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndoh.registerUrl(&quot;project.tests.TestGroupB&quot;, \\r\\n     dojo.moduleUrl(&quot;project.tests&quot;,&quot;testGroupB.html&quot;)\\r\\n); \\r\\n</pre>\\n<p>This will load the file in the <code>project/tests/testGroupB.html</code> file. Tests can be included in this page for execution with results being reported back to the DOH. You might include something like this on the test page: </p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;script type=&quot;text/javascript&quot; src=&quot;runner.js&quot;&gt;&lt;/script&gt; \\r\\n&lt;script type=&quot;text/javascript&quot;&gt; \\r\\n   doh.register(&quot;project.tests.TestGroupB&quot;, [ \\r\\n               function(){ \\r\\n                       doh.assertEqual(&quot;FOO&quot;, someObjectOnMyPage); \\r\\n                 } \\r\\n   ]); \\r\\n&lt;/script&gt; \\r\\n</pre>\\n<p>All in all, tests are pretty easy to write this way once you figure out the pattern. I hope this helps get you started.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Notice: We now recommend the DOH replacement, Intern. Read our posts about Intern for more information. Many Dojo developers are aware of the Dojo Objective Harness (DOH) that the Dojo Toolkit uses for unit testing. Many people, however, want to use DOH for testing their own code or even non-Dojo code that they have written. [&hellip;]</p>\\n\",\"protected\":false},\"author\":13,\"featured_media\":22075,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,3,16],\"tags\":[56],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Unit Testing Custom Code with the Dojo Objective Harness | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Notice: We now recommend the DOH replacement, Intern. Read our posts about Intern for more information.  Many Dojo developers are aware of the Dojo Objective Harness (DOH) that the Dojo Toolkit uses for unit testing. Many people, however, want to use DOH for testing their own code or even non-Dojo code that they have wri\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Unit Testing Custom Code with the Dojo Objective Harness | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Notice: We now recommend the DOH replacement, Intern. Read our posts about Intern for more information.  Many Dojo developers are aware of the Dojo Objective Harness (DOH) that the Dojo Toolkit uses for unit testing. Many people, however, want to use DOH for testing their own code or even non-Dojo code that they have wri\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2008-04-15T17:50:23+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-08-01T15:18:38+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/\\\",\\\"name\\\":\\\"Unit Testing Custom Code with the Dojo Objective Harness | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/#primaryimage\\\"},\\\"datePublished\\\":\\\"2008-04-15T17:50:23+00:00\\\",\\\"dateModified\\\":\\\"2020-08-01T15:18:38+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fc8744316ea61450d5919a02da745370\\\"},\\\"description\\\":\\\"Notice: We now recommend the DOH replacement, Intern. Read our posts about Intern for more information. Many Dojo developers are aware of the Dojo Objective Harness (DOH) that the Dojo Toolkit uses for unit testing. Many people, however, want to use DOH for testing their own code or even non-Dojo code that they have wri\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/unit-testing-custom-code-with-the-dojo-objective-harness/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fc8744316ea61450d5919a02da745370\\\",\\\"name\\\":\\\"Dustin Machi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/cb39b699fba52b25a7cb7f2868eeebc4?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dustin Machi\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/300\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/13\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=300\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/300/revisions\"}],\"predecessor-version\":[{\"id\":26362,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/300/revisions/26362\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=300\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=300\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=300\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=300\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":13,\"name\":\"Dustin Machi\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dmachi/\",\"slug\":\"dmachi\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/cb39b699fba52b25a7cb7f2868eeebc4?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/cb39b699fba52b25a7cb7f2868eeebc4?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/cb39b699fba52b25a7cb7f2868eeebc4?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dustin Machi, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dustin Machi, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dmachi/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/cb39b699fba52b25a7cb7f2868eeebc4?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dmachi/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dmachi/\\\",\\\"name\\\":\\\"Dustin Machi, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fc8744316ea61450d5919a02da745370\\\",\\\"name\\\":\\\"Dustin Machi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/cb39b699fba52b25a7cb7f2868eeebc4?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dustin Machi\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dmachi/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/13\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:26:27 GMT"],["expires","Thu, 24 Sep 2020 13:26:27 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}