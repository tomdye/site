{"value":{"body":"[{\"id\":753,\"date\":\"2010-01-27T09:36:15\",\"date_gmt\":\"2010-01-27T16:36:15\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=753\"},\"modified\":\"2010-01-27T09:36:15\",\"modified_gmt\":\"2010-01-27T16:36:15\",\"slug\":\"efficient-lazy-loading-of-a-tree\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/efficient-lazy-loading-of-a-tree/\",\"title\":{\"rendered\":\"Efficient Lazy Loading of a Tree\"},\"content\":{\"rendered\":\"<p><a href=\\\"http://www.dojotoolkit.org/\\\">Dojo</a> 1.4 sports a fantastic <a href=\\\"http://docs.dojocampus.org/dijit/Tree\\\">tree widget</a>, complete with <a href=\\\"http://www.w3.org/WAI/intro/aria\\\">ARIA</a> compliance, keyboard accessibility, and internationalization (including right-to-left layout for appropriate countries and languages).  For large tree data sets, we want to be able to only load the necessary data for the visible nodes of the tree.  As a user expands a node, we then want to load the children of that node.  Ideally, we only want to make one HTTP request per expansion for optimal performance.  Historically, effective lazy loading has been a challenge, but some recent additions will make it much easier to utilize efficient lazy loading mechanisms in the tree.</p>\\n<p><!--more--></p>\\n<p>The Dojo tree widget supports lazy loading, but it typically connects to a Dojo data store for all its data through a model-store adapter.  Consequently, the tree itself does not define the actual data loading mechanism, as that is up to the store.  The tree merely requests data from the store as needed.  However, the <a href=\\\"http://docs.dojocampus.org/dojox/data/JsonRestStore\\\">JsonRestStore</a> fully supports <a href=\\\"https://www.sitepen.com/blog/2008/11/21/effective-use-of-jsonreststore-referencing-lazy-loading-and-more/\\\">lazy loading</a> with a well defined mechanism for retrieving deferred data from the server.  When the JsonRestStore is used with the tree widget, it makes it possible to lazy load nodes in the tree as nodes are expanded. JsonRestStore supports lazy loading by using <a href=\\\"https://www.sitepen.com/blog/2008/06/17/json-referencing-in-dojo/\\\">JSON referencing</a>, whereby items can be referenced from other properties and arrays and the full item can later be retrieved when needed (with <code>loadItem</code>). </p>\\n<p>The model-store adapter now in Dojo 1.4 and later supports an option for a loading mechanism that facilitates single requests per node expansion.  Previously (in 1.3), when a node was expanded the tree would request all the children and if any of the children had not been loaded, the tree would request that each child&#8217;s data item be fully loaded (this is done to ensure that each child has a label and information about whether or not it has children so the child nodes can be properly rendered) resulting in a request for each child of the expanded node, which is clearly inefficient.  However, now when the model&#8217;s <code>deferItemLoadingUntilExpand</code> property is set to true, the tree will not attempt to load all of the children, but rather will only load the item for the expanded node if needed.  This allows us to leverage the JsonRestStore&#8217;s support for partially loaded items.  When a node is expanded and the item is loaded, the server can provide a JSON representation of the item which includes references to the children, and a partial set of properties for each child, which can include the label and children information for proper rendering.  Each of these children can then be fully loaded when they are expanded (with their partial children objects). With this strategy, each node expansion will rely on only a single HTTP request.</p>\\n<p>Let&#8217;s take a look at how to build a lazy loaded tree with the JsonRestStore.  We begin by creating a store:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">myStore = new dojox.data.JsonRestStore({target:&quot;tree/&quot;, labelAttribute:&quot;name&quot;});</pre>\\n<p>Now, we will create the model adapter for the tree to access the store.  This is where we use the new <code>deferItemLoadingUntilExpand</code> property:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">myModel = new dijit.tree.ForestStoreModel({\\n\\tstore: myStore,\\n\\tdeferItemLoadingUntilExpand: true,\\n\\tquery: &quot;root&quot;,\\n\\tchildrenAttrs: [&quot;children&quot;]\\n});</pre>\\n<p>Next, we can create a tree:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">myTree = new dijit.Tree({model: myModel}, treeNode);\\nmyTree.startup();</pre>\\n<p>Now, we can build our data that is supplied from the server.  The first request that the JsonRestStore will make to the server will be a request for the top level nodes (the children of the root).  The tree will make the initial request using the query provided to the model, and the JsonRestStore will combine that with the target.  In this case, the request will be made to the path &#8220;tree/root&#8221;.  Leveraging the partial loading support in JsonRestStore, we can serialize references to each of the items that will be children of the root node in the response, and only include the properties necessary to render these nodes (label and children info):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">request:\\nGET /tree/root\\nresponse:\\n[ \\n\\t{ $ref: 'node1', name:'node1', children:true},\\n\\t{ $ref: 'node2', name:'node2'},\\n]</pre>\\n<p>This provides sufficient information to render the top level of the tree, as well as the link information for retrieving the full representation of each item.  We don&#8217;t need to actually include the children, just the presence of a children property will indicate to the Tree that the node is expandable and an expansion icon will be included. Now when a user clicks on one of these nodes, the tree will ask the JsonRestStore to load the item and the JsonRestStore will request the resource for the URI specified by the <code>$ref</code> property. In this case, it will request <code>node1</code>.  This URI is interpreted relative to the target URI of the store, so in this case, the JsonRestStore will request &#8220;tree/node1&#8221;.  Your server can then respond:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">request:\\nGET /tree/node1\\nresponse:\\n{ id: 'node1', name:'node1', someProperty:'somePropertyA', children:[\\n\\t\\t\\t{ $ref: 'node1.1', name: 'node1.1', children: true},\\n\\t\\t\\t{ $ref: 'node1.2', name: 'node1.2'}\\n]}</pre>\\n<p>Here we see the full representation of <code>node1</code>.  This not only includes the name, but may include additional properties that are used in other application logic.  We also include an array that lists all the children of this item.  Once again we use partial representations of these children to minimize the data transferred over the wire to the client.  Whenever any of these children are expanded the process will be repeated and another request will be made to the server for the full representation of that child.</p>\\n<p><img src='https://wp.sitepen.com/wp-content/uploads/2009/09/lazy-tree.png' alt='lazy-tree.png' /></p>\\n<p>The example code for lazy loaded trees is available in Dojo at <a href=\\\"http://download.dojotoolkit.org/release-1.4.0/dojo-release-1.4.0/dijit/tests/Tree_with_JRS.html\\\">/dijit/tests/Tree_with_JRS.html</a>.</p>\\n<p>If you are updating data in the store, you should be aware of one more tip when using the Tree with the JsonRestStore.  By default, the ForestStoreModel adapter will re-query the top nodes on every onNew notification event and every onDelete event that involves a top level item.  This can result in queries to the server even though the server has not yet been sent all changes.  This makes top level additions essentially disappear when the re-query takes place.  You may need to override the _onNewItem and _onDeleteItem to provide your own logic about where new and deleted items should be placed in the hierarchy.</p>\\n<p>Another powerful feature of the referencing capabilities of JsonRestStore is that individual items can be referenced from multiple parent items.  Consequently an item could exist in multiple places in the tree, under different parents.</p>\\n<p>Together, the Tree and the JsonRestStore provide a powerful combination for lazy loading data that allows for large extensive hierarchical data to be displayed without large upfront data transfers. The JsonRestStore&#8217;s partial loading support can be leveraged so that we can perform lazy loading with a single request per expansion.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Dojo 1.4 sports a fantastic tree widget, complete with ARIA compliance, keyboard accessibility, and internationalization (including right-to-left layout for appropriate countries and languages). For large tree data sets, we want to be able to only load the necessary data for the visible nodes of the tree. As a user expands a node, we then want [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":17676,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,45,6],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Efficient Lazy Loading of a Tree | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/efficient-lazy-loading-of-a-tree/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Efficient Lazy Loading of a Tree | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Dojo 1.4 sports a fantastic tree widget, complete with ARIA compliance, keyboard accessibility, and internationalization (including right-to-left layout for appropriate countries and languages). For large tree data sets, we want to be able to only load the necessary data for the visible nodes of the tree. As a user expands a node, we then want [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/efficient-lazy-loading-of-a-tree/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2010-01-27T16:36:15+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/efficient-lazy-loading-of-a-tree/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/efficient-lazy-loading-of-a-tree/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/efficient-lazy-loading-of-a-tree/\\\",\\\"name\\\":\\\"Efficient Lazy Loading of a Tree | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/efficient-lazy-loading-of-a-tree/#primaryimage\\\"},\\\"datePublished\\\":\\\"2010-01-27T16:36:15+00:00\\\",\\\"dateModified\\\":\\\"2010-01-27T16:36:15+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/efficient-lazy-loading-of-a-tree/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/753\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=753\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/753/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17676\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=753\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=753\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=753\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=753\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b01a261c998f423-LHR"],["cf-request-id","03d4e3d11c0000f423003ea200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:16:42 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d4eccb5c4916df5bcdbad5271f32e7f991594293401; expires=Sat, 08-Aug-20 11:16:41 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}