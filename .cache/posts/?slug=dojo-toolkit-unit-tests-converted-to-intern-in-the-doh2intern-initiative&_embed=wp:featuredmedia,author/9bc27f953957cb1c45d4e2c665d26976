{"value":{"body":"[{\"id\":9685,\"date\":\"2016-06-06T08:53:52\",\"date_gmt\":\"2016-06-06T15:53:52\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=9685\"},\"modified\":\"2019-12-11T08:07:51\",\"modified_gmt\":\"2019-12-11T16:07:51\",\"slug\":\"dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/\",\"title\":{\"rendered\":\"Migrating from DOH to Intern\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/Screen-Shot-2016-06-02-at-2.16.11-PM.png\\\" alt=\\\"Intern\\\" /></p>\\n<p>Until a few years ago, our testing efforts with Dojo were focused on the Dojo Object Harness (DOH), a very early unit and functional testing suite. Developed by the Dojo Toolkit community nearly ten years ago, DOH&#8217;s main purpose was to provide functionality for unit testing JavaScript functions and custom widgets in a cross-browser compatible way.</p>\\n<p>As part of our efforts toward Dojo 2, we knew we needed something much better than DOH, which led to our work on <a href=\\\"http://theintern.io/\\\">Intern</a>. We described our <a href=\\\"https://www.sitepen.com/blog/2013/05/01/intern-javascript-testing/\\\">thought process on creating Intern in a previous blog</a>.</p>\\n<p>For the Dojo 1.11 release, we spent time updating to a more modern testing framework and converted all DOH-based tests in Dojo core to use Intern. This will allow the Dojo Toolkit to ensure code coverage across the toolkit and also allow streamlined regression testing to more quickly accept fixes and patches from the community.</p>\\n<p><!--more--></p>\\n<h2>Comparing DOH to Intern</h2>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/DOHlogo.jpg\\\" alt=\\\"DOH Logo\\\" class=\\\"alignleft\\\" width=\\\"75\\\" /></p>\\n<p>When stacked side by side DOH and Intern may provide similar functionality, but there are many things that set them apart.</p>\\n<p>One major difference between DOH and Intern: when DOH was originally created in 2005, Selenium did not exist. This allowed developers to run DOH directly from a browser. Later DOH added a Java-based applet (DOH Robot) to enable functional testing with Selenium 1. Intern, on the other hand, was designed with Selenium 2 testing in mind, leveraging the WebDriver protocol.</p>\\n<p>DOH was also generally run from a web server with PHP installed. This means that any test which needed to make a call to a remote service had to be done in PHP. Intern runs within Node.js, so services can be written in JavaScript.</p>\\n<p>Further, Intern has taken advantage of modern projects to make testing easier. Grunt, a JavaScript task runner, is a great tool for running repetitive tasks. Intern includes a Grunt task for invoking the intern runner quickly. Intern can also easily be used within a Gulp workflow.</p>\\n<p>In addition, Intern provides support for some of your favorite continuous integration services like Travis, Jenkins, Bamboo, and TeamCity.</p>\\n<p>Intern also provides a number of great features which DOH does not, like promise-based async from any function, code coverage analysis, and source map support.</p>\\n<h2>Intern, cloud testing and DigDug</h2>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/Screen-Shot-2016-06-06-at-1.00.13-PM.png\\\" alt=\\\"DigDug Logo\\\" class=\\\"alignleft\\\" width=\\\"75\\\" /></p>\\n<p>Another advantage that Intern has over DOH is the functionality to provide secure connections with third party Selenium services like Sauce Labs and BrowserStack. The Intern project provides a standalone library, <a href=\\\"https://github.com/theintern/digdug\\\">DigDug</a>, for this functionality. With Intern, we can set options and run our functional and unit tests on a cloud testing provider over a tunnel.</p>\\n<h2>DOH and Intern unit testing</h2>\\n<p>With DOH, a limited assertion library was created for authoring tests.</p>\\n<p>Intern opted to use the Chai library for its assertions which comes with a plethora of assertions. Chai works great as an assertion library and is familiar to many developers. Of course, you don&#8217;t have to use Chai. Thanks to Intern&#8217;s modular design, you can easily use any assertion library you wish.</p>\\n<h2>DOH Robot and Intern Functional Testing with Leadfoot</h2>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/Screen-Shot-2016-06-06-at-1.02.05-PM.png\\\" alt=\\\"Leadfoot Logo\\\" class=\\\"alignleft\\\" width=\\\"75\\\" /></p>\\n<p>DOH Robot provided an API that allowed for functional testing on the client-side. This allowed developers to write and run functional tests across many platforms to test user interactions with real events via a Java applet.</p>\\n<p>Intern also allows for functional testing, in a much easier way. Intern includes <a href=\\\"https://github.com/theintern/leadfoot\\\">Leadfoot</a>, a robust API for driving web browsers insanely fast.</p>\\n<p>Leadfoot not only makes it much simpler to add functional tests than DOH Robot, but also provides more stability. Leadfoot detects inconsistencies with the WebDriver implementations and provides a simple API so developers can write tests rather than debugging issues with Selenium driver instances.</p>\\n<p>We also offer a Chrome DevTools extension, <a href=\\\"https://www.sitepen.com/blog/2015/08/06/introducing-intern-recorder/\\\">Intern Recorder</a>, to make it easier to get started with authoring functional tests.</p>\\n<h2>The Tests</h2>\\n<p>Let&#8217;s take a look at some tests that were converted from DOH to Intern unit tests for the Dojo 1.11 release.  Here is the unit test for <code>dojo/_base/Color</code> written with DOH:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\tdefine([&quot;doh/main&quot;, &quot;../_base/array&quot;, &quot;../_base/Color&quot;, &quot;../colors&quot;], function(doh, array, Color, colors){\\r\\n\\r\\n\\t\\tvar verifyColor = function(t, source, expected){\\r\\n\\t\\t\\tsource\\t = new Color(source);\\r\\n\\t\\t\\texpected = new Color(expected);\\r\\n\\t\\t\\tt.is(expected.toRgba(), source.toRgba());\\r\\n\\t\\t\\tarray.forEach(source.toRgba(), function(n){ t.is(&quot;number&quot;, typeof(n)); });\\r\\n\\t\\t};\\r\\n\\r\\n\\t\\tdoh.register(&quot;tests.colors&quot;, [\\r\\n\\t\\t\\t// all tests below are taken from #4.2 of the CSS3 Color Module\\r\\n\\t\\t\\tfunction testColorEx01(t){ verifyColor(t, &quot;black&quot;, [0, 0, 0]); },\\r\\n\\t\\t\\tfunction testColorEx02(t){ verifyColor(t, &quot;white&quot;, [255, 255, 255]); },\\r\\n\\t\\t\\tfunction testColorEx03(t){ verifyColor(t, &quot;maroon&quot;, [128, 0, 0]); },\\r\\n\\t\\t\\tfunction testColorEx04(t){ verifyColor(t, &quot;olive&quot;, [128, 128, 0]); },\\r\\n\\t\\t\\tfunction testColorEx05(t){ verifyColor(t, &quot;#f00&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx06(t){ verifyColor(t, &quot;#ff0000&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx07(t){ verifyColor(t, &quot;rgb(255, 0, 0)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx08(t){ verifyColor(t, &quot;rgb(100%, 0%, 0%)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx09(t){ verifyColor(t, &quot;rgb(300, 0, 0)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx10(t){ verifyColor(t, &quot;rgb(255, -10, 0)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx11(t){ verifyColor(t, &quot;rgb(110%, 0%, 0%)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx12(t){ verifyColor(t, &quot;rgba(255, 0, 0, 1)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx13(t){ verifyColor(t, &quot;rgba(100%, 0%, 0%, 1)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx14(t){ verifyColor(t, &quot;rgba(0, 0, 255, 0.5)&quot;, [0, 0, 255, 0.5]); },\\r\\n\\t\\t\\tfunction testColorEx15(t){ verifyColor(t, &quot;rgba(100%, 50%, 0%, 0.1)&quot;, [255, 128, 0, 0.1]); },\\r\\n\\t\\t\\tfunction testColorEx16(t){ verifyColor(t, &quot;hsl(0, 100%, 50%)&quot;, &quot;red&quot;); },\\r\\n\\t\\t\\tfunction testColorEx17(t){ verifyColor(t, &quot;hsl(120, 100%, 50%)&quot;, &quot;lime&quot;); },\\r\\n\\t\\t\\tfunction testColorEx18(t){ verifyColor(t, &quot;hsl(120, 100%, 25%)&quot;, &quot;green&quot;); },\\r\\n\\t\\t\\tfunction testColorEx19(t){ verifyColor(t, &quot;hsl(120, 100%, 75%)&quot;, &quot;#80ff80&quot;); },\\r\\n\\t\\t\\tfunction testColorEx20(t){ verifyColor(t, &quot;hsl(120, 50%, 50%)&quot;, &quot;#40c040&quot;); },\\r\\n\\t\\t\\tfunction testColorEx21(t){ verifyColor(t, &quot;hsla(120, 100%, 50%, 1)&quot;, &quot;lime&quot;); },\\r\\n\\t\\t\\tfunction testColorEx22(t){ verifyColor(t, &quot;hsla(240, 100%, 50%, 0.5)&quot;, [0, 0, 255, 0.5]); },\\r\\n\\t\\t\\tfunction testColorEx23(t){ verifyColor(t, &quot;hsla(30, 100%, 50%, 0.1)&quot;, [255, 128, 0, 0.1]); },\\r\\n\\t\\t\\tfunction testColorEx24(t){ verifyColor(t, &quot;transparent&quot;, [0, 0, 0, 0]); },\\r\\n\\t\\t\\t// all tests below test greyscale colors\\r\\n\\t\\t\\tfunction testColorEx25(t){ verifyColor(t, colors.makeGrey(5), [5, 5, 5, 1]); },\\r\\n\\t\\t\\tfunction testColorEx26(t){ verifyColor(t, colors.makeGrey(2, 0.3), [2, 2, 2, 0.3]); }\\r\\n\\t\\t]);\\r\\n\\t});\\r\\n</pre>\\n<p>Here is that same unit test converted to Intern:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\tdefine([\\r\\n\\t\\t'intern!object',\\r\\n\\t\\t'intern/chai!assert',\\r\\n\\t\\t'../../_base/Color',\\r\\n\\t\\t'../../colors'\\r\\n\\t], function (registerSuite, assert, Color, colors) {\\r\\n\\r\\n\\t\\t/**\\r\\n\\t\\t * array or arrays to add for tests - actual and expected indexes\\r\\n\\t\\t * @type {Array}\\r\\n\\t\\t */\\r\\n\\t\\tvar testColorsObject = [\\r\\n\\t\\t\\t[ 'black', [0, 0, 0] ],\\r\\n\\t\\t\\t[ 'white', [255, 255, 255] ],\\r\\n\\t\\t\\t[ 'maroon', [128, 0, 0] ],\\r\\n\\t\\t\\t[ 'olive', [128, 128, 0] ],\\r\\n\\t\\t\\t[ '#f00', 'red' ],\\r\\n\\t\\t\\t[ '#ff0000', 'red' ],\\r\\n\\t\\t\\t[ 'rgb(255, 0, 0)', 'red' ],\\r\\n\\t\\t\\t[ 'rgb(100%, 0%, 0%)', 'red' ],\\r\\n\\t\\t\\t[ 'rgb(300, 0, 0)', 'red' ],\\r\\n\\t\\t\\t[ 'rgb(255, -10, 0)', 'red' ],\\r\\n\\t\\t\\t[ 'rgb(110%, 0%, 0%)', 'red' ],\\r\\n\\t\\t\\t[ 'rgba(255, 0, 0, 1)', 'red' ],\\r\\n\\t\\t\\t[ 'rgba(100%, 0%, 0%, 1)', 'red' ],\\r\\n\\t\\t\\t[ 'rgba(0, 0, 255, 0.5)', [0, 0, 255, 0.5] ],\\r\\n\\t\\t\\t[ 'rgba(100%, 50%, 0%, 0.1)', [255, 128, 0, 0.1] ],\\r\\n\\t\\t\\t[ 'hsl(0, 100%, 50%)', 'red' ],\\r\\n\\t\\t\\t[ 'hsl(120, 100%, 50%)', 'lime' ],\\r\\n\\t\\t\\t[ 'hsl(120, 100%, 25%)', 'green' ],\\r\\n\\t\\t\\t[ 'hsl(120, 100%, 75%)', '#80ff80' ],\\r\\n\\t\\t\\t[ 'hsl(120, 50%, 50%)', '#40c040' ],\\r\\n\\t\\t\\t[ 'hsla(120, 100%, 50%, 1)', 'lime' ],\\r\\n\\t\\t\\t[ 'hsla(240, 100%, 50%, 0.5)', [0, 0, 255, 0.5] ],\\r\\n\\t\\t\\t[ 'hsla(30, 100%, 50%, 0.1)', [255, 128, 0, 0.1] ],\\r\\n\\t\\t\\t[ 'transparent', [0, 0, 0, 0] ],\\r\\n\\t\\t\\t[ colors.makeGrey(5), [5, 5, 5, 1] ],\\r\\n\\t\\t\\t[ colors.makeGrey(2, 0.3), [2, 2, 2, 0.3] ]\\r\\n\\t\\t];\\r\\n\\r\\n\\t\\tregisterSuite({\\r\\n\\t\\t\\tname: 'dojo/colors',\\r\\n\\r\\n\\t\\t\\t'test colors': function () {\\r\\n\\t\\t\\t\\tvar i,\\r\\n\\t\\t\\t\\t\\tk,\\r\\n\\t\\t\\t\\t\\tactual,\\r\\n\\t\\t\\t\\t\\texpected;\\r\\n\\r\\n\\t\\t\\t\\tfor (i = 0; i &lt; testColorsObject.length; i += 1) {\\r\\n\\t\\t\\t\\t\\tactual = new Color(testColorsObject[i][0]);\\r\\n\\t\\t\\t\\t\\texpected = new Color(testColorsObject[i][1]);\\r\\n\\r\\n\\t\\t\\t\\t\\tassert.deepEqual(actual.toRgba(), expected.toRgba());\\r\\n\\r\\n\\t\\t\\t\\t\\tfor (k = 0; k &lt; actual.length; k += 1) {\\r\\n\\t\\t\\t\\t\\t\\tassert.isNumber(actual[k]);\\r\\n\\t\\t\\t\\t\\t}\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t});\\r\\n\\t});\\r\\n</pre>\\n<p>While this is a simple example, the differences between these two tests are pretty noticeable.  <code>registerSuite</code> (what we use to register an Intern suite) takes a single object argument.  This object is where you place tests and define various helper methods that Intern provides like <code>before</code>, <code>beforeEach</code>, <code>after</code> and <code>afterEach</code>.  </p>\\n<p>The <code>name</code> property is used by Intern so you can see which tests belong to which suite at a glance.  This is helpful when you have multiple suites to run, making it easy to group tests logically.  In addition, any object property added to the object passed to <code>registerSuite</code> can be used for a group of tests.  In this case, you see we just have one method called <code>testColors</code>.  This could just as easily be put in its own object property along with other pertinent tests.  This allows us to be much more organized when writing our unit tests.</p>\\n<p>In the first test you will see <code>doh.register</code> accepts a name and an array of functions as its parameters.  With the converted test, we made one private variable whose value is an array of arrays.  We&#8217;ve set up one method, <code>test colors</code>, that runs a <code>for</code> loop to test all of the values.  This is much simpler than defining many functions to run.</p>\\n<p>While they look different, both of these tests actually test the same functionality.  However, Intern provides a much greater range of features, ease of use and readability.</p>\\n<h2>DOH2Intern</h2>\\n<p>With the many advantages that the Intern testing suite has over the DOH library, it&#8217;s easy to see why we have made these changes. The SitePen team worked very hard to upgrade old DOH unit tests to Intern, and took advantage of all the features that Intern makes available. The team also cleaned up all DOH tests that were found to be redundant or out of date. This improved the quality of the unit tests and code coverage in the Dojo toolkit immensely.</p>\\n<h2>Learning more</h2>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/Screen-Shot-2016-06-02-at-2.25.39-PM.png\\\" alt=\\\"DOH Logo\\\" class=\\\"alignleft\\\" width=\\\"75\\\" /></p>\\n<p>We cover Intern in our <a href=\\\"https://www.sitepen.com/workshops/\\\">Intern and Dojo 202 workshops</a>, and we <a href=\\\"https://www.sitepen.com/services/\\\">support developers worldwide in their efforts with JavaScript and testing</a>. If you would like to discuss how we can help your organization improve their approach to automated testing, please <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to start the conversation.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Until a few years ago, our testing efforts with Dojo were focused on the Dojo Object Harness (DOH), a very early unit and functional testing suite. Developed by the Dojo Toolkit community nearly ten years ago, DOH&#8217;s main purpose was to provide functionality for unit testing JavaScript functions and custom widgets in a cross-browser compatible [&hellip;]</p>\\n\",\"protected\":false},\"author\":3,\"featured_media\":12308,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,375],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Migrating from DOH to Intern | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Until a few years ago, our testing efforts with Dojo were focused on the Dojo Object Harness (DOH), a very early unit and functional testing suite. Developed by the Dojo Toolkit community nearly ten years ago, DOH&#039;s main purpose was to provide functionality for unit testing JavaScript functions and custom widgets in a c\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Migrating from DOH to Intern | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Until a few years ago, our testing efforts with Dojo were focused on the Dojo Object Harness (DOH), a very early unit and functional testing suite. Developed by the Dojo Toolkit community nearly ten years ago, DOH&#039;s main purpose was to provide functionality for unit testing JavaScript functions and custom widgets in a c\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2016-06-06T15:53:52+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2019-12-11T16:07:51+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/\\\",\\\"name\\\":\\\"Migrating from DOH to Intern | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/#primaryimage\\\"},\\\"datePublished\\\":\\\"2016-06-06T15:53:52+00:00\\\",\\\"dateModified\\\":\\\"2019-12-11T16:07:51+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\"},\\\"description\\\":\\\"Until a few years ago, our testing efforts with Dojo were focused on the Dojo Object Harness (DOH), a very early unit and functional testing suite. Developed by the Dojo Toolkit community nearly ten years ago, DOH's main purpose was to provide functionality for unit testing JavaScript functions and custom widgets in a c\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/dojo-toolkit-unit-tests-converted-to-intern-in-the-doh2intern-initiative/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9685\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=9685\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9685/revisions\"}],\"predecessor-version\":[{\"id\":19761,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/9685/revisions/19761\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/12308\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=9685\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=9685\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=9685\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=9685\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":3,\"name\":\"Dylan Schiemann\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dylan/\",\"slug\":\"dylan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dylan Schiemann, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dylan Schiemann, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dylan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dylan/\\\",\\\"name\\\":\\\"Dylan Schiemann, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:31:01 GMT"],["expires","Wed, 09 Sep 2020 15:31:01 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}