{"value":{"body":"[{\"id\":6579,\"date\":\"2013-09-10T11:10:02\",\"date_gmt\":\"2013-09-10T18:10:02\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=6579\"},\"modified\":\"2019-12-11T07:57:41\",\"modified_gmt\":\"2019-12-11T15:57:41\",\"slug\":\"building-an-application-with-xstyle\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/building-an-application-with-xstyle/\",\"title\":{\"rendered\":\"Building an application with xstyle\"},\"content\":{\"rendered\":\"<p><a href=\\\"http://sitepen.github.io/xstyle/\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2013/08/xstyle_transparent.png\\\" alt=\\\"xstyle_transparent\\\" width=\\\"216\\\" height=\\\"254\\\" style=\\\"float:right;\\\" /></a>In this post, we want to walk through how you would get started building an application using <a href=\\\"http://sitepen.github.io/xstyle/\\\">xstyle</a>, an extensible CSS framework. xstyle provides extensions that allows us to declaratively describe an user interface, making use of data bindings, element generation, and components, giving us an elegant means to create an application. In this tutorial, we will be using xstyle with Dojo, and use xstyle completely for our UI. Before starting, remember that you can use xstyle to any degree desired. xstyle can simply be used to make CSS improvements, it can build more sophisticated UI components, and it can be used to describe the entirety of the user interface (combined with a JavaScript-driven data model). Here we will be looking at the application level usage of xstyle, and we will create an app with a simple list of contacts and a form to edit the contact.</p>\\n<p><!--more--></p>\\n<p>Let&#8217;s start with some our basic HTML for loading dojo and xstyle:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;script src=&quot;dojo/dojo.js&quot; \\r\\n          data-dojo-config=&quot;async: true, deps: ['xstyle/main']&quot;&gt;\\r\\n&lt;/script&gt;\\r\\n&lt;link href=&quot;app.css&quot; rel=&quot;stylesheet&quot;/&gt;\\r\\n&lt;body&gt;&lt;/body&gt;\\r\\n</pre>\\n<p>Now let&#8217;s start constructing our UI with xstyle. One of the key tools in xstyle for creating our interface is element generation. Now again, we could certainly create our app layout using HTML, which would be encouraged if it our were producing a semantically significant document, but in this case, we are creating an application layout for the purpose of presenting a set of JSON-originating data. We will start by creating a simple header, essentially the &#8220;Hello, world&#8221; of xstyle. We do this with the element generation syntax in xstyle, which involves use the => operator followed by CSS selector indicating what elements to create (much like the syntax used by <a href=\\\"https://github.com/kriszyp/put-selector\\\">put-selector</a>):</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\nbody {\\r\\n    =&gt;\\r\\n        h1 'Hello, world of my contacts'\\r\\n}\\r\\n</pre>\\n<p>Now let&#8217;s expand it to include our list of contacts and a form. We can create multiple sibling elements under the body by using the comma operator, so we will create a <code>ul.list</code> (a <code>&lt;ul></code> with class name of <code>contacts-list</code>) for the list of contacts and <code>form</code> for viewing the details of the contact and editing it.</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\nbody {\\r\\n    =&gt;\\r\\n        h1 'Hello, world of my contacts',\\r\\n        ul.contacts-list,\\r\\n        div.form;\\r\\n}\\r\\n</pre>\\n<p>So far we have only generated a static set of elements. If we are going to be presenting dynamic data, we will need to connect to this data. We do this by using xstyle&#8217;s data bindings functionality. To create this binding, we first create a new definition, pointing to our data source module, and then referencing this data definition within our element declaration, using parenthesis to indicate a binding to our <code>&lt;ul></code> element:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\ncontacts = module('my-app/contacts');\\r\\nbody {\\r\\n    =&gt;\\r\\n        h1 'Hello, world of my contacts',\\r\\n        ul.contacts-list (contacts),\\r\\n        div.form;\\r\\n}\\r\\n</pre>\\n<p>xstyle will then generate (<code>&lt;li></code>) elements for each item in the contacts collection.</p>\\n<p>Now, let&#8217;s turn to our data source, and setup our data model that will drive this interface. Above, we defined that the <code>contacts</code> comes from the module <code>my-app/contacts</code>. Let&#8217;s create this module now. In our data model, we construct a Memory store, provide it with data, and query it, returning the results as our list of contacts:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nmy-app/contacts:\\r\\ndefine(['dojo/store/Memory'], function(Memory){\\r\\n    contactStore = new Memory({data:[...]});\\r\\n    var contacts = contactStore.query({});\\r\\n    return contacts;\\r\\n});\\r\\n</pre>\\n<p>Here we have created a data model. Since this is a <a href=\\\"http://dojotoolkit.org/documentation/tutorials/1.9/intro_dojo_store/\\\">Dojo object store</a>, we could easily swap this out for a different store, like the JsonRest store, which will interact with the server.</p>\\n<p>With this in place, the data binding can now be used within the xstyle element declaration. However, we haven&#8217;t provided any information about how to render each of these contacts. Let&#8217;s do that now, by adding a nested rule for the <code>ul (contacts)</code> binding. Again, we are working by extending CSS, so this can be filled with CSS property declarations. However, one of the extensions provided by xstyle, is the <code>each</code> property that allows to specify further element declarations that will be rendered for each item in the data-bound collection. Here we will indicate that each item should be rendered as a &lt;li> element, with contents consisting of the first name and last name of that item. We can also reference the current item with the <code>item</code> definition, using the xstyle property accessor <code>/</code>:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\ncontacts = module('my-app/contacts');\\r\\nbody {\\r\\n    =&gt;\\r\\n        h1 'Hello, world of my contacts',\\r\\n        ul.contacts-list (contacts) {\\r\\n            each: li (item/firstName + item/lastName);\\r\\n        },\\r\\n        div.form;\\r\\n}\\r\\n</pre>\\n<p>Also, since this is CSS, remember that we could can easily add additional styling information; to demonstrate, let&#8217;s put a border around the contact list:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n        ul.contacts-list (contacts) {\\r\\n            each: li (item/firstName + item/lastName);\\r\\n            border: 1px solid #aaa;\\r\\n        },\\r\\n</pre>\\n<p>Before moving on to the form, we also want to add the ability to select items in our list, so that the selected contact can be displayed and edited in the form. To do this, we will use xstyle&#8217;s event registration properties. xstyle provides on-* properties that allow us to register event handlers. We will register the click event in our contact list user interface as triggering a select, and then define the select action in our model.</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n        ul.contacts-list (contacts) {\\r\\n            each: li (item/firstName + item/lastName) {\\r\\n                on-click: contacts/select(item);\\r\\n            };\\r\\n            border: 1px solid #aaa;\\r\\n        },\\r\\n</pre>\\n<p>In our model module we then add a select function to handle this action:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n        contacts.select = function(item){\\r\\n            contacts.set(&quot;selected&quot;, item);\\r\\n        }\\r\\n</pre>\\n<p>Now we should be ready for the form, which will be used to view and edit the contact that is selected in the above list. To accomplish this, we will be creating inputs in our form that are bound to the fields of the selected item. Again, we create this binding by simply referencing the target object or property. Since we are binding to an input, the binding is two-way, not only does the input render the value, but editing the input will change the value of the binding&#8217;s target. We will start our form by assigning the selected item, <code>contacts/selected</code> to the name <code>selected</code> for easy reference with the element generation. Then we can simply create our labels and inputs. We will also create a header showing the full name to help illustrate the bindings as well:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n        div.form {\\r\\n            selected = contacts/selected;\\r\\n            =&gt;\\r\\n                h1 (selected/firstName + ' ' + selected/lastName),\\r\\n                label 'First Name:',\\r\\n                input[type=text] (selected/firstName),\\r\\n                label 'Last Name:',\\r\\n                input[type=text] (selected/lastName),\\r\\n                label 'Email:',\\r\\n                input[type=email] (selected/email);\\r\\n        }\\r\\n</pre>\\n<p>Next, we will add the ability to save this form. We will do this by setting up an event listener:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n                ...\\r\\n                label 'Email:',\\r\\n                input[type=email] (selected/email),\\r\\n                button.start-row 'Save' {\\r\\n                \\ton-click: contacts/save(selected);\\r\\n                };\\r\\n</pre>\\n<p>And then in the contacts.js module, we add the save function, which will take the current values (which are automatically updated by the inputs), and put()s it back in the store.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    contacts.set('save', function(selected){\\r\\n    \\tcontactStore.put(selected);\\r\\n    });\\r\\n</pre>\\n<p>And next we will create a button for creating new contacts:</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n                ...\\r\\n                label 'Email:',\\r\\n                input[type=email] (selected/email),\\r\\n                button.start-row 'New Contact' {\\r\\n                \\ton-click: contacts/create();\\r\\n                },\\r\\n                button.start-row 'Save' {\\r\\n                \\ton-click: contacts/save(selected);\\r\\n                };\\r\\n</pre>\\n<p>And then in the contacts.js module, we add the create function, which will set a new object to the selected object that is bound to the inputs:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    contacts.set('selected', {\\r\\n    \\tfirstName:&quot;&quot;,\\r\\n\\tlastName:&quot;&quot;\\r\\n    });\\r\\n</pre>\\n<h3>Form Validation</h3>\\n<p>Most form-based applications will generally need validation, and providing instant validation of entries as the user moves between fields is important for a good user experience. With xstyle, we can accomplish this by adding validation logic, and binding validation results to an element for error messages. We will add a listener to field, checking the value each time it changes, and then set an error binding with the result. First, let&#8217;s create the error element, bound to the error value:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n        div.form {\\r\\n            selected = contacts/selected;\\r\\n            =&gt;\\r\\n                h1 (selected/firstName + ' ' + selected/lastName)\\r\\n                label 'First Name:'\\r\\n                input[type=text] (selected/firstName)\\r\\n                span.error (selected/firstName/error)\\r\\n</pre>\\n<p>And now we add the validation logic to our data model, in contacts.js:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\tvar firstName = contacts.get('selected').get('firstName');\\r\\n\\tfirstName.receive(function(value){\\r\\n\\t\\tfirstName.set('error', value &amp;&amp; value.length &lt; 3 ? \\r\\n\\t\\t\\t'Name must be at least three characters' : '');\\r\\n\\t});\\r\\n\\r\\n</pre>\\n<p>Now, changes to the firstName will go through validation, and be synchronized to the error element we created.</p>\\n<h3>Navigation</h3>\\n<p>Another critical aspect of modern web applications is proper use of browser navigation, so that back, forward, and bookmarking work correctly. In this application, we are basically navigating to different users, and we can easily track this navigation with hash-based URL changes by simply apply <a href=\\\"https://github.com/sitepen/dbind\\\">dbind</a>&#8216;s &#8220;navigation&#8221; module. The navigation module takes a binding object that it can attach, and store to lookup objects by URL&#8217;s hash. This can be setup by simply running:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndefine(... &quot;dbind/navigation&quot;), function(... navigation){\\r\\n\\t...\\r\\n\\tnavigation(contacts.get('selected'), {\\r\\n\\t\\tstore: contactStore\\r\\n\\t});\\r\\n</pre>\\n<p>With this in place, each selection of a user will result in a change to the URL (hash). We can then use the back and forward to navigate back to previously selected users, and even bookmark the selection of a user.</p>\\n<h3>Conclusion</h3>\\n<p>This introduction to building applications will hopefully give you some ideas on how you can use xstyle that are clearly written, leveraging xstyle&#8217;s capabilities like CSS extensions, bindings, expressions, and element generation, and demonstrating a clean, distinct separation of presentation and data model.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>In this post, we want to walk through how you would get started building an application using xstyle, an extensible CSS framework. xstyle provides extensions that allows us to declaratively describe an user interface, making use of data bindings, element generation, and components, giving us an elegant means to create an application. In this tutorial, [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":6945,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[31,45,378],\"tags\":[],\"series\":[376],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Building an application with xstyle | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/building-an-application-with-xstyle/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Building an application with xstyle | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"In this post, we want to walk through how you would get started building an application using xstyle, an extensible CSS framework. xstyle provides extensions that allows us to declaratively describe an user interface, making use of data bindings, element generation, and components, giving us an elegant means to create an application. In this tutorial, [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/building-an-application-with-xstyle/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2013-09-10T18:10:02+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2019-12-11T15:57:41+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/building-an-application-with-xstyle/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/building-an-application-with-xstyle/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/building-an-application-with-xstyle/\\\",\\\"name\\\":\\\"Building an application with xstyle | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/building-an-application-with-xstyle/#primaryimage\\\"},\\\"datePublished\\\":\\\"2013-09-10T18:10:02+00:00\\\",\\\"dateModified\\\":\\\"2019-12-11T15:57:41+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/building-an-application-with-xstyle/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/6579\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=6579\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/6579/revisions\"}],\"predecessor-version\":[{\"id\":19754,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/6579/revisions/19754\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/6945\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=6579\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=6579\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=6579\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=6579\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b019a991e4dce8b-LHR"],["cf-request-id","03d4def3ae0000ce8b64a0a200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:11:23 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d94ac339b6934efdcac31320c50117c7e1594293083; expires=Sat, 08-Aug-20 11:11:23 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}