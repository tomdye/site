{"value":{"body":"[{\"id\":8863,\"date\":\"2015-06-19T07:03:26\",\"date_gmt\":\"2015-06-19T14:03:26\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=8863\"},\"modified\":\"2015-06-19T07:03:26\",\"modified_gmt\":\"2015-06-19T14:03:26\",\"slug\":\"dojo-koa\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/dojo-koa/\",\"title\":{\"rendered\":\"Dojo + Koa\"},\"content\":{\"rendered\":\"<p>Dojo and its AMD loader provide outstanding tools for structuring a Web application on the client-side. However, the notion of &#8220;writing a JavaScript application&#8221; has widened in definition over the past few years with the increased popularity of <a href=\\\"http://nodejs.org/\\\">Node.js</a>. Though Dojo can be used in a Node.js environment with the AMD module pattern, other key frameworks have gained prominence in the server-side JavaScript space, including <a href=\\\"http://expressjs.com/\\\">Express</a>, <a href=\\\"http://flatironjs.org/\\\">Flatiron</a>, <a href=\\\"http://sailsjs.org/\\\">Sails.js</a> and the Dojo Foundation&#8217;s very own <a href=\\\"http://www.persvr.org/\\\">Persevere</a>. These frameworks give structure and handle common tasks such as routing, template rendering, and content negotiation. Still, since most operations on a Node.js server are asynchronous, server-side JavaScript can be a complex, treacherous mess of callbacks. Enter <a href=\\\"http://koajs.com/\\\">Koa</a>, a Node.js framework that attempts to save us from this callback hell by using ECMAScript 2015 <a href=\\\"http://wiki.ecmascript.org/doku.php?id=harmony:generators\\\">Generators</a>. Using Dojo on the client-side and Koa on the server-side makes for a robust, clean, and expressive application. In this post, we&#8217;ll explain what generators are and how to use Koa with Dojo for ultimate code cleanliness.</p>\\n<p><!--more--></p>\\n<h2>Gena-what?</h2>\\n<p>Generators are an exciting part ES2015. In fact, <a href=\\\"http://kangax.github.io/compat-table/es6/\\\">some browsers</a> don&#8217;t support them yet. Despite their currently-lacking browser support, generators are exciting because of their power and ability to aid in how asynchronous code is written. Before understanding what a generator is and why they are useful, let&#8217;s first understand how callbacks become unmanageable quickly.</p>\\n<h2>Callback hell</h2>\\n<p>Let&#8217;s define a simple async function for example purposes:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\tfunction async(delay, done) {\\n\\t\\tsetTimeout(done, delay);\\n\\t}\\n</pre>\\n<p>This code asynchronously waits for a specified amount of time then executes a callback function. Calling this function is just like calling any other asynchronous function, such as making a request &#8211; you provide a callback function:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t// ...\\n\\tasync(1000, function () {\\n\\t\\tconsole.log('done!');\\n\\t});\\n</pre>\\n<p>So far so good. But say we want to call this function ten consecutive times; quickly, the code gets complex and ugly, as we&#8217;d end up with ten nested callbacks:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t// ...\\n\\tasync(1000, function () {\\n\\t\\tasync(1000, function () {\\n\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\t\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\t\\t\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tasync(1000, function () {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.log('done!');\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t\\t});\\n\\t\\t\\t\\t});\\n\\t\\t\\t});\\n\\t\\t});\\n\\t});\\n</pre>\\n<h2>Generators to the rescue!</h2>\\n<p>A <strong>generator</strong> is a fancy type of iterator: it has a <code>next</code> method that accepts one argument and returns <code>{done, value}</code> tuples and it also has a <code>throw</code> method. Generators allow functions to be &#8220;exited&#8221; and then &#8220;re-entered&#8221; at a later time, with state persisted across each re-entrance:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\tfunction* oneToThree() {\\n\\t\\tyield 1;\\n\\t\\tyield 2;\\n\\t\\tyield 3;\\n\\t}\\n\\n\\tvar iterator = oneToThree();\\n\\n\\tconsole.log(iterator.next().value);\\n\\tconsole.log(iterator.next().value);\\n\\tconsole.log(iterator.next().value);\\n\\t// '1'\\n\\t// '2'\\n\\t// '3'\\n</pre>\\n<p>The <code>yield</code> keyword is like a &#8220;pause and return&#8221; flow control statement. When the <code>next</code> method is repeatedly called, the generator is partially executed, advancing through the code until a <code>yield</code> keyword is hit. This simple yet powerful API can be used to provide an alternative to traditional nested callbacks. Let&#8217;s revisit our async example from earlier with ten nested callbacks and write it using generators instead:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\tfunction run(generatorFunction) {\\n\\t\\tvar iterator = generatorFunction(resume);\\n\\t\\tfunction resume(val) { iterator.next(val); }\\n\\t\\titerator.next()\\n\\t}\\n\\n\\trun(function* asyncExample(resume) {\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield async(1000), resume);\\n\\t\\tconsole.log(yield 'done!');\\n\\t});\\n</pre>\\n<p>This code will execute exactly the same as our nested callback code from hell. Note that we wrapped our async function calls in a generator function called <code>asyncExample</code>. We also wrote a special function, <code>run</code>, that executes a generator function in an iterative manner. This wrapper generator function and runner function together allow us to ditch the callback ugliness.</p>\\n<h2>Koa, front and center</h2>\\n<p>Because generators help us avoid callback hell in an asynchronous environment, they make our server-side JavaScript much cleaner. Koa is a Node.js framework designed specifically for this purpose: to clean up server-side JavaScript code by eliminating callbacks. This also makes error handling much easier as an added bonus.</p>\\n<p>A Koa server is an <a href=\\\"http://koajs.com/#application\\\">Application</a> object containing an array of middleware, each of which is a generator function. Let&#8217;s look at a server that responds with &#8220;Hello World&#8221; for every request, adapted from the <a href=\\\"http://koajs.com/\\\">Koa website</a>:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\tvar koa = require('koa');\\n\\tvar app = koa();\\n\\n\\t// response\\n\\n\\tapp.use(function *(){\\n\\t\\tthis.body = 'Hello World';\\n\\t});\\n\\n\\tapp.listen(3000);\\n</pre>\\n<p>Each middleware has a <a href=\\\"http://koajs.com/#context\\\">Context</a> via <code>this</code> that allows you to access the <a href=\\\"http://koajs.com/#request\\\">Request</a> and <a href=\\\"http://koajs.com/#response\\\">Response</a> objects as well as get/set other information. In this example, we set the response body to &#8216;Hello World&#8217;.</p>\\n<p>Koa middleware functions cascade in a very expressive, elegant manner, something that was hard to accomplish with Express and non-generator frameworks. Based on the order in which middleware functions are registered, control is yielded &#8220;downstream&#8221; then flows back &#8220;upstream&#8221; before returning to the client. For example, let&#8217;s add a x-response-time middleware to our hello world server:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\tvar koa = require('koa'),\\n\\t\\tapp = koa();\\n\\n\\t// x-response-time\\n\\n\\tapp.use(function *(next) {\\n\\t\\tvar start = new Date;\\n\\t\\tyield next;\\n\\t\\tvar ms = new Date - start;\\n\\t\\tthis.set('X-Response-Time', ms + 'ms');\\n\\t});\\n\\n\\t// response\\n\\n\\tapp.use(function *() {\\n\\t\\tthis.body = 'Hello World';\\n\\t});\\n\\n\\tapp.listen(3000);\\n</pre>\\n<p>Before responding with the expected &#8216;Hello World&#8217;, the request flows through our x-response-time middleware: the start time is saved, control is yielded to the response middleware, then control flows back to the response time function to pick up where it left off, setting the X-Response-Time header using the stored start time.</p>\\n<h2>Dojo + Koa = clean code</h2>\\n<p>Let&#8217;s walk through a simple example application that uses Dojo on the client-side and Koa on the server-side (download <a href=\\\"https://www.sitepen.com/labs/code/koa-dojo.tar.gz\\\">here</a>). We&#8217;ll create a form that allows a user to enter his or her name and submit it; the name is then persisted in a MongoDB instance. Here is what it will look like when we are done:</p>\\n<p><img class=\\\"size-medium wp-image-8880\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2014/06/Screen-Shot-2014-06-11-at-7.41.55-PM-278x300.png\\\" alt=\\\"Demo Dojo + Koa Application\\\" width=\\\"278\\\" height=\\\"300\\\" /></p>\\n<p>First, let&#8217;s start with what we know: Dojo on the client-side. We&#8217;ll create a <code>index.html</code> HTML page that includes Dojo and references our application JavaScript file (via <code>dojoConfig</code>.)</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n\\t&lt;meta charset=&quot;utf-8&quot;&gt;\\n\\t&lt;title&gt;Dojo, Koa, and Mono\\n\\t&lt;link rel=&quot;stylesheet&quot; href=&quot;app.css?1&quot;&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n\\t&lt;div class=&quot;content&quot;&gt;\\n\\t\\t&lt;form action=&quot;/users/add&quot; method=&quot;post&quot;&gt;\\n\\t\\t\\t&lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;Enter your name...&quot; autocomplete=&quot;off&quot;&gt;\\n\\t\\t\\t&lt;button type=&quot;submit&quot; id=&quot;addButton&quot;&gt;Add\\n\\t\\t&lt;/form&gt;\\n\\n\\t\\t&lt;div id=&quot;users&quot;&gt;&lt;/div&gt;\\n\\t&lt;/div&gt;\\n\\n\\t&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/dojo/1.10.4/dojo/dojo.js&quot; data-dojo-config=&quot;deps:&amp;#91;'./app.js'&amp;#93;&quot;&gt;\\n&lt;/body&gt;\\n&lt;/html&gt;\\n</pre>\\n<p>Next, let&#8217;s create an <code>app.js</code> file alongside our index page. This file needs to do one thing: request all users so we can list them on the index page. We&#8217;ll use <code>dojo/request</code> to make the XHR request and <code>dojo/dom-construct</code> to create an element for each persisted user.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">define([\\n\\t'dojo/request',\\n\\t'dojo/dom-construct'\\n], function (request, domConstruct) {\\n\\n\\tdocument.querySelector('[name=&quot;name&quot;]').focus();\\n\\n\\trequest('/users', {handleAs: 'json'}).then(function (users) {\\n\\t\\tvar userList = document.querySelector('#users');\\n\\n\\t\\tusers.forEach(function (user) {\\n\\t\\t\\tdomConstruct.create('div', {\\n\\t\\t\\t\\tinnerHTML: user.name\\n\\t\\t\\t}, userList, 'first');\\n\\t\\t});\\n\\t});\\n});\\n</pre>\\n<p>At this point, we have a complete client: we have an HTML page with a form with a <code>method</code> set to &#8220;/users/add&#8221; and some JavaScript that requests users from &#8220;/users&#8221;. All that&#8217;s left is to create a server to service these two requests. And of course, let&#8217;s use Koa. Let&#8217;s create a <code>server.js</code> alongside the index page and application JavaScript:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">var serve = require('koa-static'),\\n\\troute = require('koa-route'),\\n\\tparse = require('co-body'),\\n\\tmonk = require('monk'),\\n\\twrap = require('co-monk'),\\n\\tdb = monk('localhost/koa-dojo'),\\n\\tusers = wrap(db.get('users')),\\n\\tkoa = require('koa'),\\n\\tapp = koa();\\n</pre>\\n<p>Except for the MongoDB dependency, these are all different koa components, as it is architected extremely modularly. We are requiring middleware for routing, body parsing, etc. The usage of these modules will be clear once we fill in the rest of the file. Next, we need to serve our application and set up our routes:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// ...\\n\\n// Serve the application code statically\\napp.use(serve('.'));\\n\\n// Allow users to be added or filtered via an API\\napp.use(route.post('/users/add', addUser));\\napp.use(route.get('/users', filterUsers));\\n</pre>\\n<p>Above, we&#8217;re using Koa&#8217;s provided static middleware to serve our application. Next, we use Koa&#8217;s provided route middleware to set up two routes: a POST to &#8216;users/add&#8217; and a GET to &#8216;/users&#8217;, the two routes our client will make requests to. Lastly, we need to define these two routes and start the server:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">//...\\n\\nfunction *addUser() {\\n\\tvar user = yield parse(this);\\n\\tyield users.insert(user);\\n\\tthis.redirect('/');\\n}\\n\\nfunction *filterUsers() {\\n\\tthis.body = yield users.find({});\\n}\\n\\napp.listen(3000);\\n\\nconsole.log('listening on port 3000');\\n</pre>\\n<p>Here is where the magic happens. First, note how the <code>addUser</code> and <code>filterUsers</code> functions are actually generator functions, meaning we can use <code>yield</code> within them. Additionally, note how we are using <a href=\\\"https://github.com/LearnBoost/monk\\\">monk</a>, a MongoDB wrapper that supports generators. Inserting a user, which normally would involve a database operation with nested callback, is a one line operation; the same is true for finding a user and sending these results to the client.</p>\\n<p>With that, our demo application is complete. We have a simple Dojo client that lists users and allows users to be added, and we have a simple generator-powered Koa server that handles these requests.</p>\\n<h2>Conclusion</h2>\\n<p>As Web developers, we inherently enjoy writing JavaScript, so Node.js&#8217;s increased popularity is a good thing. While Express and other libraries have served a great purpose to date, libraries such as Koa that make use of new language features as they become available will allow more elegant and clear coding. Dojo works well with such a library and can easily serve as a robust client in this client-server architecture.</p>\\n<h2>Learning more</h2>\\n<p>Want to learn how to use modern ES2015 or TypeScript features in your application? Looking for advice on how to architect an application that leverages JavaScript or TypeScript on both the client-side and server-side, based on your specific functional and technical requirements? We&#8217;re happy to help. <a href=\\\"https://www.sitepen.com/contact\\\">Contact us</a> for a free 30 minute consultation to discuss your application.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Dojo and its AMD loader provide outstanding tools for structuring a Web application on the client-side. However, the notion of &#8220;writing a JavaScript application&#8221; has widened in definition over the past few years with the increased popularity of Node.js. Though Dojo can be used in a Node.js environment with the AMD module pattern, other key [&hellip;]</p>\\n\",\"protected\":false},\"author\":46,\"featured_media\":8880,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[353,45,3,28],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dojo + Koa | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Dojo and its AMD loader provide outstanding tools for structuring a Web application on the client-side. However, the notion of &quot;writing a JavaScript application&quot; has widened in definition over the past few years with the increased popularity of Node.js. Though Dojo can be used in a Node.js environment with the AMD module pa\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/dojo-koa/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dojo + Koa | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Dojo and its AMD loader provide outstanding tools for structuring a Web application on the client-side. However, the notion of &quot;writing a JavaScript application&quot; has widened in definition over the past few years with the increased popularity of Node.js. Though Dojo can be used in a Node.js environment with the AMD module pa\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/dojo-koa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-06-19T14:03:26+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-koa/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-koa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/dojo-koa/\\\",\\\"name\\\":\\\"Dojo + Koa | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/dojo-koa/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-06-19T14:03:26+00:00\\\",\\\"dateModified\\\":\\\"2015-06-19T14:03:26+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7a3e92a258cea881b49680a18b593d71\\\"},\\\"description\\\":\\\"Dojo and its AMD loader provide outstanding tools for structuring a Web application on the client-side. However, the notion of \\\\\\\"writing a JavaScript application\\\\\\\" has widened in definition over the past few years with the increased popularity of Node.js. Though Dojo can be used in a Node.js environment with the AMD module pa\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/dojo-koa/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7a3e92a258cea881b49680a18b593d71\\\",\\\"name\\\":\\\"Paul Bouchon\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Paul Bouchon\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/8863\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/46\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=8863\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/8863/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/8880\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=8863\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=8863\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=8863\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=8863\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":46,\"name\":\"Paul Bouchon\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/pbouchon/\",\"slug\":\"pbouchon\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Paul Bouchon, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Paul Bouchon, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/pbouchon/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/pbouchon/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/pbouchon/\\\",\\\"name\\\":\\\"Paul Bouchon, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7a3e92a258cea881b49680a18b593d71\\\",\\\"name\\\":\\\"Paul Bouchon\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Paul Bouchon\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/pbouchon/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/46\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:31:16 GMT"],["expires","Wed, 09 Sep 2020 15:31:16 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}