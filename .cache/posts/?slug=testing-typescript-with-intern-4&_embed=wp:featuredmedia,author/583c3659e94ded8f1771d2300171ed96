{"value":{"body":"[{\"id\":15731,\"date\":\"2018-02-12T12:06:06\",\"date_gmt\":\"2018-02-12T19:06:06\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15731\"},\"modified\":\"2020-01-27T09:59:30\",\"modified_gmt\":\"2020-01-27T17:59:30\",\"slug\":\"testing-typescript-with-intern-4\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/testing-typescript-with-intern-4/\",\"title\":{\"rendered\":\"Testing TypeScript with Intern 4\"},\"content\":{\"rendered\":\"<p><img style=\\\"margin: 0 15px 15px 0px; float: left; max-width:120px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2013/05/intern_blog1.png\\\" alt=\\\"Intern\\\" /></p>\\n<p><a href=\\\"http://theintern.io/\\\">Intern</a> is a popular JavaScript testing framework with an <a href=\\\"https://theintern.io/features.html\\\">extensive feature set</a>. While Intern has traditionally been focused on testing applications written in standard JavaScript, it has also had great support for TypeScript. With version 4, Intern has been completely rewritten in TypeScript, allowing it to provide a more seamless testing experience for TypeScript projects.</p>\\n<p><!--more--></p>\\n<h2>Getting started</h2>\\n<p>We will be looking at tests for a simple TodoMVC example application. The <a href=\\\"https://github.com/theintern/intern-examples/tree/master/typescript-example\\\">source code</a> for this example can be found in the <a href=\\\"https://github.com/theintern/intern-examples/\\\">intern-examples</a> repo.</p>\\n<h2>Directory structure</h2>\\n<p>The application and tests use the following directory structure. Putting TypeScript in a <code>src</code> directory is typical for TS projects. We put tests in a separate directory that mirrors the structure of the source; this can simplify source code management since testing resources aren&#8217;t mixed in with application code.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\ntodomvc/\\r\\n    intern.json\\r\\n    src/\\r\\n        model/\\r\\n            todo.ts\\r\\n        routers/\\r\\n            router.ts\\r\\n        ...\\r\\n    tests/\\r\\n        functional/\\r\\n            Todo.ts\\r\\n        unit/\\r\\n            model/\\r\\n                todo.ts\\r\\n            routers/\\r\\n                router.ts\\r\\n</pre>\\n<h2>Source code</h2>\\n<p>The application itself is a simple Bootstrap + jQuery TodoMVC app, written as a set of TypeScript modules. Modules are easily tested since they can be loaded individually in test suites, and most module loading systems allow for module dependencies to be mocked or stubbed. Intern is well suited for testing both modular and non-modular code; it does not require or even assume that a module loader is present in the target environment. Since this example is written using modules, a module loader will be present; in this case, SystemJS.</p>\\n<h2>Unit tests</h2>\\n<p>TypeScript offers some obvious advantages for unit tests, the most signficant being that the TypeScript compiler will catch API misuses, both with Intern and with the application itself (for applications written in TypeScript).</p>\\n<p>The TypeScript unit test suite for the Todo model looks like:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport Todo from 'src/models/todo';\\r\\n\\r\\nconst { registerSuite } = intern.getInterface('object');\\r\\nconst { assert } = intern.getPlugin('chai');\\r\\n\\r\\nlet todo;\\r\\n\\r\\nregisterSuite('todo model', {\\r\\n    beforeEach() {\\r\\n        todo = new Todo();\\r\\n        todo.sync = () =&gt; Promise.resolve({});\\r\\n    },\\r\\n\\r\\n    tests: {\\r\\n        defaults() {\\r\\n            assert.isFalse(\\r\\n                todo.get('completed'),\\r\\n                'A Todo model should default the completed property to false'\\r\\n            );\\r\\n            assert.strictEqual(\\r\\n                todo.get('title'),\\r\\n                '',\\r\\n                'A Todo model should default the title property to an empty string'\\r\\n            );\\r\\n        },\\r\\n\\r\\n        toggle() {\\r\\n            todo.toggle();\\r\\n            assert.isTrue(\\r\\n                todo.get('completed'),\\r\\n                'Completed property should switch to true after being toggled for the first time'\\r\\n            );\\r\\n\\r\\n            todo.toggle();\\r\\n            assert.isFalse(\\r\\n                todo.get('completed'),\\r\\n                'Completed property should switch back to false after being toggled again'\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n});\\r\\n</pre>\\n<p>This test suite imports the Todo model class and runs tests on model instances. Before each test is run, a new Todo instance is created and its <code>sync</code> method is stubbed to prevent the model from trying to make ajax requests. The tests simply verify that a Todo instance has a certain default state, and that its <code>toggle</code> method behaves as expected.</p>\\n<p>The suite registration function and assert module are both fully typed, so TypeScript will alert a test writer if <code>registerSuite</code> is called with an improperly formatted object, or if an unknown assertion is made. Also, note the use of the <code>intern</code> global. The TypeScript compiler knows about this global because of the <code>\\\"types\\\": [\\\"intern\\\"]</code> compiler option in the test <code>tsconfig.json</code> file. It is also possible to import the suite registration function and assertion library using standard <code>import</code> statements.</p>\\n<p>Note the path used to import the Todo model: &#8220;src/models/todo&#8221; rather than the actual relative path from the test module to the application module: &#8220;../../../src/models/todo&#8221;. This works because of a <code>baseUrl</code> setting in the test <code>tsconfig.json</code> file. By default, importing a non-relative path causes TypeScript to look for a package in the project root, which is the location of the <code>tsconfig.json</code> file being used for compilation. However, that file has a <code>baseUrl</code> value of &#8220;..&#8221;, which sets the base directory to the project root. From there, the <code>src</code> package is visible.</p>\\n<p>Test writers must ensure that the import paths used in tests will both build with TypeScript <I>and</I> work at runtime, because the the TypeScript import process is distinct from that used by the runtime loader (SystemJS in our case). In this case it will work as-is because SystemJS will be loading both tests and application modules from the same base path, so a module path like &#8220;src/models/todo&#8221; in a test will map directly to the corresponding application module at runtime. Even if that weren&#8217;t the case, most runtime loaders are easily configured to look for packages in arbitrary locations.</p>\\n<h2>Functional tests</h2>\\n<p>Functional tests look very similar to unit tests, but leverage Intern&#8217;s <a href=\\\"https://theintern.io/docs.html#Leadfoot/2/docs/README.md\\\">Leadfoot</a> implementation of the WebDriver API. A functional test suite that tests Todo item entry looks like:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst { registerSuite } = intern.getInterface('object');\\r\\nconst { assert } = intern.getPlugin('chai');\\r\\n\\r\\nimport keys from '@theintern/leadfoot/keys';\\r\\n\\r\\nregisterSuite('Todo (functional)', {\\r\\n    'submit form'() {\\r\\n        return this.remote\\r\\n            .get('index.html')\\r\\n            .findByCssSelector('.new-todo')\\r\\n            .type('Task 1')\\r\\n            .type(keys.RETURN)\\r\\n            .type('Task 2')\\r\\n            .type(keys.RETURN)\\r\\n            .type('Task 3')\\r\\n            .getSpecAttribute('value')\\r\\n            .then(value =&gt; {\\r\\n                assert.ok(\\r\\n                    value.indexOf('Task 3') &gt; -1,\\r\\n                    'Task 3 should remain in the new todo'\\r\\n                );\\r\\n            });\\r\\n    }\\r\\n});\\r\\n</pre>\\n<p>One improvement gained by writing Intern 4 in TypeScript is improved typings. For example, in Intern 3 a test function would have needed an explicit typing for the <code>this</code> parameter in order for TypeScript to know that the <code>remote</code> property was available. With Intern 4, the <code>registerSuite</code> typings are detailed enough that TypeScript can infer the proper type for <code>this</code> in a test automatically.</p>\\n<h2>Building the tests</h2>\\n<p>Tests are built separately from the application code, using a <code>tsconfig.json</code> file in the <code>tests</code> directory that extends the project&#8217;s original <code>tsconfig.json</code>. Using a separate TS config file for tests allows them to include test-specific settings and typings while still using most of the settings from the main project.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n{\\r\\n    &quot;extends&quot;: &quot;../tsconfig.json&quot;,\\r\\n    &quot;compilerOptions&quot;: {\\r\\n        &quot;baseUrl&quot;: &quot;..&quot;,\\r\\n        &quot;types&quot;: [ &quot;intern&quot; ]\\r\\n    },\\r\\n    &quot;include&quot;: [\\r\\n        &quot;./**/*.ts&quot;\\r\\n    ]\\r\\n}\\r\\n</pre>\\n<p>Tests can be compiled with <code>tsc -p tests</code>. Both tests and application code can be built in the example project by running <code>npm run build</code>.</p>\\n<h2>Configuring and running Intern</h2>\\n<p>While Intern 3 used an executable module for configuration, Intern 4 is configured with a JSON file, typically named <code>intern.json</code> and located in the project root directory. This file tells Intern where to find tests and what environments to run tests in. When testing TypeScript projects, there are two key concepts to keep in mind:</p>\\n<ol>\\n<li>Properties that refer to files must refer to JavaScript (i.e., compiled) files, not the original TS files,</li>\\n<li>If tests and/or application code is built as modules (e.g., AMD or CommonJS), a module loader will need to be used in the browser</li>\\n</ol>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n{\\r\\n    // Suites refer to the built JavaScript files\\r\\n    &quot;suites&quot;: &quot;tests/unit/**/*.js&quot;,\\r\\n    &quot;functionalSuites&quot;: &quot;tests/functional/**/*.js&quot;,\\r\\n    &quot;coverage&quot;: &quot;src/**/*.js&quot;,\\r\\n    &quot;browser&quot;: {\\r\\n        // In the browser, Intern's SystemJS loader plugin is used\\r\\n        // to load SystemJS. Note that the systemjs package must be\\r\\n        // installed.\\r\\n        &quot;loader&quot;: &quot;systemjs&quot;,\\r\\n\\r\\n        // The application's SystemJS config (the same one loaded in the normal\\r\\n        // application's index.html) is loaded here.\\r\\n        &quot;plugins&quot;: { &quot;script&quot;: &quot;src/config.js&quot;, &quot;useLoader&quot;: true }\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>Note the <code>loader</code> property. This property tells Intern to use its built-in &#8220;systemjs&#8221; script to load the SystemJS loader, and to use it to load test suites (and plugins that have their <code>useLoader</code> property set to <code>true</code>). Without this property Intern would load modular code as simple JavaScript scripts; with no access to the <code>import</code> or <code>require</code> functions.</p>\\n<p>There are a couple of ways to run Intern, depending on what version of npm is installed on a system:</p>\\n<ol>\\n<li>With npm < 5, run <code>node_modules/.bin/intern</code></li>\\n<li>With npm >= 5, you can also run <code>npx intern</code></li>\\n</ol>\\n<p>As with most npm-based projects, you can also run this examples tests with <code>npm test</code>.</p>\\n<h2>TypeScript + Intern examples</h2>\\n<p>If you need more inspiration in creating tests with TypeScript and Intern, the following projects contain unit and functional test examples:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/theintern/intern\\\">intern</a> (the self tests are written with Intern)</li>\\n<li><a href=\\\"https://github.com/dojo/core\\\">@dojo/core</a></li>\\n<li><a href=\\\"https://github.com/dojo/widget-core\\\">@dojo/widget-core</a></li>\\n</ul>\\n<h2>Learning more</h2>\\n<p>There is much more detail to authoring TypeScript tests, but the main takeaway is that you simply author tests with valid TypeScript, and compile to JavaScript for testing. If you’re not sure where to start with Intern, or you need some help making your TypeScript source code more testable, or want assistance in defining a testing strategy for your organization, SitePen can help! </p>\\n<h2>Getting Help With Typescript and Intern</h2>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/workshopslogoblogs2.jpg\\\" alt=\\\"Workshops Logo\\\" width=\\\"30\\\" style=\\\"margin-top: 15px\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">SitePen&#8217;s <strong>TypeScript for the Enterprise Developer</strong> and <strong>Intern</strong> workshops are a quick way to jumpstart your journey into the modern era! </p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\"><a href=\\\"https://www.sitepen.com/services/\\\">SitePen Support</a>. Receive timely answers and relevant code examples from early adopters and active users of TypeScript and the creators of Intern.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" style=\\\"margin-top:0;\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\"><a href=\\\"https://www.sitepen.com/contact/\\\">Let&#8217;s talk</a> about how we can help your organization benefit from the use of TypeScript in your next project.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" style=\\\"margin-top:0;\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n<p style=\\\"padding-bottom: 5px;\\\">\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Intern is a popular JavaScript testing framework with an extensive feature set. While Intern has traditionally been focused on testing applications written in standard JavaScript, it has also had great support for TypeScript. With version 4, Intern has been completely rewritten in TypeScript, allowing it to provide a more seamless testing experience for TypeScript projects.</p>\\n\",\"protected\":false},\"author\":51,\"featured_media\":22142,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[215,375,3,450,11],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Testing TypeScript with Intern 4 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/testing-typescript-with-intern-4/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Testing TypeScript with Intern 4 | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Intern is a popular JavaScript testing framework with an extensive feature set. While Intern has traditionally been focused on testing applications written in standard JavaScript, it has also had great support for TypeScript. With version 4, Intern has been completely rewritten in TypeScript, allowing it to provide a more seamless testing experience for TypeScript projects.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/testing-typescript-with-intern-4/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2018-02-12T19:06:06+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-27T17:59:30+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern-4/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Testing TypeScript with Intern 4\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern-4/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern-4/\\\",\\\"name\\\":\\\"Testing TypeScript with Intern 4 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern-4/#primaryimage\\\"},\\\"datePublished\\\":\\\"2018-02-12T19:06:06+00:00\\\",\\\"dateModified\\\":\\\"2020-01-27T17:59:30+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/testing-typescript-with-intern-4/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\",\\\"name\\\":\\\"Jason Cheatham\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Jason Cheatham\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15731\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/51\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15731\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15731/revisions\"}],\"predecessor-version\":[{\"id\":22143,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15731/revisions/22143\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22142\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15731\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15731\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15731\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":51,\"name\":\"Jason Cheatham\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jcheatham/\",\"slug\":\"jcheatham\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Jason Cheatham, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Jason Cheatham, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jcheatham/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/\\\",\\\"name\\\":\\\"Jason Cheatham, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/c6c5a850ef09b6170f40dc435057d591\\\",\\\"name\\\":\\\"Jason Cheatham\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/27ad4194c35370123fd3544be84199c6?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Jason Cheatham\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jcheatham/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/51\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22142,\"date\":\"2020-01-27T09:59:15\",\"slug\":\"testing-typescript-with-intern-4-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/testing-typescript-with-intern-4/testing-typescript-with-intern-4-2/\",\"title\":{\"rendered\":\"Testing TypeScript with Intern 4\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Testing TypeScript with Intern 4 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Testing TypeScript with Intern 4 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-27T17:59:21+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\\\",\\\"name\\\":\\\"Testing TypeScript with Intern 4 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-27T17:59:15+00:00\\\",\\\"dateModified\\\":\\\"2020-01-27T17:59:21+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Testing TypeScript with Intern 4\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2018/02/Testing-TypeScript-with-Intern-4.jpg\",\"sizes\":{\"medium\":{\"file\":\"Testing-TypeScript-with-Intern-4-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4-300x158.jpg\"},\"large\":{\"file\":\"Testing-TypeScript-with-Intern-4-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Testing-TypeScript-with-Intern-4-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4-150x150.jpg\"},\"medium_large\":{\"file\":\"Testing-TypeScript-with-Intern-4-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4-768x403.jpg\"},\"full\":{\"file\":\"Testing-TypeScript-with-Intern-4.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/02/Testing-TypeScript-with-Intern-4.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22142\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a774c509be80079-LHR"],["cf-request-id","037e6e065a000000795a80f200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:20:42 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=dba5196e11f95299a6e3ce5cfe2b2ee391592842841; expires=Wed, 22-Jul-20 16:20:41 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}