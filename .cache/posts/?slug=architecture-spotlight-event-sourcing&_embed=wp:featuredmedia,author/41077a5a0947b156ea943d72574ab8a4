{"value":{"body":"[{\"id\":23414,\"date\":\"2020-04-02T05:16:47\",\"date_gmt\":\"2020-04-02T12:16:47\",\"guid\":{\"rendered\":\"https://wp.sitepen.com/?p=23414\"},\"modified\":\"2020-04-03T12:49:59\",\"modified_gmt\":\"2020-04-03T19:49:59\",\"slug\":\"architecture-spotlight-event-sourcing\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/architecture-spotlight-event-sourcing/\",\"title\":{\"rendered\":\"Architecture Spotlight: Event Sourcing\"},\"content\":{\"rendered\":\"<p>Event sourcing is a powerful architectural pattern that records all changes made to an application’s state, in the sequence in which the changes were originally applied. This sequence serves as both the system of record where current state can be sourced from, as well as an audit log of everything that happened within the application over its lifetime. Event sourcing promotes decentralized change handling and state querying, meaning the pattern scales well and is a good fit for many types of systems that already deal with event processing or are looking to gain some of the many benefits offered by such a design.</p>\\n<h2>What is Event Sourcing?</h2>\\n<p>Subject matter experts (SME) typically describe their systems as a combination of <strong>entities</strong>, representing containers of system state, and change <strong>events</strong>, representing how entities get altered as a result of processing a variety of inputs within defined business processes. Often events get triggered in response to <strong>commands</strong> issued by users of the system, background processes or external system integrations.</p>\\n<p>At its core, event sourcing focuses on system change <strong>events</strong>.</p>\\n<p>Many architectural patterns deal with entities as their primary concern; these patterns consider how entities get stored, accessed and modified. Within this architectural view, change events are often invisible consequences of entity mutation.</p>\\n<p>Typically the system of record within these architectural patterns is the entity store, such as a relational database or a document store. While events can still be present in such architectures, they’re often transient in nature, possibly decoupled from the entities they relate to and hidden behind layers of business logic.</p>\\n<p>Event sourcing flips this design view around, focusing on how events get represented, how they get persisted, and how a sequence of events can get used to derive entity state. The system of record is a sequential log of all events that have occurred during a system’s lifetime.</p>\\n<p>The following illustrates what an event vs an entity store would look like for the same system (keep reading to find out what these represent):</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image3-1.png\\\" alt=\\\"\\\" width=\\\"324\\\" height=\\\"286\\\" class=\\\"alignnone size-full wp-image-23417\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image3-1.png 432w, https://wp.sitepen.com/wp-content/uploads/2020/03/image3-1-300x265.png 300w\\\" sizes=\\\"(max-width: 324px) 100vw, 324px\\\" /></p>\\n<p>vs.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image1-1.png\\\" alt=\\\"\\\" width=\\\"301\\\" height=\\\"151\\\" class=\\\"alignnone size-full wp-image-23419\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image1-1.png 402w, https://wp.sitepen.com/wp-content/uploads/2020/03/image1-1-300x151.png 300w\\\" sizes=\\\"(max-width: 301px) 100vw, 301px\\\" /></p>\\n<p>By promoting events as the primary architectural concept, event sourcing is also a domain modelling paradigm that encourages closer alignment with a SME’s view of the system. Designing systems with a focus on events and event logs provides several main benefits:</p>\\n<li>\\nHelps reduce impedance mismatches and the need for concept mapping, allowing technology teams to ‘speak the same language’ as the business when discussing the system</li>\\n<li>Encourages <a href=\\\"https://www.martinfowler.com/bliki/CQRS.html\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\">command/query responsibility</a> separation, allowing writes and reads to be independently optimized</li>\\n<li>Provides state temporality and audit history as a matter of course &#8211; answering the question of what did the system look like at specific times in the past, and what were all events up to that point</li>\\n<h2>How does Event Sourcing work?</h2>\\n<p>Consider a simple banking example of a current account. In such a system there is a single <strong>entity</strong>, representing a bank account. For simplicity, we assume there is a single account, so it does not need to be explicitly identifiable via an account number or otherwise. The account contains the current account balance.</p>\\n<p>Two <strong>commands</strong> are available &#8211; instructions to deposit and withdraw money, and these need to specify the amount of money to either deposit or withdraw. A business rule ensures a withdrawal command can only be processed if the amount requested is equal to or less than the current account balance.</p>\\n<p>Given this design, two <strong>events</strong> can be identified &#8211; Account Credited and Account Debited. These events include the amount of money that was deposited or withdrawn. This could even be simplified to a single event with either a positive or negative amount, but for the sake of this example they are kept separate.</p>\\n<p>The following diagram illustrates this data model universe:</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image2-1.png\\\" alt=\\\"\\\" width=\\\"491\\\" height=\\\"381\\\" class=\\\"alignnone size-full wp-image-23418\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image2-1.png 982w, https://wp.sitepen.com/wp-content/uploads/2020/03/image2-1-300x233.png 300w, https://wp.sitepen.com/wp-content/uploads/2020/03/image2-1-768x596.png 768w\\\" sizes=\\\"(max-width: 491px) 100vw, 491px\\\" /></p>\\n<p>Notice that the events are ‘past tense’ &#8211; they specify what happened in the system at the time they were recorded, and are only recorded if processing a command was successful. With designs like this, care needs to be taken so that commands are not confused with events, especially if they effectively mirror each other.</p>\\n<p>Given the following command sequence:</p>\\n<p>1. <em>deposit</em> { amount: 100 }<br />\\n2. <em>withdraw</em> { amount: 80 }<br />\\n3. <em>withdraw</em> { amount: 50 }</p>\\n<p>The most basic event sourcing implementation requires an <strong>event log</strong>, which is just a sequence of events. The system processing these commands would end up with an event log of:</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image3-1.png\\\" alt=\\\"\\\" width=\\\"324\\\" height=\\\"286\\\" class=\\\"alignnone size-full wp-image-23417\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image3-1.png 432w, https://wp.sitepen.com/wp-content/uploads/2020/03/image3-1-300x265.png 300w\\\" sizes=\\\"(max-width: 324px) 100vw, 324px\\\" /></p>\\n<p>The third command could not be processed as the requested amount exceeded the available balance.</p>\\n<p>To derive the current account balance, the system needs to process or ‘source’ the events in sequential order. Given the two events, this derivation processing output would look like:</p>\\n<li><em>bank account</em> { current balance: 0 } (starting state)</li>\\n<li><em>bank account</em> { current balance: 100 } (processed: Account Credited, +100)</li>\\n<li><em>bank account</em> { current balance: 20 } (processed: Account Debited, -80)</li>\\n<p>The current balance gets determined by processing all events up to the current time, but as each event has an implicit timestamp of when it was recorded, the state of the bank account’s balance can be determined at any point in time by only processing events up to that time.</p>\\n<p>This is a complete (if trivial) event sourcing design. In a real system, this example would likely require a few more pieces.</p>\\n<p>Implementers may want to record the sequence of commands to be able to identify how an event came to be, as well as have a separate ‘error event’ log that can record command requests that failed to process, so that accurate error handling can take place and to maintain complete history of the entire system &#8211; successes and failures.</p>\\n<p>Over time as the number of commands increases, the system may also want a way to record a running tally of the current account balance, so that when a withdraw command gets received, the business logic doesn’t need to reprocess the full list of events everytime to determine if the command can get processed (i.e. that the account has sufficient balance available to allow the withdrawal). This is an example of a derived state store, and is effectively the same as what an entity store would be for the system.</p>\\n<p>The following illustrates what the entity store for this example would look like, once all commands have been processed:</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image1-1.png\\\" alt=\\\"\\\" width=\\\"301\\\" height=\\\"151\\\" class=\\\"alignnone size-full wp-image-23419\\\" srcset=\\\"https://wp.sitepen.com/wp-content/uploads/2020/03/image1-1.png 402w, https://wp.sitepen.com/wp-content/uploads/2020/03/image1-1-300x151.png 300w\\\" sizes=\\\"(max-width: 301px) 100vw, 301px\\\" /></p>\\n<p>It’s clear this is a lot simpler than an event store implementation &#8211; which is a big reason why many designers choose to only use entity stores. The current account balance is immediately available to read without having to process all historic events.</p>\\n<p>It is not however an either/or question between event sourcing and maintaining entity stores. It is often the case that entity stores are also present within event sourcing designs.</p>\\n<h2>Event Sourcing Implementation options</h2>\\n<p>Technically, the only requirement to implement event sourcing is needing a way to store and read from the event log.</p>\\n<p>This could be as simple as using an append-only file, with each line representing a new event. A sequence of files in a filesystem would also work, with each file representing an event. However, more robust options are usually a preferred choice when designing larger systems with greater concurrency and scalability requirements.</p>\\n<p>Logs are a very common pattern within the software industry, usable via technologies such as messaging integrations (brokers, MOMs) and event streaming systems. Event sourcing typically builds upon these technologies with some form of messaging middleware acting as the event log. If the complete event history is needed, these technologies can be configured to persist all messages indefinitely.</p>\\n<p>Relational or document models usually focus on system entities; current state is easily accessible by reading one or more rows or documents out of a store. It’s worth mentioning that event sourcing and relational modelling paradigms are not mutually exclusive; event sourcing systems often include both. The key difference with an event sourcing design is that entity stores no longer act as the system of record &#8211; they could easily get replaced or rebuilt as needed by reprocessing the event log.</p>\\n<p>More complex event sourcing systems need to consider derived entity state stores for read efficiency reasons, as processing the full event log in order to calculate current system state is not always scalable over time. The database technologies that back relational or document designs can get used as both an event log (for example via an append-only ‘Events’ database table), as well as derived entity stores to allow quick retrieval of the system’s current state. This separation of concerns is effectively CQRS &#8211; a derived state store provides a separated ‘query’ responsibility for the application, that can get optimized independently of writing to the event log.</p>\\n<p>While it’s clear there are several technical aspects that need to be considered, these are not the only challenges when implementing an event sourcing system.</p>\\n<h2>Potential Event Sourcing Challenges</h2>\\n<p>While an event sourcing design provides many benefits, it also comes with its own drawbacks.</p>\\n<p>The biggest issues are usually around the mindset of development teams looking to implement such a design. Teams need to think beyond traditional CRUD apps and their entity stores. In conceiving such a design, teams need to begin viewing events as the primary concept of value.</p>\\n<p>The majority of effort in implementing event sourcing is usually spent on accurately modeling events. Once an event is written to the log it should be considered immutable (otherwise the system’s history &#8211; and indeed its current state &#8211; could be corrupted or misrepresented). The event log is the system of record, meaning great care should be taken to ensure events contain all the information they need to represent the system’s full state, as per the business requirements at that point in time. Consideration also needs to be given so that events can get properly interpreted and possibly even re-processed in the future, as the system (and the business it represents) changes over time. Strategies are also needed to handle incorrect or poison events so that data validity issues can get properly corrected.</p>\\n<p>For simple domain models, this mindset flip can be easy to accomplish, but can get challenging with more complex models (especially those with many dependencies or relationships between entities). Larger systems that rely on integrations with and data sourced from external systems can also prove challenging &#8211; in cases where external systems aren’t able to provide point-in-time views of their data, event sourcing systems may need to consider a facade over their external integrations that can simulate fetching historic data. This significantly increases complexity as more integrations get added.</p>\\n<p>Event sourcing can work well in large systems, as the event log pattern naturally scales horizontally given enough partitioning in the system’s dataset. For example, if events are aligned with the entities they represent, the log for one entity does not necessarily need to coexist with that of any other entity. However, this ease of scalability brings further challenges in the form of asynchronous processing and eventually consistent data modifications. State change instructions could be received by any command processing node, after which the system needs to: identify which other nodes are responsible for the affected entities; route the command to those nodes; process the command; then lastly replicate the generated events across further log storage nodes. Only after this process completes is the new event available to be sourced as part of reading the latest available system state; this is how event sourcing designs effectively require command processing channels to be separated from state querying channels &#8211; i.e. CQRS.</p>\\n<p>Event sourcing systems therefore need a way to deal with the intermediate time between issuing a command and receiving notification that an event is successfully recorded in the log. The current state of the system that users see during this intermediate time may be ‘incorrect’ &#8211; or more accurately &#8211; slightly out of date; appropriate designs (UX, supporting technologies, etc) need to be put in place to mitigate this risk. Sufficient error handling processes are also needed for situations where commands fail to process, are cancelled while still pending, or even when they are superseded by later events as part of data correction.</p>\\n<p>Another challenge comes in the future once event sourcing systems have been recording events for a period of time. A way to deal with historic events becomes necessary &#8211; it’s one thing to record all events that a system has processed, but being unable to interpret that history means the event log loses its value entirely. This is especially relevant during system failure recovery events, or when migrating derived state stores, where the full event log may need to get reprocessed to bring the system’s data universe up to date. For systems dealing with huge numbers of events, where reprocessing the full event log would exceed any recovery time objectives, periodic system state snapshots may also be required so that recovery can begin from a more recent known good state.</p>\\n<p>Teams need to consider how events get structured; how that structure can evolve over time as the set of fields changes; and, given changes to how the business operates over time, how events with older structures could possibly get processed with the current business logic. Having a defined, extensible event schema may help with future-proofing when recording the events, but extra processing rules may also be needed in the latest business logic so that older event structures can still be understood. Periodic snapshots could also serve as dividers between major changes to the event structure, where historic events end up costing more to support than the inherent value they have within the log.</p>\\n<h2>Event Sourcing Conclusion</h2>\\n<p>Event sourcing is a powerful pattern offering several valuable benefits. Another benefit is simplified future expansion, given the event log also serves as a long-timeframe pub/sub mechanism. New, unforeseen processing components or integrations can easily get added at any point, where they can then process the event log to bring themselves up to current state.</p>\\n<p>However as with any large architectural design decision, great care needs to be taken to ensure it is appropriate for a particular use case. Constraints around domain model complexity, data consistency/availability requirements, data growth rates and system lifespan/long-term scalability all need to get considered (by no means an exhaustive list!). Equally importantly, consideration also needs to be given for the teams that will be developing and supporting such a system over its lifespan.</p>\\n<p>As always, the most valuable piece of software engineering wisdom applies &#8211; strive to keep things as simple as possible.</p>\\n<p>If you need help architecting your next enterprise application or improving your current architecture, please <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Event sourcing is a powerful architectural pattern that records all changes made to an application’s state, in the sequence in which the changes were originally applied. This sequence serves as both the system of record where current state can be sourced from, as well as an audit log of everything that happened within the application [&hellip;]</p>\\n\",\"protected\":false},\"author\":98,\"featured_media\":23888,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[499,498,485,496],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Everything You Need to Know About Event Sourcing | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"What is event sourcing and how should you implement it? Your questions about event sourcing patterns are answered here. Click here to read more.\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/architecture-spotlight-event-sourcing/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Everything You Need to Know About Event Sourcing | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"What is event sourcing and how should you implement it? Your questions about event sourcing patterns are answered here. Click here to read more.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/architecture-spotlight-event-sourcing/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2020-04-02T12:16:47+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-04-03T19:49:59+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/architecture-spotlight-event-sourcing/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Architecture Spotlight: Event Sourcing\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/architecture-spotlight-event-sourcing/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/architecture-spotlight-event-sourcing/\\\",\\\"name\\\":\\\"Everything You Need to Know About Event Sourcing | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/architecture-spotlight-event-sourcing/#primaryimage\\\"},\\\"datePublished\\\":\\\"2020-04-02T12:16:47+00:00\\\",\\\"dateModified\\\":\\\"2020-04-03T19:49:59+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/88cc1448e58fbc7e02ff6fc5d2ff3b8b\\\"},\\\"description\\\":\\\"What is event sourcing and how should you implement it? Your questions about event sourcing patterns are answered here. Click here to read more.\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/architecture-spotlight-event-sourcing/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/88cc1448e58fbc7e02ff6fc5d2ff3b8b\\\",\\\"name\\\":\\\"Stuart Bing\\\\u00eb\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Stuart Bing\\\\u00eb\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/23414\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/98\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=23414\"}],\"version-history\":[{\"count\":25,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/23414/revisions\"}],\"predecessor-version\":[{\"id\":23668,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/23414/revisions/23668\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/23888\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=23414\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=23414\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=23414\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":98,\"name\":\"Stuart Bingë\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/sbinge/\",\"slug\":\"sbinge\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Stuart Bingë, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Stuart Bingë, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/sbinge/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/sbinge/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/sbinge/\\\",\\\"name\\\":\\\"Stuart Bing\\\\u00eb, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/88cc1448e58fbc7e02ff6fc5d2ff3b8b\\\",\\\"name\\\":\\\"Stuart Bing\\\\u00eb\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/cce845a2444f62e04f5052e91c44a2c5?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Stuart Bing\\\\u00eb\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/sbinge/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/98\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":23888,\"date\":\"2020-04-03T12:49:47\",\"slug\":\"blog_eventsourcing\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/architecture-spotlight-event-sourcing/blog_eventsourcing/\",\"title\":{\"rendered\":\"Architecture Spotlight: Event Sourcing\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Architecture Spotlight: Event Sourcing | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Architecture Spotlight: Event Sourcing | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-04-03T19:49:53+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\\\",\\\"name\\\":\\\"Architecture Spotlight: Event Sourcing | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-04-03T19:49:47+00:00\\\",\\\"dateModified\\\":\\\"2020-04-03T19:49:53+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Architecture Spotlight: Event Sourcing\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2020/04/blog_eventSourcing.png\",\"sizes\":{\"medium\":{\"file\":\"blog_eventSourcing-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing-300x158.png\"},\"large\":{\"file\":\"blog_eventSourcing-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing-1024x538.png\"},\"thumbnail\":{\"file\":\"blog_eventSourcing-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing-150x150.png\"},\"medium_large\":{\"file\":\"blog_eventSourcing-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing-768x403.png\"},\"full\":{\"file\":\"blog_eventSourcing.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/04/blog_eventSourcing.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/23888\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a5749845b00dc17-LHR"],["cf-request-id","036a6c46b70000dc17460cf200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 18 Jun 2020 19:06:24 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=df28f6be99ef550ce338019cf4bf7f0461592507182; expires=Sat, 18-Jul-20 19:06:22 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}