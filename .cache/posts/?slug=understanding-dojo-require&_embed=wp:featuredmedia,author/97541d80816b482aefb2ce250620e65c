{"value":{"body":"[{\"id\":1139,\"date\":\"2010-03-29T00:01:23\",\"date_gmt\":\"2010-03-29T07:01:23\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=1139\"},\"modified\":\"2010-03-29T00:01:23\",\"modified_gmt\":\"2010-03-29T07:01:23\",\"slug\":\"understanding-dojo-require\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/understanding-dojo-require/\",\"title\":{\"rendered\":\"Understanding dojo.require\"},\"content\":{\"rendered\":\"<p><a href=\\\"http://dojotoolkit.org/\\\">Dojo</a> provides a feature-rich system for including JavaScript modules.  Before we begin this journey to explore this concept in depth, you should know that absolutely no knowledge of the Dojo module, packaging, and build system are required to use Dojo.</p>\\n<p>You can easily get started using Dojo by using a script element referring to a copy of Dojo on the AOL or Google CDNs.  If you want to host your own version of Dojo, you can easily download <code>dojo.js</code>, include it in a web page using a script element, and be off and running with Dojo Base.</p>\\n<p>For those new to Dojo, the following resources give a quick overview of Dojo Base:</p>\\n<ul>\\n<li><a id=\\\"qcg2\\\" title=\\\"Dojo 1.4 Cheat Sheet\\\" href=\\\"http://download.dojotoolkit.org/release-1.4.0/cheat.html\\\">Dojo 1.4 Cheat Sheet</a></li>\\n<li><a id=\\\"kh1h\\\" title=\\\"Dojo Base Source Tree (1.4.3)\\\" href=\\\"http://download.dojotoolkit.org/release-1.4.3/dojo-release-1.4.3/dojo/_base/\\\">Dojo Base Source Tree (1.4.3)</a></li>\\n<li><a id=\\\"nqaa\\\" title=\\\"Dojo Reference Guide\\\" href=\\\"http://www.dojotoolkit.org/reference-guide/dojo/index.html\\\">Dojo Reference Guide</a></li>\\n</ul>\\n<p>In general, dojo.js is a lot like jquery.js or prototype js: you get a competitive set of features founds in most JavaScript libraries that are essential for building great web applications.  Those features include:</p>\\n<ul>\\n<li>JavaScript  Language Helpers</li>\\n<li>Object utilities</li>\\n<li>Array utilities</li>\\n<li>DOM  Manipulation</li>\\n<li>A normalized event system</li>\\n<li>Ajax &amp;  Cross domain requests</li>\\n<li>JSON utilities</li>\\n<li>Simple effects</li>\\n<li>Browser sniffing</li>\\n</ul>\\n<p><!--more--></p>\\n<p>However, Dojo is much more than dojo.js, including tools that are not common among most JavaScript libraries. One of these tools is a module system (aka <code>dojo.require()</code>).  JavaScript and web browsers do not offer the module loading conveniences found in other programming environments, and Dojo helps solve this problem.</p>\\n<h2>Module System</h2>\\n<p>In a nutshell, the module system leverages <code>dojo.require('my.module')</code> to include JavaScript files into a web page. Conceptually, this is really no different than placing a script element in an HTML page that includes an external JavaScript file.</p>\\n<p>Let&#8217;s assume that you are running a local development environment on your computer at <code>http://localhost:8888</code>. At the root of this web  directory, let&#8217;s say you have a copy of the <a id=\\\"chb.\\\" title=\\\"Dojo directory\\\" href=\\\"http://download.dojotoolkit.org/release-1.4.3/dojo-release-1.4.3/dojo/\\\">Dojo directory</a> (<a id=\\\"hxyn\\\" title=\\\"Download Dojo\\\" href=\\\"http://download.dojotoolkit.org/release-1.4.3/dojo-release-1.4.3.zip\\\">download Dojo 1.4.3</a> if you&#8217;d like to follow along) and an HTML page, index.html.</p>\\n<p><img class=\\\"alignnone size-full wp-image-1180\\\" title=\\\"file1\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2010/03/file1.png\\\" alt=\\\"file1\\\" width=\\\"187\\\" height=\\\"38\\\" /></p>\\n<p><code>index.html</code> is a simple HTML page that includes <code>dojo.js</code>.</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n<span style=\\\"color: #b45f06;\\\">&lt;script src=&#8221;dojo/dojo.js&#8221;&gt;&lt;/script&gt;</span><br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>We now have Dojo Base included in the HTML page and have access to all the <a id=\\\"cbq_\\\" title=\\\"functionality\\\" href=\\\"http://download.dojotoolkit.org/release-1.4.0/cheat.html\\\">functionality</a> that it provides us. Life is good, until we require additional functionality.  As an example, I would like to use some of the  functionality that is contained in Dojo Core, anything inside of the <a id=\\\"how_\\\" title=\\\"Dojo directory\\\" href=\\\"http://download.dojotoolkit.org/release-1.4.3/dojo-release-1.4.3/dojo/\\\">dojo directory</a> that is not directly provided when including <code>dojo.js</code>.</p>\\n<p>Suppose we are building an application that pulls data from the Flickr API. If we use this API, we will need to go cross-domain to get data from the API. Since the ability to do a cross-domain request for JSON data is not built into Dojo Base, we need to include code from Dojo Core. So, let&#8217;s get back to our <code>index.html</code> page. To load cross-domain functionality, we could simply use a script element and include the needed Dojo file:</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n<span style=\\\"color: #b45f06;\\\">&lt;script src=&#8221;/dojo/io/script.js&#8221;&gt;&lt;/script&gt;</span><br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>Using a script element gets the job done, but it does not leverage the module system included with Dojo Base. From the viewpoint of Dojo&#8217;ers the <code>/dojo/io/script.js</code> file is a module, and as such can be loaded into a web page using <code>dojo.require()</code>.  Below we load <code>dojo.io.script</code> using <code>dojo.require()</code>.</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\n<span style=\\\"color: #b45f06;\\\">dojo.require(&#8220;dojo.io.script&#8221;);</span><br />\\n//Note: do not include the .js<br />\\n&lt;/script&gt;<br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>But what have we gained?  Two ways of doing the same exact thing?  Well, using the <code>dojo.require()</code> method actually provides us with some functionality that using a simple script element does not.  By using the <code>dojo.require()</code> method we gain a module system, which provides a few very important features that can help facilitate the building of complex web applications. We are going to examine these features throughout the rest of this article:</p>\\n<ul>\\n<li>Cache  management</li>\\n<li>Namespace Management (<a id=\\\"b68m\\\" title=\\\"isolated example of namespace code\\\" href=\\\"http://perfectionkills.com/namespacing-made-easy/\\\">isolated example of namespace  code</a>)</li>\\n<li>Path Management</li>\\n<li>Dependency Management</li>\\n</ul>\\n<p>Let&#8217;s start with cache management, as this feature is relatively simple and does not require significant explanation. By using <code>dojo.require()</code>, Dojo will prevent the same script from loading twice.  If a script is cached in the browser, it uses the cached resource and thus optimizes our code by removing unnecessary HTTP requests. Essentially you can use as many <code>dojo.require()</code>&#8216;s as you&#8217;d like to include the same  modules, and Dojo is intelligent enough to only request it once!</p>\\n<p>The next feature we will investigate requires us to create our own modules.  Before we begin, let me remind you that when dealing with browsers and JavaScript, namespaces are critical so as not to risk polluting the global window scope.  If you are curious about modules and namespaces, just  review the Dojo source code.  All of Dojo is organized into modules/namespaces.  And, remember, we have already used <code>dojo.require()</code> to include the predefined <code>dojo.io.script.js</code> module.</p>\\n<p>Let&#8217;s continue with our Flickr API example.  Since we intend to build a very large web application that uses Flickr photo data, we want to organize the code so that it is easy to manage.  Essentially, we want to create a flickrApp namespace to store all of the application programming logic.  To do this, we update the directory structure to include the file <code>flickrApp.js</code>.</p>\\n<p><img class=\\\"alignnone size-full wp-image-1181\\\" title=\\\"file2\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2010/03/file2.png\\\" alt=\\\"file2\\\" width=\\\"156\\\" height=\\\"57\\\" /></p>\\n<p>If you look at JavaScript development in the Dojo way, the flickrApp.js file is actually a module.  However, in order for Dojo to truly consider it a module, we have to tell Dojo. To do that, we use the <code><a id=\\\"jhg.\\\" title=\\\"dojo.provide()\\\" href=\\\"http://www.dojotoolkit.org/reference-guide/dojo/provide.html\\\">dojo.provide()</a></code> method to initialize the file as a Dojo module. We do that by adding the following to the flickrApp.js file:</p>\\n<div class=\\\"dean_ch\\\">dojo.provide(&#8220;<span style=\\\"color: #b45f06;\\\">flickrApp</span>&#8220;); //similar to doing flickrApp = {};</div>\\n<p>Basically, <code>dojo.provide()</code> creates an object  structure (namespace) based on the string that you pass it.  In our situation, it creates an object called flickrApp.  With that object created, we can now define aspects of the Flickr application as properties of this object.  Here&#8217;s an example of what the flickrApp.js file could look like:</p>\\n<div class=\\\"dean_ch\\\">dojo.provide(&#8220;flickrApp&#8221;);<br />\\n//start creating the application logic for my flickr app<br />\\n<span style=\\\"color: #b45f06;\\\">flickrApp.getData = function(){};</span>\\n</div>\\n<p>Now that we have our module namespace defined we can leverage <code>dojo.require()</code> and include our custom module in an HTML page:</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\ndojo.require(&#8220;dojo.io.script&#8221;);<br />\\n<span style=\\\"color: #b45f06;\\\">dojo.require(&#8220;flickrApp&#8221;);</span><br />\\n&lt;/script&gt;<br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>Do not be fooled, there is some magic here. How is it possible for Dojo to know where in the file system (or web  directory) the <code>flickrApp.js</code> module is  located?  This is where path management comes into to play.  Dojo assumes by default that the string you pass <code>dojo.provide()</code> mimics the directory structure located one directory up from the <code>dojo.js</code> file.  What is one directory up from the <code>dojo.js</code> file?  The directory that contains the dojo folder.</p>\\n<p>In other words, <code>dojo.js</code> is located at <code>http://localhost:8888/dojo/dojo.js</code>, Dojo will look for modules at <code>http://localhost:8888/</code>, one directory up from <code>dojo.js</code>. To reinforce this concept, let&#8217;s change the file structure so that it is more organized.  Let&#8217;s now consider the changes required if our directory structure looked like this:</p>\\n<p><img class=\\\"alignnone size-full wp-image-1182\\\" title=\\\"file3\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2010/03/file3.png\\\" alt=\\\"file3\\\" width=\\\"133\\\" height=\\\"75\\\" /></p>\\n<p>With this change all of the application code is inside a directory (<a id=\\\"igiu\\\" title=\\\"namepace\\\" href=\\\"http://snook.ca/archives/javascript/javascript_name/\\\">namespace</a>) called flickrApp. Within this directory, we can further separate the application logic into modules. The first  module we will need is the <code>data.js</code> module containing the logic for getting Flickr photo data, cross-domain, and returning that data to the application.  With this change, we need to place inside of <code>data.js</code> a <code>dojo.provide()</code> statement passing it the new directory structure.  The contents of the <code>data.js</code> file could look like this:</p>\\n<div class=\\\"dean_ch\\\">//below is similar to doing var flickrApp = {}; flickrApp.data = {};<br />\\ndojo.provide(&#8220;<span style=\\\"color: #b45f06;\\\">flickrApp.data</span>&#8220;);<br />\\n// Note: do not include the .js<br />\\nflickrApp.data.getData = function(){};</div>\\n<p>Remember, Dojo  assumes by default that the string passed to <code>dojo.provide()</code> mimics the directory structure one directory up from the <code>dojo.js</code> file.  In other words, <code>dojo.js</code> is located at <code>http://localhost:8888/dojo/dojo.js</code>, so Dojo will look for our new <code>data.js</code> module at <code>http://localhost:8888/flickrApp/data.js</code>.</p>\\n<p>Now, our HTML markup will be changed to reflect the new organization of the code.</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\ndojo.require(&#8220;dojo.io.script&#8221;);<br />\\ndojo.require(&#8220;flickrApp.<span style=\\\"color: #b45f06;\\\">data</span>&#8220;);<br />\\n&lt;/script&gt;<br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>OK, a quick sanity check: is all this really necessary?  Why not just include a single JavaScript file that contains all of the application logic and forget this module system?  You could, and the application could run with or without the module system.  However, Dojo uses the module system because separating web applications into organized modules makes building and maintaining applications easier, and it also helps to optimize the code using the build tools.  This is essentially the difference between storing paperwork in a stack or in a file cabinet.  The file cabinet requires more work to initially setup and to keep organized, but it saves time as the number of papers increases.  Unless, of course, you only need to manage a handful of  papers.</p>\\n<p>I hope you are starting to see the purpose of the module system.  But we&#8217;re not done yet.  Next up is the most important part:  dependency management.</p>\\n<p>Modules can contain references to other modules.  Or, stated another way, you can <code>require()</code> modules that can <code>require()</code> other modules.  And Dojo can help you manage these dependencies!  Let&#8217;s examine our HTML markup again.</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\n<span style=\\\"color: #b45f06;\\\">dojo.require(&#8220;dojo.io.script&#8221;);</span><br />\\ndojo.require(&#8220;flickrApp.data&#8221;);<br />\\n&lt;/script&gt;<br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>Remember we are including the <code>dojo.io.script.js</code> module from Dojo Core.  We did this because the Flickr application will need this module.  Leveraging the module system and  dependency management we can actually remove this <code>require()</code> statement and place it inside of the <code>data.js</code> module.  Essentially we are saying that the <code>data.js</code> module is dependent upon the <code>dojo.io.script.js</code> module.  Dojo will manage this dependency, so <code>data.js </code> could look like this:</p>\\n<div class=\\\"dean_ch\\\">dojo.provide(&#8220;flickrApp.data&#8221;);<br />\\n<span style=\\\"color: #b45f06;\\\">dojo.require(&#8220;dojo.io.script&#8221;);</span><br />\\n// Note: dojo.require() should be used after dojo.provide()<br />\\nflickrApp.data.getData = function(){};</div>\\n<p>The HTML will now contain only a single <code>require()</code> statement to include <code>data.js</code> module.</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n<span style=\\\"color: #b45f06;\\\">&lt;script src=&#8221;/dojo/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\ndojo.require(&#8220;flickrApp.data&#8221;);<br />\\n&lt;/script&gt;</span><br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>Dojo  will now handle the dependency and make sure <code>data.js</code> is in fact dependent on <code>dojo.io.script.js</code>.</p>\\n<p>But wait, there is more.  The dependency management provided by the module system needs to be notified when all <code>dojo.require()</code>statements (and their recursive dependencies) have loaded.  This is done by leveraging the <code>dojo.ready()</code> method which will register a function to be invoked once the DOM is ready and all modules and their dependencies have been loaded and parsed by the JavaScript engine.  So, when using the module system it is a best practice to use the <code>dojo.ready()</code> before making use of any of the functionality provided by predefined or  custom modules.</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\ndojo.require(&#8220;flickrApp.data&#8221;);<br />\\n<span style=\\\"color: #b45f06;\\\">dojo.ready(function(){</span><br />\\n// Note that dojo.ready() is a shortcut for dojo.addOnLoad() added in Dojo 1.4<br />\\n// Run code from data.js and all its dependencies safely<br />\\n<span style=\\\"color: #b45f06;\\\">});</span><br />\\n&lt;/script&gt;<br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>Before we move on, it&#8217;s worth noting that <code>dojo.ready()</code> can be used anytime, even from within the callback function of a <code>dojo.ready()</code>. This means that you can embed a <code>dojo.ready()</code> inside of an <code>dojo.ready()</code>.  This allows us to have a tree  structure of dependencies and loading phases.  For example:</p>\\n<div class=\\\"dean_ch\\\">dojo.require(&#8220;some.module&#8221;);<br />\\ndojo.ready(function(){<br />\\n//run code from some.module.js and all its dependencies safely<br />\\ndojo.require(&#8216;some.other.module&#8217;);<br />\\n<span style=\\\"color: #b45f06;\\\">dojo.ready(function(){</span><br />\\n//run code from some.other.module.js and all its dependencies safely<br />\\n<span style=\\\"color: #b45f06;\\\">});</span><br />\\n});</div>\\n<p>We  have come a long way. Now, let&#8217;s go a bit futher. As previously mentioned, the module system does some path management for us.  And, by default, this path is set to the parent directory of <code>dojo.js</code>.  This means that when you <code>require()</code> anything, Dojo by default will look for it in the parent directory of (relative to) <code>dojo.js</code>.  As an example, if we <code>require('some.other.module')</code> by default it will look for <code>some/other/module.js</code> starting one directory up from <code>dojo.js</code>:</p>\\n<p><img class=\\\"alignnone size-full wp-image-1183\\\" title=\\\"file4\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2010/03/file4.png\\\" alt=\\\"file4\\\" width=\\\"176\\\" height=\\\"95\\\" /></p>\\n<p>We can now begin to look at how to override the default path used by Dojo to include custom modules, allowing us to customize the location Dojo will look for modules.  Let&#8217;s update our directory to something more typical of a Dojo application:</p>\\n<p><img class=\\\"alignnone size-full wp-image-1184\\\" title=\\\"file5\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2010/03/file5.png\\\" alt=\\\"file5\\\" width=\\\"218\\\" height=\\\"190\\\" /></p>\\n<p>Based on this new directory structure, we have taken our <code>some.other.module.js</code> out of the Dojo parent directory where Dojo will search for modules. Our <code>some.other.module.js</code> is actually another directory up, inside of the <code>js</code> directory.  Because of this we have to notify Dojo of this change.  To understand how this is done, let&#8217;s open  up the index.html. Before we <code>dojo.require()</code> the <code>some.other.module.js</code> file, let&#8217;s tell Dojo the location of the <code>some</code> directory.  This is done by using <code>dojo.registerModulePath()</code>:</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo1.4.1/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\n<span style=\\\"color: #b45f06;\\\">dojo.registerModulePath(&#8220;some&#8221;, &#8220;../../some/&#8221;);</span><br />\\ndojo.require(&#8220;some.other.module&#8221;);<br />\\n&lt;/script&gt;<br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>Based on our directory structure, the <code>dojo.registerModulePath(\\\"some\\\", \\\"../../some/\\\")</code>statement is necessary so that Dojo knows where to find the custom module.  We are telling Dojo that the <code>some</code> namespace/module can be found two directories up (<code>../../</code>) from dojo.js.  Now that Dojo knows where to look, it can resolve the entire namespace <code>some.other.module</code> and include the <code>some.other.module.js</code> file.  From this point on, Dojo will find any module contained within the <code>some</code> namespace two  directories up from <code>dojo.js</code>.  This is all required because, for security reasons, JavaScript applications in the browser do not have access to the file system structure on your web server.</p>\\n<p>If  you are familiar with using <a id=\\\"jrq_\\\" style=\\\"font-family: Courier New;\\\" title=\\\"djConfig\\\" href=\\\"http://docs.dojocampus.org/djConfig\\\">djConfig</a> then this configuration object can also be used to register module paths.  All paths set using <code>djConfig</code> automatically call <code>dojo.registerModulePath()</code>:</p>\\n<div class=\\\"dean_ch\\\">&lt;!DOCTYPE html&gt;<br />\\n&lt;html lang=&#8221;en&#8221;&gt;<br />\\n&lt;head&gt;<br />\\n&lt;meta charset=&#8221;utf-8&#8243; /&gt;<br />\\n&lt;title&gt;Dojo&lt;/title&gt;<br />\\n&lt;/head&gt;<br />\\n&lt;body&gt;<br />\\n&lt;script type=&#8221;text/javascript&#8221;&gt;<br />\\n<span style=\\\"color: #b45f06;\\\">var djConfig = {modulePaths:{&#8220;some&#8221;:&#8221;../../some/&#8221;}};</span><br />\\n&lt;/script&gt;<br />\\n&lt;script src=&#8221;/dojo/dojo1.4.1/dojo.js&#8221;&gt;&lt;/script&gt;<br />\\n&lt;script&gt;<br />\\ndojo.require(&#8220;some.other.module&#8221;);<br />\\n&lt;/script&gt;<br />\\n&lt;/body&gt;<br />\\n&lt;/html&gt;</div>\\n<p>You might think I have covered everything related to the module system, however, there are many other facets.  One thing I will mention is that everything we have done in this article assumes you are working with a local version of Dojo.  Since Dojo can be included cross-domain from the AOL or Google CDN, the module system has to adjust to support this flexibility.  Behind the scenes, the module system is based on making XHR requests for modules.  This changes if you are using a CDN version of Dojo, as the module system will then switch over to cross-domain mode and include modules using on-demand script elements.  This is a topic for another article, but if you are including Dojo from a <a id=\\\"c8vf\\\" title=\\\"CDN you'll have to register all modules paths and set  the baseURL in Dojo\\\" href=\\\"http://doc-staging.dojocampus.org/quickstart/cross-domain.html#using-cdn-with-local-modules\\\">CDN, you&#8217;ll have to register all modules paths and set the baseURL in Dojo</a>.</p>\\n<h2>Beyond Dojo</h2>\\n<p>Finally, these ideas from Dojo can also be used without Dojo at all. YUI 3.0 has taken a similar approach, and there are stand-alone systems that can be used with any library or toolkit. One such system is <a id=\\\"uo.0\\\" title=\\\"RequireJS\\\" href=\\\"http://requirejs.org/\\\">RequireJS</a>, which is based on the Dojo module system. If you&#8217;d like to isolate the concept of a module loading system in order to understand its capabilities, check out <a id=\\\"ho1b\\\" title=\\\"requireJS\\\" href=\\\"http://requirejs.org/\\\">RequireJS</a> for more information.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Dojo provides a feature-rich system for including JavaScript modules. Before we begin this journey to explore this concept in depth, you should know that absolutely no knowledge of the Dojo module, packaging, and build system are required to use Dojo. You can easily get started using Dojo by using a script element referring to a [&hellip;]</p>\\n\",\"protected\":false},\"author\":34,\"featured_media\":1180,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,3,6],\"tags\":[83,255],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Understanding dojo.require | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/understanding-dojo-require/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Understanding dojo.require | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Dojo provides a feature-rich system for including JavaScript modules. Before we begin this journey to explore this concept in depth, you should know that absolutely no knowledge of the Dojo module, packaging, and build system are required to use Dojo. You can easily get started using Dojo by using a script element referring to a [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/understanding-dojo-require/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2010-03-29T07:01:23+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/understanding-dojo-require/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/understanding-dojo-require/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/understanding-dojo-require/\\\",\\\"name\\\":\\\"Understanding dojo.require | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/understanding-dojo-require/#primaryimage\\\"},\\\"datePublished\\\":\\\"2010-03-29T07:01:23+00:00\\\",\\\"dateModified\\\":\\\"2010-03-29T07:01:23+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/af6256016c2da5aa9d5ac69d7d69d3eb\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/understanding-dojo-require/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/af6256016c2da5aa9d5ac69d7d69d3eb\\\",\\\"name\\\":\\\"Cody Lindley\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c66bc926422f51ec5bc70b50e83e021d?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Cody Lindley\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/1139\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/34\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=1139\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/1139/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/1180\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=1139\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=1139\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=1139\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=1139\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":34,\"name\":\"Cody Lindley\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/clindley/\",\"slug\":\"clindley\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/c66bc926422f51ec5bc70b50e83e021d?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/c66bc926422f51ec5bc70b50e83e021d?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/c66bc926422f51ec5bc70b50e83e021d?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Cody Lindley, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Cody Lindley, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/clindley/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/c66bc926422f51ec5bc70b50e83e021d?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/clindley/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/clindley/\\\",\\\"name\\\":\\\"Cody Lindley, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/af6256016c2da5aa9d5ac69d7d69d3eb\\\",\\\"name\\\":\\\"Cody Lindley\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c66bc926422f51ec5bc70b50e83e021d?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Cody Lindley\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/clindley/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/34\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:34:04 GMT"],["expires","Mon, 31 Aug 2020 15:34:04 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}