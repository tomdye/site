{"value":{"body":"[{\"id\":10524,\"date\":\"2015-03-24T09:34:55\",\"date_gmt\":\"2015-03-24T16:34:55\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=10524\"},\"modified\":\"2015-03-24T09:34:55\",\"modified_gmt\":\"2015-03-24T16:34:55\",\"slug\":\"testing-typescript-with-intern\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/testing-typescript-with-intern/\",\"title\":{\"rendered\":\"Testing TypeScript with Intern\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2015/03/blog-image.jpg\\\" alt=\\\"\\\" class=\\\"alignnone size-full wp-image-14364\\\" /></p>\\n<p><img style=\\\"margin: 20px 15px 15px 0px; float: left; max-width:120px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2013/05/intern_blog1.png\\\" alt=\\\"Intern\\\" /></p>\\n<p><i>This post has been updated to cover Intern 3.4 and TypeScript 2.3. Read our <a href=\\\"https://www.sitepen.com/blog/2018/02/12/testing-typescript-with-intern-4/\\\">Intern 4 and TypeScript testing article</a> for more recent information.</i></p>\\n<p><a href=\\\"http://theintern.io/\\\">Intern</a> is a popular JavaScript testing framework, because of its <a href=\\\"http://theintern.io/#compare\\\">extensive, modular feature set</a>. While Intern is primarily known for testing JavaScript applications, it is also an excellent option for authoring tests with TypeScript. And Intern&#8217;s support for source maps makes it easy to track issues back to your original TypeScript source files.</p>\\n<p><!--more--></p>\\n<h2>Getting started</h2>\\n<p>To get started, we will test a simple ToDoMVC example application. We&#8217;ll begin with specifying a directory structure and providing some example source code.</p>\\n<h2>Directory structure</h2>\\n<p>For the examples in this post, you should use the following directory structure:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">todomvc/\\n        node_modules/intern/\\n        src/todo/\\n                 model/\\n                       SimpleTodoModel.js\\n                       SimpleTodoModel.js.map\\n                       SimpleTodoModel.ts\\n                 tests/\\n                       intern.js\\n                       intern.js.map\\n                       intern.ts\\n                       functional/\\n                                  all.js\\n                                  all.js.map\\n                                  all.ts\\n                                  SimpleTodoModel.js\\n                                  SimpleTodoModel.js.map\\n                                  SimpleTodoModel.ts\\n                       unit/\\n                                  all.js\\n                                  all.js.map\\n                                  all.ts\\n                                  SimpleTodoModel.js\\n                                  SimpleTodoModel.js.map\\n                                  SimpleTodoModel.ts\\n        /typings/intern/intern.d.ts\\n</pre>\\n<p>One of the main challenges with test framework setup are meta problems, including source code directories and configuration. If you&#8217;re using a different directory structure, you may need to modify your Intern and/or TypeScript configuration.</p>\\n<h2>Source code</h2>\\n<p>For this example, we have not authored a new example application in TypeScript, but assume we have one of the many ToDoMVC applications and we want to test it. The example tests here will focus on testing the <a href=\\\"https://github.com/theintern/intern-examples/blob/master/dojo-example/js/todo/model/SimpleTodoModel.js\\\">SimpleTodoModel</a> as we have already created <a href=\\\"https://github.com/theintern/intern-examples/\\\">examples in the intern-examples repo</a> for this and many other popular ToDoMVC example applications.</p>\\n<h2>Unit tests</h2>\\n<p>Because typical Intern tests are normally authored in JavaScript, most Intern examples are authored with ES5. To help you author TypeScript tests, we will compare JavaScript vs. TypeScript authored tests.</p>\\n<p>For the <a href=\\\"https://github.com/theintern/intern-examples/blob/master/dojo-example/tests/model/SimpleTodoModel.js\\\">SimpleTodoModel example</a>, the JavaScript test source code is:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndefine([\\n\\t'intern!object',\\n\\t'intern/chai!assert',\\n\\t'todo/model/SimpleTodoModel'\\n], function (registerSuite, assert, SimpleTodoModel) {\\n\\tregisterSuite({\\n\\t\\tname: 'SimpleTodoModel',\\n\\t\\t'default data': function () {\\n\\t\\t\\tvar emptyModel = new SimpleTodoModel();\\n\\t\\t\\tassert.strictEqual(emptyModel.get('id'), 'todos-dojo',\\n\\t\\t\\t\\t\\t'Id should default to &quot;todos-dojo&quot;');\\n\\t\\t\\tassert.strictEqual(emptyModel.get('todos').length, 0,\\n\\t\\t\\t\\t\\t'Todos array should default to an empty array.');\\n\\t\\t\\tassert.strictEqual(emptyModel.get('incomplete'), 0,\\n\\t\\t\\t\\t\\t'Incomplete count should default to 0.');\\n\\t\\t\\tassert.strictEqual(emptyModel.get('complete'), 0,\\n\\t\\t\\t\\t\\t'Incomplete count should default to 0.');\\n\\t\\t}\\n});\\n</pre>\\n<p>In this example, we&#8217;re creating a set of assertions inside a test suite for our ToDoMVC application.</p>\\n<p>To accomplish the same with TypeScript, we can leverage TypeScript&#8217;s simplified syntax for object literals. And if your application code is authored in TypeScript, you will no longer need to write unit tests that check data types, since the compiler will enforce this for you. You also get the many other advantages any code base receives when using TypeScript (interfaces, enhancements to the language, etc.).</p>\\n<p>Here is the same example test suite authored in TypeScript:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nimport * as assert from 'intern/chai!assert';\\nimport * as registerSuite from 'intern!object';\\n// Assume that we now have a version of our model in TypeScript\\nimport * as SimpleTodoModel from 'todo/model/SimpleTodoModel';\\n\\nregisterSuite({\\n\\tname: 'SimpleTodoModel', \\n\\t// Assume we have a promises interface defined\\n\\t'default data'() {\\n\\t\\tvar emptyModel = new SimpleTodoModel(),\\n\\t\\t\\tid:string = emptyModel.get('id'),\\n\\t\\t\\tlength:number = emptyModel.get('todos').length,\\n\\t\\t\\tincomplete:number = emptyModel.get('incomplete'),\\n\\t\\t\\tcomplete:number = emptyModel.get('complete');\\n\\t\\tassert.strictEqual(id, 'todos-dojo',\\n\\t\\t\\t\\t\\t'Id should default to &quot;todos-dojo&quot;');\\n\\t\\tassert.strictEqual(length, 0,\\n\\t\\t\\t\\t\\t'Todos array should default to an empty array.');\\n\\t\\tassert.strictEqual(incomplete, 0,\\n\\t\\t\\t\\t\\t'Incomplete count should default to 0.');\\n\\t\\tassert.strictEqual(complete, 0,\\n\\t\\t\\t\\t\\t'Incomplete count should default to 0.');\\n\\t}\\n});</pre>\\n<h2>How does this work?</h2>\\n<p>It is important to remember that just like TypeScript applications, you will only be able to run tests when they have been converted to JavaScript. Fortunately the TypeScript compiler will very easily compile to JavaScript in several different module formats, including AMD or UMD, along with source maps. As such, test modules are imported with the TypeScript <code>import</code> statement in your code and then converted to AMD for testing.</p>\\n<h2>Configure and compile</h2>\\n<p>To test with Intern, you specify a configuration file, which can be done with either <a href=\\\"https://github.com/theintern/intern/blob/master/tests/example.intern.js\\\">JavaScript</a> or <a href=\\\"https://github.com/dojo/core/blob/master/tests/intern.ts\\\">TypeScript</a>.</p>\\n<p>To compile your source code and tests, you&#8217;ll add the relevant compiler settings to your tsconfig.json:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\n{\\n\\t&quot;version&quot;: &quot;2.3.4&quot;,\\n\\t&quot;compilerOptions&quot;: {\\n\\t\\t&quot;declaration&quot;: false,\\n\\t\\t&quot;experimentalDecorators&quot;: true,\\n\\t\\t&quot;module&quot;: &quot;umd&quot;,\\n\\t\\t&quot;moduleResolution&quot;: &quot;node&quot;,\\n\\t\\t&quot;noImplicitAny&quot;: true,\\n\\t\\t&quot;noImplicitThis&quot;: true,\\n\\t\\t&quot;outDir&quot;: &quot;_build/&quot;,\\n\\t\\t&quot;removeComments&quot;: false,\\n\\t\\t&quot;sourceMap&quot;: true,\\n\\t\\t&quot;strictNullChecks&quot;: true,\\n\\t\\t&quot;target&quot;: &quot;es5&quot;\\n\\t},\\n\\t&quot;include&quot;: [\\n\\t\\t&quot;./src/**/*.ts&quot;,\\n\\t\\t&quot;./tests/**/*.ts&quot;,\\n\\t\\t&quot;./typings/index.d.ts&quot;\\n\\t]\\n}\\n</pre>\\n<p>You&#8217;ll also want to include the relevant type related packages in your <a href=\\\"https://github.com/dojo/core/blob/master/package.json\\\">package.json</a>, and any specific versions of typings that might be needed in <a href=\\\"https://github.com/dojo/core/blob/master/typings.json\\\">typings.json</a>.</p>\\n<h2>TypeScript typings for Intern</h2>\\n<p>The Intern 3.4 release <a href=\\\"https://github.com/theintern/intern/tree/master/typings\\\">includes its own typings</a> which are available when installing Intern. The forthcoming Intern 4 release is authored in TypeScript.</p>\\n<h2>Functional tests</h2>\\n<p>Functional tests work in the same manner as unit tests, but leverage Intern&#8217;s <a href=\\\"https://theintern.github.io/leadfoot/\\\">Leadfoot</a> implementation of the WebDriver API. With JavaScript, a ToDoMVC functional test example for submitting a form looks like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndefine([\\n    'intern!object',\\n    'intern/chai!assert',\\n    'require'\\n], function (registerSuite, assert, require) {\\n    var url = '../../index.html';\\n    registerSuite({\\n        name: 'Todo (functional)',\\n        'submit form': function () {\\n            return this.remote\\n                .get(require.toUrl(url))\\n                .findById('new-todo')\\n                .click()\\n                .pressKeys('Task 1')\\n                .pressKeys('\\\\n')\\n                .pressKeys('Task 2')\\n                .pressKeys('\\\\n')\\n                .pressKeys('Task 3')\\n                .getProperty('value')\\n                .then(function (val) {\\n                    assert.ok(val.indexOf('Task 3') &gt; -1, 'Task 3 should remain in the new todo');\\n            });\\n        }\\n    });\\n});\\n</pre>\\n<p>Rewritten in TypeScript, the test is:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\nimport * as assert from 'intern/chai!assert';\\nimport * as registerSuite from 'intern!object';\\n\\nvar url = '../../index.html';\\nregisterSuite({\\n    name: 'Todo (functional)',\\n    'submit form'() {\\n        return this.remote\\n            .get(require.toUrl(url))\\n                .findById('new-todo')\\n                .click()\\n                .pressKeys('Task 1')\\n                .pressKeys('\\\\n')\\n                .pressKeys('Task 2')\\n                .pressKeys('\\\\n')\\n                .pressKeys('Task 3')\\n                .getProperty('value')\\n                .then(function (val:string) {\\n                    assert.ok(val.indexOf('Task 3') &gt; -1, 'Task 3 should remain in the new todo');\\n            });\\n    }\\n});\\n</pre>\\n<h2>TypeScript + Intern examples</h2>\\n<p>If you need more inspiration in creating tests with TypeScript and Intern, the following projects contain unit and functional test examples:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/dojo/core\\\">@dojo/core</a></li>\\n<li><a href=\\\"https://github.com/dojo/widget-core\\\">@dojo/widget-core</a></li>\\n</ul>\\n<h2>Caveats</h2>\\n<p>Most previous limitations and caveats have been resolved with recent releases of Intern and TypeScript. Most remaining complexity around testing with TypeScript are being resolved with the Intern 4 release.</p>\\n<h3>Testing alias modules</h3>\\n<p>A common pattern with Intern is to create modules that simply include all of your tests to run inside a module. This makes it easy to maintain a list of tests outside of your Intern configuration file, a good DRY practice. However, if you import a module and never reference it, the TypeScript compiler skips it. If you are writing a module that is simply a list of all of your other modules to test, this won&#8217;t work. The workaround is to simply refer to the module within your list of tests.</p>\\n<p>For example, if you were to do this normally with a JavaScript set of tests:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n// all.js\\ndefine([\\n'./model/SimpleTodoModel',\\n'intern/node_modules/dojo/has!host-browser?./store/LocalStorage',\\n'intern/node_modules/dojo/has!host-browser?./form/CheckBox'\\n], function () {});\\n</pre>\\n<p>So then with TypeScript, you would need to do the following:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\n// all.ts\\n/// &lt;amd-dependency path=&quot;intern/node_modules/dojo/has!host-browser?./store/LocalStorage&quot; /&gt;\\n/// &lt;amd-dependency path=&quot;intern/node_modules/dojo/has!host-browser?./form/CheckBox&quot; /&gt;\\nimport * as SimpleTodoModel from 'todo/model/SimpleTodoModel';\\nSimpleTodoModel;\\n</pre>\\n<p>Notice the single reference to <code>SimpleTodoModel</code> immediately after importing the module. As an aside, in this example, we&#8217;re assuming that we would rewrite the ToDoMVC example in TypeScript, but some of its dependencies are still authored in JavaScript. It may be more useful to view a <a href=\\\"https://github.com/dojo/widget-core/blob/master/tests/unit/all.ts\\\">complete example of this test module pattern</a>.</p>\\n<h3>Non-TypeScript paths</h3>\\n<p>TypeScript does not concern itself with the paths to JavaScript AMD modules as it does not load or read them. TypeScript depends on the definitions in the <code>*.d.ts</code> files. It is up to you to make sure your AMD paths are correct in your application when you run it, but this is irrelevant for TypeScript compilation. Note that relative paths in the TypeScript compiler are calculated relative to wherever the <code>*.d.ts</code> file is, not the actual JavaScript AMD module files.</p>\\n<h2>Further reading</h2>\\n<ul>\\n<li><a href=\\\"https://www.sitepen.com/blog/2013/12/31/definitive-guide-to-typescript/\\\">TypeScript: the Definitive Guide</a></li>\\n<li><a href=\\\"https://github.com/SitePen/dts-generator/\\\">dts-generator</a>, a useful tool for generating a single .d.ts bundle containing external module declarations generated from TypeScript files</li>\\n</ul>\\n<h2>Learning more</h2>\\n<p>There is much more detail to authoring TypeScript tests, but the main takeaway is that you simply author tests with valid TypeScript, and compile to AMD for testing. If you’re not sure where to start with Intern, or you need some help making your TypeScript source code more testable, or want assistance in defining a testing strategy for your organization, SitePen can help! </p>\\n<h2>Getting Help With Typescript and Intern</h2>\\n<div>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/workshopslogoblogs2.jpg\\\" alt=\\\"Workshops Logo\\\" width=\\\"30\\\" style=\\\"margin-top:0;\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">SitePen&#8217;s <strong>TypeScript for the Enterprise Developer</strong> and <strong>Intern</strong> workshops are a quick way to jumpstart your journey into the modern era! </p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\"><a href=\\\"https://www.sitepen.com/services/\\\">SitePen Support</a>. Receive timely answers and relevant code examples from early adopters and active users of TypeScript and the creators of Intern.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" style=\\\"margin-top:0;\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\"><a href=\\\"https://www.sitepen.com/contact/\\\">Let&#8217;s talk</a> about how we can help your organization benefit from the use of TypeScript in your next project.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" style=\\\"margin-top:0;\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n<p style=\\\"padding-bottom: 5px;\\\">\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>This post has been updated to cover Intern 3.4 and TypeScript 2.3. Read our Intern 4 and TypeScript testing article for more recent information. Intern is a popular JavaScript testing framework, because of its extensive, modular feature set. While Intern is primarily known for testing JavaScript applications, it is also an excellent option for authoring [&hellip;]</p>\\n\",\"protected\":false},\"author\":3,\"featured_media\":14365,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[353,375,3,11],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Testing TypeScript with Intern | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/testing-typescript-with-intern/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Testing TypeScript with Intern | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"This post has been updated to cover Intern 3.4 and TypeScript 2.3. Read our Intern 4 and TypeScript testing article for more recent information. Intern is a popular JavaScript testing framework, because of its extensive, modular feature set. While Intern is primarily known for testing JavaScript applications, it is also an excellent option for authoring [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/testing-typescript-with-intern/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-03-24T16:34:55+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern/\\\",\\\"name\\\":\\\"Testing TypeScript with Intern | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/testing-typescript-with-intern/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-03-24T16:34:55+00:00\\\",\\\"dateModified\\\":\\\"2015-03-24T16:34:55+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/testing-typescript-with-intern/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10524\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=10524\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10524/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/14365\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=10524\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=10524\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=10524\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=10524\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":3,\"name\":\"Dylan Schiemann\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/dylan/\",\"slug\":\"dylan\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Dylan Schiemann, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Dylan Schiemann, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/dylan/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/dylan/\\\",\\\"name\\\":\\\"Dylan Schiemann, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/fdc7f111693e7de4d6f9f92d17079bd4\\\",\\\"name\\\":\\\"Dylan Schiemann\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89916e31a2e6998f2aadde6f0bde6835?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Dylan Schiemann\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/dylan/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/3\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:36:11 GMT"],["expires","Mon, 31 Aug 2020 15:36:11 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}