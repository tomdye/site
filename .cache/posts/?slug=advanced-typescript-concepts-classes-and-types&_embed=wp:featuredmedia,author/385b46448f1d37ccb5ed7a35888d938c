{"value":{"body":"[{\"id\":16364,\"date\":\"2018-11-28T05:30:47\",\"date_gmt\":\"2018-11-28T12:30:47\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=16364\"},\"modified\":\"2020-01-22T10:03:43\",\"modified_gmt\":\"2020-01-22T18:03:43\",\"slug\":\"advanced-typescript-concepts-classes-and-types\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/\",\"title\":{\"rendered\":\"Advanced TypeScript Concepts: Classes and Types\"},\"content\":{\"rendered\":\"<p><i>This article describes the features and functionality of TypeScript 3.1.</i></p>\\n<p>While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can leverage this knowledge to write cleaner, well-organized code.</p>\\n<p>If you find yourself having trouble with some of the concepts discussed in this article, try reading through the <a href=\\\"https://www.sitepen.com/blog/2018/10/29/update-the-definitive-typescript-guide/\\\">Definitive Guide to TypeScript</a> first to make sure you’ve got a solid understanding of all the basics.</p>\\n<p><!--more--></p>\\n<h2>Behind the <code>class</code> keyword</h2>\\n<p>In TypeScript, the <code>class</code> keyword provides a more familiar syntax for generating constructor functions and performing simple inheritance. It has roughly the same syntax as the ES2015 <code><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\\\">class</a></code> syntax, but with a few key distinctions. Most notably, it allows for non-method properties, similar to this <a href=\\\"https://github.com/tc39/proposal-class-fields#field-declarations\\\">Stage 3 proposal</a>. In fact, declaration of each instance method or property that will be used by the class is mandatory, as this will be used to build up a type for the value of <code>this</code> within the class. </p>\\n<p>But what if we couldn’t use the <code>class</code> keyword for some reason? How would we make an equivalent structure? Is it even possible? To answer these questions, let’s start with a basic example of a TypeScript class:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass Point {\\r\\n  static fromOtherPoint(point: Point): Point {\\r\\n    // ...\\r\\n  }\\r\\n\\r\\n  x: number;\\r\\n  y: number;\\r\\n\\r\\n  constructor(x: number, y: number) {\\r\\n    // ...\\r\\n  }\\r\\n\\r\\n  toString(): string {\\r\\n    // ...\\r\\n  }\\r\\n}\\r\\n</pre>\\n<p>This archetypical class includes a static method, instance properties, and instance methods. When creating a new instance of this type, we’d call <code>new Point(&lt;number&gt;, &lt;number&gt;)</code>, and when referring to an instance of this type, we’d use the type <code>Point</code>. But how does this work? Aren’t the <code>Point</code> type and the <code>Point</code> constructor the same thing? Actually, no!</p>\\n<p>In TypeScript, types are overlaid onto JavaScript code through an entirely separate type system, rather than becoming part of the JavaScript code itself. This means that an interface (“type”) in TypeScript can—and often does—use the same identifier name as a <em>variable</em> in JavaScript without introducing a name conflict. (The <em>only</em> time that an identifier in the type system refers to a name within JavaScript is when the <code>typeof</code> operator is used.)</p>\\n<p>When using the <code>class</code> keyword in TypeScript, you are actually creating <em>two</em> things with the same identifier:</p>\\n<ul>\\n<li>A TypeScript interface containing all the instance methods and properties of the class; and</li>\\n<li>A JavaScript variable with a <em>different</em> (anonymous) constructor function type</li>\\n</ul>\\n<p>In other words, the example class above is effectively just shorthand for this code:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// our TypeScript `Point` type\\r\\ninterface Point {\\r\\n  x: number;\\r\\n  y: number;\\r\\n  toString(): string;\\r\\n}\\r\\n\\r\\n// our JavaScript `Point` variable, with a constructor type\\r\\nlet Point: {\\r\\n  new (x: number, y: number): Point;\\r\\n  prototype: Point;\\r\\n\\r\\n  // static class properties and methods are actually part\\r\\n  // of the constructor type!\\r\\n  fromOtherPoint(point: Point): Point;\\r\\n};\\r\\n\\r\\n// `Function` does not fulfill the defined type so\\r\\n// it needs to be cast to &lt;any&gt;\\r\\nPoint = &lt;any&gt; function (this: Point, x: number, y: number): void {\\r\\n  // ...\\r\\n};\\r\\n\\r\\n// static properties/methods go on the JavaScript variable...\\r\\nPoint.fromOtherPoint = function (point: Point): Point {\\r\\n  // ...\\r\\n};\\r\\n\\r\\n// instance properties/methods go on the prototype\\r\\nPoint.prototype.toString = function (): string {\\r\\n  // ...\\r\\n};\\r\\n</pre>\\n<p>TypeScript also has support for <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class\\\">ES6 Class expressions</a>.</p>\\n<h2>Adding type properties to classes</h2>\\n<p> As mentioned above, adding non-method properties to classes in TypeScript is encouraged and required for the type system to understand what is available on the class.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n class Widget {\\r\\n   className: string;\\r\\n   color: string = 'red';\\r\\n   id: string;\\r\\n }\\r\\n </pre>\\n<p> In this example, <code>className</code>, <code>color</code>, and <code>id</code> have been defined as being properties that can exist on the class. However by default, <code>className</code> and <code>id</code> have no value. TypeScript can warn us about this with the <code>--strictPropertyInitialization</code> flag, which will throw an error if a class property is not assigned a value directly on the definition, or within the constructor. The value assigned to <code>color</code> is not actually assigned directly to the <code>prototype</code>. Instead, it&#8217;s value is assigned inside the constructor in the transpiled code, meaning that it is safe to assign non-primitive types directly without any risk of accidentally sharing those values with all instances of the class.</p>\\n<p>A common problem in complex applications is how to keep related sets of functionality grouped together. We already accomplish this by doing things like organising code into modules for large sets of functionality, but what about things like types that are only applicable to a single class or interface? For example, what if we had a <code>Widget</code> class that accepted a keyword arguments object:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport class Widget {\\r\\n  constructor(kwArgs: {\\r\\n    className?: string;\\r\\n    id?: string;\\r\\n    style?: Object;\\r\\n  }) {\\r\\n    // ...\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default Widget;\\r\\n</pre>\\n<p>In this code, we’ve succeeded in defining an anonymous type for the <code>kwArgs</code> parameter, but this is very brittle. What happens when we subclass <code>Widget</code> and want to add some extra properties? We’d have to write the entire type all over again. Or, what if we want to reference this type in multiple places, like within some code that instantiates a Widget? We wouldn’t be able to, because it’s an anonymous type assigned to a function parameter.</p>\\n<p>To solve this problem, we can use an <code>interface</code> to define the constructor arguments and export that alongside the class. </p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport interface WidgetProperties {\\r\\n  className?: string;\\r\\n  id?: string;\\r\\n  style?: Object | Style\\r\\n}\\r\\n\\r\\nexport class Widget {\\r\\n  constructor(kwArgs: WidgetProperties = {}) {\\r\\n    for (let key in kwArgs) {\\r\\n      this[key] = kwArgs[key];\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default Widget;\\r\\n</pre>\\n<p>Now, instead of having an anonymous object type dirtying up our code, we have a specific <code>WidgetProperties</code> interface that can be referenced by our code as well as any other code that imports <code>Widget</code>. This means that we can easily subclass our <code>kwArgs</code> parameter while keeping everything <abbr title=\\\"Don’t Repeat Yourself\\\">DRY</abbr> and well-organized:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport Widget, { WidgetProperties } from './Widget';\\r\\n\\r\\nexport interface TextInputProperties extends WidgetProperties {\\r\\n    maxLength?: number;\\r\\n    placeholder?: string;\\r\\n    value?: string;\\r\\n}\\r\\n\\r\\n// normal class inheritance…\\r\\nexport class TextInput extends Widget {\\r\\n  // replace the parameter type with our new, more specific subtype\\r\\n  constructor(kwArgs: TextInputProperties = {}) {\\r\\n    super(kwArgs);\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default TextInput;\\r\\n</pre>\\n<p>As mentioned earlier, using this pattern, we can also reference these types from other code by importing the interfaces where they are needed:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport Widget, { WidgetProperties } from './Widget';\\r\\nimport TextInput from './TextInput';\\r\\n\\r\\nexport function createWidget&lt;\\r\\n  T extends Widget = Widget,\\r\\n  K extends WidgetProperties = WidgetProperties\\r\\n&gt;(Ctor: { new (...args: any[]): T; }, kwArgs: K): T {\\r\\n  return new Ctor(kwArgs);\\r\\n}\\r\\n\\r\\n// w has type `Widget`\\r\\nconst w = createWidget(Widget, { style: { backroundColor: 'red' } });\\r\\n// t has type `TextInput`\\r\\nconst t = createWidget(TextInput, { style: { backgroundColor: 'green' } });\\r\\n</pre>\\n<h2>Access Modifiers</h2>\\n<p>Another welcome addition to classes in TypeScript are access modifiers that allow the developer to declare methods and properties as <code>public</code>, <code>private</code>, <code>protected</code>, and <code>readonly</code>.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass Widget {\\r\\n  class: string; // No modifier implies public\\r\\n  private _id: string;\\r\\n  readonly id: string; /\\r\\n\\r\\n  protected foo() {\\r\\n    // ...\\r\\n  }\\r\\n}\\r\\n</pre>\\n<p>If no modifier is provided, then the method or property is assumed to be <code>public</code> which means it can be accessed internally or externally. If it is marked as <code>private</code> then the method or property is only accessible internally within the class. These modifier is only enforceable at compile-time, however. The TypeScript compiler will warn about all inappropriate uses, but it does nothing to stop inappropriate usage at runtime. <code>protected</code> implies that the method or property is accessible only internally within the class or any class that extends it but not externally. Finally, <code>readonly</code> will cause the TypeScript compiler to throw an error if the value of the property is changed after its its initial assignment in the class constructor.</p>\\n<h2>Abstract Classes</h2>\\n<p>TypeScript supports the <code>abstract</code> keyword for classes and their methods, properties, and accessors. An abstract class may have methods, properties, and accessors with no implementation, and cannot be constructed. See <a href=\\\"https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#abstract-classes-and-methods\\\">Abstract classes and methods</a> and <a href=\\\"https://github.com/Microsoft/TypeScript/wiki/What's-new-in-TypeScript#abstract-properties-and-accessors\\\">Abstract properties and accessors</a> for more information.</p>\\n<h2>Mixins and Compositional Classes</h2>\\n<p>TypeScript 2.2 has made some changes to make it easier to implement mixins and/or compositional classes. This was achieved by removing some of the restrictions on classes. For example, it’s now possible to extend from a value that constructs an intersection type. They’ve also changed the way that signatures on intersection types get combined.</p>\\n<h2>Symbols, Decorators, and more</h2>\\n<h3>Symbols</h3>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\\\">Symbols</a> are unique, immutable identifiers that can be used as object keys. They offer the benefit of guaranteeing safety from naming conflicts. A symbol is a primitive value with the type of &#8220;symbol&#8221; (<code>typeof Symbol() === 'symbol'</code>).</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// even symbols created from the same key are unique\\r\\nSymbol('foo') !== Symbol('foo');\\r\\n</pre>\\n<p>When used as object keys, you don&#8217;t have to worry about name collision:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst ID_KEY = Symbol('id');\\r\\nlet obj = {};\\r\\nobj[ID_KEY] = 5;\\r\\nobj[Symbol('id')] = 10;\\r\\nobj[ID_KEY] === 5; // true\\r\\n</pre>\\n<p>Strong <a href=\\\"https://github.com/Microsoft/TypeScript/pull/1978\\\">type information in TS</a> is only available for <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Well-known_symbols\\\">built-in symbols</a>.</p>\\n<p>See our <a href=\\\"https://www.sitepen.com/blog/2016/04/13/es6-symbols-drumroll-please/\\\">ES6 Symbols: Drumroll please!</a> article for more information about Symbols.</p>\\n<h3>Decorators</h3>\\n<p>Please note that decorators were added to TypeScript early and are only available with the <code>--experimentalDecorators</code> flag because they do not reflect the current state of the <a href=\\\"https://github.com/tc39/proposal-decorators\\\">TC39 proposal</a>. A decorator is a function that allows shorthand in-line modification of <a href=\\\"https://github.com/Microsoft/TypeScript/issues/2249\\\">classes, properties, methods, and parameters</a>. A method decorator receives 3 parameters:</p>\\n<ul>\\n<li><code>target</code>: the object the method is defined on</li>\\n<li><code>key</code>: the name of the method</li>\\n<li><code>descriptor</code>: the object descriptor for the method</li>\\n</ul>\\n<p>The decorator function can optionally return a property descriptor to install on the target object.</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction myDecorator(target, key, descriptor) {\\r\\n}\\r\\n\\r\\nclass MyClass {\\r\\n    @myDecorator\\r\\n    myMethod() {}\\r\\n}\\r\\n</pre>\\n<p><code>myDecorator</code> would be invoked with the parameter values <code>MyClass.prototype</code>, <code>'myMethod'</code>, and <code>Object.getOwnPropertyDescriptor(MyClass.prototype, 'myMethod')</code>.</p>\\n<p>TypeScript also supports <a href=\\\"https://github.com/Microsoft/TypeScript/issues/1082\\\">computed property names</a> and <a href=\\\"https://github.com/Microsoft/TypeScript/pull/2169\\\">Unicode escape sequences</a>.</p>\\n<p>See our <a href=\\\"https://www.sitepen.com/blog/2015/10/20/typescript-decorators/\\\">TypeScript Decorators</a> article for more information about decorators.</p>\\n<h2>In conclusion</h2>\\n<p>Hopefully this post has helped to demystify parts of the TypeScript type system and given you some ideas about how you can exploit its advanced features to improve your own TypeScript application structure. If you have any other questions, or want some expert assistance writing TypeScript applications, <a href=\\\"https://www.sitepen.com/contact/\\\">get in touch</a> to chat with us today!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>This article describes the features and functionality of TypeScript 3.1. While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can leverage this knowledge to write cleaner, [&hellip;]</p>\\n\",\"protected\":false},\"author\":49,\"featured_media\":22055,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[3,11],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Advanced TypeScript Concepts: Classes and Types | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Advanced TypeScript Concepts: Classes and Types | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"This article describes the features and functionality of TypeScript 3.1. While TypeScript is very simple to understand when performing basic tasks, having a deeper understanding of how its type system works is critical to unlocking advanced language functionality. Once we know more about how TypeScript really works, we can leverage this knowledge to write cleaner, [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2018-11-28T12:30:47+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T18:03:43+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@nicknisi\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Advanced TypeScript Concepts: Classes and Types\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/\\\",\\\"name\\\":\\\"Advanced TypeScript Concepts: Classes and Types | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/#primaryimage\\\"},\\\"datePublished\\\":\\\"2018-11-28T12:30:47+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T18:03:43+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\",\\\"name\\\":\\\"Nick Nisi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Nick Nisi\\\"},\\\"sameAs\\\":[\\\"https://twitter.com/nicknisi\\\"]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16364\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/49\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=16364\"}],\"version-history\":[{\"count\":2,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16364/revisions\"}],\"predecessor-version\":[{\"id\":24658,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16364/revisions/24658\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22055\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=16364\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=16364\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=16364\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":49,\"name\":\"Nick Nisi\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/nnisi/\",\"slug\":\"nnisi\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Nick Nisi, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Nick Nisi, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/nnisi/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nnisi/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/nnisi/\\\",\\\"name\\\":\\\"Nick Nisi, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/a3dab67869cc373e7d76f2a68cd1c4fa\\\",\\\"name\\\":\\\"Nick Nisi\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c966c387cbade49b970ad43d47d472a9?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Nick Nisi\\\"},\\\"sameAs\\\":[\\\"https://twitter.com/nicknisi\\\"],\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/nnisi/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/49\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22055,\"date\":\"2020-01-22T10:03:30\",\"slug\":\"advanced-typescript-concepts\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/advanced-typescript-concepts-classes-and-types/advanced-typescript-concepts/\",\"title\":{\"rendered\":\"Advanced TypeScript Concepts\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Advanced TypeScript Concepts | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Advanced TypeScript Concepts | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T18:03:38+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\\\",\\\"name\\\":\\\"Advanced TypeScript Concepts | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T18:03:30+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T18:03:38+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Advanced TypeScript Concepts: Classes and Types\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2018/11/Advanced-TypeScript-Concepts.png\",\"sizes\":{\"medium\":{\"file\":\"Advanced-TypeScript-Concepts-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts-300x158.png\"},\"large\":{\"file\":\"Advanced-TypeScript-Concepts-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts-1024x538.png\"},\"thumbnail\":{\"file\":\"Advanced-TypeScript-Concepts-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts-150x150.png\"},\"medium_large\":{\"file\":\"Advanced-TypeScript-Concepts-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts-768x403.png\"},\"full\":{\"file\":\"Advanced-TypeScript-Concepts.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2018/11/Advanced-TypeScript-Concepts.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22055\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a574ca0c836e684-LHR"],["cf-request-id","036a6e387a0000e684a93fa200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 18 Jun 2020 19:08:30 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d23ff52e52eba0c4bd9b6bf5dbf3394aa1592507310; expires=Sat, 18-Jul-20 19:08:30 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}