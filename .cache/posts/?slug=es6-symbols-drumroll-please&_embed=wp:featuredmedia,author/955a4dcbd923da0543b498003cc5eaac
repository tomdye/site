{"value":{"body":"[{\"id\":11953,\"date\":\"2016-04-13T06:58:18\",\"date_gmt\":\"2016-04-13T13:58:18\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=11953\"},\"modified\":\"2019-12-11T06:08:25\",\"modified_gmt\":\"2019-12-11T14:08:25\",\"slug\":\"es6-symbols-drumroll-please\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/es6-symbols-drumroll-please/\",\"title\":{\"rendered\":\"ES6 Symbols: Drumroll Please!\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/04/es6_symbols_header.png\\\" alt=\\\"ES6 Logo\\\" width=\\\"620px\\\" /></p>\\n<p>Symbols are a new, unique, primitive type introduced in ECMAScript 6 (ES6). They were added to the language in order to solve the problem of extending the functionality of <code>Object</code> while maintaining backwards-compatibility with code written in earlier versions of JavaScript. With their addition comes the ability for developers to affect the behavior of the language in new and interesting ways. This article will introduce the concept of a symbol, explain their purpose, and show a couple of the most common ways symbols can be used today.</p>\\n<p><!--more--></p>\\n<p>Before getting into any details, let’s look at how to create a new symbol.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">const mySymbol = Symbol()\\r\\n</pre>\\n<p>The symbol primitive is created using a built-in factory function. Factories are used throughout JavaScript to build native elements. For instance, creating a new DOM element is done through <code>document.createElement()</code>. Symbols created in this manner are called “custom symbols.”</p>\\n<p>The <code>Symbol</code> object also has a number of named symbols provided by JavaScript called “well-known symbols.” These symbols are known by JavaScript and are used to interact with and modify the behavior of the underlying JavaScript code. The most common of the well-known symbols is <code>Symbol.iterator</code>, which is used to add a means of iterating over an object’s values. There are also symbols that allow objects to be used like regular expressions, change how types are reported to JavaScript (e.g. via <code>typeof</code>), and how to construct and convert custom objects.</p>\\n<p>With a new, unique, primitive type available, JavaScript can use <img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/04/js.png\\\" alt=\\\"JavaScript logo\\\" width=\\\"175\\\" height=\\\"175\\\" /> symbols as property names alongside strings to add functionality to objects without worrying about colliding with previously used names. This is important, because if the ECMAScript specification chose to use the string “iterator” instead of <code>Symbol.iterator</code> then any older code that may have used the string “iterator” as a property name could have unintended consequences when used in an ECMAScript 6 context.</p>\\n<p>Symbols solve the problem of name collisions. Because they are unique, no two symbols will ever share the same value.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">Symbol() !== Symbol()\\r\\n</pre>\\n<p>This means that JavaScript can continue to add functionality by adding well-known symbols without ever colliding with previously written code.</p>\\n<h3>What can Symbols do?</h3>\\n<p>Symbols allow developers to extend and affect the behavior of the JavaScript engine. For example, by using the well-known symbol, <code>Symbol.iterator</code> (also referred to as <code>@@iterator</code>), an object can describe what data is provided when it is used with for&#8230;of or a spread operator.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">class Data {\\r\\n\\tconstructor(... rest) {\\r\\n\\t\\tthis._data = rest;\\r\\n\\t}\\r\\n\\t*[Symbol.iterator]() {\\r\\n\\t\\tfor (let item of this._data) {\\r\\n\\t\\t\\tyield item;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nconsole.log([... new Data(1, 2, 3)]);  // outputs: [ 1, 2, 3 ]\\r\\n</pre>\\n<p>In this example the JavaScript engine looks at the custom object for an implementation at <code>@@iterator</code> and uses it as part of its internal routines to produce values used for constructing the array literal.</p>\\n<p>This change of behavior is even more obvious when working with symbols that change how JavaScript works with staples of the language. For instance, <code>@@toStringTag</code> is a symbol that lets you define how your object is described.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">let arraylike = {\\r\\n\\t0: 'zero',\\r\\n\\t1: 'one',\\r\\n\\tlength: 2,\\r\\n\\t[Symbol.toStringTag]: 'Array',\\r\\n\\t*[Symbol.iterator]() {\\r\\n\\t\\tfor (let i = 0; i &lt; this.length; i++) {\\r\\n\\t\\t\\tyield this[i];\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\\r\\nconsole.log(arraylike.toString());  // [object Array]\\r\\n</pre>\\n<p>Or @@replace allows an object to behave in a context previously reserved for regular expressions.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">const Summary = {\\r\\n    maxLength: 35,\\r\\n    defaultEnding: '...',\\r\\n    [Symbol.replace](str, replacement) {\\r\\n        if (str.length &gt; this.maxLength) {\\r\\n            replacement = replacement || this.defaultEnding;\\r\\n            const length = this.maxLength - replacement.length;\\r\\n            return str.substring(0, length) + replacement;\\r\\n        }\\r\\n        return str;\\r\\n    }\\r\\n};\\r\\n\\r\\nconst sentence = \\r\\n    'This sentence is way too long and will be summarized!';\\r\\n\\r\\n// prints: This sentence is way too long an...\\r\\nconsole.log(sentence.replace(Summary));\\r\\n</pre>\\n<p>Giving developers the ability to override language-level features that have previously only been accessible to the browser is a key component in the <a href=\\\"https://www.w3.org/community/nextweb/2013/06/11/the-extensible-web-manifesto/\\\">Extensible Web Manifesto</a>. It allows for more experimentation and lets developers build libraries around low-level features that were previously out of reach.</p>\\n<h3>Using Symbols</h3>\\n<p>Symbols are available natively in all modern browsers starting with Edge 12. However, except for <code>Symbol.iterator</code>, many of the well-known symbols have not been implemented across all browsers. This means that even in modern browsers with symbol support, many of the well-known symbols will need to be polyfilled. It is important to note that a polyfill of some well-known symbols cannot replicate behaviors that come from syntax or operators, like how <code>@@hasInstance</code> interacts with <code>instanceof</code> or <code>@@toPrimitive</code> is used to type cast an object to a value.</p>\\n<p>For ES5 browsers without a native symbol type, there are additional considerations. For one, since symbols are primitive types a polyfill cannot correctly replicate typeof checks and <code>Symbol()</code> will return a string. Also, the <code>in</code> operator will return polyfilled symbols because underneath they are just strings. And finally, <code>Symbol.for()</code> and <code>Symbol.keyFor</code> does not provide cross-realm support.</p>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/04/typescript_heading.png\\\" alt=\\\"TypeScript Logo\\\" width=\\\"620px\\\" /><br />\\nFor TypeScript users the situation becomes more complicated. While TypeScript has support for symbols when emitting ES6 code, it does not provide symbol typings when down-emitting to ES5 and will report symbol usage as an error. TypeScript developers can resolve this in one of three ways:</p>\\n<ol>\\n<li>Use <a href=\\\"https://github.com/dojo/core\\\">dojo/core</a> or another library with shims to support ES6 features with ES5 syntax</li>\\n<li>Create a build chain that transpiles TypeScript to ES6, then uses Babel to transpile to ES5</li>\\n<li>Use <code>any</code> types in place of a <code>symbol</code> type</li>\\n</ol>\\n<p>Each solution has trade-offs that must be made to support symbols in an ES5 environment. We believe using a shim library to wrap ES6 functionality in an ES5 syntax offers the best way to maintain types and consistency while targeting multiple platforms. There are also plans to help address these issues through <a href=\\\"https://github.com/Microsoft/TypeScript/issues/3538\\\">conditional compilation</a> and <a href=\\\"https://github.com/Microsoft/TypeScript/issues/4692\\\">granular targeting</a> features planned in the <a href=\\\"https://github.com/Microsoft/TypeScript/wiki/Roadmap\\\">TypeScript roadmap</a>.</p>\\n<p>These caveats may sound onerous, but many of them can be resolved using a transpiler like <a href=\\\"https://babeljs.io/\\\">Babel</a>, a good polyfill like <a href=\\\"https://github.com/zloirock/core-js\\\">core.js</a>, and being aware of the exceptions listed above. With these tools in place, engineers can take advantage of the modern concepts and syntax provided by ECMAScript 6 and begin writing more efficient and easier-to-read code.</p>\\n<h2>Learning more</h2>\\n<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/04/workshops_heading.png\\\" alt=\\\"Workshops Logo\\\" width=\\\"620px\\\" /></p>\\n<p>We cover Symbols and many other useful additions to ES6 in our <a href=\\\"https://www.sitepen.com/workshops/\\\">ES6 &amp; TypeScript for the Enterprise Developer</a> workshops. We believe it&#8217;s more important than ever to learn the fundamentals of ES6 and TypeScript. With the first substantial changes to the language in nearly 20 years, now is the time to learn how to efficiently leverage these changes to our primary language for creating web applications.</p>\\n<p>We also provide help when learning ES6 and TypeScript through any of our <a href=\\\"https://www.sitepen.com/services/\\\">JavaScript support plans</a>. And with the many changes to the language, there are several ways to improve the approach to the architecture of your application. <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss your application architecture, and to learn more about how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Symbols are a new, unique, primitive type introduced in ECMAScript 6 (ES6). They were added to the language in order to solve the problem of extending the functionality of Object while maintaining backwards-compatibility with code written in earlier versions of JavaScript. With their addition comes the ability for developers to affect the behavior of the [&hellip;]</p>\\n\",\"protected\":false},\"author\":56,\"featured_media\":12056,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,215,3,11],\"tags\":[383,417,386],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>ES6 Symbols: Drumroll Please! | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"ES6 Symbols: Drumroll Please! | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Symbols are a new, unique, primitive type introduced in ECMAScript 6 (ES6). They were added to the language in order to solve the problem of extending the functionality of Object while maintaining backwards-compatibility with code written in earlier versions of JavaScript. With their addition comes the ability for developers to affect the behavior of the [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2016-04-13T13:58:18+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2019-12-11T14:08:25+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/\\\",\\\"name\\\":\\\"ES6 Symbols: Drumroll Please! | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/#primaryimage\\\"},\\\"datePublished\\\":\\\"2016-04-13T13:58:18+00:00\\\",\\\"dateModified\\\":\\\"2019-12-11T14:08:25+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/361d401f0e481f1513c141c48842fa30\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/es6-symbols-drumroll-please/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/361d401f0e481f1513c141c48842fa30\\\",\\\"name\\\":\\\"Paul Shannon\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/76565296c9f544271ebb72aa3e69a1a5?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Paul Shannon\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/11953\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/56\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=11953\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/11953/revisions\"}],\"predecessor-version\":[{\"id\":19751,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/11953/revisions/19751\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/12056\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=11953\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=11953\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=11953\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=11953\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":56,\"name\":\"Paul Shannon\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/pshannon/\",\"slug\":\"pshannon\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/76565296c9f544271ebb72aa3e69a1a5?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/76565296c9f544271ebb72aa3e69a1a5?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/76565296c9f544271ebb72aa3e69a1a5?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.4.1 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Paul Shannon, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Paul Shannon, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/pshannon/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/76565296c9f544271ebb72aa3e69a1a5?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/pshannon/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/pshannon/\\\",\\\"name\\\":\\\"Paul Shannon, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/361d401f0e481f1513c141c48842fa30\\\",\\\"name\\\":\\\"Paul Shannon\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/76565296c9f544271ebb72aa3e69a1a5?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Paul Shannon\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/pshannon/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/56\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a8085107f606ba1-LHR"],["cf-request-id","0384317e4f00006ba1ef855200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Tue, 23 Jun 2020 19:12:18 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=dd2095505867aff441b7235fd0476857b1592939538; expires=Thu, 23-Jul-20 19:12:18 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}