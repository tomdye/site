{"value":{"body":"[{\"id\":18604,\"date\":\"2019-07-22T08:35:19\",\"date_gmt\":\"2019-07-22T15:35:19\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=18604\"},\"modified\":\"2020-01-21T06:42:28\",\"modified_gmt\":\"2020-01-21T14:42:28\",\"slug\":\"using-webassembly-with-web-workers\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/using-webassembly-with-web-workers/\",\"title\":{\"rendered\":\"Using WebAssembly with Web Workers\"},\"content\":{\"rendered\":\"<p>When building web apps, writing processing intensive code can be a challenge. One issue is getting predictable running times across browsers and JavaScript engines that optimise different code paths differently, as well as producing code that doesn&#8217;t interfere with user experience. Since 2010 we&#8217;ve had a standardised way to manage interactivity for long, non-DOM related tasks.</p>\\n<p><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\\\">Web Workers</a> allow for offloading processing onto a separate thread keeping the main thread free. Recently we have seen the growth of another specification, WebAssembly (WASM), a new code type for the web. WebAssembly provides a compact binary compilation target format, allowing developers to start with a selection of strongly typed languages like C/C++ and Rust, as well as languages like <a href=\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/\\\">Go</a> and <a href=\\\"https://www.sitepen.com/blog/getting-started-with-assemblyscript/\\\">TypeScript</a>. WebAssembly solves the first core issue, which is getting predictable, near native performance across browsers and environments. Here we combine Web Workers and WebAssembly to get the consistency and potential performance benefits of WebAssembly, alongside the benefit of working in a separate thread with Web Workers.</p>\\n<h3>Why Put Your WebAssembly Code in a Web Worker?</h3>\\n<p>The critical aspect of putting a WebAssembly module in a Web Worker is that it removes the overhead of fetching, compiling and initialising a WebAssembly module off the main thread, and in turn calling the given functions in a module. This keeps the main browser thread free to continue rendering and handling user interactions. Considering that WebAssembly is often used for processing intensive code, pairing it with Web Workers can be a great combination.</p>\\n<p>However, there are some drawbacks to this approach. Transferring data from the main thread to the worker thread could be <a href=\\\"https://www.loxodrome.io/post/web-worker-performance/\\\">costly depending on the size of the data</a> in question. There is also additional complexity and logic to handle when using WebAssembly in a Web Worker. Placing a WebAssembly module in a Web Worker makes interacting with the WASM module code asynchronous because the message passing mechanism leverages event listeners and callbacks.</p>\\n<h3>Using WebAssembly with a Web Worker</h3>\\n<p>In this section we will demonstrate using WebAssembly in a Web Worker. Let us assume we have a simple WebAssembly calculator module which performs basic math operations with inputs. Communication between the main thread and a Web Worker happens by passing messages. We will pass our data via a message to the Worker, in this case numbers we want to operate on, and then return the result back to the main thread. On the client-side we use the <code>postMessage</code> method on both the main thread and worker thread to pass messages. Here is our code for initialising and using a worker to host our WebAssembly module:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    // worker.js\\r\\n\\r\\n    // Polyfill instantiateStreaming for browsers missing it\\r\\n    if (!WebAssembly.instantiateStreaming) {\\r\\n        WebAssembly.instantiateStreaming = async (resp, importObject) =&gt; {\\r\\n                const source = await (await resp).arrayBuffer();\\r\\n                return await WebAssembly.instantiate(source, importObject);\\r\\n        };\\r\\n    }\\r\\n\\r\\n    // Create promise to handle Worker calls whilst\\r\\n    // module is still initialising\\r\\n    let wasmResolve;\\r\\n    let wasmReady = new Promise((resolve) =&gt; {\\r\\n        wasmResolve = resolve;\\r\\n    })\\r\\n\\r\\n    // Handle incoming messages\\r\\n    self.addEventListener('message', function(event) {\\r\\n\\r\\n        const { eventType, eventData, eventId } = event.data;\\r\\n\\r\\n        if (eventType === &quot;INITIALISE&quot;) {\\r\\n            WebAssembly.instantiateStreaming(fetch(eventData), {})\\r\\n                .then(instantiatedModule =&gt; {\\r\\n                    const wasmExports = instantiatedModule.instance.exports;\\r\\n\\r\\n                    // Resolve our exports for when the messages\\r\\n                    // to execute functions come through\\r\\n                    wasmResolve(wasmExports);\\r\\n\\r\\n                    // Send back initialised message to main thread\\r\\n                    self.postMessage({\\r\\n                        eventType: &quot;INITIALISED&quot;,\\r\\n                        eventData: Object.keys(wasmExports)\\r\\n                    });\\r\\n        \\r\\n                });\\r\\n        } else if (eventType === &quot;CALL&quot;) {\\r\\n            wasmReady\\r\\n                .then((wasmInstance) =&gt; {\\r\\n                    const method = wasmInstance[eventData.method];\\r\\n                    const result = method.apply(null, eventData.arguments);\\r\\n                    self.postMessage({\\r\\n                        eventType: &quot;RESULT&quot;,\\r\\n                        eventData: result,\\r\\n                        eventId: eventId\\r\\n                    });\\r\\n                })\\r\\n                .catch((error) =&gt; {\\r\\n                    self.postMessage({\\r\\n                        eventType: &quot;ERROR&quot;,\\r\\n                        eventData: &quot;An error occured executing WASM instance function: &quot; + error.toString(),\\r\\n                        eventId: eventId\\r\\n                    });\\r\\n                })\\r\\n        }\\r\\n\\r\\n    }, false);\\r\\n\\r\\n</pre>\\n<p>In the first code block we provided a basic polyfill for <code>instantiateStreaming</code> which is the current recommended way of fetching, compiling and initialising your WebAssembly program in one step. This polyfill is required for non-supporting evergreen browsers (currently Safari, Safari iOS, and Samsung Internet). We then go on to add an event listener for the worker, which listens for two events <code>INITIALISE</code> and <code>CALL</code>. <code>INITIALISE</code> runs the WASM initialisation step, and <code>CALL</code> runs a given function with the arguments against it. </p>\\n<p>Now for the main thread code, let&#8217;s assume it&#8217;s contained in <code>main.js</code>. Here we&#8217;re going to send a <code>INITIALISE</code> message and listen for a <code>RESULT</code> message which we resolve in a corresponding <code>Promise</code>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    // main.js\\r\\n\\r\\n    function wasmWorker(modulePath) {\\r\\n\\r\\n        // Create an object to later interact with \\r\\n        const proxy = {};\\r\\n\\r\\n        // Keep track of the messages being sent\\r\\n        // so we can resolve them correctly\\r\\n        let id = 0;\\r\\n        let idPromises = {};\\r\\n\\r\\n        return new Promise((resolve, reject) =&gt; {\\r\\n            const worker = new Worker('worker.js');\\r\\n            worker.postMessage({eventType: &quot;INITIALISE&quot;, eventData: modulePath});\\r\\n            worker.addEventListener('message', function(event) {\\r\\n\\r\\n                const { eventType, eventData, eventId } = event.data;\\r\\n\\r\\n                if (eventType === &quot;INITIALISED&quot;) {\\r\\n                    const methods = event.data.eventData;\\r\\n                    methods.forEach((method) =&gt; {\\r\\n                        proxy[method] = function() {\\r\\n                            return new Promise((resolve, reject) =&gt; {\\r\\n                                worker.postMessage({\\r\\n                                    eventType: &quot;CALL&quot;,\\r\\n                                    eventData: {\\r\\n                                        method: method,\\r\\n                                        arguments: Array.from(arguments) // arguments is not an array\\r\\n                                    },\\r\\n                                    eventId: id\\r\\n                                });\\r\\n\\r\\n                                idPromises[id] = { resolve, reject };\\r\\n                                id++\\r\\n                            });\\r\\n                        }\\r\\n                    });\\r\\n                    resolve(proxy);\\r\\n                    return;\\r\\n                } else if (eventType === &quot;RESULT&quot;) {\\r\\n                    if (eventId !== undefined &amp;&amp; idPromises[eventId]) {\\r\\n                        idPromises[eventId].resolve(eventData);\\r\\n                        delete idPromises[eventId];\\r\\n                    }\\r\\n                } else if (eventType === &quot;ERROR&quot;) {\\r\\n                    if (eventId !== undefined &amp;&amp; idPromises[eventId]) {\\r\\n                        idPromises[eventId].reject(event.data.eventData);\\r\\n                        delete idPromises[eventId];\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n            });\\r\\n\\r\\n            worker.addEventListener(&quot;error&quot;, function(error) {\\r\\n                reject(error);\\r\\n            });\\r\\n        })\\r\\n\\r\\n    }\\r\\n\\r\\n</pre>\\n<p>The purpose of this main thread code is to handle sending and receiving messages from the Worker which is handling our WASM code. We have a proxy object which we interact with from the main thread, rather than the WASM instance directly. IDs are used to track the requests and responses to make sure we resolve the right call to the right <code>Promise</code>. This abstraction exposes an object that we can interact with like an asynchronous version of the original <code>exports</code> object. Apart from being asynchronous, we also make the concession that properties are accessed as function calls rather than directly in this case.</p>\\n<p>We could then go on to use our new abstraction:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    // main.js\\r\\n\\r\\n    wasmWorker(&quot;./calculator.wasm&quot;).then((wasmProxyInstance) =&gt; {\\r\\n        wasmProxyInstance.add(2, 3)\\r\\n            .then((result) =&gt; {\\r\\n                console.log(result); // 5\\r\\n            })\\r\\n            .catch((error) =&gt; {\\r\\n                console.error(error);\\r\\n            });\\r\\n\\r\\n        wasmProxyInstance.divide(100, 10)\\r\\n            .then((result) =&gt; {\\r\\n                console.log(result); // 10\\r\\n            })\\r\\n            .catch((error) =&gt; {\\r\\n                console.error(error);\\r\\n            });\\r\\n    });\\r\\n\\r\\n</pre>\\n<h3>Using Inline Web Workers</h3>\\n<p>Another interesting feature of Web Workers is that with a bit of work they can get created <em>inline</em>. Inline Web Workers make use of the <code>URL.createObjectURL</code> and <code>Blob</code> browser API functions, and allow us to create a Worker without the need for an external resource. The <code>Blob</code> takes the function body we are trying to create as a string (using <code>toString</code>) which we can in turn pass to the <code>createObjectURL</code> method. Let&#8217;s take the above code and attempt to inline it. Note the goal here is not to write production grade inline web workers, but to demonstrate how they work!</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction wasmWorker(modulePath) {\\r\\n\\r\\n    let worker;\\r\\n    const proxy = {};\\r\\n    let id = 0;\\r\\n    let idPromises = {};\\r\\n\\r\\n    // Polyfill instantiateStreaming for browsers missing it\\r\\n    if (!WebAssembly.instantiateStreaming) {\\r\\n        WebAssembly.instantiateStreaming = async (resp, importObject) =&gt; {\\r\\n            const source = await (await resp).arrayBuffer();\\r\\n            return await WebAssembly.instantiate(source, importObject);\\r\\n        };\\r\\n    }\\r\\n\\r\\n    return new Promise((resolve, reject) =&gt; {\\r\\n\\r\\n        worker = createInlineWasmWorker(inlineWasmWorker, modulePath);\\r\\n        worker.postMessage({eventType: &quot;INITIALISE&quot;, data: modulePath});\\r\\n\\r\\n        worker.addEventListener('message', function(event) {\\r\\n\\r\\n            const { eventType, eventData, eventId } = event.data;\\r\\n\\r\\n            if (eventType === &quot;INITIALISED&quot;) {\\r\\n                const props = eventData;\\r\\n                props.forEach((prop) =&gt; {\\r\\n                    proxy[prop] = function() {\\r\\n                        return new Promise((resolve, reject) =&gt; {\\r\\n                            worker.postMessage({\\r\\n                                eventType: &quot;CALL&quot;,\\r\\n                                eventData: {\\r\\n                                    prop: prop,\\r\\n                                    arguments: Array.from(arguments)\\r\\n                                },\\r\\n                                eventId: id\\r\\n                            });\\r\\n                            idPromises[id] = { resolve, reject };\\r\\n                            id++\\r\\n                        })\\r\\n                        \\r\\n                    }\\r\\n                })\\r\\n                resolve(proxy);\\r\\n                return;\\r\\n            } else if (eventType === &quot;RESULT&quot;) {\\r\\n                if (eventId !== undefined &amp;&amp; idPromises[eventId]) {\\r\\n                    idPromises[eventId].resolve(eventData);\\r\\n                    delete idPromises[eventId];\\r\\n                }\\r\\n            } else if (eventType === &quot;ERROR&quot;) {\\r\\n                if (eventId !== undefined &amp;&amp; idPromises[eventId]) {\\r\\n                    idPromises[eventId].reject(event.data.eventData);\\r\\n                    delete idPromises[eventId];\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n        worker.addEventListener('error', function(error) {\\r\\n            reject(error)\\r\\n        })\\r\\n    })\\r\\n\\r\\n    function createInlineWasmWorker(func, wasmPath) {\\r\\n        if (!wasmPath.startsWith(&quot;http&quot;)) {\\r\\n            if (wasmPath.startsWith(&quot;/&quot;)) {\\r\\n                wasmPath = window.location.href + wasmPath\\r\\n            } else if (wasmPath.startsWith(&quot;./&quot;)) {\\r\\n                wasmPath = window.location.href + wasmPath.substring(1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Make sure the wasm path is absolute and turn into IIFE\\r\\n        func = `(${func.toString().trim().replace(&quot;WORKER_PATH&quot;, wasmPath)})()`;\\r\\n        const objectUrl = URL.createObjectURL(new Blob([func], { type: &quot;text/javascript&quot; }));\\r\\n        const worker = new Worker(objectUrl);\\r\\n        URL.revokeObjectURL(objectUrl);\\r\\n\\r\\n        return worker;\\r\\n    }\\r\\n\\r\\n    function inlineWasmWorker() {\\r\\n\\r\\n        let wasmResolve;\\r\\n        const wasmReady = new Promise((resolve) =&gt; {\\r\\n            wasmResolve = resolve;\\r\\n        })\\r\\n    \\r\\n        self.addEventListener('message', function(event) {\\r\\n            const { eventType, eventData, eventId } = event.data;\\r\\n\\r\\n            if (eventType === &quot;INITIALISE&quot;) {     \\r\\n                WebAssembly.instantiateStreaming(fetch('WORKER_PATH'), {})\\r\\n                    .then(instantiatedModule =&gt; {\\r\\n                        const wasmExports = instantiatedModule.instance.exports;\\r\\n                        wasmResolve(wasmExports);\\r\\n                        self.postMessage({\\r\\n                            eventType: &quot;INITIALISED&quot;,\\r\\n                            eventData: Object.keys(wasmExports)\\r\\n                        });\\r\\n                    })\\r\\n                    .catch((error) =&gt; {\\r\\n                        console.error(error);\\r\\n                    })\\r\\n\\r\\n            } else if (eventType === &quot;CALL&quot;) {\\r\\n                wasmReady.then((wasmInstance) =&gt; {\\r\\n                    const prop = wasmInstance[eventData.prop];\\r\\n                    const result = typeof prop === 'function' ? prop.apply(null, eventData.arguments) : prop;\\r\\n                    self.postMessage({\\r\\n                        eventType: &quot;RESULT&quot;,\\r\\n                        eventData: result,\\r\\n                        eventId: eventId\\r\\n                    });\\r\\n                })\\r\\n            } \\r\\n\\r\\n        }, false);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n</pre>\\n<p>This approach works, and you can use the same code as above for using this abstraction (i.e. the interface hasn&#8217;t changed). If you are looking for something a bit more robust in this domain, the <a href=\\\"https://github.com/mbasso/wasm-worker\\\">wasm-worker library</a> by <a href=\\\"https://twitter.com/teo_basso\\\">Matteo Basso</a> takes a slightly more flexible approach of passing a function which (after being turned into a string and back again) is executed in the context of the module so it can access it. <code>wasm-worker</code> has some additional features that might be beneficial such as supporting <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Transferable\\\"><code>Transferables</code></a> which are a low overhead way of transferring types like ArrayBuffers and ImageBitmaps. It is more extensible in allowing a specific <code>importObject</code> which is part of the WebAssembly instantiation interface, and allows importing values to the WebAssembly instance such as functions. The following example uses <code>wasm-worker</code>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\n    import wasmWorker from 'wasm-worker';\\r\\n\\r\\n    wasmWorker('calculator.wasm')\\r\\n        .then(module =&gt; {\\r\\n            // We can write code that operates on the WASM module\\r\\n            return module.exports.add(1, 2);\\r\\n        })\\r\\n        .then(sum =&gt; {\\r\\n            console.log('1 + 2 = ' + sum);\\r\\n        })\\r\\n        .catch(exception =&gt; {\\r\\n            // exception is a string\\r\\n            console.error(exception);\\r\\n        });\\r\\n\\r\\n</pre>\\n<h3>Conclusion</h3>\\n<p>It is now straightforward to use WebAssembly programs inside a Web Worker and leverage them from the main thread. We have shown how to do this in both a traditional way of using a separate JavaScript file, and using an inline Web Worker approach. Lastly we showed the usage for <code>wasm-worker</code>, a library which you can use in your projects to use inline workers today in your project. You can find the full code for these <a href=\\\"https://github.com/jamesmilneruk/wasm-workers\\\">wasm-workers examples on GitHub</a>. </p>\\n<p>The benefit of putting your WASM logic in a worker is to improve user experience by keeping the main thread free. This allows the browser to keep rendering and handling user input, in turn keeping users happy. You may pay an overhead cost for transferring any data here if it is large, but depending on your data types, Transferables may allow you to offset this. Lastly it&#8217;s important to remember that Web Workers and <em>currently</em> WebAssembly do not support direct DOM operations, which limits them to non DOM bound work. Even with this limitation, there are still many great use cases for this combination, for example check out how eBay <a href=\\\"https://medium.com/ebaytech/webassembly-at-ebay-a-real-world-use-case-ef888f38b537\\\">created a barcode scanner</a> that leverages both technologies!</p>\\n<p>If you need help creating an application the provides an optimal end user experience leveraging modern web technologies, please <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>When building web apps, writing processing intensive code can be a challenge. One issue is getting predictable running times across browsers and JavaScript engines that optimise different code paths differently, as well as producing code that doesn&#8217;t interfere with user experience. Since 2010 we&#8217;ve had a standardised way to manage interactivity for long, non-DOM related [&hellip;]</p>\\n\",\"protected\":false},\"author\":2,\"featured_media\":21948,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,3,6,18],\"tags\":[5],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Using WebAssembly with Web Workers | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"When building web apps, writing processing intensive code can be a challenge. One issue is getting predictable running times across browsers and JavaScript engines that optimise different code paths differently, as well as producing code that doesn&#039;t interfere with user experience. Since 2010 we&#039;ve had a standardised way to\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/using-webassembly-with-web-workers/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Using WebAssembly with Web Workers | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"When building web apps, writing processing intensive code can be a challenge. One issue is getting predictable running times across browsers and JavaScript engines that optimise different code paths differently, as well as producing code that doesn&#039;t interfere with user experience. Since 2010 we&#039;ve had a standardised way to\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/using-webassembly-with-web-workers/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2019-07-22T15:35:19+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-21T14:42:28+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/using-webassembly-with-web-workers/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\\\",\\\"width\\\":1200,\\\"height\\\":630},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/using-webassembly-with-web-workers/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/using-webassembly-with-web-workers/\\\",\\\"name\\\":\\\"Using WebAssembly with Web Workers | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/using-webassembly-with-web-workers/#primaryimage\\\"},\\\"datePublished\\\":\\\"2019-07-22T15:35:19+00:00\\\",\\\"dateModified\\\":\\\"2020-01-21T14:42:28+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\"},\\\"description\\\":\\\"When building web apps, writing processing intensive code can be a challenge. One issue is getting predictable running times across browsers and JavaScript engines that optimise different code paths differently, as well as producing code that doesn't interfere with user experience. Since 2010 we've had a standardised way to\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/using-webassembly-with-web-workers/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18604\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=18604\"}],\"version-history\":[{\"count\":3,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18604/revisions\"}],\"predecessor-version\":[{\"id\":21960,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18604/revisions/21960\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/21948\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=18604\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=18604\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=18604\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=18604\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":2,\"name\":\"James Milner\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jmilner/\",\"slug\":\"jmilner\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>James Milner, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"James Milner, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jmilner/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jmilner/\\\",\\\"name\\\":\\\"James Milner, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":21948,\"date\":\"2020-01-21T06:29:22\",\"slug\":\"using-webassembly-with-web-workers_1200x630\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/using-webassembly-with-web-workers/using-webassembly-with-web-workers_1200x630/\",\"title\":{\"rendered\":\"Using-WebAssembly-with-Web-Workers_1200x630\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Using-WebAssembly-with-Web-Workers_1200x630 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Using-WebAssembly-with-Web-Workers_1200x630 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\\\",\\\"name\\\":\\\"Using-WebAssembly-with-Web-Workers_1200x630 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-21T14:29:22+00:00\\\",\\\"dateModified\\\":\\\"2020-01-21T14:29:22+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\",\"sizes\":{\"medium\":{\"file\":\"Using-WebAssembly-with-Web-Workers_1200x630-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630-300x158.png\"},\"large\":{\"file\":\"Using-WebAssembly-with-Web-Workers_1200x630-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630-1024x538.png\"},\"thumbnail\":{\"file\":\"Using-WebAssembly-with-Web-Workers_1200x630-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630-150x150.png\"},\"medium_large\":{\"file\":\"Using-WebAssembly-with-Web-Workers_1200x630-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630-768x403.png\"},\"full\":{\"file\":\"Using-WebAssembly-with-Web-Workers_1200x630.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/07/Using-WebAssembly-with-Web-Workers_1200x630.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/21948\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:17:36 GMT"],["expires","Thu, 24 Sep 2020 13:17:36 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}