{"value":{"body":"[{\"id\":8079,\"date\":\"2014-06-17T10:57:38\",\"date_gmt\":\"2014-06-17T17:57:38\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=8079\"},\"modified\":\"2020-08-01T08:10:59\",\"modified_gmt\":\"2020-08-01T15:10:59\",\"slug\":\"local-database-stores\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/local-database-stores/\",\"title\":{\"rendered\":\"Local Database Stores\"},\"content\":{\"rendered\":\"<p>Modern browsers have powerful new database capabilities that enable applications to store data locally, and perform advanced indexed queries without a network connection. Applications can be built with offline support without any disruption to data interaction, including searching. However, these database capabilities have traditionally been difficult to use across browsers since Safari only supports WebSQL (although version 8 is slated to include IndexedDB support), and Firefox and Internet Explorer only support the <a href=\\\"http://www.w3.org/TR/IndexedDB/\\\">W3C&#8217;s IndexedDB API</a> (Chrome supports both). And these two interfaces couldn&#8217;t be more different, making it very problematic to write applications that work offline on all the major browsers.</p>\\n<p>But, it is now much easier to access these database capabilities. By taking advantage of the consistency of the <a href=\\\"http://dojotoolkit.org/reference-guide/1.10/dojo/store.html\\\">Dojo object store</a> implementation, in version Dojo toolkit version 1.10, <code>dojox/store</code> now includes object store implementations for IndexedDB and WebSQL, along with a wrapper that will automatically delegate to the appropriate store implementation based on browser support. With a single common interface, you can retrieve, update, add, and delete objects, and even perform sophisticated queries in exactly the same way with the different underlying storage implementations.</p>\\n<p><!--more--></p>\\n<h2>Using the LocalDB store</h2>\\n<p><a href=\\\"https://wp.sitepen.com/wp-content/uploads/2014/03/localstorage.png\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2014/03/localstorage.png\\\" alt=\\\"localstorage\\\" width=\\\"296\\\" height=\\\"303\\\" class=\\\"alignright wp-image-8124\\\" style=\\\"float: right\\\" /></a></p>\\n<p>The <code>dojox/store/LocalDB</code> module is the main, recommended entry store for accessing the local database. This store will automatically load the database implementation supported by the current browser, and the new store instance can be used like any other asynchronous store (you can also directly load the individual store implementations, if you want to target a specific technology). In order to use this store, we create a database configuration object that defines the version, name, and the schema of the properties of the objects that will go in each store. This is necessary so that the appropriate indices and table columns can be setup by each store. We need to define all of the stores that will be included in the database in the same configuration object, along with a version and any database name, so that the stores can properly version and update the database. Here is an example of a database configuration, where we define the database version (the name is optional) and each of the stores. We define the properties for each store&#8217;s objects. Our property configurations are simply empty objects, using the default configuration for each property.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\tvar dbConfig = {\\r\\n\\t\\tversion: 1, // this is required\\r\\n\\t\\tstores: {\\r\\n\\t\\t\\tproduct: {\\r\\n\\t\\t\\t\\t// just declare the properties, will configure later\\r\\n\\t\\t\\t\\tname: {},\\r\\n\\t\\t\\t\\tprice: {},\\r\\n\\t\\t\\t\\tinStock: {},\\r\\n\\t\\t\\t\\tid: {}\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\torder: {\\r\\n\\t\\t\\t\\tquantity: {}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t};\\r\\n</pre>\\n<p>Now that we have a database configuration, we can instantiate individual stores by providing the database config and the name of the store:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\trequire(['dojox/store/LocalDB'], function(LocalDB){\\r\\n\\t\\tvar productStore = new LocalDB({\\r\\n\\t\\t\\tdbConfig: dbConfig,\\r\\n\\t\\t\\tstoreName: 'product'\\r\\n\\t\\t});\\r\\n</pre>\\n<p>Now, we can interact with the store using the standard <code>dojo/store</code> API:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\tproductStore.get(id).then(object){\\r\\n\\t\\t// get an object by id\\r\\n\\r\\n\\t\\t// we could make changes and store the object:\\r\\n\\t\\tproductStore.put(updatedObject);\\r\\n\\t});\\r\\n\\tproductStore.add(newObject); // add a new object\\r\\n</pre>\\n<h2>Querying</h2>\\n<p>A major focus of this implementation is to provide not only basic data storage facilities, but uncompromising, high-performance database querying, so applications can continue to provide fast, full access to data, even when a large amount needs to be stored locally. Let&#8217;s start with the basics. To query a database, we use the store&#8217;s <code>query()</code> method. The first parameter can be a simple object that defines the filtering constraints on the data to be retrieved. For example, to retrieve all the products that are in stock, we can write:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar results = store.query({\\r\\n\\t\\tinStock: true\\r\\n\\t});\\r\\n</pre>\\n<p>And then we can iterate over the results using standard iterative methods:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nresults.forEach(function(object){\\r\\n\\t// called for each object\\r\\n});\\r\\n</pre>\\n<p>Remember that queries are asynchronous, so <code>forEach()</code> will return before all the results are returned. The <code>forEach()</code> method will return a promise that can be used to wait for the completion of the query.</p>\\n<p>The <code>query()</code> method also accepts an optional second parameter that may be used to specify sort order and/or request a range of the data. For example, if we wanted to sort in-stock products by price and return the first ten products, we can write:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar results = store.query({\\r\\n\\t\\tinStock: true\\r\\n\\t}, {\\r\\n\\t\\tsort: [{attribute: 'price'}],\\r\\n\\t\\tstart: 0,\\r\\n\\t\\tcount: 10\\r\\n\\t});\\r\\n</pre>\\n<p>When performing a query with a range, we may also want to check how many objects match the query (not just the 10 items within this range). This can be accessed through the results&#8217; <code>total</code> property, which is a promise that resolves to the total count.</p>\\n<p>Filtering by property equality is useful for some queries, but what if we need to find all the in stock products with a certain price or lower? Typically, with the <code>Memory</code> store we might have defined a custom filtering function to accomplish more sophisticated querying that involves more than simple equality checks (or used more specific querying functionality of a server with the <code>Rest</code> store), but a filtering function can&#8217;t be efficiently used in conjunction with database indices. So the LocalDB stores define specific object filter structures to specify ranges or limits in a query. We can create our query by defining a comparison in our filter object. A comparison object is an object with a <code>from</code> or <code>to</code> property that specifies the lower or upper bound (respectively) of the returned objects. We could find products for $100 or less by writing:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar results = store.query({\\r\\n\\t\\tinStock: true,\\r\\n\\t\\tprice: {\\r\\n\\t\\t\\tto: 100\\r\\n\\t\\t}\\r\\n\\t});\\r\\n</pre>\\n<p>We can also use the <code>excludeFrom</code> and <code>excludeTo</code> flags to exclude the limits, so we could get just the items less than $100 by setting <code>excludeTo</code> to <code>true</code> (again, remember these flags are specific to the LocalDB stores, they don&#8217;t apply to other stores).</p>\\n<p>We can also filter properties using a trailing wildcard. This means that we could search for all the products that have a name that starts with a &#8216;sh&#8217; (this is particularly useful for autocomplete widgets). We can do this by using a regular expression in our query:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar results = store.query({\\r\\n\\t\\tprice: /sh.*/\\r\\n\\t});\\r\\n</pre>\\n<p>By including multiple properties on the query object, we specify multiple constraints that must ALL be satisfied to be included in the results. However, we may want do a union of selections, where one constraint can be satisfied OR another constraint can be satisfied. This can be done by using an array of objects, where the results will include objects that match the results of any of the objects&#8217; constraints. For example, if we want to find any product with a name of &#8220;shoe&#8217; or any product that was $100, we can write:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar results = store.query([{\\r\\n\\t\\tprice: 100\\r\\n\\t}, {\\r\\n\\t\\tname: 'shoe'\\r\\n\\t}]);\\r\\n</pre>\\n<h2>Indexing</h2>\\n<p>Proper indexing is critical for maintaining good performance as databases scale. Local store implementations index all defined properties by default, ensuring that most queries can be executed reasonably quickly. When a query is executed, the SQL store will translate it to a SQL query which uses the indices, and the IndexedDB store will use one of the indices to find the objects. However, we may want to provide further optimization of the index usage. We can specify a preference on the indexed usage of each property to help guide the IndexedDB store towards which index to give highest priority. For example, we may want to give higher priority to the &#8216;name&#8217; index than the &#8216;price&#8217; index, if we expect more unique values from the former property values than the latter property values. We can configure these preferences by setting the <code>preference</code> values in the database configuration schema.</p>\\n<p>We may also want to disable indexing on some properties. For example, if we don&#8217;t anticipate filtering on a particular property, we probably don&#8217;t want to index it. It is also generally advisable to avoid indexing boolean values (IndexedDB doesn&#8217;t actually support querying by boolean values). We can turn off indexing by setting the indexed property to false. However, it is important that the schema include all properties that could be filtered on, even if they aren&#8217;t indexed, to ensure that the proper SQL table columns are created on WebSQL databases. We can now update our database configuration with our index preferences. Note that any time we change the database configuration, we also need to update the database version number:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\tvar dbConfig = {\\r\\n\\t\\tversion: 2, // we increment this for every update\\r\\n\\t\\tstores: {\\r\\n\\t\\t\\tproduct: {\\r\\n\\t\\t\\t\\tname: {\\r\\n\\t\\t\\t\\t\\tpreference: 10\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tprice: {\\r\\n\\t\\t\\t\\t\\tpreference: 5\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tinStock: {\\r\\n\\t\\t\\t\\t\\tindexed: false\\r\\n\\t\\t\\t\\t}\\r\\n</pre>\\n<h3>Indexing Arrays</h3>\\n<p>It is possible to store arrays in property values, and search on these arrays. We can configure a schema to index each item in an array by setting <code>multiEntry: true</code>. Unfortunately, despite the IndexedDB specification including <code>multiEntry</code>, Internet Explorer does not support this feature (as of IE 11). On other browsers, however, you can use multiEntry, and then set the filter&#8217;s <code>contains</code> property to search for objects with an array containing those items:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar results = store.query({\\r\\n\\t\\ttags: {\\r\\n\\t\\t\\tcontains: ['fun']\\r\\n\\t\\t}\\r\\n\\t});\\r\\n</pre>\\n<p>In future versions, we hope to shim this capability for Internet Explorer.</p>\\n<h2>Additional Store Wrappers</h2>\\n<p>In addition to the local database stores, we have added two more store wrappers as part of the 1.10 release that can provide helpful extra functionality, particularly in combination with the local database stores.</p>\\n<h3>Transaction Store Wrapper</h3>\\n<p>The <code>dojox/store/transaction</code> store wrapper provides support for storing multiple operations in a transaction log, and eventually sending these to a server in a single commit. The transaction store extends the <code>dojo/store/Cache</code>, and takes a single options arguments where we can define the three stores to compose its functionality:</p>\\n<ul>\\n<li>Master store &#8211; This store is the canonical source of data. Any uncached data is retrieved from the master store, and committed operations are ultimately sent here. This should be assigned to the <code>masterStore</code> property of the single options argument to the transaction store function. This is typically a <code>JsonRest</code> store or something similar, that can retrieve and deliver data to the server.</li>\\n<li>Caching store &#8211; Any new, updated, or removed data is stored in the caching store, so that data can be accessed before it is committed to the master store. This should be assigned to the <code>cachingStore</code> property of the options argument. This is typically a LocalDB or a Memory store that will be storing the data locally.</li>\\n<li>Transaction log store &#8211; This store records a log of the operations that are part of the current transaction. This will default to a <code>Memory</code> store but may be any client-side store. For example, local database stores might be used to persist operations while offline so they can be sent to the server later when connectivity is restored. This can be set in the <code>transactionLogStore</code> property of the options argument to the transaction store function. If you are using LocalDB stores, you would most likely want to use the LocalDB stores for both the caching store and the log store.</li>\\n</ul>\\n<p>As an example, you can create a transaction store and start and commit a transaction like:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nrequire([\\r\\n\\t'dojox/store/transaction',\\r\\n\\t'dojox/store/LocalDB',\\r\\n\\t'dojo/store/JsonRest'],\\r\\nfunction(transaction, LocalDB, JsonRest){\\r\\n\\tvar masterProducts = new JsonRest({\\r\\n\\t\\ttarget: '/path/products/on/server'\\r\\n\\t});\\r\\n\\tvar localProducts = new LocalDB({\\r\\n\\t\\tdbConfig: dbConfig,\\r\\n\\t\\tstoreName: 'products'\\r\\n\\t});\\r\\n\\tvar transactionLogStore = new LocalDB({\\r\\n\\t\\tdbConfig: dbConfig,\\r\\n\\t\\tstoreName: 'transaction-log'\\r\\n\\t});\\r\\n\\tvar transactionalProductStore = transaction({\\r\\n\\t\\tmasterStore: masterProducts,\\r\\n\\t\\tcachingStore: localProducts,\\r\\n\\t\\ttransactionLogStore: transactionLogStore\\r\\n\\t});\\r\\n\\tvar transaction = transactionalProductStore.transaction();\\r\\n\\ttransactionalProductStore.put(someUpdatedProduct);\\r\\n\\t... other operations ...\\r\\n\\ttransaction.commit();\\r\\n</pre>\\n<p>When you call <code>commit()</code>, the list of operations within the transaction are sent to the master store. By default the master store will execute the operations one-by-one, which may result in a series of requests to the server. If you wish to send data to the server in a single bulk operation, you may want to override the <code>commit()</code> method and define a mechanism to send a set of operations in a single request.</p>\\n<h3>Priority Store Wrapper</h3>\\n<p>The <code>dojox/store/priority</code> wrapper allows you to prioritize different store operations. Each store can have a default priority (set in the <code>priority</code> property), and individual operations can set a <code>priority</code> in the options argument (the second argument on each method). If multiple operations are concurrently executing, higher priority operations are executed next. This can be useful when background synchronization operations should be lower priority than user interface requests that require immediate response. The priority also defines the maximum number of operations that can execute concurrently. We can define a prioritized store by passing any asynchronous store to the wrapper:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nvar prioritizedStore = priority(originalStore);\\r\\n</pre>\\n<p>Then, for example, we could execute a <code>put</code> operation:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nprioritizedStore.put(someObject, {priority: 2});\\r\\n</pre>\\n<p>By setting a priority of 2, we are indicating that this operation should go in the queue and be executed once there are 2 or less other operations executing. Note, that the priority store wrapper only works with asynchronous stores (synchronously stores execute all operations sequentially, so prioritizing wouldn&#8217;t be meaningful).</p>\\n<h2>Conclusion</h2>\\n<p>Together these store wrappers and implementations pave the way for building client-side applications with large local storage needs, while maintaining the same fast and sophisticated querying capabilities that we have learned to expect from the server. These storage capabilities are available through the convenient Dojo object store interface and can even be used with transaction logging and prioritization wrappers.</p>\\n<h2>Learning more</h2>\\n<p>We cover object stores and custom object store creation in depth in our <a href=\\\"https://www.sitepen.com/services/\\\">Dojo workshops</a> offered throughout the US, Canada, and Europe, or at your location. We also provide expert <a href=\\\"https://www.sitepen.com/services/\\\">JavaScript and Dojo support</a> and <a href=\\\"https://www.sitepen.com/services/\\\">development</a> services, to help you get the most from JavaScript, Dojo, and managing data efficiently within your application. If you&#8217;d like more information about having SitePen assist your organization with managing data efficiently with JavaScript, please <a href=\\\"https://www.sitepen.com/contact/\\\">contact us</a> to discuss how we can help.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Modern browsers have powerful new database capabilities that enable applications to store data locally, and perform advanced indexed queries without a network connection. Applications can be built with offline support without any disruption to data interaction, including searching. However, these database capabilities have traditionally been difficult to use across browsers since Safari only supports WebSQL [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":17899,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[45,54,6],\"tags\":[59],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Local Database Stores | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Modern browsers have powerful new database capabilities that enable applications to store data locally, and perform advanced indexed queries without a network connection. Applications can be built with offline support without any disruption to data interaction, including searching. However, these database capabilities have\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/local-database-stores/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Local Database Stores | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Modern browsers have powerful new database capabilities that enable applications to store data locally, and perform advanced indexed queries without a network connection. Applications can be built with offline support without any disruption to data interaction, including searching. However, these database capabilities have\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/local-database-stores/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2014-06-17T17:57:38+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-08-01T15:10:59+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/local-database-stores/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/local-database-stores/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/local-database-stores/\\\",\\\"name\\\":\\\"Local Database Stores | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/local-database-stores/#primaryimage\\\"},\\\"datePublished\\\":\\\"2014-06-17T17:57:38+00:00\\\",\\\"dateModified\\\":\\\"2020-08-01T15:10:59+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"description\\\":\\\"Modern browsers have powerful new database capabilities that enable applications to store data locally, and perform advanced indexed queries without a network connection. Applications can be built with offline support without any disruption to data interaction, including searching. However, these database capabilities have\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/local-database-stores/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/8079\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=8079\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/8079/revisions\"}],\"predecessor-version\":[{\"id\":26350,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/8079/revisions/26350\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17899\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=8079\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=8079\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=8079\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=8079\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:31:51 GMT"],["expires","Wed, 09 Sep 2020 15:31:51 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}