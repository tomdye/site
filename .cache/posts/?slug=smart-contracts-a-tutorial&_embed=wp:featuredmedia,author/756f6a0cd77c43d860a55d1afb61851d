{"value":{"body":"[{\"id\":26246,\"date\":\"2020-06-17T10:26:46\",\"date_gmt\":\"2020-06-17T17:26:46\",\"guid\":{\"rendered\":\"https://www.sitepen.com/?p=24236\"},\"modified\":\"2020-07-08T04:44:06\",\"modified_gmt\":\"2020-07-08T11:44:06\",\"slug\":\"smart-contracts-a-tutorial\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/\",\"title\":{\"rendered\":\"Smart Contracts: A Tutorial\"},\"content\":{\"rendered\":\"\\n<h2><strong>Introduction</strong></h2>\\n\\n\\n\\n<p>Now that we&#8217;ve <a href=\\\"https://www.sitepen.com/blog/demystifying-smart-contracts/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">demystified smart contracts</a> and better understand what they are and how they work, let&#8217;s build our own contract on top of the Ethereum blockchain. Because smart contracts are computer programs at their core, many of the concepts that we&#8217;ll use to build a basic contract will seem familiar. Major advancements in developer tooling and infrastructure in the Ethereum ecosystem allow us to effectively develop a smart contract completely in-browser, so let&#8217;s get started.</p>\\n\\n\\n\\n<h2><strong>Remixing Solidity</strong></h2>\\n\\n\\n\\n<p>The Ethereum Virtual Machine is a combination of a lightweight operating system and a state machine, purpose-built to understand and to execute Ethereum smart contracts. This virtual machine, commonly known as the &#8220;EVM&#8221;, is shipped with and embedded into every Ethereum node that makes up its network. An Ethereum smart contract program is a series of machine-level instructions that are understood by the EVM.</p>\\n\\n\\n\\n<p><a href=\\\"https://solidity.readthedocs.io/en/v0.6.6/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Solidity</a> is a high-level, formal programming language that&#8217;s used to author Ethereum smart contracts. The EVM does not organically understand Solidity code; rather, Solidity ships with its own compiler that translates human-readable Solidity source code into low-level EVM-compatible bytecode. Solidity is a Turing-complete language that was inspired in both syntax and semantics by the likes of C++, Python, and JavaScript. It is object-oriented and exposes an expressive static typing system, and it holds true to foundational object-oriented concepts like encapsulation, inheritance, and polymorphism. The fact that Solidity supports inheritance has given rise to a rich ecosystem of contract utility libraries, base contracts designed for extension, and other modular functionality to aid contract creation.</p>\\n\\n\\n\\n<p><a href=\\\"https://remix.ethereum.org/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Remix</a> is a web-based development environment for creating smart contracts. It offers the ability to quickly prototype Solidity-based smart contracts without the need to set up any local tooling, and it mitigates the need to use real ETH to deploy and test smart contract functionality. <strong>To get started, follow the steps below to open Remix and to create a new contract file.</strong></p>\\n\\n\\n\\n<ol><li>Visit remix.ethereum.org.</li><li>Choose the Solidity environment.</li><li>Create a new file named <code>CellSubscription.sol</code>.</li></ol>\\n\\n\\n\\n<h2><strong>A tutorial: A cell phone contract</strong></h2>\\n\\n\\n\\n<p>The semantics and intricacies of decentralized programming languages become much clearer in practice, so let&#8217;s use Solidity to build a basic Ethereum smart contract. Our contract will be very rudimentary and will codify the protocol of a very simple cell phone contract between a cell company and a subscriber.</p>\\n\\n\\n\\n<h3><strong>1. Create a contract class</strong></h3>\\n\\n\\n\\n<p>The first step in codifying our theorized cell phone contract is to define the contract itself.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-javascript\\\">pragma solidity >=0.4.22 <0.7.0;\\n\\ncontract CellSubscription {\\n\\n}</code></pre>\\n\\n\\n\\n<p>In Solidity, a <code>contract</code> is a first-class language citizen that's a similar construct to a traditional class: it contains a collection of functions and a notion of inner state. In the code above, we also specify that the source code to follow is compatible with a Solidity version greater than <code>0.5.10</code>.</p>\\n\\n\\n\\n<h3><strong>2. Set up internal state</strong></h3>\\n\\n\\n\\n<p>Now that we've defined the structure of the contract itself, let's start by adding a <code>constructor</code> function. Similar to traditional programs, Solidity contract constructors are only called immediately after contract deployment and cannot be called again thereafter.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-javascript\\\">pragma solidity >=0.4.22 <0.7.0;\\n\\ncontract CellSubscription {\\n\\tuint256 monthlyCost;\\n\\n    constructor(uint256 cost) public {\\n        monthlyCost = cost;\\n    }\\n}</code></pre>\\n\\n\\n\\n<p>A lot of new syntax was just introduced very quickly, so let's break down the code above statement-by-statement. First, we declare a <code>monthlyCost</code> member variable on the contract itself with a <code>uint256</code> type, meaning this is an unsigned integer up to 256 bits in size. We'll use this monthly cost variable later when determining if the cell subscriber has paid their contract in full. Next, we define a constructor function and set its visibility to <code>public</code> using a function visibility modifier. Functions and member variables can assume four different visibilities in Solidity: <code>public</code>, <code>private</code>, <code>internal</code>, and <code>external</code>. Both public and private members behave as their name implies; internal members are similar to <code>protected</code> members in TypeScript and can only be called from the current inheritance tree, and <code>external</code> is its converse. Lastly, we initialize the <code>monthlyCost</code> member variable with the monthly <code>cost</code> argument passed into the constructor.</p>\\n\\n\\n\\n<h3><strong>3. Add subscriber functionality</strong></h3>\\n\\n\\n\\n<p>So far, we've defined an initial contract structure and initialized internal contract state. Let's consider the actual subscription logic that we're attempting to build. For the sake of simplicity, the functionality of this \\\"cell phone subscription\\\" will be straight forward: the subscriber pays a monthly fee in ether to the contract, and the cell phone company can check if the account is paid in full. Letâ€™s codify the subscriber logic pahs now, i.e. the ability to make a monthly payment to the contract.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-javascript\\\">pragma solidity >=0.4.22 <0.7.0;\\n\\ncontract CellSubscription {\\n\\tuint256 monthlyCost;\\n\\n    constructor(uint256 cost) public {\\n        monthlyCost = cost;\\n    }\\n\\n    function makePayment() payable public {\\n\\n    }\\n}</code></pre>\\n\\n\\n\\n<p>Ethereum smart contracts act as wallets by default, meaning they can send, receive, and store ether just like a regular wallet address. This built-in notion of contracts holding value makes them particularly useful for a monetary-based agreement like this one. In the code above, we define a new public <code>makePayment</code> function that allows the subscriber to make a payment towards their account. The <code>payable</code> function modifier tells the contract to automatically store any ETH internally that's sent when calling the <code>makePayment</code> function, which we'll use later to determine if the subscriber has paid enough ether as of a given date. Notice how the function doesn't have a body at all; the storing of sent ether is automatic when the <code>payable</code> modifier is present. If desired, complex validation logic could be added to the function body, e.g. to reject partial payment.</p>\\n\\n\\n\\n<h3><strong>4. Add company functionality</strong></h3>\\n\\n\\n\\n<p>At this point, we have a contract that can be deployed with an established monthly cost and accept ether bill payments from a subscriber. Next, we need to add functionality that allows the cell phone company to check the status of the account on a given date.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-javascript\\\">pragma solidity >=0.4.22 <0.7.0;\\n\\ncontract CellSubscription {\\n\\tuint256 monthlyCost;\\n\\n    constructor(uint256 cost) public {\\n        monthlyCost = cost;\\n    }\\n\\n    function makePayment() payable public {\\n    \\n    }\\n\\n    function isBalanceCurrent(uint256 monthsElapsed) public view returns (bool) {\\n        return monthlyCost * monthsElapsed >= address(this).balance;\\n    }\\n}</code></pre>\\n\\n\\n\\n<p>We define another public function called <code>isBalanceCurrent</code> that accepts a <code>monthsElapsed</code> parameter typed as an unsigned integer. The cell phone company can call this simplified function and pass a given number of elapsed months to determine the status of the subscriber's account at a point in time. The <code>view</code> function modifier is used to indicate that this function does not modify internal state and is read only. The <code>returns (bool)</code> clause does what it implies and indicates that a truthy or falsey value will be returned. Within the function body itself, we do simple arithmetic logic to determine the total amount that should've been paid, and we compare that to the internal ether balance of the contract using <code>address(this).balance</code>. Just like in other languages, <code>this</code> refers to the current contract instance being executed. The <code>address(...)</code> statement is a global function that accepts a contract instance and returns an address instance, so <code>address(this)</code> is shorthand for accessing the instance of the current address. Lastly, all contract addresses instances in Solidity also expose a <code>balance</code> instance variable that refers to the amount of ether currently stored internally. This means that in the function body above, if the account has enough ether based on the number of months that have elapsed, it will return <code>true</code>, otherwise it will return <code>false</code>.</p>\\n\\n\\n\\n<p>We're still missing one crucial piece of company-related functionality: the ability to withdraw funds from the contract so they can be transferred to the company's own accounts. Thankfully, Solidity exposes more convenience semantics for withdrawing value from a contract account.</p>\\n\\n\\n\\n<pre class=\\\"wp-block-prismatic-blocks\\\"><code class=\\\"language-javascript\\\">pragma solidity >=0.4.22 <0.7.0;\\n\\ncontract CellSubscription {\\n\\tuint256 monthlyCost;\\n\\n    constructor(uint256 cost) public {\\n        monthlyCost = cost;\\n    }\\n\\n    function makePayment() payable public {\\n    \\n    }\\n\\n    function withdrawBalance() public {\\n        msg.sender.transfer(address(this).balance);\\n    }\\n\\n    function isBalanceCurrent(uint256 monthsElapsed) public view returns (bool) {\\n        return monthlyCost * monthsElapsed == address(this).balance;\\n    }\\n}</code></pre>\\n\\n\\n\\n<p>We add a final public function called <code>withdrawBalance</code> that allows an account to be emptied. The function body uses the global <code>msg</code> object that refers to the last incoming transaction payload. In this insecure and basic example, the entire account balance is transferred to the caller of <code>withdrawBalance</code> using <code>msg.sender.transfer</code> function that sends ether to the sender's account. We again use <code>address(this).balance</code> to access the internal ether stored, using this as the amount we wish to withdraw.</p>\\n\\n\\n\\n<h3><strong>5. Compile and run</strong></h3>\\n\\n\\n\\n<p>Now that we have a smart contract that can be deployed to the Ethereum blockchain, let's use Solidity's built-in virtual machine to simulate running this contract on the main Ethereum network.</p>\\n\\n\\n\\n<ol><li>Save your contract using <code><strong>âŒ˜ </strong>+ S</code> or <code>Ctrl + S</code> depending on your operating system.</li><li>Switch to the deployment tab.<br><img src=\\\"https://lh3.googleusercontent.com/CpGh3rvLhcrZVmnIwRavHCs9nML4IH2eu8BnEXCEYsBII3QWTvWy04E-Xj6fvLcwdewbAAziG9tM6UwWfVZeOCZUYE-18YjnlXFd9yWtmUBdfK4B0R6zfJ6-5ntOLqhjxjIWF0x_\\\" width=\\\"335\\\" height=\\\"105\\\"></li><li>Define a monthly cost to be passed to the constructor and click to deploy.<br><img src=\\\"https://lh4.googleusercontent.com/pfwXLGyzzu35VqFP3EF8jL6hmTcFlTR5aFkJkMS7_0J-MXX3vZpp1l31-aheZb-O0QP7gwKXQGfryK2JuMpAgdUAUX8oMf6DrL5-i5QCi0Y1UxbozIHCNTpJBojhYq0o95TuV_8L\\\" width=\\\"335\\\" height=\\\"105\\\"></li><li>Configure a simulated ETH value of <code>1000</code> wei, and call the <code>makePayment</code> function. This simulates a subscriber making their payment for a given month.<br><img src=\\\"https://lh4.googleusercontent.com/NdPkPoInqxXqaLgIRT-l7ioZI1VYF8ss00v18G08AFaoLip08QwdLS98gyIZdZ_RrwE6DERkXzBOuRZnHgyTSHy1aBr-tIddp7nF36FXrYjcHpYAFTDr47GDomwgqFmWOcfalSeH\\\" width=\\\"338\\\" height=\\\"106\\\"><br><img src=\\\"https://lh3.googleusercontent.com/C1102jb8BxVvF4n1ZXqqktlMvP8yzwp1RmqBc_KklRd19QA8NF9P1sBTrx2AUciyt55yvhIwTioyFLEmlTVmNySLIbGdRpScMZKbtCAdwXz9_sKHdGr8ux9OrrBDC2_SXIXPdI8S\\\" width=\\\"337\\\" height=\\\"106\\\"></li><li>Finally, call the <code>isBalanceCurrent</code> function with a 1 as the <code>monthsElapsed</code> parameter, meaning we're checking the balance is current after one month has passed. You should see <code>0: bool: true</code>, indicating that the account balance is in fact current.<img src=\\\"https://lh4.googleusercontent.com/sKbgnUtuyOFvwU8r4D_5CTirdkiagXhNsfBYDLVEPkgCP4s9mWMhkTAVNTiZu_ya8RTB9GTw99jzralJlttIpopJXnMM51waljxiZmOSy_ZjFFQrjvD1VZ-75GyMNWiRoJYGdxui\\\" width=\\\"333\\\" height=\\\"104\\\"></li></ol>\\n\\n\\n\\n<p>That's it! While it may not seem like much, you've now written a rudimentary Ethereum smart contract that can be initialized with state, that holds, receives, and distributes monetary value, and that exposes the ability to determine financial account standing. While none of these concepts were implemented with security or completeness necessary for production use, they demonstrate key functionality that give Ethereum smart contracts their power.</p>\\n\\n\\n\\n<h2><strong>Real-world considerations</strong></h2>\\n\\n\\n\\n<p>The tutorial above is useful for introducing Solidity concepts and showing them in action, but developing and deploying real-world smart contracts meant to be used in high-value business exchanges requires careful planning and consideration.</p>\\n\\n\\n\\n<p>The basic cell phone subscription contract we codified is inherently insecure and could be greatly improved. For example, funds withdrawal should be restricted to a set of pre-approved <code>sender</code> addresses to prevent arbitrary users from emptying an account. As it stands now, anyone could call <code>withdrawBalance</code> and receive all ETH stored in the contract. Further, the <code>makePayment</code> function could be augmented to validate the received payment to prevent overpayment or underpayment, and the sender could be verified to be from a known account, if desired.</p>\\n\\n\\n\\n<p>While the Remix development environment is great for prototyping Smart contracts and testing Solidity correctness, most real-world smart contracts would be developed locally using more complex build tooling such as <a href=\\\"https://www.trufflesuite.com/\\\" target=\\\"_blank\\\" rel=\\\"noreferrer noopener\\\">Truffle</a>. Perhaps most importantly, <strong>it costs real money in the form of ether to interact with smart contracts deployed on the main Ethereum network</strong>. This is by design, and forms the cornerstone of Ethereum's economic self-sufficiency: it costs money to do anything on the live Ethereum network. Thankfully, Remix bypasses this initial complication by spinning up an in-browser, JavaScript-based EVM that mimics the behavior of the real network EVM. In practice, smart contracts would be deployed using Node.js-powered CLI tooling through a framework like Truffle, and both deploying contracts and calling functions on them would require an Ethereum account funded with real ether.</p>\\n\\n\\n\\n<h2><strong>Conclusion</strong></h2>\\n\\n\\n\\n<p>The practice of authoring smart contracts requires both programmatic knowledge of Solidity semantics and knowledge of the tooling surrounding both Solidity and Ethereum in general. The level to which concepts are abstracted and the overall Ethereum developer experience have both improved in recent years, and it continues to do so at a rapid pace. Ethereum has established itself as a mature smart contract platform with an impressive feature set and strong community backing. The question of whether businesses have both an appetite and a true need for such automated contracts remains to be seen.<br><br>Feel free to <a href=\\\"https://www.sitepen.com/contact/\\\">reach out</a> for more information about how SitePen can help you with your app development project.&nbsp;</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Introduction Now that we&#8217;ve demystified smart contracts and better understand what they are and how they work, let&#8217;s build our own contract on top of the Ethereum blockchain. Because smart contracts are computer programs at their core, many of the concepts that we&#8217;ll use to build a basic contract will seem familiar. Major advancements in [&hellip;]</p>\\n\",\"protected\":false},\"author\":46,\"featured_media\":26236,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[518,515,516,517,519],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-â€“-tutorial-â€“-smart-contracts@2x.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>How to Make a Smart Contract with Ethereum (Tutorial) | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"How to use Solidity to author Ethereum smart contracts. Set contract class, internal state, subscriber functionality, company functionality etc.\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"How to Make a Smart Contract with Ethereum (Tutorial) | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"How to use Solidity to author Ethereum smart contracts. Set contract class, internal state, subscriber functionality, company functionality etc.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2020-06-17T17:26:46+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-07-08T11:44:06+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-â€“-tutorial-â€“-smart-contracts@2x.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"2400\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"1200\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-\\\\u2013-tutorial-\\\\u2013-smart-contracts@2x.png\\\",\\\"width\\\":2400,\\\"height\\\":1200},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/\\\",\\\"name\\\":\\\"How to Make a Smart Contract with Ethereum (Tutorial) | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/#primaryimage\\\"},\\\"datePublished\\\":\\\"2020-06-17T17:26:46+00:00\\\",\\\"dateModified\\\":\\\"2020-07-08T11:44:06+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7a3e92a258cea881b49680a18b593d71\\\"},\\\"description\\\":\\\"How to use Solidity to author Ethereum smart contracts. Set contract class, internal state, subscriber functionality, company functionality etc.\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/smart-contracts-a-tutorial/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7a3e92a258cea881b49680a18b593d71\\\",\\\"name\\\":\\\"Paul Bouchon\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Paul Bouchon\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26246\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/46\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=26246\"}],\"version-history\":[{\"count\":4,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26246/revisions\"}],\"predecessor-version\":[{\"id\":26260,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/26246/revisions/26260\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/26236\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=26246\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=26246\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=26246\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=26246\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":46,\"name\":\"Paul Bouchon\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/pbouchon/\",\"slug\":\"pbouchon\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Paul Bouchon, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Paul Bouchon, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/pbouchon/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/pbouchon/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/pbouchon/\\\",\\\"name\\\":\\\"Paul Bouchon, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/7a3e92a258cea881b49680a18b593d71\\\",\\\"name\\\":\\\"Paul Bouchon\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/89cb35910e3b9fed1219d3669a454387?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Paul Bouchon\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/pbouchon/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/46\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":26236,\"date\":\"2020-06-16T13:52:54\",\"slug\":\"blog-tutorial-smart-contracts2x-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog-tutorial-smart-contracts2x-2/\",\"title\":{\"rendered\":\"blog â€“ tutorial â€“ smart contracts@2x\"},\"author\":103,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>blog â€“ tutorial â€“ smart contracts@2x | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"blog â€“ tutorial â€“ smart contracts@2x | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-â€“-tutorial-â€“-smart-contracts@2x.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-â€“-tutorial-â€“-smart-contracts@2x.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"2400\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"1200\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-\\\\u2013-tutorial-\\\\u2013-smart-contracts@2x.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-\\\\u2013-tutorial-\\\\u2013-smart-contracts@2x.png\\\",\\\"name\\\":\\\"blog \\\\u2013 tutorial \\\\u2013 smart contracts@2x | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-06-16T20:52:54+00:00\\\",\\\"dateModified\\\":\\\"2020-06-16T20:52:54+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-\\\\u2013-tutorial-\\\\u2013-smart-contracts@2x.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":2400,\"height\":1200,\"file\":\"2020/06/blog-â€“-tutorial-â€“-smart-contracts@2x.png\",\"sizes\":{},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/06/blog-â€“-tutorial-â€“-smart-contracts@2x.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/26236\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/103\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b0195d85a4e06e9-LHR"],["cf-request-id","03d4dbfb37000006e936890200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:08:08 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=dcadbf4a632bf5ce5c649cd49662e8e181594292888; expires=Sat, 08-Aug-20 11:08:08 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}