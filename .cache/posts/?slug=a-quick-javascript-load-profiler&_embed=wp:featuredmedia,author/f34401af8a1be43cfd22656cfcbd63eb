{"value":{"body":"[{\"id\":413,\"date\":\"2008-07-01T13:02:31\",\"date_gmt\":\"2008-07-01T20:02:31\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2008/07/01/a-quick-javascript-load-profiler/\"},\"modified\":\"2008-07-01T13:02:31\",\"modified_gmt\":\"2008-07-01T20:02:31\",\"slug\":\"a-quick-javascript-load-profiler\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/a-quick-javascript-load-profiler/\",\"title\":{\"rendered\":\"A Quick JavaScript Load Profiler\"},\"content\":{\"rendered\":\"<p>I was doing some research on script loading speed tests. Each script load required the page to be refreshed, making it difficult to log the time to Firebug and get an average. It was certainly too much trouble to write some PHP scripts and connect to a database; and possibly even worse would be having to pull out a pencil and paper and write the times down. I&#8217;m not even sure I have a pencil.</p>\\n<p>The obvious solution was to write the data to a cookie. I also thought the solution was universal enough to blog about so others could use it too.</p>\\n<p><!--more--></p>\\n<p>The first thing we need is a timer. Firebug has a timer, but it doesn&#8217;t return the results so that they can be saved. The timer will be a singleton since we will only need one instance holding all of the data, and it will be a global object so we can access it anywhere. The code is quite simple:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndojo.provide(&quot;mikespace.timer&quot;);\\ntimer = {\\n\\t_map:{},\\n\\tstart: function(msg){\\n\\t\\tthis._map[msg] = new Date().getTime();\\n\\t},\\n\\tend:   function(msg){\\n\\t\\tthis._map[msg] = new Date().getTime() - this._map[msg];\\n\\t\\treturn this._map[msg];\\n\\t},\\n\\tshow: function(msg){\\n\\t\\tconsole.log( &quot;---------&gt; &quot; + msg + &quot;: &quot; + this._map[msg]);\\t\\n\\t}\\n};\\n// usage:\\n// timer.start(&quot;first test&quot;);\\n// var time = timer.end(&quot;first test);\\n</pre>\\n<p>This code is in a directory (or package) named <em>mikespace</em>. As you can see, the times are set and retrieved based on the label parameter, and stored in a hash map. There&#8217;s also a <em>show()</em> method &#8211; although I&#8217;m not going to use it here, I use this often. When conducting speed tests in an application, the timers are usually sprinkled everywhere throughout the code and show in various places in the log messages. By just calling <em>timer.end()</em> I store the time, and after all of the tests have been run, I call <em>timer.show(msg)</em> for each test, and log them all in one place.</p>\\n<p>Next we need our cookie aggregator. This too could be a singleton, but after considering that there could be multiple tests in a page, I decided to make it a PODO (Plain Old Dojo Object). Here is the full code for <em>cookieData</em>, and I&#8217;ll explain after:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndojo.provide(\\\"mikespace.cookieData\\\");\\ndojo.require(\\\"dojo.cookie\\\");\\n\\t\\ndojo.declare(\\\"mikespace.cookieData\\\", null, {\\n\\tcookieName:\\\"scriptTests\\\",\\n\\texpires:1,\\n\\ttestData:[],\\n\\tconstructor: function(args){\\n\\t\\tfor (var nm in args){\\n\\t\\t\\tthis[nm] = args[nm];\\t\\n\\t\\t}\\n\\t},\\n\\tloadData: function(){\\n\\t\\tthis.cookie = dojo.cookie(this.cookieName);\\n\\t\\tif(this.cookie){\\n\\t\\t\\tthis.testData = dojo.fromJson(dojo.cookie(this.cookieName));\\n\\t\\t}\\n\\t},\\n\\tgetData: function(){\\n\\t\\treturn this.testData;\\n\\t},\\n\\tshowData: function(){\\n\\t\\tconsole.log(\\\"Test Name:\\\", this.cookieName);\\n\\t\\t\\n\\t\\tvar data = this.getData();\\n\\t\\tvar avr = 0;\\n\\t\\tvar amt = 0;\\n\\t\\tdojo.forEach(data, function(d, i){\\n\\t\\t\\tconsole.log(i, \\\"test:\\\", d);\\n\\t\\t\\tavr+=d;\\n\\t\\t\\tamt++;\\n\\t\\t});\\n\\t\\t\\n\\t\\tconsole.log(\\\"Average:\\\", Math.ceil(avr/amt));\\n\\t},\\n\\tsaveData: function(data){\\n\\t\\tthis.testData.push(data);\\n\\t\\t dojo.cookie(\\n\\t\\t\\tthis.cookieName, \\n\\t\\t\\tdojo.toJson(this.testData),\\n\\t\\t\\t{ expires: this.expires }\\n\\t\\t);\\n\\t},\\n\\tclearData: function(){\\n\\t\\tdojo.cookie(\\n\\t\\t\\tthis.cookieName, \\n\\t\\t\\tdojo.toJson([]), \\n\\t\\t\\t{ expires: this.expires }\\n\\t\\t);\\n\\t},\\n\\tdeleteCookie: function(){\\n\\t\\tdojo.cookie(this.cookieName, null, { expires: -1 });\\n\\t}\\n});\\n</pre>\\n<p>I&#8217;m utilizing <em>dojo.cookie</em>, so it is required. I declare <em>mikespace.cookieData</em>, and I&#8217;m not extending anything (like <em>dijit._Widget</em>), so the second parameter is null. Because I&#8217;m not using <em>dijit._Widget</em>, I&#8217;m mixing in the arguments object myself in the constructor. I then instantiate a few variables. <em>expires</em> is set to one day, which could be left as-is if you don&#8217;t want to leave the cookie hanging around on your system when your done. Or set it to an arbitrarily large number and use the <em>deleteCookie()</em> method.</p>\\n<p>The rest of the code should be quite easy to understand. in <em>loadData()</em> we check if the cookie exists, and if not, we create one with new data. In <em>showData()</em> I log each test and number it, so I can easily see how many tests I&#8217;ve run, and then I show the average. The <em>showData()</em> method could obviously be any kind of code, including parsing tests within tests. And semantically, it probably should be outside of this <em>cookieData</em>; if we wanted to just use it as a getter and setter and then create another object for displaying the results.</p>\\n<p>Now we&#8217;ll create our HTML page where we will run the tests. After including the Dojo script tag, and the <em>djConfig</em>, I register the <em>mikespace</em> namespace, and then require the files:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndojo.registerModulePath(\\\"mikespace\\\", \\\"../../tests/mikespace\\\");\\ndojo.require(\\\"mikespace.timer\\\");\\ndojo.require(\\\"mikespace.cookieData\\\");\\n</pre>\\n<p>Now we&#8217;ll build our test. The test I&#8217;m conducting is how long it takes to load a script, and I chose <em>dojox.data.jsonPathStore</em>, because it&#8217;s nice and big and has a few dependencies. I modified the script to call the end of the test, after it loaded it&#8217;s dependent scripts:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\n...\\ndojo.require(\\\"dojo.date.stamp\\\");\\n\\nif(window.endTest){\\n\\twindow.endTest();\\n}\\n...\\n</pre>\\n<p>And our test functions:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nstartTest = function(){\\n\\ttimer.start(\\\"script loaded\\\");\\n}\\n\\t\\nendTest = function(){\\n\\tvar time = timer.end(\\\"script loaded\\\");\\n\\tvar testName = \\\"dojox.data.jsonPathStore Load\\\";\\n\\t\\t\\n\\tvar c = new mikespace.cookieData({cookieName:testName});\\n\\t//c.clearData();\\n\\tc.loadData();\\n\\tc.saveData(time);\\n\\tc.showData();\\n}\\n</pre>\\n<p>When <em>endTest()</em> is called, the <em>cookieData</em> object is created and the test data is saved and logged. Since the timer has already ended, the amount of time it takes to create this object is not factored into the results. If I want to start the test over, I uncomment <em>c.cleardata()</em> and refresh the page.</p>\\n<p>Finally, to launch our test, start the timer and load the script:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nstartTest();\\n\\t\\ndojo.require(\\\"dojox.data.jsonPathStore\\\");\\n</pre>\\n<p>Refresh the page ten times and you have a legitimate average of how long it takes to load the script.</p>\\n<p><img src='https://wp.sitepen.com/wp-content/uploads/2008/07/cookietestdataresults.png' alt='cookietestdataresults.png' /></p>\\n<p>And there you have a quick and dirty method for logging tests that involve page refreshes. This example could be taken even farther, enclosing the <em>startTest()</em> and <em>endTest()</em> in its own PODO which requires the timer and <em>cookieData</em>. Then it&#8217;s a simple matter of dropping in the one require to conduct some quick tests.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>I was doing some research on script loading speed tests. Each script load required the page to be refreshed, making it difficult to log the time to Firebug and get an average. It was certainly too much trouble to write some PHP scripts and connect to a database; and possibly even worse would be having [&hellip;]</p>\\n\",\"protected\":false},\"author\":21,\"featured_media\":17540,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[46,45,6],\"tags\":[56,139,140,141],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>A Quick JavaScript Load Profiler | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/a-quick-javascript-load-profiler/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"A Quick JavaScript Load Profiler | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"I was doing some research on script loading speed tests. Each script load required the page to be refreshed, making it difficult to log the time to Firebug and get an average. It was certainly too much trouble to write some PHP scripts and connect to a database; and possibly even worse would be having [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/a-quick-javascript-load-profiler/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2008-07-01T20:02:31+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-quick-javascript-load-profiler/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-quick-javascript-load-profiler/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/a-quick-javascript-load-profiler/\\\",\\\"name\\\":\\\"A Quick JavaScript Load Profiler | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/a-quick-javascript-load-profiler/#primaryimage\\\"},\\\"datePublished\\\":\\\"2008-07-01T20:02:31+00:00\\\",\\\"dateModified\\\":\\\"2008-07-01T20:02:31+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/b17a4b78bc644814f33f687fe684bb19\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/a-quick-javascript-load-profiler/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/b17a4b78bc644814f33f687fe684bb19\\\",\\\"name\\\":\\\"Mike Wilcox\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/a3d37a7b01b791e438645e5f7cd99d0e?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Mike Wilcox\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/413\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/21\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=413\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/413/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17540\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=413\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=413\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=413\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":21,\"name\":\"Mike Wilcox\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/mwilcox/\",\"slug\":\"mwilcox\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/a3d37a7b01b791e438645e5f7cd99d0e?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/a3d37a7b01b791e438645e5f7cd99d0e?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/a3d37a7b01b791e438645e5f7cd99d0e?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Mike Wilcox, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Mike Wilcox, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/mwilcox/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/a3d37a7b01b791e438645e5f7cd99d0e?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/mwilcox/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/mwilcox/\\\",\\\"name\\\":\\\"Mike Wilcox, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/b17a4b78bc644814f33f687fe684bb19\\\",\\\"name\\\":\\\"Mike Wilcox\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/a3d37a7b01b791e438645e5f7cd99d0e?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Mike Wilcox\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/mwilcox/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/21\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a778070582606d9-LHR"],["cf-request-id","037e8e9a34000006d94c022200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:56:17 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d645e65fb405db80e1ddeba58c47bd1cf1592844976; expires=Wed, 22-Jul-20 16:56:16 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}