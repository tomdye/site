{"value":{"body":"[{\"id\":15047,\"date\":\"2017-08-29T10:27:24\",\"date_gmt\":\"2017-08-29T17:27:24\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15047\"},\"modified\":\"2020-03-30T06:34:27\",\"modified_gmt\":\"2020-03-30T13:34:27\",\"slug\":\"web-frameworks-testing\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-testing/\",\"title\":{\"rendered\":\"Web Frameworks: Testing\"},\"content\":{\"rendered\":\"<!-- Added by Post/Page specific custom CSS plugin, thank you for using! -->\\n<style type=\\\"text/css\\\">.title span {\\r\\ndisplay:block;\\r\\nfont-weight:inherit !important;\\r\\n}\\r\\nli {\\r\\nmargin-bottom:.5em !important;\\r\\n}\\r\\nblockquote {\\r\\nmargin-top:-5px;\\r\\nfloat:right;\\r\\nmargin-right:-10%;\\r\\nmax-width:450px;\\r\\nmargin-left:20px;\\r\\nmargin-bottom:20px;\\r\\nbackground:#f4f7f9;\\r\\npadding:20px;\\r\\nborder-left:5px solid #dfe6ea;\\r\\n}\\r\\nblockquote p {\\r\\nline-height:1.3em;\\r\\nmargin-top:0;\\r\\nmargin-bottom:0;\\r\\n}\\r\\n.rule {\\r\\nheight:1px;\\r\\nwidth:100%;\\r\\ndisplay:block;\\r\\nclear:both;\\r\\nmargin-bottom:40px;\\r\\nmargin-top:40px;\\r\\nbackground:#EAEAEA;\\r\\n}\\r\\n.feature-icon {\\r\\ndisplay: block;\\r\\nmargin-left:auto;\\r\\nmargin-right:auto;\\r\\nwidth:130px;\\r\\nmargin-bottom:10px;\\r\\n}\\r\\n.feature-item {\\r\\ntext-align:center;\\r\\nmargin-top: 10px !important;\\r\\nmargin-bottom:30px !important;\\r\\n}\\r\\n.pull-right {\\r\\nmax-width:600px;\\r\\nfloat:right;\\r\\nmargin-right:-100px;\\r\\nmargin-left:20px;\\r\\nmargin-bottom:20px;\\r\\n}\\r\\n.jump-to {\\r\\nmargin:0 !important;\\r\\ntext-align:center;\\r\\n}\\r\\n.jump-to li {\\r\\nmargin:0 !important;\\r\\nwidth:15%;\\r\\ndisplay:inline-block;\\r\\npadding:5px;\\r\\n}\\r\\n.jump-nav {\\r\\nposition:fixed;\\r\\nbottom:0px;\\r\\nleft:0px;\\r\\nwidth:100%;\\r\\n}\\r\\n@media screen and (max-width: 1150px) {\\r\\n.pull-right {\\r\\nmax-width:400px;\\r\\nmargin-right:0;\\r\\n}\\r\\nblockquote {\\r\\nmargin-right:0;\\r\\nmargin-top:1.5rem;\\r\\n}\\r\\n}\\r\\n@media screen and (max-width: 768px) {\\r\\n.pull-right {\\r\\nmax-width:inherit;\\r\\nfloat:none;\\r\\nmargin-bottom:0;\\r\\nmargin-left:0;\\r\\n}\\r\\nblockquote {\\r\\nfloat:none;\\r\\ndisplay:block;\\r\\nmargin-left:auto;\\r\\nmargin-right:auto;\\r\\nborder-left:none;\\r\\nmax-width:85%;\\r\\ntext-align:center;\\r\\n}\\r\\n}</style>\\n<p>Test early, test often, and test some more. Why put our heart and soul into our web applications only to be let down because we are not completely testing them. Let&#8217;s explore how the different web frameworks approach testing.</p>\\n<p><!--more--></p>\\n<p>Testing is so essential to the success of any project that we have dedicated an entire post to this topic. We want to explore several questions in this post. Does our web framework hold itself to high testing standards? Does it do more than just play lip service to testing? Is there any secret sauce that our framework can add to the mix to make our testing better or more efficient?</p>\\n<p>This is part of a series on web frameworks. If youâ€™ve missed our previous posts, you may want to start with <a href=\\\"https://www.sitepen.com/blog/2017/06/13/if-we-chose-our-javascript-framework-like-we-chose-our-music/\\\">If we chose our JavaScript framework like we chose our music&#8230;</a></p>\\n<h2 id=\\\"internal-testing-approach\\\">Internal testing approach</h2>\\n<p>One of the biggest insights we can gain about the quality of a web framework is, how does it approach testing its own source code. How does it ensure what we are using from it is well tested? Their approach to tests often gives insight into how we might test our code as well. We also want to look at how transparent and easy it is to see the output of that testing, to help give us a level of confidence that we are building on good foundations.</p>\\n<h2 id=\\\"recommended-test-framework\\\">Recommended test framework</h2>\\n<p>How does the framework recommend testing our source code? How much focus does that framework have on helping us ensure the code we write is tested? Some frameworks have strong opinions while others leave it up to the end developers. Where does each framework fit on this spectrum?</p>\\n<h2 id=\\\"testing-considerations\\\">Testing considerations</h2>\\n<p>Especially when it comes to testing web applications, the days of sitting a tester in front of a computer and interacting with an application have gone the way of the dodo. While this sort of exploratory testing still has its place, the ability to test has gone well beyond the early days of manual testing. Not only can we automate our unit and end-to-end testing, we can do many other types of testing, including items like accessibility, visual regression, and performance. We need to see if the frameworks provide any specific considerations for testing and how the framework might go beyond the basics.</p>\\n<h4 style=\\\"text-align: center;\\\">Jump to:</h4>\\n<ul class=\\\"jump-to\\\">\\n<li><a href=\\\"#angular\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#react\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#vue\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#dojo\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#ember\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#aurelia\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n</ul>\\n<div id=\\\"angular\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Angular 2+</h2>\\n<h3 id=\\\"internal-testing-approach-1\\\">Internal testing approach</h3>\\n<p>Angular 2+ uses <a href=\\\"https://karma-runner.github.io/\\\">Karma</a> as its test runner and <a href=\\\"https://jasmine.github.io/\\\">Jasmine</a> as a Behavior Driven Development (BDD) framework for authoring its tests. Angular 2+ utilizes <a href=\\\"https://travis-ci.org/\\\">Travis CI</a> and <a href=\\\"https://circleci.com/\\\">CircleCI</a> to run the tests against two different on-demand testing grid providers, <a href=\\\"https://www.browserstack.com/\\\">BrowserStack</a> and <a href=\\\"https://saucelabs.com/\\\">SauceLabs</a>, against a spectrum of browsers and devices.</p>\\n<p>For some of their testing, Angular 2+ use <a href=\\\"http://www.protractortest.org/\\\">Protractor</a>, an end-to-end test framework for Angular 2+ applications.</p>\\n<p>There is no apparent code coverage information provided out of the box.</p>\\n<h3 id=\\\"recommended-test-framework-1\\\">Recommended test framework</h3>\\n<p>Angular 2+ documents their <a href=\\\"https://angular.io/guide/testing\\\">recommended testing approach</a>. They have four key recommended parts:</p>\\n<ul>\\n<li><a href=\\\"https://karma-runner.github.io/\\\">Karma</a> as the recommended test runner</li>\\n<li><a href=\\\"https://jasmine.github.io/\\\">Jasmine</a> as the recommended Behavior Driven Development approach to author unit tests</li>\\n<li><a href=\\\"http://www.protractortest.org/\\\">Protractor</a> to provide the end-to-end testing</li>\\n<li><a href=\\\"https://angular.io/guide/testing#angular-testing-utility-apis\\\">Angular testing utilities</a>, a set of APIs that make it easier to test Angular applications</li>\\n</ul>\\n<h3 id=\\\"testing-considerations-1\\\">Testing considerations</h3>\\n<p>Angular 2+ recommends two different styles of unit tests. There are the isolated unit tests (e.g. testing each class or module on its own). This is recommended for pipes and services. For components, where two-way data binding can make it more difficult to <em>isolate</em> the unit, the recommendation is to use the Angular testing utilities to allow integration tests to be created where the component under test is allowed to interact with other components as it would within the actual application.</p>\\n<p>The command line tool has a test command (<code>ng test</code>) which will run the tests via Karma as configured in the project.</p>\\n<p>Angular 2+ provides a benchmarking suite, <a href=\\\"https://github.com/angular/angular/tree/master/packages/benchpress\\\">Benchpress</a>, which has some limited documentation on how to benchmark and profile your applications.</p>\\n<p>Code coverage and accessibility testing are not directly covered by the Angular project, but there are references available on how to achieve this via third-party libraries on the web.</p>\\n<div id=\\\"react\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">React + Redux</h2>\\n<h3 id=\\\"internal-testing-approach-2\\\">Internal testing approach</h3>\\n<p>React is tested internally using <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>, Facebook&#8217;s official JavaScript test runner, along with React&#8217;s own <a href=\\\"https://facebook.github.io/react/docs/test-utils.html\\\">Test Utils</a> package. Jest provides out of the box code coverage information and the project&#8217;s core package posts its coverage information to <a href=\\\"https://coveralls.io/\\\">Coveralls</a>. The main package currently maintains a 90% test coverage. Continuous integration/build is provided by <a href=\\\"https://circleci.com/\\\">CircleCI</a>.</p>\\n<p>Redux also uses <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>, but uses <a href=\\\"https://travis-ci.org/\\\">Travis CI</a> for its continuous integration/build processing. It does not appear to publish its code coverage information.</p>\\n<h3 id=\\\"recommended-test-framework-2\\\">Recommended test framework</h3>\\n<p>React and Redux both suggest authoring tests with <a href=\\\"https://facebook.github.io/jest/\\\">Jest</a>. Since testing React applications can be difficult given the intricacies of testing and asserting properties of virtual DOM instead of a traditional, tangible DOM. To make for a better developer experience and to alleviate many common testing pains encountered when asserting deeply-rendered components, React offers an official set of <a href=\\\"https://facebook.github.io/react/docs/test-utils.html\\\">testing utilities</a>. React also explicitly points to <a href=\\\"http://airbnb.io/enzyme/\\\">Enzyme</a>, an Airbnb-developed abstraction that wraps React&#8217;s test-utils package with additional functionality and more advanced assertion APIs.</p>\\n<p>Because most of the Redux part of an application should be <em>pure</em> reducer functions, they are often testable without any need for mocking inputs. There is an official <a href=\\\"http://redux.js.org/docs/recipes/WritingTests.html\\\">guide</a> to writing tests for Redux based applications.</p>\\n<h3 id=\\\"testing-considerations-2\\\">Testing considerations</h3>\\n<p>As mentioned in previous sections, React acknowledges that their Test Utilities package is limited in scope, and points to community-driven initiatives like <a href=\\\"http://airbnb.io/enzyme/\\\">Enzyme</a> to provide a more robust testing API. React makes no suggestions for accessibility, visual, or performance testing tools, though it should be mentioned that the <a href=\\\"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\\\">React Developer Tools</a> can greatly facilitate the diagnosis of rendering performance issues.</p>\\n<p>Because Jest supports code coverage analysis out of the box, it is possible to integrate a solution to manage the code coverage in line with the way that code coverage is integrated into the main React package.</p>\\n<p>Jest focuses on testing under Node.js, including the browser functionality. Jest does not come with out of the box integrations to make it easy to test in actual browsers. Without testing in browsers, many projects would lull themselves into a sense of overconfidence that their solutions would work in all target browsers.</p>\\n<div id=\\\"vue\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Vue.js</h2>\\n<h3 id=\\\"internal-testing-approach-3\\\">Internal testing approach</h3>\\n<p>Vue.js uses <a href=\\\"https://karma-runner.github.io/\\\">Karma</a> as a test runner and <a href=\\\"https://jasmine.github.io/\\\">Jasmine</a> for authoring BDD tests. Vue.js uses <a href=\\\"http://nightwatchjs.org/\\\">Nightwatch</a> for their end-to-end functional tests, testing against Chrome and <a href=\\\"http://phantomjs.org/\\\">PhantomJS</a>. They utilize <a href=\\\"https://circleci.com/\\\">CircleCI</a> for continuous integration and <a href=\\\"https://codecov.io/\\\">Codecov.io</a> for code coverage analysis, which currently sits at 100% coverage for the main Vue.js package.</p>\\n<p>Vue&#8217;s self-tests are configured to be able to be run on <a href=\\\"https://saucelabs.com/\\\">SauceLabs</a> though it does not appear that is a standard part of their continuous integration approach.</p>\\n<h3 id=\\\"recommended-test-framework-3\\\">Recommended test framework</h3>\\n<p>The Vue.js documentation <a href=\\\"https://vuejs.org/v2/guide/unit-testing.html\\\">points out</a> that any unit testing framework that supports modular code will work. The Vue.js project does not recommend any particular framework, but they suggest using the <a href=\\\"https://karma-runner.github.io/\\\">Karma</a> test runner because of its many plugins, particularly its support for bundling tools like Webpack and Browserify. The example tests in the docs use <a href=\\\"https://jasmine.github.io/\\\">Jasmine</a>.</p>\\n<h3 id=\\\"testing-considerations-3\\\">Testing considerations</h3>\\n<p>The Vue docs do not mention anything beyond simple unit testing. They do not recommend nor supply any tools for making functional or end-to-end testing easier. Their own test suite appears to only consider performance benchmarking for the server-side rendering features and that animations transitions complete in an expected time frame. Vue.js does not provide out of the box considerations for visual regression or accessibility testing.</p>\\n<div id=\\\"dojo\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Dojo 2</h2>\\n<h3 id=\\\"internal-testing-approach-4\\\">Internal testing approach</h3>\\n<p>Dojo 2 uses <a href=\\\"https://theintern.github.io/\\\">Intern</a> as its test runner and for all of its internal unit and functional (end-to-end) testing. Dojo 2 uses <a href=\\\"https://travis-ci.org/\\\">Travis CI</a> for continuous integration and have configuration options for both running tests against <a href=\\\"https://www.browserstack.com/\\\">BrowserStack</a> and <a href=\\\"https://saucelabs.com/\\\">SauceLabs</a> where some of the tested browsers vary by package, but generally include IE 11, Edge, Chrome, Firefox, Safari, and iOS. The project posts their code coverage information to <a href=\\\"https://codecov.io/\\\">Codecov.io</a> for analysis. The average across packages appears to be about 90% code coverage. Packages that need to ultimately interact with the DOM run their tests in Node.js using <a href=\\\"https://github.com/tmpvar/jsdom\\\">jsdom</a> to provide browser-like APIs.</p>\\n<p>For command-line packages, Dojo 2 also leverages <a href=\\\"https://www.appveyor.com/\\\">Appveyor</a> for running continuous integration and testing on Windows 10 platforms. This helps find subtle Windows-specific issues in projects where most developers use macOS or Linux.</p>\\n<p>Some packages use the dedicated testing utilities of <a href=\\\"https://github.com/dojo/test-extras\\\">@dojo/test-extras</a> which provides tools to make testing of Dojo 2 and its virtual DOM based widgets easier.</p>\\n<h3 id=\\\"recommended-test-framework-4\\\">Recommended test framework</h3>\\n<p>The standard Dojo CLI command <a href=\\\"https://github.com/dojo/cli-test-intern\\\">@dojo/cli-test-intern</a> integrates Intern into testing Dojo 2 projects and is recommended by the project for testing. Projects scaffolded with the <a href=\\\"https://github.com/dojo/cli-create-app\\\">@dojo/cli-create-app</a> will automatically configure a directory for both unit and functional test cases. The CLI command provides authored (TypeScript) code coverage information out of the box as well as configuration to run the tests with Intern locally in a Chrome browser or under Node.js.</p>\\n<p>The CLI command also supports easy integration with <a href=\\\"https://www.browserstack.com/\\\">BrowserStack</a> and <a href=\\\"https://saucelabs.com/\\\">SauceLabs</a> for running tests against a range of browsers.</p>\\n<p>As mentioned above, there is a package of testing utilities which can also be used by end developers called <a href=\\\"https://github.com/dojo/test-extras\\\">@dojo/test-extras</a>. It provides automatic configuration of <a href=\\\"https://github.com/tmpvar/jsdom\\\">jsdom</a> under a Node.js environment to allow full testing of widgets as well as utilities for interacting with widgets without having to perform extensive functional tests.</p>\\n<h3 id=\\\"testing-considerations-4\\\">Testing considerations</h3>\\n<p>Dojo 2 provides a solid approach to automated testing. Intern supports accessibility testing, visual regression testing, and performance testing. It is likely that these features will be incorporated into the out of the box testing experience as well as additional advice and direction are given to end developers on how to leverage these types of tests.</p>\\n<div id=\\\"ember\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Ember</h2>\\n<h3 id=\\\"internal-testing-approach-5\\\">Internal testing approach</h3>\\n<p>Ember.js uses <a href=\\\"https://qunitjs.com/\\\">QUnit</a> as its testing framework, which provides a test runner, unit testing, and functional testing. They use <a href=\\\"https://travis-ci.org/\\\">Travis-CI</a> for continuous integration. They use <a href=\\\"https://saucelabs.com/\\\">SauceLabs</a> to run their tests under IE 9, 10, 11, Edge, and Safari. They utilize <a href=\\\"https://codeclimate.com/\\\">Code Climate</a> for code quality analysis. For testing under Node.js, Ember.js utilizes <a href=\\\"http://phantomjs.org/\\\">PhantomJS</a> for <em>headless</em> testing.</p>\\n<h3 id=\\\"recommended-test-framework-5\\\">Recommended test framework</h3>\\n<p>Using the Ember CLI, testing defaults to <a href=\\\"https://qunitjs.com/\\\">QUnit</a>. The project provides <a href=\\\"https://guides.emberjs.com/v2.14.0/testing/\\\">extensive guidelines</a> on what type of testing to do, and how to accomplish it. They provide advice on how to test each part of an Ember application.</p>\\n<h3 id=\\\"testing-considerations-5\\\">Testing considerations</h3>\\n<p>The official accessibility project for Ember provides a set of <a href=\\\"https://github.com/ember-a11y/ember-a11y-testing\\\">a11y tests</a> to make it easier to test the accessibility of your Ember.js applications. While they don&#8217;t have built in performance testing, rendering performance is a consideration of their <a href=\\\"https://guides.emberjs.com/v2.14.0/ember-inspector/\\\">Ember Inspector</a> browser add-on.</p>\\n<div id=\\\"aurelia\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Aurelia</h2>\\n<h3 id=\\\"internal-testing-approach-6\\\">Internal testing approach</h3>\\n<p>Aurelia uses <a href=\\\"https://karma-runner.github.io/\\\">Karma</a> as its test runner and <a href=\\\"https://jasmine.github.io/\\\">Jasmine</a> as a Behavior Driven Development (BDD) framework for authoring its tests. It uses <a href=\\\"https://circleci.com/\\\">CircleCI</a> for its continuous integration. It appears to test code against Chrome as part of the CI process, and appears to collect coverage information, but that is not made easily accessible (using a code quality reporting service).</p>\\n<p>Aurelia UX seems to have, at the time of this writing, only recently added tests to the package and that testing does not yet appear to be integrated into the CI for the package.</p>\\n<h3 id=\\\"recommended-test-framework-6\\\">Recommended test framework</h3>\\n<p>Aurelia officially is agnostic when it comes to a recommended framework, though its CLI assumes <a href=\\\"https://karma-runner.github.io/\\\">Karma</a> and <a href=\\\"https://jasmine.github.io/\\\">Jasmine</a> as well as its <a href=\\\"https://github.com/aurelia/testing\\\">testing tools package</a>. Aurelia provides specific guidance on <a href=\\\"http://aurelia.io/hub.html#/doc/article/aurelia/testing/latest/testing-components\\\">testing components</a> and <a href=\\\"http://aurelia.io/hub.html#/doc/article/aurelia/testing/latest/testing-components/6\\\">end-to-end testing</a> where they recommend using <a href=\\\"http://www.protractortest.org/\\\">Protractor</a>.</p>\\n<h3 id=\\\"testing-considerations-6\\\">Testing considerations</h3>\\n<p>While Aurelia provides a <a href=\\\"https://github.com/aurelia/benchmarks\\\">benchmarking library</a>, there is no documentation on how to integrate performance testing into your test strategy. Also, as mentioned above, there is a dedicated package to make it easier to test components of an Aurelia application.</p>\\n<div class=\\\"rule\\\"></div>\\n<h2 id=\\\"summary\\\">Summary</h2>\\n<h3 id=\\\"angular-2-1\\\">Angular 2+</h3>\\n<p>Angular 2+ has a robust level of testing on their own code and have extensive documentation and guidelines on how to test applications built with Angular 2+. Self-testing and promotion of good test practices seem to be a focus of Angular 2+. The complexity of two-way data binding does make it more difficult to perform isolated unit testing, but Angular 2+ attempts to provide tooling to make that easier to accomplish. Angular 2+ has a strong focus on end-to-end application testing.</p>\\n<h3 id=\\\"react-redux-1\\\">React + Redux</h3>\\n<p>Because of the nature of React and Redux, it is likely that other libraries will be included in your project which may make setting up a robust testing strategy slightly more challenging. The challenge of testing has given rise to the community developed solutions like Airbnb&#8217;s Enzyme. This is great, but none of the official solutions actually test React and Redux in real browsers and instead is heavily focused on unit tests without a good solution for end-to-end testing.</p>\\n<h3 id=\\\"vue.js-1\\\">Vue.js</h3>\\n<p>Vue.js as a project is very well tested and they seem to have a good testing ethos within the project. While Vue.js mentions testing in their documentation, they leave most of it up to the end developer to deal with and do not really provide much help, advice, or additional tooling.</p>\\n<h3 id=\\\"dojo-2-1\\\">Dojo 2</h3>\\n<p>Dojo 2 has a strong focus on testing, both its own code, and in enabling end developers to be able to test their code efficiently and completely. There is a high level of assistance with the tooling.</p>\\n<h3 id=\\\"ember.js-1\\\">Ember.js</h3>\\n<p>As you might have come to expect from Ember.js, just as they have strong opinions on how to build web applications, they also have strong opinions on how to test applications. Ember provides out of the box scaffolding of tests along with code, as well as strong guidance on what sort of tests should be performed on an application. They also have a strong testing ethos within the project as a whole.</p>\\n<h3 id=\\\"aurelia-1\\\">Aurelia</h3>\\n<p>For a framework that indicates <a href=\\\"http://aurelia.io/hub.html#/doc/article/aurelia/framework/latest/technical-benefits/4\\\">code quality</a> as a major benefit of the solution, the execution on that promise could be dramatically improved. In particular, shipping a UX framework without tests from when it was announced in November 2016 until August 2017 seems counterproductive to claiming a focus on testing.</p>\\n<p>For end developers, Aurelia gives a reasonable amount of guidance on how to efficiently perform testing and use tooling.</p>\\n<h2 id=\\\"up-next\\\">Up next</h2>\\n<p>One of the biggest challenges building web applications is helping ensure that the code you author actually behaves properly at run-time. Over the past few years, there have been several strategies to accomplish this and to make JavaScript more predictable. In the next post, we will take a look at how the different frameworks try to accomplish that goal and how they can help you as a downstream developer build solid applications from the start.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Test early, test often, and test some more. Why put our heart and soul into our web applications only to be let down because we are not completely testing them. Let&#8217;s explore how the different web frameworks approach testing.</p>\\n\",\"protected\":false},\"author\":67,\"featured_media\":22198,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[444,445,214,448,2,215,375,29,450,11,234],\"tags\":[],\"series\":[447],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks: Testing | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/web-frameworks-testing/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks: Testing | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Test early, test often, and test some more. Why put our heart and soul into our web applications only to be let down because we are not completely testing them. Let&#8217;s explore how the different web frameworks approach testing.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/web-frameworks-testing/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-08-29T17:27:24+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-03-30T13:34:27+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-testing/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Web Frameworks: Testing\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-testing/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/web-frameworks-testing/\\\",\\\"name\\\":\\\"Web Frameworks: Testing | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-testing/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-08-29T17:27:24+00:00\\\",\\\"dateModified\\\":\\\"2020-03-30T13:34:27+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/web-frameworks-testing/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15047\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15047\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15047/revisions\"}],\"predecessor-version\":[{\"id\":22199,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15047/revisions/22199\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22198\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15047\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15047\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15047\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=15047\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":67,\"name\":\"Kit Kelly\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kkelly/\",\"slug\":\"kkelly\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kit Kelly, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kit Kelly, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kkelly/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kkelly/\\\",\\\"name\\\":\\\"Kit Kelly, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22198,\"date\":\"2020-02-03T10:01:15\",\"slug\":\"web-frameworks-testing-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-testing/web-frameworks-testing-2/\",\"title\":{\"rendered\":\"Web Frameworks- Testing\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks- Testing | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks- Testing | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-03T18:01:20+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\\\",\\\"name\\\":\\\"Web Frameworks- Testing | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-02-03T18:01:15+00:00\\\",\\\"dateModified\\\":\\\"2020-02-03T18:01:20+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Web Frameworks: Testing\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/08/Web-Frameworks-Testing.jpg\",\"sizes\":{\"medium\":{\"file\":\"Web-Frameworks-Testing-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing-300x158.jpg\"},\"large\":{\"file\":\"Web-Frameworks-Testing-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Web-Frameworks-Testing-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing-150x150.jpg\"},\"medium_large\":{\"file\":\"Web-Frameworks-Testing-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing-768x403.jpg\"},\"full\":{\"file\":\"Web-Frameworks-Testing.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/Web-Frameworks-Testing.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22198\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:27:18 GMT"],["expires","Mon, 31 Aug 2020 15:27:18 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}