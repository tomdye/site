{"value":{"body":"[{\"id\":15532,\"date\":\"2017-10-26T09:52:44\",\"date_gmt\":\"2017-10-26T16:52:44\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15532\"},\"modified\":\"2020-01-28T08:53:21\",\"modified_gmt\":\"2020-01-28T16:53:21\",\"slug\":\"state-of-modules-in-javascript\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/state-of-modules-in-javascript/\",\"title\":{\"rendered\":\"State of Modules in JavaScript\"},\"content\":{\"rendered\":\"<p>Many modern web applications depend on JavaScript. When the complexity of your JavaScript increases, so does the maintenance cost. To improve the maintenance of complex JavaScript codebases, you most likely adhere to some <a href=\\\"https://blog.goyello.com/2013/01/21/top-9-principles-clean-code/\\\">clean code practices</a> in your codebase.</p>\\n<p><!--more--></p>\\n<p>One best practice in JavaScript is to modularise your codebase. Modularising a codebase leads to very direct benefits such as:</p>\\n<ul>\\n<li>Ease of code sharing within a team: Many developers can work on disparate features without leading to code conflicts within a version control system</li>\\n<li>Ease of code sharing between the front-end and back-end components of your stack: An isolated module which does one thing only is primed to be used on more than one layers of your technology stack</li>\\n<li>Simplified code maintainability: Your understanding of where changes need to be made increases</li>\\n</ul>\\n<p>For the first 20 years as a language, there was no standard for modules in JS. But even prior to a language standard approach for creating and consuming JavaScript modules, there was a community-led effort to try to standardize efforts:</p>\\n<ul>\\n<li><a href=\\\"https://dojotoolkit.org/reference-guide/1.7/dojo/require.html\\\">dojo.require</a> for loading Dojo modules</li>\\n<li>The <a href=\\\"https://yuiblog.com/blog/2007/06/12/module-pattern/\\\">YUI module pattern</a></li>\\n<li>\\nAsynchronous Module Definition (<a href=\\\"https://github.com/amdjs/amdjs-api/blob/master/AMD.md\\\">AMD</a>) &#8211; <a href=\\\"https://www.sitepen.com/blog/2012/06/25/amd-the-definitive-source/\\\">AMD is designed to load modules asynchronously</a></li>\\n<li><a href=\\\"https://github.com/webpack/docs/wiki/commonjs\\\">CommonJS</a> &#8211; CommonJS is a module format designed to load modules <strong>synchronously</strong></li>\\n</ul>\\n<p>One of the recent community standards is CommonJS where you can have code like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// main.js\\r\\nconst message = require('./module-1');\\r\\nconsole.log(message); // 'hello'\\r\\n\\r\\n// module-1.js\\r\\nmodule.exports = 'Hello';\\r\\n</pre>\\n<p>In the above simplified example, as module-1.js grows in complexity, the file main.js will not necessarily have to become complex too. CommonJS is currently the <a href=\\\"https://nodejs.org/docs/latest/api/modules.html\\\">default module system for Node.js</a>. JavaScript bundling tools like <a href=\\\"http://browserify.org/\\\">Browserify</a>, <a href=\\\"https://github.com/babel/babel/tree/master/packages/babel-plugin-transform-es2015-modules-commonjs\\\">Babel</a> &amp; <a href=\\\"https://github.com/rollup/rollup-plugin-commonjs\\\">Rollup</a>  supported CommonJS with minimal configuration code. CommonJS thrived as a module loading solution, and in many current JavaScript projects, still does. However AMD and CommonJS are de facto standards rather than built-in language standards, and are not natively supported in browsers. Some module bundling tools will increase the total size of the JavaScript payload by adding in CommonJS support.</p>\\n<p><a href=\\\"http://exploringjs.com/es6/ch_modules.html\\\">ECMAScript modules (ESM)</a> are an official standard and are already present in Chrome Canary (version 64) &amp; Safari (version 11). They offer techniques for creating JavaScript modules and consuming JavaScript modules. Additionally, the standard also specifies a technique to dynamically load JavaScript modules through a feature named <a href=\\\"https://tc39.github.io/proposal-dynamic-import/\\\">Dynamic Imports</a>.</p>\\n<h2 id=\\\"esm\\\">ESM</h2>\\n<p>ESM includes three important features: imports, exports &amp; dynamic imports. The ESM syntax is not significantly different to module solutions in other languages, so we will jump straight into some examples. Here is a basic code example which demonstrates imports, exports and dynamic imports.</p>\\n<p>Within the main HTML file:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;script type=&quot;module&quot; src=&quot;main.js&quot;&gt;&lt;/script&gt;\\r\\n</pre>\\n<p>The contents of ‘main.js’</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport module1 from './module-1.js';\\r\\n\\r\\nconsole.log(module1); // I am module 1\\r\\n\\r\\nasync function load() {\\r\\n\\tconst {default: module2} = await import('./module-2.js');\\r\\n\\tconsole.log(module2); // I am module 2\\r\\n}\\r\\n\\r\\nload();\\r\\n</pre>\\n<p>The contents of ‘module-1.js’</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport default 'I am module 1';\\r\\n</pre>\\n<p>The contents of ‘module-2.js’</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport default 'I am module 2';\\r\\n</pre>\\n<p>Side note: Notice how the HTML has a script tag with a type=”module” attribute. You can also use the nomodule attribute to <a href=\\\"https://philipwalton.com/articles/deploying-es2015-code-in-production-today/\\\">conditionally load JavaScript with modern features</a> in browsers which support them.</p>\\n<p><img class=\\\"screenshot\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/image_0.png\\\" alt=\\\"Module downloads though Chrome DevTools\\\" class=\\\"alignnone size-full wp-image-15535\\\" /></p>\\n<p>In the above code example, the follow chain of events occur:</p>\\n<ol>\\n<li>The main HTML file loads the first JavaScript module, main.js. The main.js file is referenced via a script tag, this script tag has an attribute of ‘type’ and value of ‘module’</li>\\n<li>The first JavaScript module (main.js) loads a JavaScript module named ‘module-1.js’. The load is done via an import statement</li>\\n<li>The main.js file loads another JavaScript module named ‘module-2.js’. The load is done through a function call, through an API named Dynamic Imports</li>\\n</ol>\\n<p>Note: All three JavaScript files mentioned above are downloaded asynchronously. The waterfall chart in the Network Panel screenshot above demonstrates the order in which files are downloaded.</p>\\n<p>JavaScript modules have the following characteristics:</p>\\n<ul>\\n<li>A module can import other JavaScript modules</li>\\n<li>A module can export a subset of the full module</li>\\n<li>Top level variables defined in a module do not pollute the global scope and are local to that module</li>\\n<li>JavaScript modules are designed in such a way that the code structure of imports and exports can be statically analysed</li>\\n<li>JavaScript modules use <a href=\\\"http://w3c.github.io/html/semantics-scripting.html#element-attrdef-script-async\\\">defer</a> by default. If you want immediate script execution, you can use the async attribute</li>\\n<li>JavaScript modules are expected to follow <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\\\">strict mode</a></li>\\n</ul>\\n<h2 id=\\\"exports\\\">Exports</h2>\\n<p>In ESM, there are two types of exports: default exports and named exports. There can only be a single default export per module, however one module can have many named exports.</p>\\n<p>Here is a code example of both types of exports:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport const one = 1; // Named export\\r\\nexport const two = 2; // Named export\\r\\nexport default 3; // Default export\\r\\n</pre>\\n<p>So what is the difference between the two exports? To extract a named export from a module, you must specify its name upfront. To extract a default export, you may select any name you wish. This is best demonstrated through code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport {one, two} from './my-module.js';\\r\\nimport myModule from './my-module.js';\\r\\n\\r\\nconsole.log(one); // 1\\r\\nconsole.log(two); // 2\\r\\nconsole.log(myModule); // 3\\r\\n</pre>\\n<p>Notice how the variable ‘myModule’ automatically receives the default export. When creating a named export, you may wish to export an existing variable with a different name. The ESM standard enables this with the following syntax:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst hello = 'hello';\\r\\nexport { hello as greeting }\\r\\n</pre>\\n<p>In the code example above, the named export is ‘greeting’.</p>\\n<p>In ESM, you do not export a value or a reference, but rather, you export a binding. Within CommonJS and AMD, the value you export from a module is a copy. When you import this same module, the imported value is also a copy and is disconnected from the original exported value. In ESM, you import a binding from a module, this binding includes a direct connection to the exported value.</p>\\n<p>Notice this module code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// module-1.js\\r\\nlet number = 1;\\r\\n\\r\\nfunction inc() {\\r\\n\\tnumber++;\\r\\n}\\r\\n\\r\\nexport {number, inc};\\r\\n</pre>\\n<p>And the main.js entry point:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport {number, inc} from './module-1.js';\\r\\n\\r\\nconsole.log(number); // 1\\r\\ninc();\\r\\nconsole.log(number); // 2\\r\\n</pre>\\n<p>See the article <a href=\\\"http://2ality.com/2015/07/es6-module-exports.html\\\">What do ES6 modules export</a> For more details on this topic.</p>\\n<h2 id=\\\"re-exports\\\">Re-exports</h2>\\n<p>There is the concept of ‘re-exporting’ where an ES module can export the exports of another module like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport { message as default } from './another-module.js';\\r\\n</pre>\\n<p>The code above imports the named export ‘message’ from ‘another-module.js’ and binds it to the default export of itself.</p>\\n<p>By now, we should understand the concept of exporting a module. Let’s move onto importing.</p>\\n<h2 id=\\\"imports\\\">Imports</h2>\\n<p>Like exports, an import statement must be at the top-level of a module. For example, it cannot be enclosed within a function. As we’ve seen from the earlier example, you can import a default  export like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport module1 from ‘./module-1.js’;\\r\\n</pre>\\n<p>And you can import a named export like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport {name} from ‘./module-1.js’;\\r\\n</pre>\\n<p>You can alias a named export when importing it, like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { namedExport as renamedExport } from ‘./module-1.js’\\r\\n</pre>\\n<p>You can also alias a default export during importing:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport {default as module1} from ‘./module-1.js’\\r\\n</pre>\\n<p>You can import all named exports from a module like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport * as everything from ‘./module-1.js’\\r\\n</pre>\\n<p>For the line of of code above, consider that the contents of module-1 looks like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport const one = 1;\\r\\nexport const two = 2;\\r\\nexport const three = 3;\\r\\n</pre>\\n<p>After importing, the variable ‘everything’ looks like this:</p>\\n<p><img class=\\\"screenshot\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/image_1.png\\\" alt=\\\"Module exported preview\\\" class=\\\"alignnone size-full wp-image-15536\\\" /></p>\\n<p>Import statements also support importing the default export, as well as named exports, all on one line:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport defaultExport, { namedExport1, namedExport2 } from './module-1.js'\\r\\n</pre>\\n<p>The technique of importing a module resembles <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\\\">ES6 destructuring assignments</a>, however it’s important to note they are different. For example, observe this destructuring operation:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst account = {\\r\\n    firstName: 'umar',\\r\\n    verified: true\\r\\n};\\r\\n\\r\\nconst { firstName: username } = account;\\r\\n\\r\\nconsole.log(username); // umar\\r\\n</pre>\\n<p>Observe how this assignment technique extracts the firstName property and assigns it to a variable named username. This technique does not work with importing, instead, use the following:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { namedExport as alias } from ‘./module-1.js’\\r\\n</pre>\\n<p>\\nTo import only what you need provides greater flexibility over what could be done with CJS/AMD, and somewhat negates a trend to create a separate module for every function call.\\n</p>\\n<p>Modules which invoke/initialise themselves straight after being loaded are an anti-pattern since you lose control of the point at which they execute, however such modules do exist. When you import a module, you can omit the named exports and the word ‘from’, like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport './module-1.js'\\r\\n</pre>\\n<p>The ‘module-1.js’ module will execute, and will not be assigned to a variable.</p>\\n<p>Another note on the import syntax. You can import a remote URL directly, for example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport last from 'https://raw.githubusercontent.com/lodash/lodash/00705afc19c09227561daddd6905c855649f9e6d/last.js';\\r\\n\\r\\nconsole.log(last([1, 2, 3])); // 3\\r\\n</pre>\\n<p>The code example above imports a remote module from GitHub (served from <a href=\\\"https://raw.githubusercontent.com/\\\">GitHub User Content</a>). The module on GitHub is authored as an ES module and is compatible with the import syntax.</p>\\n<p>Notice that the import statement is quite long, to address this, you may try to put the URL into its own variable:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst url = 'https://raw.githubusercontent.com/lodash/lodash/00705afc19c09227561daddd6905c855649f9e6d/last.js'\\r\\nimport last from url; // This is invalid\\r\\n</pre>\\n<p>This is invalid JavaScript. The module specifier (the part in strings) part of an import statement must be statically analysable. Its value cannot be computed through the result of a runtime evaluation. There is an alternative API however.</p>\\n<h2 id=\\\"dynamic-imports\\\">Dynamic imports</h2>\\n<p><a href=\\\"https://github.com/tc39/proposal-dynamic-import\\\">Dynamic Imports</a> offers a function-like import call for module loading. It is a feature added to meet the needs of asynchronous module loading in browsers, a feature popularized by AMD.</p>\\n<p>Dynamic Imports are part of the ES2018 specification and have shipped in Chrome <a href=\\\"https://twitter.com/umaar/status/914598471973425152\\\">Canary</a> (version 64) &amp; Safari (version 11). Dynamic Imports are also supported in <a href=\\\"https://babeljs.io/docs/plugins/syntax-dynamic-import/\\\">Babel</a>, <a href=\\\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-4.html\\\">TypeScript</a> and can be used in <a href=\\\"https://webpack.js.org/guides/code-splitting/#dynamic-imports\\\">webpack to achieve code splitting</a>.</p>\\n<p>As an example, you may wish to combine dynamic imports with <a href=\\\"https://w3c.github.io/device-memory/\\\">navigator.deviceMemory</a> so that a computationally costly module is dynamically loaded only if the device has enough RAM.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nif (navigator.deviceMemory &gt; 1) {\\r\\n\\tconst module = await import('./constly-module.js');\\r\\n}\\r\\n</pre>\\n<p>Dynamic imports are promise based. You can combine multiple dynamic imports and await their result in fairly intuitive code:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst [module1, module2, module3] = await Promise.all([\\r\\n\\timport('./module-1.js'),\\r\\n\\timport('./module-2.js'),\\r\\n\\timport('./module-3.js')\\r\\n]);\\r\\n</pre>\\n<p>In the code example above, three modules are dynamically downloaded without having to resort to callback based patterns.</p>\\n<h2 id=\\\"debugging-with-chrome-devtools\\\">Debugging with Chrome DevTools</h2>\\n<p>When you use one module to import another module, the dependency chain may be unclear. The Initiator column in the Network Panel displays exactly which file and line of code triggered the download of the relevant JavaScript module.</p>\\n<p><img class=\\\"screenshot\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/image_2.png\\\" alt=\\\"Chrome DevTools Initiator column\\\" class=\\\"alignnone size-full wp-image-15537\\\" /></p>\\n<p>Note: This capability is available in Chrome DevTools. The usual debugging abilities you’re familiar with, such as setting a breakpoint, are also compatible with ES module files.</p>\\n<h2 id=\\\"nodejs\\\">Node.js</h2>\\n<p>Node.js now has experimental <a href=\\\"https://nodejs.org/api/esm.html\\\">support for </a><a href=\\\"https://nodejs.org/api/esm.html\\\">ESM</a> as of version 8.5.0. For a file to be treated as ESM, it must have an ‘.mjs’ file extension.</p>\\n<p>Consider this code example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport fs from 'fs';\\r\\nfs.writeFile('message.txt', 'Hello!');\\r\\n</pre>\\n<p>To run this Node.js script from the terminal:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nnode --experimental-modules index.mjs\\r\\n</pre>\\n<p>As specified in the documentation, existing CommonJS modules can be consumed with ESM  inside of Node.js.</p>\\n<p>For Node.js, there is an <a href=\\\"https://github.com/standard-things/esm\\\">@std/esm</a> package which enables ESM in Node.js 4+ in an unobtrusive manner.</p>\\n<h2 id=\\\"bundling\\\">Bundling</h2>\\n<p>When using ES modules in a browser environment, you may wish to bundle all of your JavaScript modules. There are a number of tools to help accomplish this.</p>\\n<p>In this example, we use <a href=\\\"https://github.com/rollup/rollup\\\">Rollup</a>. Here’s the entry file for the project:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// main.js\\r\\nimport module1 from './module-1.js';\\r\\nimport module2 from './module-2.js';\\r\\nimport {add} from './module-3.js';\\r\\n\\r\\nconsole.log({module1, module2});\\r\\nconsole.log(add(1, 1));\\r\\n</pre>\\n<p>Module one and two export simple pieces of text. Module three looks like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction add(a, b) {\\r\\n\\treturn a + b;\\r\\n}\\r\\n\\r\\nfunction subtract(a, b) {\\r\\n\\treturn a - b;\\r\\n}\\r\\n\\r\\nexport {add, subtract};\\r\\n</pre>\\n<p>Notice, in the code above, that only the ‘add’ function is imported from the main entry point. The subtract function is unused. Using rollup, we can combine all modules into a single bundle.</p>\\n<p>The example above uses a tool called rollup. Rollup works from the command line, but also through other build tooling like Gulp.</p>\\n<p>Module bundling is also possible with <a href=\\\"https://webpack.js.org/guides/installation/\\\">webpack</a>. See this webpack.config.js file:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst path = require('path');\\r\\nconst UglifyJSPlugin = require('uglifyjs-webpack-plugin');\\r\\n\\r\\nmodule.exports = {\\r\\n\\tentry: './main.js',\\r\\n\\toutput: {\\r\\n\\t\\tfilename: './bundle.js'\\r\\n\\t},\\r\\n\\tplugins: [\\r\\n\\t\\tnew UglifyJSPlugin()\\r\\n\\t]\\r\\n};\\r\\n</pre>\\n<p>Note: The UglifyJSPlugin is required for tree shaking.</p>\\n<p>Running the command:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n./node_modules/.bin/webpack –config webpack.config.js\\r\\n</pre>\\n<p>From the terminal, on the same modules and entry point used in the earlier example, creates a single minified bundle which does not contain the subtract function.</p>\\n<p>Tree shaking (a feature also known as dead-code elimination) occurs to ensure unused exports are not part of the final bundle. This is a powerful feature since the total file size of the bundle will be smaller, which means a lighter payload for the user. There is also less JavaScript to parse + evaluate for the JavaScript engine, leading to potentially large performance wins on the device.</p>\\n<p>Here is the rollup command to create a bundle.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n$ rollup main.js –output.format iife –output.file bundle.js&lt;/p&gt;\\r\\n</pre>\\n<p>The created bundle looks like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n(function () {\\r\\n'use strict';\\r\\n\\r\\nvar module1 = 'I am module 1';\\r\\n\\r\\nvar module2 = 'I am module 2';\\r\\n\\r\\nfunction add(a, b) {\\r\\n\\treturn a + b;\\r\\n}\\r\\n\\r\\nconsole.log({module1, module2});\\r\\nconsole.log(add(1, 1));\\r\\n\\r\\n}());\\r\\n</pre>\\n<p>Notice the subtract function is not present in this bundle thanks to tree-shaking.</p>\\n<h2 id=\\\"conclusion\\\">Conclusion</h2>\\n<p>ESM enables a standard mechanism of modularising your JavaScript codebase. Having a unified way of doing this should mean an end to extra JavaScript payloads being sent over the network just to mimic such functionality which was once missing from browsers. While full cross-browser support is <a href=\\\"http://caniuse.com/#search=javascript%20module\\\">not yet present</a>, it is an official web standard which has been agreed on by all modern browsers.</p>\\n<p>Until HTTP/2 proves loading many non-bundled resources does not negatively impact the user, we will most likely continue to bundle all of our JavaScript resources into one or two bundles. Some JavaScript bundlers support ESM such as <a href=\\\"https://github.com/rollup/rollup\\\">rollup</a> and <a href=\\\"https://webpack.github.io/\\\">webpack</a>. Tools like Babel include <a href=\\\"https://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/\\\">transforms for ESM</a> so your ES modules can transpile into other popular module formats like CommonJS, which can then be bundled by an even larger array of <a href=\\\"http://browserify.org/\\\">bundlers</a>. </p>\\n<h3 id=\\\"further-reading\\\">Further Reading</h3>\\n<ul>\\n<li><a href=\\\"http://jsmodules.io/\\\">The basics of ESM</a></li>\\n<li><a href=\\\"http://jsmodules.io/cjs.html\\\">CommonJS compared with ESM</a></li>\\n<li>MDN <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\\\">docs on import</a></li>\\n<li>MDN <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\\\">docs on export</a></li>\\n<li>Chrome Status: <a href=\\\"https://www.chromestatus.com/features/5365692190687232\\\">JavaScript modules</a></li>\\n<li><a href=\\\"https://medium.com/dev-channel/es6-modules-in-chrome-canary-m60-ba588dfb8ab7\\\">ES6 Modules in Chrome M61+</a></li>\\n<li><a href=\\\"http://2ality.com/2017/08/typing-import-statements.html\\\">Typing import statements more quickly</a></li>\\n</ul>\\n<hr />\\n<h2>Next steps</h2>\\n<div>\\n<a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\"><a href=\\\"https://www.sitepen.com/contact/\\\">Receive a free consultation or code review</a> on your latest JavaScript project.</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Try our<a href=\\\"https://www.sitepen.com/services/\\\"> On-Demand Development</a> service for fast and cost-effective solutions to your current JavaScript development challenges.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0;\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px;\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> to learn more on how you will benefit from working with SitePen!</p>\\n</div>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Many modern web applications depend on JavaScript. When the complexity of your JavaScript increases, so does the maintenance cost. To improve the maintenance of complex JavaScript codebases, you most likely adhere to some clean code practices in your codebase.</p>\\n\",\"protected\":false},\"author\":83,\"featured_media\":22167,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[215,3,43,28],\"tags\":[244],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>State of Modules in JavaScript | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/state-of-modules-in-javascript/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"State of Modules in JavaScript | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Many modern web applications depend on JavaScript. When the complexity of your JavaScript increases, so does the maintenance cost. To improve the maintenance of complex JavaScript codebases, you most likely adhere to some clean code practices in your codebase.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/state-of-modules-in-javascript/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-10-26T16:52:44+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-28T16:53:21+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/state-of-modules-in-javascript/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"State of Modules in JavaScript\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/state-of-modules-in-javascript/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/state-of-modules-in-javascript/\\\",\\\"name\\\":\\\"State of Modules in JavaScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/state-of-modules-in-javascript/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-10-26T16:52:44+00:00\\\",\\\"dateModified\\\":\\\"2020-01-28T16:53:21+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/state-of-modules-in-javascript/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\"}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15532\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15532\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15532/revisions\"}],\"predecessor-version\":[{\"id\":22168,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15532/revisions/22168\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22167\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15532\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15532\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15532\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=15532\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":83,\"name\":\"Umar Hansa\",\"url\":\"https://umaar.com/\",\"description\":\"Front-end web developer in London!\",\"link\":\"https://wp.sitepen.com/blog/author/uhansa/\",\"slug\":\"uhansa\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Umar Hansa, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Umar Hansa, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/uhansa/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/uhansa/\\\",\\\"name\\\":\\\"Umar Hansa, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/4ff76cc4877f59173389c383d2e965b9\\\",\\\"name\\\":\\\"Umar Hansa\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ff4193582b1f6686c1b67dcd95e441e8?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Umar Hansa\\\"},\\\"description\\\":\\\"Front-end web developer in London!\\\",\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/uhansa/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/83\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22167,\"date\":\"2020-01-28T08:53:04\",\"slug\":\"state-of-modules-in-javascript-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/state-of-modules-in-javascript/state-of-modules-in-javascript-2/\",\"title\":{\"rendered\":\"State of Modules in JavaScript\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>State of Modules in JavaScript | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"State of Modules in JavaScript | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-28T16:53:10+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\\\",\\\"name\\\":\\\"State of Modules in JavaScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-28T16:53:04+00:00\\\",\\\"dateModified\\\":\\\"2020-01-28T16:53:10+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"State of Modules in JavaScript\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/10/State-of-Modules-in-JavaScript.jpg\",\"sizes\":{\"medium\":{\"file\":\"State-of-Modules-in-JavaScript-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript-300x158.jpg\"},\"large\":{\"file\":\"State-of-Modules-in-JavaScript-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript-1024x538.jpg\"},\"thumbnail\":{\"file\":\"State-of-Modules-in-JavaScript-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript-150x150.jpg\"},\"medium_large\":{\"file\":\"State-of-Modules-in-JavaScript-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript-768x403.jpg\"},\"full\":{\"file\":\"State-of-Modules-in-JavaScript.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/10/State-of-Modules-in-JavaScript.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22167\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:30:17 GMT"],["expires","Mon, 31 Aug 2020 15:30:17 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}