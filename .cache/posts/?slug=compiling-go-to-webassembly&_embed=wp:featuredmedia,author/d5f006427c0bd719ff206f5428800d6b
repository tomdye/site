{"value":{"body":"[{\"id\":16816,\"date\":\"2019-01-15T12:58:22\",\"date_gmt\":\"2019-01-15T19:58:22\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=16816\"},\"modified\":\"2020-01-22T09:02:17\",\"modified_gmt\":\"2020-01-22T17:02:17\",\"slug\":\"compiling-go-to-webassembly\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/compiling-go-to-webassembly/\",\"title\":{\"rendered\":\"Compiling Go to WebAssembly\"},\"content\":{\"rendered\":\"<p>For many years there has been the only way to write client-side logic for the web; JavaScript. WebAssembly provides another way, as a low-level language similar to assembly, with a compact binary format. Go, a popular open source programming language focused on simplicity, readability and efficiency, recently gained the ability to compile to WebAssembly.</p>\\n<p>Here we explore the possibilities with writing and compiling Go to WebAssembly, from installation of Go, to the compilation to WebAssembly, to the communication between JavaScript and Go.</p>\\n<p>If you&#8217;re not familiar with Go, please start with the Go <a href=\\\"https://golang.org/doc/\\\">documentation</a> and <a href=\\\"https://tour.golang.org/\\\">introductory tutorial</a> to get an overall understanding of the language.</p>\\n<p><!--more--></p>\\n<h3>What is WebAssembly?</h3>\\n<p>WebAssembly, (sometimes abbreviated to WASM, or in its logo WA) is a new language that runs in the browser, alongside JavaScript. One of its interesting features is that it can become a target for compilation from multiple other languages. The benefit of Web Assembly is that it can run at near-native speeds, providing an environment to run intensive or performance critical code. The language is not designed to replace JavaScript but exist alongside with the ability to talk between the two.</p>\\n<p>At its heart, WebAssembly is a low-level language. It can be considered similar to traditional assembly, with granular memory management and a binary format that can be compiled as fast as it downloads to produce code that&#8217;s guaranteed to run at speeds close to native applications. It&#8217;s very low level and designed to be a target for compiler writers rather than written by hand. This makes it an excellent target for higher level languages like C, C++, Rust, and now: Go.</p>\\n<h3>Getting Up and Running with Go</h3>\\n<p>WebAssembly as a compile target only became available in Go 1.11. Even if you have Go installed, it&#8217;s worth checking with <code>go version</code>, which will print out the installed version. The way in which we install Go will be dependent on your platform, and unfortunately, it is not possible to cover. Here as an example we install Go 1.11 on macOS and Ubuntu using bash.</p>\\n<p>One way to install on macOS is to use <a href=\\\"https://brew.sh/\\\">Homebrew</a>, the macOS package manager, to get Go 1.11. The following commands should allow you to install Go:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    echo 'export GOPATH=&quot;${HOME}/.go&quot;' &gt;&gt;~/.bashrc\\r\\n    echo 'export GOROOT=&quot;$(brew --prefix golang)/libexec' &gt;&gt;~/.bashrc\\r\\n    echo 'export PATH=&quot;$PATH:${GOPATH}/bin:${GOROOT}/bin&quot;' &gt;&gt;~/.bashrc\\r\\n\\r\\n    test -d &quot;${GOPATH}&quot; || mkdir &quot;${GOPATH}&quot;\\r\\n    source ~/.bashrc\\r\\n\\r\\n    brew install go\\r\\n    go version\\r\\n</pre>\\n<p>Here we add the necessary environment variables, <code>GOPATH</code>, <code>GOROOT</code> to your <code>PATH</code>. Here <code>GOPATH</code> is the location of your workspace (where you write your Go code). <code>GOROOT</code> points to the directory where Go gets installed. The <code>test -d</code> command will check that the <code>GOPATH</code> exists, and if not will create it. The <code>source</code> line will rerun the anything in <code>~/.bashrc</code> into the current shell, so you don&#8217;t need to restart. Let&#8217;s have a look at how you would do the same on Ubuntu:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    echo 'export GOPATH=$HOME/go' &gt;&gt;~/.bashrc\\r\\n    echo 'export GOROOT=/usr/local/go' &gt;&gt;~/.bashrc\\r\\n    echo 'export PATH=$GOPATH/bin:$GOROOT/bin:$PATH' &gt;&gt;~/.bashrc\\r\\n\\r\\n    cd /tmp\\r\\n    wget https://dl.google.com/go/go1.11.linux-amd64.tar.gz\\r\\n    sudo tar -xvf go1.11.linux-amd64.tar.gz\\r\\n    sudo mv go /usr/local\\r\\n\\r\\n    source ~/.bashrc\\r\\n    go version\\r\\n</pre>\\n<p>At the end, we should see the version printed, which should be 1.11.</p>\\n<h3>Your First WebAssembly Program from Go Code</h3>\\n<p>Go has strong opinions on where your code should be, the workspace which gets located at <code>GOPATH</code>. This path would be <code>$HOME/go</code> on Linux and Mac if you followed the directions above. First, we will create a workspace directory; this should be <code>$HOME/go</code> on Linux and Mac. To use a different workspace you can do so by setting the <code>GOPATH</code> environment variable. </p>\\n<p>Go also has strong opinions on how the workspace should get arranged. Let&#8217;s assume we&#8217;re going to make a package called <code>webassembly</code>. The <code>$GOPATH</code> directory should have a folder named <code>src</code> containing the package folder in <code>webassembly</code>. Finally, we are going to want to make a file with the following path: <code>$GOPATH/src/webassembly/webassembly.go</code>.</p>\\n<p>Next, for the actual code for this file we&#8217;ll write a simple &#8216;Hello World&#8217; application:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    package main\\r\\n\\r\\n    import &quot;fmt&quot;\\r\\n\\r\\n    func main() {\\r\\n        fmt.Println(&quot;Hello, World!&quot;)\\r\\n    }\\r\\n</pre>\\n<p>We can then compile this Go file to WASM using the following command:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    GOOS=js GOARCH=wasm go build -o main.wasm\\r\\n</pre>\\n<p>Here <code>GOOS</code> is the target &#8216;operating system&#8217; which in this instance is JavaScript, and <code>GOARCH</code> is the architecture which in this case is WebAssembly (wasm). Running this command will compile the program to a file called `main.wasm` in the folder. You might notice the build size is quite large (~2mb). While this could be prohibitive depending on your application, this should significantly improve in the future as more work goes into the Go wasm target and the underlying wasm standards gain additional functionality.</p>\\n<h3>Using Your Compiled WebAssembly in the Browser</h3>\\n<p>To call our compiled Go code, we need to make use of a library provided in the Go source called <code>wasm_exec.js</code>. We can find this in the <code>GOROOT</code> folder under <code>/misc/wasm/wasm_exec.js</code>. The easiest thing to do here is simply copy-and-paste it to where we want to use our WASM file. For simplicity, let&#8217;s assume we&#8217;re going to write our <code>index.html</code> file (which hosts the code for our web page) where will load our WASM file, in the same folder as where we wrote our Go file (<code>$GOPATH/src/webassembly/webassembly.go</code>). Let&#8217;s go ahead and see what that would look like:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;!DOCTYPE html&gt;\\r\\n&lt;html&gt;\\r\\n    &lt;head&gt;\\r\\n        &lt;meta charset=&quot;utf-8&quot;&gt;\\r\\n        &lt;script src=&quot;wasm_exec.js&quot;&gt;&lt;/script&gt;\\r\\n        &lt;script&gt;\\r\\n            \\r\\n            if (WebAssembly) {\\r\\n                 // WebAssembly.instantiateStreaming is not currently available in Safari\\r\\n                 if (WebAssembly &amp;&amp; !WebAssembly.instantiateStreaming) { // polyfill\\r\\n                     WebAssembly.instantiateStreaming = async (resp, importObject) =&gt; {\\r\\n                        const source = await (await resp).arrayBuffer();\\r\\n                         return await WebAssembly.instantiate(source, importObject);\\r\\n                     };\\r\\n                 }  \\r\\n\\r\\n                 const go = new Go();\\r\\n                 WebAssembly.instantiateStreaming(fetch(&quot;main.wasm&quot;), go.importObject).then((result) =&gt; {\\r\\n                    go.run(result.instance);\\r\\n                 });\\r\\n            } else {\\r\\n               console.log(&quot;WebAssembly is not supported in your browser&quot;)\\r\\n            }\\r\\n\\r\\n        &lt;/script&gt;\\r\\n    &lt;/head&gt;\\r\\n    &lt;body&gt;\\r\\n        &lt;main id=&quot;wasm&quot;&gt;&lt;/main&gt;\\r\\n    &lt;/body&gt;\\r\\n&lt;/html&gt;\\r\\n</pre>\\n<p>Here the <code>wasm_exec.js</code> file gives us access to the <code>new Go()</code> constructor which allows us to run our code. The <code>WebAssembly</code> global is accessible in <a href=\\\"https://caniuse.com/#search=webassembly\\\">supported browsers</a>. We use the <code>instantiateStreaming</code> method, which is polyfilled for <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming#Browser_compatibility\\\">unsupported browsers</a> (currently Safari out of the big four browser vendors). WebAssembly.instantiateStreaming is the most efficient way to load WASM code, compiling and instantiating a module for us to use. We can combine it with the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\\\">fetch API</a> to retrieve our WASM file. The result then gets passed to our constructed Go object that lets us run our compiled code.</p>\\n<p>Before we load our page and try out the code, we will need to run it on a web server to avoid <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\\\">CORS</a> issues. Here I would recommend <a href=\\\"https://www.npmjs.com/package/http-server\\\">http-server</a>, a Node.js package which provides a fully functioning web server. If you were determined to stay in the Go ecosystem to serve your files, the <a href=\\\"https://github.com/golang/go/wiki/WebAssembly\\\">Go documentation</a> recommends doing so using <code>goexec</code> by running <code> goexec 'http.ListenAndServe(\\\":8080\\\", http.FileServer(http.Dir(\\\".\\\")))' </code>.</p>\\n<p>If we save this page, then open our developer console, we should see <code>Hello, WebAssembly</code> printed to out.</p>\\n<h3>Interacting with JavaScript and the DOM</h3>\\n<p>You can call JavaScript from WASM using the <code>syscall/js</code> module. Let&#8217;s assume we have a function in JavaScript simply called <code>updateDOM</code> that looks like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction updateDOM(text) {\\r\\n    document.getElementById(&quot;wasm&quot;).innerText = text;\\r\\n}\\r\\n</pre>\\n<p>All this function does is set the inner text of our main container to whatever gets passed to the function. We can then call this function from our Go code in the following fashion:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\npackage main\\r\\n\\r\\nimport (\\r\\n    &quot;syscall/js&quot;\\r\\n)\\r\\n\\r\\nfunc main() {\\r\\n    js.Global().Call(&quot;updateDOM&quot;, &quot;Hello, World&quot;)\\r\\n}\\r\\n</pre>\\n<p>Here we use the <code>js.Global</code> function to get the global window scope. We call the global JavaScript function <code>updateDOM</code> by using <code>Call</code> method on the value returned from <code>js.Global</code>. We can also set values in JavaScript using the <code>Set</code> function. At the moment setting values works well with basic types but errors on types such as structs and slices. Here we&#8217;ll pass some basic values over to JavaScript, and show how you could use a simple workaround to marshal a struct into JSON by leveraging JavaScript&#8217;s <code>JSON.parse</code>.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\n\\r\\npackage main\\r\\n\\r\\nimport (\\r\\n\\t&quot;encoding/json&quot;\\r\\n\\t&quot;fmt&quot;\\r\\n\\t&quot;syscall/js&quot;\\r\\n)\\r\\n\\r\\ntype Person struct {\\r\\n\\tName string `json:&quot;name&quot;`\\r\\n\\tAge  int    `json:&quot;age&quot;`\\r\\n}\\r\\n\\r\\nfunc main() {\\r\\n\\r\\n\\tjs.Global().Set(&quot;aBoolean&quot;, true)\\r\\n\\tjs.Global().Set(&quot;aString&quot;, &quot;hello world&quot;)\\r\\n\\tjs.Global().Set(&quot;aNumber&quot;, 1)\\r\\n\\r\\n\\t// Work around for passing structs to JS\\r\\n\\tfrank := &amp;Person{Name: &quot;Frank&quot;, Age: 28}\\r\\n\\tp, err := json.Marshal(frank)\\r\\n\\tif err != nil {\\r\\n\\t\\tfmt.Println(err)\\r\\n\\t\\treturn\\r\\n\\t}\\r\\n\\tobj := js.Global().Get(&quot;JSON&quot;).Call(&quot;parse&quot;, string(p))\\r\\n\\tjs.Global().Set(&quot;aObject&quot;, obj)\\r\\n\\r\\n}\\r\\n\\r\\n</pre>\\n<p>We can also use <code>Set</code> to bind these values to callbacks within Go, using the <code>NewCallback</code> method. Let&#8217;s say we want to set a method in JavaScript, bind it to a Go function and make it call a method when it&#8217;s called. We could do that like this:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\npackage main\\r\\n\\r\\nimport (\\r\\n    &quot;fmt&quot;\\r\\n    &quot;syscall/js&quot;\\r\\n)\\r\\n\\r\\nfunc sayHello(val []js.Value) {\\r\\n    fmt.Println(&quot;Hello &quot;, val[0])\\r\\n}\\r\\n\\r\\nfunc main() {\\r\\n    c := make(chan struct{}, 0)\\r\\n    js.Global().Set(&quot;sayHello&quot;, js.NewCallback(sayHello))\\r\\n    &lt;-c\\r\\n}\\r\\n</pre>\\n<p>Here we create a <a href=\\\"https://tour.golang.org/concurrency/2\\\">channel</a> of length zero and then await values (which never arrive) keeping the program open. This allows the <code>sayHello</code> callback to get called. Assuming we had a button which calls the function entitled <code>sayHello</code>, this would, in turn, call the Go function with whatever argument gets passed in, printing the answer (i.e., &#8216;Hello, World&#8217;).</p>\\n<p>We can also use the <code>Get</code> method to retrieve a value from the JavaScript main-thread. For example, let&#8217;s say we wanted to get the URL of the current page. We could do that by doing the following:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport (\\r\\n    &quot;fmt&quot;\\r\\n    &quot;syscall/js&quot;\\r\\n)\\r\\n\\r\\nfunc main() {\\r\\n    href := js.Global().Get(&quot;location&quot;).Get(&quot;href&quot;)\\r\\n    fmt.Println(href)\\r\\n}\\r\\n</pre>\\n<p>Which would print out the webpage URL to the web console. We can extrapolate this to get hold of any global JavaScript object, like <code>document</code> or <code>navigator</code> for example.</p>\\n<h3>Conclusion</h3>\\n<p>In this post, we have seen how to get the version of Go necessary to compile WebAssembly, how to structure your files, and how to compile a simple Go program to WebAssembly. We have also taken this further and demonstrated how to set JavaScript variables from Go (and in turn the DOM), set Go variables from JavaScript and also set Go callbacks in JavaScript. </p>\\n<p>The true value of WebAssembly here is to do heavy lifting operations that we may normally do in something like a Web Worker. There are a few examples of such programs across the web, including this <a href=\\\"https://jakedeichert.github.io/wasm-astar/\\\">A Star path search algorithm</a>, calculating <a href=\\\"https://www.hellorust.com/demos/factorial/index.html\\\">factorials</a>, a <a href=\\\"https://github.com/djhworld/gomeboycolor-wasm\\\">fully fledged Gameboy Color emulator</a> (written in Go), or this <a href=\\\"https://d2jta7o2zej4pf.cloudfront.net/\\\">video effects application</a> are good examples of where the near-native speeds of WebAssembly shine.</p>\\n<p>Generally, any time we are considering heavy computation in the browser WebAssembly may be a good choice. Unfortunately, as we have to proxy DOM updates to JavaScript, it is unlikely that DOM heavy code would see much benefit from using WebAssembly. Having said this, WebAssembly provides another tool in the web developers arsenal, allowing them to unlock near-native performance for certain tasks. </p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>For many years there has been the only way to write client-side logic for the web; JavaScript. WebAssembly provides another way, as a low-level language similar to assembly, with a compact binary format. Go, a popular open source programming language focused on simplicity, readability and efficiency, recently gained the ability to compile to WebAssembly. Here [&hellip;]</p>\\n\",\"protected\":false},\"author\":2,\"featured_media\":22030,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,3,6],\"tags\":[5],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Compiling Go to WebAssembly | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Compiling Go to WebAssembly | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"For many years there has been the only way to write client-side logic for the web; JavaScript. WebAssembly provides another way, as a low-level language similar to assembly, with a compact binary format. Go, a popular open source programming language focused on simplicity, readability and efficiency, recently gained the ability to compile to WebAssembly. Here [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2019-01-15T19:58:22+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T17:02:17+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Compiling Go to WebAssembly\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/\\\",\\\"name\\\":\\\"Compiling Go to WebAssembly | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/#primaryimage\\\"},\\\"datePublished\\\":\\\"2019-01-15T19:58:22+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T17:02:17+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/compiling-go-to-webassembly/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16816\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=16816\"}],\"version-history\":[{\"count\":3,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16816/revisions\"}],\"predecessor-version\":[{\"id\":22033,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16816/revisions/22033\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22030\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=16816\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=16816\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=16816\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=16816\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":2,\"name\":\"James Milner\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jmilner/\",\"slug\":\"jmilner\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>James Milner, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"James Milner, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jmilner/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jmilner/\\\",\\\"name\\\":\\\"James Milner, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22030,\"date\":\"2020-01-22T08:52:45\",\"slug\":\"compiling-go-to-webassembly-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/compiling-go-to-webassembly/compiling-go-to-webassembly-2/\",\"title\":{\"rendered\":\"Compiling Go to WebAssembly\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Compiling Go to WebAssembly | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Compiling Go to WebAssembly | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-22T16:52:51+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\\\",\\\"name\\\":\\\"Compiling Go to WebAssembly | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T16:52:45+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T16:52:51+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Compiling Go to WebAssembly\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2019/01/Compiling-Go-to-WebAssembly.png\",\"sizes\":{\"medium\":{\"file\":\"Compiling-Go-to-WebAssembly-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly-300x158.png\"},\"large\":{\"file\":\"Compiling-Go-to-WebAssembly-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly-1024x538.png\"},\"thumbnail\":{\"file\":\"Compiling-Go-to-WebAssembly-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly-150x150.png\"},\"medium_large\":{\"file\":\"Compiling-Go-to-WebAssembly-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly-768x403.png\"},\"full\":{\"file\":\"Compiling-Go-to-WebAssembly.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/01/Compiling-Go-to-WebAssembly.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22030\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:31:29 GMT"],["expires","Mon, 31 Aug 2020 15:31:29 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}