{"value":{"body":"[{\"id\":14681,\"date\":\"2017-07-19T11:09:32\",\"date_gmt\":\"2017-07-19T18:09:32\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=14681\"},\"modified\":\"2020-02-06T11:05:34\",\"modified_gmt\":\"2020-02-06T19:05:34\",\"slug\":\"the-state-of-internationalization-in-javascript\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/the-state-of-internationalization-in-javascript/\",\"title\":{\"rendered\":\"The State of Internationalization in JavaScript\"},\"content\":{\"rendered\":\"<p>As businesses expand into new markets and existing markets become more diverse, it is increasingly rare that enterprise applications can expect to serve speakers of only one language, with identical expectations for how they should be addressed or be presented data. In spite of this, globalization — the process of catering an experience to users in specific regions — receives less attention than is warranted, and many times is an afterthought in application development. In part, however, this is due to how difficult it is to correctly globalize an application.</p>\\n<p><!--more--><br />\\nGlobalizing an application requires a tremendous amount of information. Beyond language-specific messaging, applications must also account for locale-aware string sorting, formatting and parsing dates, lists, currencies, and units. Even within a single language, applications may need to cater to multiple dialects — adapting to regional variations in grammar and vocabulary. There are also technical considerations like proper Unicode and bidirectional text handling.</p>\\n<p>Further, JavaScript itself has not made globalization easy. Between notorious frustrations with localizing <code>Date</code> objects and confusing issues with <a href=\\\"https://mathiasbynens.be/notes/javascript-unicode\\\">handling Unicode text</a>, developers are forced to reach for libraries to manage what they hoped would be provided out of the box.</p>\\n<h2>Overview of Globalization</h2>\\n<p>Globalization encompasses two separate steps: internationalization and localization. Internationalization (often abbreviated to i18n after removing 18 letters) is the process of preparing an application for adaptation to multiple contexts, while localization (often abbreviated l10n for the same reason) refers to the process of adapting an application to a specific context. In other words, internationalization can be seen as the architecture and localization as the data.</p>\\n<p>Some of that data, like locale-specific messaging, will be provided directly by individual applications, while most other data used to localize an application will come from a locale data repository. By far the best and most prevalent repository is The Unicode Consortium&#8217;s <a href=\\\"http://cldr.unicode.org/\\\">Common Locale Data Repository</a> (CLDR). The CLDR data describe how to display <a href=\\\"http://cldr.unicode.org/cldr-features\\\">just about any information</a> that varies from one locale to the next, making it possible for applications to correctly sort values and display lists, currencies, dates, plurals and ordinals. The amount of information in the CLDR and the knowledge needed to process it is overwhelming, so applications will usually access them indirectly through various third-party libraries.</p>\\n<blockquote><p>Some tools aim to be one-stop solutions, whereas others focus on a specific aspect of globalizing JavaScript applications.</p></blockquote>\\n<p>Over the years, several tools have been developed to address the various aspects of globalization. Some aim to be one-stop solutions, whereas others focus on a specific aspect of globalizing JavaScript applications. The list below is certainly not exhaustive, but effectively demonstrates different solutions to the complex issues with globalizing JavaScript applications.</p>\\n<h3>Dojo 1</h3>\\n<p>As a complete JavaScript toolkit, <a href=\\\"http://dojotoolkit.org/\\\">Dojo 1</a> provides an entire <a href=\\\"https://dojotoolkit.org/documentation/tutorials/1.10/i18n/\\\">globalization ecosystem</a>, with mechanisms for <a href=\\\"https://dojotoolkit.org/reference-guide/1.10/dojo/i18n.html\\\">locale-specific messaging</a>, as well as for handling <a href=\\\"https://dojotoolkit.org/reference-guide/1.10/dojo/number.html\\\">numbers</a>, <a href=\\\"https://dojotoolkit.org/reference-guide/1.10/dojo/currency.html\\\">currencies</a>, and <a href=\\\"http://dojotoolkit.org/reference-guide/1.10/dojo/date/locale.html\\\">dates and times</a>. Dojo 1 leverages data from the CLDR, but stores only a subset of it directly in its repository. This removes the need to download the entire CLDR and covers most use cases, with the downside being that more complex locale support requires additional setup. One of the major strengths of the Dojo 1 implementation is that internationalization is a first-class citizen, so it supports most application needs, and it is clear the entire toolkit was built with internationalization in mind. Its main weaknesses are that it supports only a single locale at a time and that it is not feature-complete – requiring applications to rely on additional tools for things like robust message or unit formatting.</p>\\n<h3>MessageFormat.js</h3>\\n<p>Alex Sexton&#8217;s excellent <a href=\\\"https://messageformat.github.io/\\\">MessageFormat.js</a> is a JavaScript implementation of the International Components for Unicode (ICU) project&#8217;s <a href=\\\"http://userguide.icu-project.org/formatparse/messages\\\">MessageFormat standard</a>. When localizing messages displayed to the user, often the only requirement is a way to swap out messages as the locale changes and a way to replace tokens with values. However, this approach fails when message specifics must adapt to variables like gender or count. For example, the classic <a href=\\\"http://todomvc.com/\\\">TodoMVC application</a> displays a count for the number of remaining todos. In English, this message takes two forms: one for the singular form (&#8220;1 item left&#8221;), and the other to display the plural form (&#8220;{n} items left&#8221;). Other languages, however, treat pluralization differently. Arabic, for example, requires an additional form when there are two items left. The ICU MessageFormat is a very well thought-out format that solves these exact issues.</p>\\n<h3>Globalize.js</h3>\\n<p><a href=\\\"https://github.com/globalizejs/globalize\\\">Globalize.js</a>, developed by Rafael Xavier de Souza, is arguably the most complete JavaScript internationalization ecosystem available today. Not only does it support the ICU MessageFormat format (via MessageFormat.js), it also includes pluralization support and date/time/relative time, number/currency, and unit formatting support. Unlike Dojo 1, Globalize.js does not include CLDR data in its repo, but requires that users supply the CLDR data they need. Aiding this is the companion <a href=\\\"https://www.npmjs.com/package/cldr-data\\\"><code>cldr-data</code></a> module that downloads the (near) entire CLDR. The main benefit of this approach is that developers can easily update the application&#8217;s CLDR data as changes are made. The downside is that <code>cldr-data</code> installs a large portion (~250MB) of the CLDR data, which may not be desirable. However, the project does supply a build tool that can compile formatters and eliminate the need to include CLDR data in the output modules. At the moment, Globalize.js does not fall back to the native <code>Intl</code> global (see below) when available, but that may change in future.</p>\\n<h3>Moment.js</h3>\\n<p>By now most JavaScript developers will be at least marginally familiar with <a href=\\\"http://momentjs.com/\\\">Moment.js</a>, even without prior experience in globalizing applications. Along with Globalize and the Dojo Toolkit, Moment is a member of the <a href=\\\"https://js.foundation/\\\">JS Foundation</a>, and is the go-to library for parsing, formatting, and validating dates and times. Localizing dates is one of the most frustrating aspects of globalization in JavaScript, but Moment makes doing so easy.</p>\\n<h3><code>@dojo/i18n</code></h3>\\n<p><a href=\\\"https://github.com/dojo/i18n\\\"><code>@dojo/i18n</code></a> is the internationalization ecosystem for <a href=\\\"https://dojo.io\\\">Dojo 2</a>. Rather than reinvent the wheel, Dojo 2 delegates message, date, number, and unit formatting and parsing to Globalize.js. Attempting to avoid the limitations of the Dojo 1 implementation, <code>@dojo/i18n</code> supports dynamic locale switching, provides sensible fallbacks for unsupported locales, and even allows multiple locales with multiple text directions to be used within the same application simultaneously. Like Globalize, <code>@dojo/i18n</code> does not supply CLDR data, instead requiring applications to provide all required data. The impetus behind this decision is that the project does not wish to bind applications to a specific version of the CLDR, but also does not want to require that every application download the entire CLDR.</p>\\n<h3>Native Internationalization Support with ES6 and ECMA-402</h3>\\n<p>Recognizing the need for a dedicated focus on internationlization, TC39 established a separate internationalization specification, <a href=\\\"http://ecma-international.org/publications/standards/Ecma-402.htm\\\">ECMA-402</a>. Development follows the <a href=\\\"https://tc39.github.io/process-document/\\\">TC39 process</a>, so new features are proposed, evaluated, and promoted through a series of stages until the change is either rejected or formally added to the language. Thus far, <code>Intl.DateTimeFormat</code> (date and time formatting), <code>Intl.NumberFormat</code> (number and currency formatting), and <code>Intl.Collator</code> (locale-aware string sorting) enjoy support in modern browsers (IE11, Edge, and latest Chrome, Firefox, Safari, iOS Safari, and Android).</p>\\n<p>For applications that must support older browsers, there is an <a href=\\\"https://github.com/andyearnshaw/Intl.js/\\\"><code>Intl</code> polyfill</a> that implements the <code>DateTimeFormat</code> and <code>NumberFormat</code> constructors, along with the corresponding ECMA-402 changes to the <code>Date</code> and <code>Number</code> globals. As the project README notes, certain implementation-dependent features have not been polyfilled, such as &#8220;best fit&#8221; locale matching (which provides more sensible locale fallbacks, like &#8220;es-UY&#8221; (Uruguayan Spanish) to &#8220;es-AR&#8221; (Argentine Spanish) rather than the default &#8220;es&#8221; (Castillian)), or the <code>Intl.Collator</code> constructor due to the complexity of the sorting algorithm as well as to the amount of data that would need to be sent over the network to enable proper sorting. In the past, many applications delegated locale-specific sorting to the server, which unfortunately may still be required where <code>Intl.Collator</code> support is missing.</p>\\n<p>Beyond the new functionality introduced with ECMA-402, ES6 has also improved internationlization support for the existing <code>String</code>, <code>Date</code>, <code>RegExp</code>, and <code>Number</code> natives. For one, modern browsers now support additional <code>locale</code> and <code>options</code> arguments that have been added to methods like <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\\\"><code>String.prototype.localeCompare</code></a> and <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\\\"><code>Date.prototype.toLocaleString</code></a>, and inconsistencies in older browser implementations have been fixed, making those methods safer to use than they previously had been. Especially welcome is the improved support for Unicode text, both in strings and in regular expressions.</p>\\n<p>Without going into too much detail, JavaScript strings and regular expressions prior to ES6 recognize only the first four hexadecimal digits in a Unicode code point, so those in the Basic Multilingual Plane (0x0000 &#8211; 0xFFFF). For example, the &#8220;G Clef&#8221; musical symbol (&#8220;?&#8221;) is represented by the code point U+1D11E. However, when we attempt to use that code point in a string (<code>'\\\\u1D11E'</code>) or regular expression (<code>/\\\\u1D11E/</code>), JavaScript actually treats it as the two-character sequence &#8220;?E&#8221; (&#8220;U+1D11 Latin Small Letter Sideways O&#8221; and &#8220;U+0045 Latin Capital Letter E&#8221;). Since such characters can also be represented as surrogate pairs, we can work around this problem by using either the surrogate pair (<code>'\\\\uD834\\\\uDD1E'</code>) or the character itself (which JavaScript translates internally to its surrogate pair), but surrogate pairs cannot be used as boundaries for regular expression ranges. ES6 solves these issues with Unicode code point escapes (supported in modern browsers, excepting IE11 and under), which use braces to delimit code points:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">'\\\\u1D11E' // &quot;?E&quot; (without the escape)\\r\\n'\\\\u{1D11E}' // '?'\\r\\n\\r\\n/\\\\u1D11E/.test('?') // false (without the escape)\\r\\n/\\\\u{1D11E}/u.test('?') // true (note the required `u` flag)\\r\\n\\r\\n/[?-?]/.test('?') // Error: invalid range\\r\\n/[?-?]/u.test('?') // true (note the required `u` flag)\\r\\n/[\\\\u{1D11E}-\\\\u{1D122}]/u.test('?') // true (note the required `u` flag)</pre>\\n<p>Finally, it is worth mentioning <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\\\"><code>String.prototype.normalize</code></a>, which returns a string&#8217;s Unicode normalization form. Since there are multiple code point combinations that can be used to represent the same visual character, it is possible that two visually identical strings will fail a comparison operation. For example, the &#8220;é&#8221; in &#8220;résumé&#8221; can be represented either as the character &#8220;U+00E9 Latin Small Letter E with Acute&#8221;, or as lowercase &#8220;e&#8221; combined with &#8220;U+0301 Combining Acute Accent&#8221;:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">'re\\\\u0301sume\\\\u0301' === 'résumé' // false\\r\\n'r\\\\u00e9sum\\\\u00e9' === 'résumé' // true</pre>\\n<p>Although the strings are visually identical, they are comprised of different characters and therefore are not equal. To account for such scenarios, the <code>normalize</code> method maps visually identical characters to a canonical form:</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">const normalized = 're\\\\u0301sume\\\\u0301'.normalize();\\r\\nnormalized === 'résumé' // true\\r\\nnormalized === 'r\\\\u00e9sum\\\\u00e9' // true\\r\\nnormalized.charAt(1) === 'e' // false\\r\\nnormalized.codePointAt(1).toString(16) // &quot;e9&quot;, i.e., &quot;U+00E9 Latin Small Leter E with Acute&quot;</pre>\\n<h3>Current Proposals</h3>\\n<p>ECMA-402 has made significant improvements to the language, yet those improvements are but a stepping stone toward complete internationalization support. A number of other proposals have been submitted and if these additions are incorporated into the standard, JavaScript will have native support for much of the functionality required to internationalize the majority of applications. The most notable exception is message translation; for the time being, tools like <a href=\\\"https://messageformat.github.io/\\\">MessageFormat.js</a> and ecosystems like <a href=\\\"https://github.com/globalizejs/globalize\\\">Globalize</a> or <a href=\\\"https://github.com/dojo/i18n\\\"><code>@dojo/i18n</code></a> are still required for robust translation support.</p>\\n<ul>\\n<li><a href=\\\"https://github.com/tc39/proposal-regexp-unicode-property-escapes\\\">A proposal to add Unicode property escapes</a> to regular expressions is currently at Stage 3, and will allow readable keywords in regular expressions instead of unreadable Unicode ranges. For example, if you want to match uppercase characters in a regular expression, how might you do so? <code>/[A-Z]/</code> does not work for all languages, so an exhaustive solution requires knowledge of which Unicode characters are considered uppercase. Unicode itself, however, already uses properties to classify characters as uppercase or lowercase, and this change will allow those property names to be used:\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\tconst matchUppercase = /\\\\p{Uppercase}/u; // `u` flag required\\r\\n\\t\\tconst matchArabic = /\\\\p{Script_Extensions=Arabic}/u; // `u` flag required</pre>\\n</li>\\n<li><a href=\\\"https://github.com/zbraniecki/proposal-intl-formatToParts\\\"><code>Intl.DateTimeFormat.prototype.formatToParts</code></a> and <a href=\\\"https://github.com/zbraniecki/proposal-intl-formatToParts\\\"><code>Intl.NumberFormat.prototype.formatToParts</code></a> are Stage 4 and Stage 3 proposals (respectively) with very limited (and experimental) browser support. These methods allow dates and numbers (like currencies) to be formatted to an array of individual parts, allowing them to be further formatted as needed. For example,\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\t// Create a list element with the following text items:\\r\\n\\t\\t// month: 7\\r\\n\\t\\t// day: 11\\r\\n\\t\\t// year: 2017\\r\\n\\t\\tconst ul = document.createElement('li');\\r\\n\\t\\tnew Intl.DateTimeFormat('en-US')\\r\\n\\t\\t\\t.formatToParts(new Date(2017, 06, 11))\\r\\n\\t\\t\\t.forEach(({ type, value }) =&gt; {\\r\\n\\t\\t\\t\\t// skip any separator like &quot;/&quot;\\r\\n\\t\\t\\t\\tif (type !== 'literal') {\\r\\n\\t\\t\\t\\t\\tconst li = document.createElement('li');\\r\\n\\t\\t\\t\\t\\tli.textContent = `${type}: value`;\\r\\n\\t\\t\\t\\t\\tul.appendChild(li);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t});</pre>\\n</li>\\n<li><a href=\\\"https://github.com/tc39/proposal-intl-plural-rules\\\"><code>Intl.PluralRules</code></a> is a Stage 3 proposal that adds native support for loading locale-specific plural forms. Most developers may never need to use this feature directly; it is more likely to be used by libraries like MessageFormat.js to eliminate the need to load additional CLDR data.\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\tconst ordinal = new Intl.PluralRules('en', { type: 'ordinal' });\\r\\n\\t\\tordinal.select(1); // &quot;one&quot; (&quot;1st&quot;)\\r\\n\\t\\tordinal.select(2); // &quot;two&quot; (&quot;2nd&quot;)\\r\\n\\t\\tordinal.select(3); // &quot;few&quot; (&quot;3rd&quot;)\\r\\n\\t\\tordinal.select(4); // &quot;other&quot; (&quot;4th&quot;)</pre>\\n</li>\\n<li><a href=\\\"https://github.com/tc39/proposal-intl-segmenter\\\"><code>Intl.Segmenter</code></a> is a Stage 3 proposal that provides locale-specific <a href=\\\"https://en.wikipedia.org/wiki/Text_segmentation\\\">text segmentation</a>, which is useful for such operations as iterating over strings with multiple combining code points (grapheme clusters that are meant to be interpreted as a single character) or correctly determining word boundaries.\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\tconst segmenter = new Intl.Segmenter('en', { granulariy: 'word' });\\r\\n\\t\\tconst iterator = segmenter.segment('The quick brown fox jumps over the lazy dog');\\r\\n\\t\\tconst reversed = Array.from(iterator, ({ segment }) =&gt; segment).reverse();\\r\\n\\r\\n\\t\\tconsole.log(reversed.join(' ')); // &quot;dog lazy the over jumps fox brown quick The&quot;</pre>\\n</li>\\n<li><a href=\\\"https://github.com/zbraniecki/proposal-intl-list-format\\\"><code>Intl.ListFormat</code></a>, a Stage 2 proposal that converts an array into a localized list string. For example,\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\t// &quot;Miles, Scott, and Paul&quot;\\r\\n\\t\\tnew Intl.ListFormat('en').format([ 'Miles', 'Scott', 'Paul' ]);</pre>\\n</li>\\n<li><a href=\\\"https://github.com/zbraniecki/proposal-intl-unit-format\\\"><code>Intl.UnitFormat</code></a>, also a Stage 2 proposal that introduces locale-specific unit formatting capabilities. For example,\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\t// &quot;15 hours&quot;\\r\\n\\t\\tnew Intl.UnitFormat('en', {\\r\\n\\t\\t\\ttype: 'duration',\\r\\n\\t\\t\\tunit: 'hour',\\r\\n\\t\\t\\tstyle: 'long'\\r\\n\\t\\t}).format(15);</pre>\\n</li>\\n<li><a href=\\\"https://github.com/tc39/proposal-intl-relative-time\\\"><code>Intl.RelativeTimeFormat</code></a>, a Stage 1 proposal that introduces locale-specific relative time formatting. For example,\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\tnew Intl.RelativeTimeFormat('en').format(-1, 'day'); // &quot;yesterday&quot;</pre>\\n</li>\\n<li><a href=\\\"https://github.com/zbraniecki/proposal-ecma402-datetime-style\\\"><code>dateStyle</code></a> and <a href=\\\"https://github.com/zbraniecki/proposal-ecma402-datetime-style\\\"><code>timeStyle</code></a> options for <a href=\\\"https://github.com/zbraniecki/proposal-ecma402-datetime-style\\\"><code>Intl.DateTimeFormat</code></a>, a Stage 1 proposal, allows dates and times to be formatted based on a single pattern. Currently, formatting for individual date/time parts must be specified as different options (e.g., &#8216;month&#8217;, &#8216;day&#8217;, &#8216;hour&#8217;). For example,\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">\\t\\tconst date = new Date(2017, 06, 11);\\r\\n\\t\\t// current implementation: &quot;July 11, 2017&quot;\\r\\n\\t\\tnew Intl.DateTimeFormat('en', {\\r\\n\\t\\t\\tyear: 'numeric',\\r\\n\\t\\t\\tmonth: 'long',\\r\\n\\t\\t\\tday: '2-digit'\\r\\n\\t\\t}).format(date);\\r\\n\\r\\n\\t\\t// Use a single &quot;dateStyle&quot; option for the same effect:\\r\\n\\t\\tnew Intl.DateTimeFormat('en', { dateStyle: 'long' }).format(date);</pre>\\n</li>\\n</ul>\\n<h2>Summary</h2>\\n<p>JavaScript has come a long way in improving its accessibility across languages and cultures, but the need for third-party tools is not going away anytime soon. As proposals are not guaranteed to advance at a set pace, it is not clear when new features like locale-aware list formatting can be expected to land. While some of the more advanced options are yet to be implemented, applications that target modern browsers can begin using native functionality today for string sorting and many date, time, number, and currency formatting or parsing operations. Until existing proposals are added to the specification, developers must still reach for libraries for exhaustive Unicode support or unit, list, and duration formatting. And unless a proposal for a message formatting implementation is submitted, libraries like MessageFormat.js may always be necessary.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>As businesses expand into new markets and existing markets become more diverse, it is increasingly rare that enterprise applications can expect to serve speakers of only one language, with identical expectations for how they should be addressed or be presented data. In spite of this, globalization — the process of catering an experience to users [&hellip;]</p>\\n\",\"protected\":false},\"author\":61,\"featured_media\":22241,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[214,3],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>The State of Internationalization in JavaScript | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"As businesses expand into new markets and existing markets become more diverse, it is increasingly rare that enterprise applications can expect to serve speakers of only one language, with identical expectations for how they should be addressed or be presented data. In spite of this, globalization — the process of caterin\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/the-state-of-internationalization-in-javascript/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"The State of Internationalization in JavaScript | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"As businesses expand into new markets and existing markets become more diverse, it is increasingly rare that enterprise applications can expect to serve speakers of only one language, with identical expectations for how they should be addressed or be presented data. In spite of this, globalization — the process of caterin\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/the-state-of-internationalization-in-javascript/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-07-19T18:09:32+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-06T19:05:34+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/the-state-of-internationalization-in-javascript/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Internationalization in JavaScript\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/the-state-of-internationalization-in-javascript/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/the-state-of-internationalization-in-javascript/\\\",\\\"name\\\":\\\"The State of Internationalization in JavaScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/the-state-of-internationalization-in-javascript/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-07-19T18:09:32+00:00\\\",\\\"dateModified\\\":\\\"2020-02-06T19:05:34+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/07946fa5d07c9341828fd0a9b1a8192d\\\"},\\\"description\\\":\\\"As businesses expand into new markets and existing markets become more diverse, it is increasingly rare that enterprise applications can expect to serve speakers of only one language, with identical expectations for how they should be addressed or be presented data. In spite of this, globalization \\\\u2014 the process of caterin\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/the-state-of-internationalization-in-javascript/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/07946fa5d07c9341828fd0a9b1a8192d\\\",\\\"name\\\":\\\"Matthew Wistrand\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0118ad1d4f1dbbc656345bd6ab31fdb1?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Matthew Wistrand\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14681\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/61\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=14681\"}],\"version-history\":[{\"count\":2,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14681/revisions\"}],\"predecessor-version\":[{\"id\":22243,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14681/revisions/22243\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22241\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=14681\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=14681\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=14681\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=14681\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":61,\"name\":\"Matthew Wistrand\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/mwistrand/\",\"slug\":\"mwistrand\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0118ad1d4f1dbbc656345bd6ab31fdb1?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0118ad1d4f1dbbc656345bd6ab31fdb1?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0118ad1d4f1dbbc656345bd6ab31fdb1?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Matthew Wistrand, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Matthew Wistrand, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/mwistrand/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0118ad1d4f1dbbc656345bd6ab31fdb1?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/mwistrand/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/mwistrand/\\\",\\\"name\\\":\\\"Matthew Wistrand, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/07946fa5d07c9341828fd0a9b1a8192d\\\",\\\"name\\\":\\\"Matthew Wistrand\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0118ad1d4f1dbbc656345bd6ab31fdb1?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Matthew Wistrand\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/mwistrand/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/61\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22241,\"date\":\"2020-02-06T11:04:17\",\"slug\":\"internationalization-in-javascript\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/the-state-of-internationalization-in-javascript/internationalization-in-javascript/\",\"title\":{\"rendered\":\"Internationalization in JavaScript\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Internationalization in JavaScript | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Internationalization in JavaScript | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-06T19:04:21+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\\\",\\\"name\\\":\\\"Internationalization in JavaScript | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-02-06T19:04:17+00:00\\\",\\\"dateModified\\\":\\\"2020-02-06T19:04:21+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Internationalization in JavaScript\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/07/Internationalization-in-JavaScript.jpg\",\"sizes\":{\"medium\":{\"file\":\"Internationalization-in-JavaScript-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript-300x158.jpg\"},\"large\":{\"file\":\"Internationalization-in-JavaScript-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Internationalization-in-JavaScript-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript-150x150.jpg\"},\"medium_large\":{\"file\":\"Internationalization-in-JavaScript-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript-768x403.jpg\"},\"full\":{\"file\":\"Internationalization-in-JavaScript.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/07/Internationalization-in-JavaScript.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22241\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:12:34 GMT"],["expires","Thu, 24 Sep 2020 13:12:34 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}