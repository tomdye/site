{"value":{"body":"[{\"id\":705,\"date\":\"2009-04-06T06:55:48\",\"date_gmt\":\"2009-04-06T13:55:48\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/2009/04/06/queued-and-air-issues-part-ii/\"},\"modified\":\"2009-04-06T06:55:48\",\"modified_gmt\":\"2009-04-06T13:55:48\",\"slug\":\"queued-and-air-issues-part-ii\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/queued-and-air-issues-part-ii/\",\"title\":{\"rendered\":\"Queued and AIR Issues, Part II\"},\"content\":{\"rendered\":\"<p>In Part I of <a href=\\\"https://www.sitepen.com/blog/2009/04/01/queued-and-air-issues-part-i/\\\">Queued and AIR issues</a>, I talked about some of the challenges we faced during the development of <a href=\\\"https://www.sitepen.com/labs/queued/\\\">Queued</a>, our AIR application that allows you to manage your Netflix queues.  In this post, I&#8217;ll discuss five other issues we ran across.</p>\\n<p><!--more--></p>\\n<h2>Dealing with the AIR Application Sandbox</h2>\\n<p>One major issue we discovered, during the development of the offline-to-online synchronization, was running head-first into the wall created by <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/devappshtml/WS5b3ccc516d4fbf351e63e3d118666ade46-7f05.html\\\">the application sandbox</a>.  This sandbox is AIR&#8217;s mechanism for preventing any kind of scripting exploits within AIR applications, and it is very robust.  However, one of the major restrictions is the following:</p>\\n<blockquote><p>\\nFor HTML content in the application security sandbox, there are limitations on using APIs that can dynamically transform strings into executable code after the code is loaded (after the onload event of the body element has been dispatched and the onload handler function has finished executing). This is to prevent the application from inadvertently injecting (and executing) code from non-application sources (such as potentially insecure network domains).<br />\\n&#8230;<br />\\nOne restriction is in the use of the JavaScript eval() function. Once code in the application sandbox is loaded and after processing of the onload event handler, you can only use the eval() function in limited ways.\\n</p></blockquote>\\n<p>(For more information, you can <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/devappshtml/WS5b3ccc516d4fbf351e63e3d118666ade46-7f11.html#WS5b3ccc516d4fbf351e63e3d118676a3fc7-7fe7\\\">check out the AIR documentation about security</a>.)</p>\\n<p>While we were aware of this restriction from previous work with AIR, this threw us for a curve when implementing the transaction queue.  The original design of the queue was to place the functions actually needed to accomplish a synchronization task within the database itself, so that when the user returned online, the database could simply be read and executed.  But without the ability to use <code>eval()</code> or the <code>new Function()</code> constructor, we could not use this approach.</p>\\n<p>Instead we created a function map:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar methods = {\\n\\trate: function(args){\\n\\t\\treturn qd.service.titles.rate(args);\\n\\t},\\n\\tadd: function(args){\\n\\t\\tvar dfd = new dojo.Deferred();\\n\\t\\tqd.app.queue.addMovieById(args.movieId, null, args.queue);\\n\\t\\tsetTimeout(function(){\\n\\t\\t\\tdfd.callback();\\n\\t\\t}, 250);\\n\\t\\treturn dfd;\\n\\t},\\n\\ttermAdd: function(args){\\n\\t\\tvar dfd = new dojo.Deferred();\\n\\t\\tvar queue = args.queue;\\n\\t\\targs.result = function(item){\\n\\t\\t\\tqd.app.queue.addMovieById(item.guid, null, queue);\\n\\t\\t\\tdfd.callback();\\n\\t\\t};\\n\\t\\tdelete args.queue;\\n\\t\\tqd.service.titles.fetch(args);\\n\\t\\treturn dfd;\\n\\t},\\n\\tmodify: function(args){\\n\\t\\treturn qd.service.queues.modify(args);\\n\\t},\\n\\tremove: function(args){\\n\\t\\treturn qd.service.queues.remove(args);\\n\\t},\\n\\tdiscs: function(){\\n\\t\\treturn qd.service.queues.discs({ max: 1 });\\n\\t},\\n\\tinstant: function(){\\n\\t\\treturn qd.service.queues.instant({ max: 1 });\\n\\t}\\n};\\n</pre>\\n<p>View the <a href=\\\"http://code.google.com/p/queued/source/browse/trunk/src/js/dev/qd/services/online.js\\\">code that handles the offline sync</a>.</p>\\n<p>By writing out a function map in this matter, we could then store the <em>arguments</em> used with this map as JSON structures in the database (as well as the map key), and call it using JavaScript&#8217;s associative array syntax:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ndojo.forEach(data, function(item){\\n    var method = item.method;\\n    actions.push(function(){\\n        if(methods[method]){\\n            try {\\n                qd.services.online.onSyncItemStart(item.prompt);\\n                methods[method](dojo.fromJson(item.args||&quot;{}&quot;))\\n                    .addCallback(function(){\\n                        qd.services.online.onSyncItemComplete();\\n                    }).addErrback(function(err){\\n                        console.warn(err);\\n                        qd.services.online.onSyncItemComplete();\\n                    });\\n            } catch(ex){\\n                console.warn(&quot;sync: &quot;, ex);\\n            }\\n        }\\n    });\\n});\\n</pre>\\n<p>By using the <a href=\\\"http://en.wikipedia.org/wiki/Associative_array\\\">associative array</a> syntax, we were able to circumvent the sandbox restrictions put in place by AIR, and do the online sync in an easy-to-follow manner.  While this works fine for us, it is not an intuitive solution for most developers.</p>\\n<h2>Initial Window Placement</h2>\\n<p>One of the problems with the structure of an <a href=\\\"http://get.adobe.com/air\\\">AIR</a> application is the way the manifest is used for compilation.  For those unfamiliar with AIR application development, a <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/devappshtml/WS5b3ccc516d4fbf351e63e3d118666ade46-7ecc.html\\\">manifest</a> is the initial XML file AIR uses to compile an application into an executable format; it defines things like the version of the application, the publisher of an application, and other attributes AIR needs to make your HTML-based application into a usable application.  Among these attributes are the definitions of the initial window&mdash;both the size and the initial placement.</p>\\n<p>Most desktop applications are written using the following initialization routine:</p>\\n<ol>\\n<li>A splash screen is placed on the desktop</li>\\n<li>The application performs any initialization tasks it needs to&mdash;such as loading in parameters, defining/checking variables, and other things</li>\\n<li>When the initialization completes, the actual application interface is presented to the user.</li>\\n</ol>\\n<p>For a number of reasons, we decided to develop Queued without a splash screen.  We felt that we could complete all necessary initialization without seriously interfering with the user experience; splash screens have a tendency to delay user interaction to the point where it can be frustrating (as in, <em>It is my queue and I want to see it NOW</em>!), so our goal was to make it so you were connected to your information as absolutely fast as possible.</p>\\n<p>Unfortunately, one of the side effects of this approach is the inability to use basic features like the last x/y window coordinates of your previous usage of Queued.  Don&#8217;t get me wrong&mdash;we can capture that information and store it without any difficulty.  But usually that sort of thing is used during an initialization process, i.e. splash screen (from the user interface point-of-view), and because we decided not to use that approach, the main window for Queued will always appear in the same spot (with the same size) regardless of what you have done previously with the main window.</p>\\n<p>We felt (pretty strongly) that loading up the application as fast as possible was an acceptable trade-off to remembering the last settings of the window hosting the application.</p>\\n<h2>The ELS, performance, and serialization</h2>\\n<p>In Part I, I talked a bit about AIR&#8217;s <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/devappshtml/WS5b3ccc516d4fbf351e63e3d118666ade46-7e31.html\\\">Encrypted Local Storage</a>, or ELS, and how we used it to set up an encrypted database without forcing user interaction.  This storage mechanism (similar to the Firefox browser storage or the proposed HTML5 feature) is essentially a cookie store that allows for larger data structures and limits; and it has been designed to make sure that the store is isolated by application and user (so 2 users on the same machine, using Queued, would each have their own ELS).  Thinking that using the ELS would be faster than using the encrypted database for certain things, we began using it not only to store the password of the database&mdash;but also for essential user information, such as your name, some of your preferences, and your queues.</p>\\n<p>We did not realize that this was A <em>Bad</em> Ideaâ„¢.  On my own Netflix account, I have an average of 35 titles in my disc queue, and another 35 in my Instant queue.  All queue items in Queued are stored as a fairly complex JSON structure (see <a href=\\\"https://www.sitepen.com/blog/2009/03/26/queued-api-challenges/#more-667\\\">this post</a> by my friend and colleague <a href=\\\"https://www.sitepen.com/blog/author/mwilcox\\\">Mike Wilcox</a>) and because of this, a user&#8217;s queue information can get fairly large.  Adobe itself states (with regards to ELS size and performance):</p>\\n<blockquote><p>\\nThe encrypted local store may perform more slowly if the stored data exceeds 10MB.\\n</p></blockquote>\\n<p>What we found was that it took a lot less data to make it perform slowly; saving my information (with my queues) was taking something on the order of 10 seconds to do for approximately 2.5MB of data, and was interrupting the user interface thread, providing an unacceptable user experience.</p>\\n<p>We solved this issue by pulling all of the user&#8217;s queue information and using the database instead to cache it.  Now we only use the ELS to store basic data&mdash;such as the user&#8217;s information, preferences and authorization info (soon we won&#8217;t be using the ELS at all but that is another story for another time).</p>\\n<h3>Serialization and the ELS</h3>\\n<p>Another issue with the ELS is the way objects are serialized and marshaled for it.  The ELS uses <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/jslr/flash/utils/ByteArray.html\\\">ByteArray</a>s for storage (presumably to facilitate the encryption process).  AIR&#8217;s ByteArray is pretty robust; it allows you to read and write all sorts of data types to the internal stream, taking care of the serialization process (i.e. converting a type into a concrete format) in a seamless manner.</p>\\n<p>Unfortunately, the serialization format AIR uses is the <a href=\\\"http://osflash.org/documentation/amf\\\">ActionScript Message Format</a> (AMF).  For Flash, Flex and AIR apps written based on ActionScript objects, this is a great way of doing things.  But for native JavaScript objects, not so much&mdash;partially because AMF assumes existing class structures for marshaling (i.e. deserialization), and JavaScript object structures (such as the ones we use for defining things like titles and queue items) are essentially classless <a href=\\\"http://en.wikipedia.org/wiki/Mixin\\\">mixins</a>.</p>\\n<p>In the end, we simply used Dojo&#8217;s <a href=\\\"http://docs.dojocampus.org/dojo/_base/json\\\">JSON</a> handling facilities to both serialize and parse, and simply pushed things into the ELS as a string.</p>\\n<h2>Managing Queued&#8217;s Exit Events</h2>\\n<p>One of the coolest features of Queued is the Mini-Queue:</p>\\n<p><a href='https://wp.sitepen.com/wp-content/uploads/2009/03/miniqueue.png' title='Queuedâ€™s Mini-Queue window'><img src='https://wp.sitepen.com/wp-content/uploads/2009/03/miniqueue.png' alt='Queuedâ€™s Mini-Queue window' /></a></p>\\n<p>This is a chromeless window that shows you (at a glance) what you have at home, and can do other things (such as alerting you when Netflix receives or ships other titles).  It&#8217;s a neat piece of functionality that allows you to run Queued in the background without having to have the main window open all the time.</p>\\n<p>However, introducing a second window (particularly a chromeless one) into the application structure caused a number of management issues&mdash;in particular, dealing with the application&#8217;s <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/jslr/flash/desktop/NativeApplication.html#event:exiting\\\">exiting</a> event.  What we needed was a reliable way of controlling how Queued quit when showing the Mini-Queue but without showing the main application window, and we found that trying to use the <em>exiting</em> event seemed to be unreliable (certain operating system actions would cause the event not to fire, debugging it was a significant pain, and there were a number of other problems I won&#8217;t go into here).</p>\\n<p>In the end, we set up Queued so that if you have the Mini-Queue open, the only reliable way to exit the app was to use the Dock Icon/Taskbar tray to force the exit:</p>\\n<p><a href=\\\"https://wp.sitepen.com/wp-content/uploads/2009/03/ishot-5.jpg\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2009/03/ishot-5.jpg\\\" border=\\\"0\\\" /></a></p>\\n<p>We will probably revisit this in a future release of Queued.</p>\\n<h2>Tray/Dock Icon Loading and Menu Handling</h2>\\n<p>Speaking of the context menu attached to the tray or dock icon&#8230;we ran across an issue where the application icon that is supposed to appear in the tray of the Windows taskbar would not load correctly.  For loading the icons, we used <a href=\\\"http://code.google.com/p/dair/source/browse/trunk/js/dair/Icon.js\\\">dAIR&#8217;s Icon</a> (from the <a href=\\\"http://code.google.com/p/dair\\\">Dojo Extensions for Adobe AIR</a> library), which handles many of the basic AIR tasks in a convenient higher-level Dojo-esque manner.</p>\\n<p>For reasons still undetermined&mdash;though we&#8217;ve traced it to concurrent network activity&mdash;loading the icon images for the tray consistently failed when loading Queued.  Without being able to know when any kind of network activity is already in progress, the only solution we found was to retry the image load until successful (or until we reached a limit of retries).  This solution is less than ideal but It Worksâ„¢.</p>\\n<h3>Tray menu handling</h3>\\n<p>Last but not least, one quirk of Adobe AIR is the separation between the <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/jslr/flash/desktop/DockIcon.html\\\">DockIcon</a> vs. the <a href=\\\"http://help.adobe.com/en_US/AIR/1.5/jslr/flash/desktop/SystemTrayIcon.html\\\">SystemTrayIcon</a>.  Both classes are designed to support OS-based functionality; however, because of the nature of the DockIcon we ran into major issues when trying to determine if someone had opened the context menu attached to it.  </p>\\n<p>Simply put, the DockIcon does not support any kind of mouse click events, whereas the SystemTrayIcon does.</p>\\n<p>In the end, we simply wrote the system tray functionality to mimic the native behavior of the DockIcon.  We found this solution to be less than ideal, since what we <em>really</em> wanted was for the user to be able to close the main window of Queued, and have the icon/app indicator disappear from both the dock and the Windows taskbar (a la <a href=\\\"http://www.utorrent.com\\\">uTorrent</a>).  Because of the behavior of the DockIcon, this was simply not possible to do under OS X.</p>\\n<p>A feature request improvement for Adobe AIR would be to implement an icon + menu that gets placed in the Menu Bar of OS X, and have that act the same way as the SystemTrayIcon class, something like this:</p>\\n<p><a href='https://wp.sitepen.com/wp-content/uploads/2009/03/menuicon.png' title='A menu bar menu example'><img src='https://wp.sitepen.com/wp-content/uploads/2009/03/menuicon.png' alt='A menu bar menu example' /></a></p>\\n<p>This would solve the aforementioned issue in a consistent manner.</p>\\n<h2>Conclusions</h2>\\n<p>Working with Adobe AIR was a bit of a treat, and we had a lot of fun creating Queued&mdash;but in many ways, we learned new lessons the hard way.  I hope talking about some of the issues we ran across during Queued&#8217;s development can help you when creating your own AIR-based applications!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>In Part I of Queued and AIR issues, I talked about some of the challenges we faced during the development of Queued, our AIR application that allows you to manage your Netflix queues. In this post, I&#8217;ll discuss five other issues we ran across.</p>\\n\",\"protected\":false},\"author\":15,\"featured_media\":17660,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[288,45,3,307],\"tags\":[146,52,14,305],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Queued and AIR Issues, Part II | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"In Part I of Queued and AIR issues, I talked about some of the challenges we faced during the development of Queued, our AIR application that allows you to manage your Netflix queues. In this post, I&#039;ll discuss five other issues we ran across.  Dealing with the AIR Application Sandbox One major issue we discovered, duri\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-ii/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Queued and AIR Issues, Part II | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"In Part I of Queued and AIR issues, I talked about some of the challenges we faced during the development of Queued, our AIR application that allows you to manage your Netflix queues. In this post, I&#039;ll discuss five other issues we ran across.  Dealing with the AIR Application Sandbox One major issue we discovered, duri\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-ii/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2009-04-06T13:55:48+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-ii/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-ii/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-ii/\\\",\\\"name\\\":\\\"Queued and AIR Issues, Part II | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-ii/#primaryimage\\\"},\\\"datePublished\\\":\\\"2009-04-06T13:55:48+00:00\\\",\\\"dateModified\\\":\\\"2009-04-06T13:55:48+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/8d656940c34d66b3b8abb8d96024a77d\\\"},\\\"description\\\":\\\"In Part I of Queued and AIR issues, I talked about some of the challenges we faced during the development of Queued, our AIR application that allows you to manage your Netflix queues. In this post, I'll discuss five other issues we ran across. Dealing with the AIR Application Sandbox One major issue we discovered, duri\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/queued-and-air-issues-part-ii/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/8d656940c34d66b3b8abb8d96024a77d\\\",\\\"name\\\":\\\"Tom Trenka\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Tom Trenka\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/705\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/15\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=705\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/705/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/17660\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=705\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=705\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=705\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=705\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":15,\"name\":\"Tom Trenka\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/ttrenka/\",\"slug\":\"ttrenka\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Tom Trenka, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Tom Trenka, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/ttrenka/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/ttrenka/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/ttrenka/\\\",\\\"name\\\":\\\"Tom Trenka, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/8d656940c34d66b3b8abb8d96024a77d\\\",\\\"name\\\":\\\"Tom Trenka\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/6f9453afcd9d67c320df915cd6e9755c?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Tom Trenka\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/ttrenka/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/15\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, X-WP-Nonce, Content-Disposition, Content-MD5, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages, Link"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Tue, 25 Aug 2020 13:31:58 GMT"],["expires","Thu, 24 Sep 2020 13:31:58 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}