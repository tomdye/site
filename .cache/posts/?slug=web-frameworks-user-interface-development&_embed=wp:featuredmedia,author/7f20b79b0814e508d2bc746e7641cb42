{"value":{"body":"[{\"id\":14450,\"date\":\"2017-06-16T16:32:56\",\"date_gmt\":\"2017-06-16T23:32:56\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=14450\"},\"modified\":\"2020-03-30T06:41:20\",\"modified_gmt\":\"2020-03-30T13:41:20\",\"slug\":\"web-frameworks-user-interface-development\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-user-interface-development/\",\"title\":{\"rendered\":\"Web Frameworks: User Interface Development\"},\"content\":{\"rendered\":\"<!-- Added by Post/Page specific custom CSS plugin, thank you for using! -->\\n<style type=\\\"text/css\\\">.title span {\\r\\ndisplay:block;\\r\\nfont-weight:inherit !important;\\r\\n}\\r\\nli {\\r\\nmargin-bottom:.5em !important;\\r\\n}\\r\\n.rule {\\r\\nheight:1px;\\r\\nwidth:100%;\\r\\ndisplay:block;\\r\\nclear:both;\\r\\nmargin-bottom:40px;\\r\\nmargin-top:40px;\\r\\nbackground:#EAEAEA;\\r\\n}\\r\\n.feature-icon {\\r\\ndisplay: block;\\r\\nmargin-left:auto;\\r\\nmargin-right:auto;\\r\\nwidth:130px;\\r\\nmargin-bottom:10px;\\r\\n}\\r\\n.feature-item {\\r\\ntext-align:center;\\r\\nmargin-top: 10px !important;\\r\\nmargin-bottom:30px !important;\\r\\n}\\r\\n.quick-jump {\\r\\nfloat:right;\\r\\ndisplay:block !important;\\r\\nmax-width:350px;\\r\\nborder:1px solid #EAEAEA;\\r\\nmargin-left:40px;\\r\\nmargin-bottom:30px;\\r\\noverflow:hidden;\\r\\nborder-radius:5px;\\r\\n}\\r\\n.quick-jump h4 {\\r\\npadding:7px;\\r\\nmargin:0 !important;\\r\\nbackground:#f8f9fb;\\r\\nmargin-top:0 !important;\\r\\n}\\r\\n.quick-jump ul {\\r\\nmargin:0px !important;\\r\\n}\\r\\n.quick-jump li {\\r\\nlist-style:none;\\r\\nmargin-top:0px;\\r\\nmargin-bottom:0px !important;\\r\\npadding: 7px 3px;\\r\\nmargin-left:0px;\\r\\nborder-top:1px solid #EAEAEA;\\r\\n}\\r\\n.quick-jump li img {\\r\\nvertical-align:middle;\\r\\nwidth:30px;\\r\\nheight:30px;\\r\\ndisplay:inline-block;\\r\\nmargin-right:10px;\\r\\nfloat:left;\\r\\nmargin-top:-2px;\\r\\n}\\r\\n.jump-to {\\r\\nmargin:0 !important;\\r\\ntext-align:center;\\r\\n}\\r\\n.jump-to li {\\r\\nmargin:0 !important;\\r\\nwidth:15%;\\r\\ndisplay:inline-block;\\r\\npadding:5px;\\r\\n}\\r\\n.jump-nav {\\r\\nposition:fixed;\\r\\nbottom:0px;\\r\\nleft:0px;\\r\\nwidth:100%;\\r\\n}\\r\\n@media screen and (max-width: 768px) {\\r\\n.quick-jump {\\r\\ndisplay:none !important;\\r\\n}\\r\\n}</style>\\n<p>Whether it is Top 40 or classical or R&amp;B, artists and music have a recognizable look and feel. When looking at frameworks, some simply provide us with a bag of instruments, while others provide us with chord progressions and album covers we can customize.</p>\\n<p><!--more--></p>\\n<p>This tooling forms the cornerstone of most web frameworks; an interactive user interface. In days of yore, we basically looked for a framework to provide us with a consistent set of instruments we knew we could play. Now we look for frameworks that allow us to create music tracks that we can then remix. In this article, we are going to dig through our collection, taking a closer look at what each framework provides to the band.</p>\\n<p>This blog post continues our series of exploring the considerations made when <a href=\\\"https://www.sitepen.com/blog/tag/choosing-a-js-framework/\\\">choosing a web application framework</a>.</p>\\n<h2>Element, component, widget</h2>\\n<p>Almost all JavaScript application frameworks have a concept of elements, components, or widgets. These are essentially the same concept, simply with a different name. At a minimum, they encapsulate the code needed to provide a visual representation with which the user can interact. In this post, we will refer to them as <em>elements</em> though frameworks may call them by a different moniker.</p>\\n<p>There are several elements that are native to browsers that are provided by HTML. For example, the HTML tag of <code>&lt;button&gt;</code> will provide a user interface element of a button that can be clicked and has a label. Frameworks will often encapsulate these built-in elements and extend them with additional functionality.</p>\\n<p>Most frameworks have strong opinions about the role of elements. Some frameworks insist that elements be <a href=\\\"https://www.sitepen.com/blog/2017/02/27/functional-reactive-programming-and-observables-in-javascript-typescript-and-dojo-2/\\\">reactive</a>, in the sense that they do not contain business logic, that they have properties or state that are set, and any changes to that state would be controlled externally to that element. For example, if you had a textbox type element that could display to the user that the value they entered was not valid, the element would not decide the validity of this element itself. The textbox element would simply notify externally that a value is entered, and if that value is invalid, the textbox element would be set to an invalid state by an external controller.</p>\\n<h2>Defining elements</h2>\\n<p>Frameworks often take different approaches to defining elements. Typically defining an element class is different than defining an instance of that element class. However, some frameworks blur this line considerably, not really making a distinction between a class and an instance.</p>\\n<p>Most frameworks use a <em>domain specific language</em> (<abbr title=\\\"domain specific language\\\">DSL</abbr>) to either create instances of an element or in some cases define classes. Sometimes the DSL is a superset of <abbr title=\\\"hypertext markup language\\\">HTML</abbr> or formalized into a templating language.</p>\\n<p>Prior to ECMA Script 6 (<abbr title=\\\"ECMAScript 6\\\">ES6</abbr>/<abbr title=\\\"ECMAScript 2015\\\">ES2015</abbr>), JavaScript had no formal syntax level class system. ES6 introduced the keyword <code>class</code> to define an instantiable class. Some frameworks leverage this syntax, whereas others use different mechanisms to define a class or class-like construct.</p>\\n<p>The examples for each framework below are minimalist in their approach and demonstrate the main code for defining a class of element and showing how to create an instance of that element. The examples are not intended to be stand-alone, fully-functional, or exactly the same across all frameworks, but are designed to give a flavor of what the source code might look like in that framework.</p>\\n<h2>Out of the box</h2>\\n<p>There is always a compromise between leveraging out of the box elements versus building them as part of the project. As native HTML elements have gotten more feature-rich over the years, many interactions have become easier, but almost every web application is likely to have requirements that exceed the capabilities of these built-in elements. Looking to the framework to provide out of the box elements usually helps engineers solve two challenges:</p>\\n<ul>\\n<li>First, it allows development to be accelerated, being able to create feature-rich applications by just connecting together elements that usually share a common UX design.</li>\\n<li>Second, it gives more in-depth patterns of how to build or extend additional components. Because many of features provided by frameworks transcend the capabilities of the browser, frameworks often solve these issues in radically different ways, many of which we will explore in greater detail in this series.</li>\\n</ul>\\n<p>In this section, we are going to analyze what you get out of the box (or otherwise adopt) with each of the selected frameworks.</p>\\n<h2>Customizing Elements</h2>\\n<p>Even if the framework provides out of the box elements, almost every project is likely to require a custom user interface element. The ability to take existing elements and customize them, or to use the out of the box elements as patterns for developing new components, is a common task. In this section, we will discuss the approach each framework takes to facilitate the creation of custom elements.</p>\\n<h4 style=\\\"text-align: center;\\\">Jump to:</h4>\\n<ul class=\\\"jump-to\\\">\\n<li><a href=\\\"#angular\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#react\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#vue\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#dojo\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#ember\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n<li><a href=\\\"#aurelia\\\"><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"logo\\\" /></a></li>\\n</ul>\\n<div id=\\\"angular\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/angular-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Angular 2+</h2>\\n<h3>Defining elements</h3>\\n<p><em>Angular 2+</em> calls elements <a href=\\\"https://angular.io/docs/ts/latest/guide/architecture.html#!#components\\\"><em>components</em></a>. Reusable classes of components are defined using the ES6 <code>class</code> syntax. Typically these are defined as default exports of ES6 modules, authored in TypeScript and decorated as an Angular module. Components are often tightly coupled with their template, which defines their DOM structure, using the Angular template language. Angular 2+ can be used without transpiling via TypeScript but is challenging and not recommended.</p>\\n<p>An example of defining a class of a todo list:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n@Component({\\r\\n    selector: 'todo-list',\\r\\n    templateUrl: './todo-list.component.html',\\r\\n    providers: [ TodoItemService ]\\r\\n})\\r\\nexport default class TodoList implements OnInit {\\r\\n    items: TodoItem[];\\r\\n    selectedItem: TodoItem;\\r\\n\\r\\n    constructor(private service: TodoItemService) { }\\r\\n\\r\\n    ngOnInit() {\\r\\n        this.items = this.service.getItems();\\r\\n    }\\r\\n\\r\\n    selectItem(item: TodoItem) { this.selectedItem = item; }\\r\\n}\\r\\n</pre>\\n<p>An example of defining the template for a todo list class:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;ul&gt;\\r\\n    &lt;li *ngFor=&quot;let item of items&quot; (click)=&quot;selectItem(item)&quot;&gt;\\r\\n        {{item.label}}\\r\\n    &lt;/li&gt;\\r\\n&lt;/ul&gt;\\r\\n</pre>\\n<p>An example of creating an instance of a todo list, typically in a parent template:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;todo-list [items]=&quot;todoItems&quot;&gt;&lt;/todo-list&gt;\\r\\n</pre>\\n<h3>Out of the box</h3>\\n<p><em>Angular 2+</em> provides a set of <a href=\\\"https://material.angular.io/\\\">Material Design components</a>. It is an extensive set of components covering form controls, navigation, layout, buttons, indicators, icons, popups, and modals. Angular provides an <a href=\\\"https://material.angular.io/components/\\\">extensive showcase</a> of their components.</p>\\n<h3>Customizing elements</h3>\\n<p>Customizing a component in <em>Angular 2+</em>, specifically those from Material Design components, typically requires that you subclass the component, override any behaviors and use a decorator to <a href=\\\"https://stackoverflow.com/questions/37568173/extend-override-style-of-reusable-angular2-component\\\">override the reflection metadata associated with the class</a>. The behaviors of components are not currently designed to be <em>composable</em> though the <a href=\\\"https://github.com/angular/material2/issues/2194#issuecomment-292812290\\\">Angular team is looking at ways to break out these behaviors</a>.</p>\\n<p>Realistically, outside of using the theming system, if the out of the box component does not do exactly what you need it to do, you would create a new custom component following the patterns and best practices of Angular 2+.</p>\\n<h3>Building a user interface library</h3>\\n<p>There are a couple of options to build a user interface library. You can build on top of Material 2, by adding custom components alongside the Material 2 components. In this case, you can <a href=\\\"https://material.angular.io/guide/theming-your-components\\\">leverage the theming system from Material 2</a>. While Material 2 is a fairly complete set of UI components for most interactions, it lacks a high-performance data grid.</p>\\n<p>The other option is to build components consistent with the architecture of Angular 2+. The <a href=\\\"https://angular.io/docs\\\">Angular documentation</a> caters well to detailing how to write components that interact with the application framework. While i18n and animations are provided by the main framework, much of the necessary functionality including accessibility, gesture support, and theming are part of Material 2, which means that those features would need to be adopted from Material 2 or alternative ways of accomplishing these would need to be considered.</p>\\n<h3>Re-using and sharing elements</h3>\\n<p>Components created in Angular 2+ are <code>ngModules</code> which fit into the Angular 2+ ecosystem. Components are usually distributed as transpiled modules in the CommonJS format, as this is often the easiest to be consumed by other applications. They can be published to npm and jspm can then be used for the dependency management.</p>\\n<p>There is not a consistent component style system, though, and there is the <a href=\\\"http://blog.angular-university.io/how-to-create-an-angular-2-library-and-how-to-consume-it-jspm-vs-webpack/#howtopublishcomponentcssthen\\\">suggestion</a> that the <em>best</em> way is to include CSS as inline styles of your component to make it easy to be imported and consumed. Our opinion is that this is not an ideal way to deal with CSS, and that it would be better to document how someone would include the component&#8217;s CSS in the build process, typically via webpack.</p>\\n<div id=\\\"react\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/react-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">React + Redux</h2>\\n<h3>Defining elements</h3>\\n<p><em>React</em> provides the UI as part of a React + Redux application. <em>React</em> calls elements <a href=\\\"https://facebook.github.io/react/docs/components-and-props.html\\\"><em>components</em></a>. Reusable components are either functions or ES6 classes. React heavily leverages <a href=\\\"https://facebook.github.io/react/docs/introducing-jsx.html\\\">JSX</a>, a syntax extension to JavaScript. Also, React expects to be used in an ES6+ compatible browser. Because no run-time environment supports JSX natively and because of the dependency on modern JavaScript, React is typically transpiled for production use. React can be used without modern JavaScript and JSX, but it is difficult and not recommended.</p>\\n<p>An example of defining a class of todo list as a function:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nfunction TodoList(props) {\\r\\n    const todoItems = props.items.map((item) =&gt;\\r\\n        &lt;li&gt;{item}&lt;/li&gt;\\r\\n    );\\r\\n    return &lt;ul&gt;{todoItems}&lt;/ul&gt;;\\r\\n}\\r\\n</pre>\\n<p>An example of defining a class of todo list as an ES6 <code>class</code>:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass TodoList extends React.Component {\\r\\n    render() {\\r\\n        const todoItems = this.props.map((item) =&gt;\\r\\n            &lt;li&gt;{item}&lt;/li&gt;\\r\\n        );\\r\\n        return &lt;ul&gt;{todoItems}&lt;/ul&gt;;\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>An example of creating an instance of a todo list:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst items = [ 'item1' ];\\r\\nReactDOM.render(\\r\\n    &lt;TodoList items={items} /&gt;,\\r\\n    document.getElementById('root')\\r\\n);\\r\\n</pre>\\n<h3>Out of the box</h3>\\n<p><em>React</em> is primarily a library for building user interface components, not an existing set of components. There are an extensive set of third-party components that are designed to use React as its user interface library. One listing of these components is available at <a href=\\\"https://devarchy.com/react\\\">devarchy React</a>.</p>\\n<h3>Customizing elements</h3>\\n<p>As mentioned above, <em>React</em> is a foundational set of APIs for writing user interface components. Any third party components you choose to utilize would be customizable in the way the component author sees fit. Typically though, because the UI is intended to be reactive, there is very little code or logic in components, and if a component does not do what you want it to do, you would write a custom component that meets your needs.</p>\\n<h3>Building a user interface library</h3>\\n<p>Base <em>React</em> is a set of APIs for rendering UI elements. It has a set of patterns to make higher order components to create a user interface library. The functionality provided by base <em>React</em> though is focused mainly on encapsulating a component which renders a DOM structure. Managing DOM events to translate into higher order concerns like gestures would need to be implemented or a third-party library would need to be utilized. Also, functionality like i18n would need to be integrated.</p>\\n<p>There are several third-party component libraries which can be leveraged as a foundation. These obviously have different focuses and have their own strengths and weaknesses.</p>\\n<h3>Re-using and sharing elements</h3>\\n<p>React components are typically distributed as JSX modules along with accompanying CSS styles. These are then integrated into a build pipeline for further processing and bundling. Components are typically published to npm and either npm or <a href=\\\"https://yarnpkg.com/\\\">yarn</a> is used for dependency management.</p>\\n<p>While not a requirement of the ecosystem, programmatic CSS/styles have become an increasingly popular way to create the styling needed and to try to encapsulate that into a component. We do not think this is a good practice. Inline styles are <em>always</em> less performant than CSS that is loaded into the browser. Significant consideration should be given to how CSS is managed within reusable components.</p>\\n<div id=\\\"vue\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/vue-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Vue.js</h2>\\n<h3>Defining elements</h3>\\n<p><em>Vue.js</em> calls elements <a href=\\\"https://vuejs.org/v2/guide/components.html\\\"><em>components</em></a>. Reusable classes of components are defined via the <code>Vue.component()</code> function and instances use a custom tag in the HTML markup.</p>\\n<p>An example of creating a class of a todo list:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nVue.component('todo-list', {\\r\\n    data: function () {\\r\\n        return {\\r\\n            items: [ 'item1' ]\\r\\n        };\\r\\n    },\\r\\n    methods: {\\r\\n        selectItem: function (item) {\\r\\n            /* logic to select item */\\r\\n        }\\r\\n    }\\r\\n    template: '&lt;ul&gt;&lt;li v-for=&quot;item in items&quot; @click=&quot;selectItem(item)&quot;&gt;{{item.label}}&lt;/li&gt;&lt;/ul&gt;'\\r\\n});\\r\\n</pre>\\n<p>An example of creating an instance of a todo list:</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;todo-list&gt;&lt;/todo-list&gt;\\r\\n</pre>\\n<p>While the Vue.js DSL for instantiating elements is similar to <em>Custom Elements</em> that are part of the <a href=\\\"https://www.w3.org/wiki/WebComponents/\\\">Web Components specification</a>, it is only conceptually aligned to the specification and does not leverage the Web Components technology at the implementation level.</p>\\n<h3>Out of the box</h3>\\n<p><em>Vue.js</em> focuses more on providing an MVVM application framework. While it provides patterns for creating components, it does not provide a set of common out of the box components. One of the major unique selling points (<abbr title=\\\"unique selling point\\\">USP</abbr>) for Vue.js is its focus on incremental implementation and, in practice, many implementations will wrap other UI components and bind them to a Vue.js application.</p>\\n<p>There is an <a href=\\\"http://matthiashager.com/blog/vuejs-frontend-ui-frameworks-comparison\\\">excellent blog post</a> that compares some of the available component/design frameworks that have been built upon Vue.js or integrate with Vue.js. These are some that are available:</p>\\n<ul>\\n<li><a href=\\\"http://element.eleme.io/\\\">Element</a> &#8211; Vue 2.0 based component library for developers, designers, and product managers, with a set of design resources.</li>\\n<li><a href=\\\"http://framework7.io/vue/\\\">Framework7</a> &#8211; Full-featured HTML Framework For Building iOS and Android Apps. It relies upon PhoneGap to provide a native-like experience.</li>\\n<li><a href=\\\"https://josephuspaye.github.io/Keen-UI/\\\">Keen UI</a> &#8211; A lightweight collection of essential UI components written with Vue.js and inspired by <a href=\\\"https://material.io/\\\">Material Design</a>.</li>\\n<li><a href=\\\"http://quasar-framework.org/\\\">Quasar</a> &#8211; Build responsive websites, hybrid mobile Apps (that look native!) and Electron apps using the same code, with Vue.js 2.</li>\\n<li><a href=\\\"https://vuetifyjs.com/\\\">Vuetify.js</a> &#8211; A library of <a href=\\\"https://material.io/\\\">Material Design</a> Vue.js components.</li>\\n</ul>\\n<h3>Customizing elements</h3>\\n<p><em>Vue.js</em> does not provide a set of out of the box elements, therefore customizing elements would be up to whatever third-party UI framework you chose to use. Since Vue.js is often used to <em>wrap</em> other UI components, the customization would often follow that library or framework.</p>\\n<h3>Building a user interface library</h3>\\n<p><em>Vue.js</em> is less opinionated about UI components than some of the other selected frameworks reviewed in this series. Most of the focus in on the MVVM framework, leaving most aspects of the UI implementation up to the framework user. Because component registration is a core part of the framework, creating a library is as straightforward as registering components and using them in pages. On the other hand, several concerns that are common within user interfaces, like event management, i18n, and accessibility, would need to be addressed directly or by using third-party libraries.</p>\\n<p>One other consideration though is that one of the strengths of Vue.js is the relative ease of wrapping UI elements to make them integrate with a Vue.js application. This allows an incremental refactoring of applications by slowly leveraging the Vue.js framework. If you already have a component/element library and Vue.js fits your needs, it may be worth considering leveraging your existing UI library.</p>\\n<h3>Re-using and sharing elements</h3>\\n<p>There is no standardized way of distributing Vue.js components, though typically you will find component libraries published on npm. <a href=\\\"https://github.com/vuejs/awesome-vue#parts\\\">Awesome vue</a> provides scaffolds that will work with <a href=\\\"https://github.com/vuejs/vue-cli/\\\">vue-cli</a> to create an initial pattern for sharing components. Because of the non-prescriptive nature of the UI aspects of Vue.js, there is also no standardized way of managing styles and other related content.</p>\\n<div id=\\\"dojo\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/dojo-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Dojo 2</h2>\\n<h3>Defining elements</h3>\\n<p><em>Dojo 2</em> calls elements <a href=\\\"https://dojo.io/tutorials/003_creating_widgets/\\\"><em>widgets</em></a>. Reusable classes of widgets are defined using the ES6 <code>class</code> syntax. Typically these are defined as default exports of ES6 modules and authored in TypeScript. Dojo 2 can be used without transpiling via TypeScript, but it is challenging and not recommended.</p>\\n<p>An example of creating a class of a todo list:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport default class TodoList extends TodoListBase&lt;TodoListProperties&gt; {\\r\\n    render() {\\r\\n        return v('ul', {\\r\\n            key: this.properties.key\\r\\n        }, this.children);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>An example of creating an instance of a todo list, in an application widget:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nclass App extends WidgetBase {\\r\\n    render() {\\r\\n        return v('div', {\\r\\n            key: 'wrap'\\r\\n        }, [\\r\\n            w(TodoList, { key: 'todolist' }, [\\r\\n                w(TodoItem, { label: 'item1' })\\r\\n            ]);\\r\\n        ]);\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>You can also use <a href=\\\"https://www.typescriptlang.org/docs/handbook/jsx.html\\\">TSX</a> with Dojo 2. TSX is the TypeScript form of JSX. An example of a todo list written in a JSX form:</p>\\n<pre class=\\\"brush: typescript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport default class TodoList extends TodoListBase&lt;TodoListProperties&gt; {\\r\\n    render() {\\r\\n        return (\\r\\n            &lt;ul key=&quot;{this.properties.key}&quot;&gt;\\r\\n                {this.children}\\r\\n            &lt;/ul&gt;\\r\\n        );\\r\\n    }\\r\\n}\\r\\n</pre>\\n<p>While TSX can be used, Dojo 2 widgets typically do not use templates or JSX/TSX, but instead rely on simple pure functions.</p>\\n<h3>Out of the box</h3>\\n<p><em>Dojo 2</em> provides a set of <a href=\\\"https://github.com/dojo/widgets/\\\">out of the box widgets</a>. Dojo 2 is currently in its release candidate phase and at this stage, there are approximately two dozen form, layout, and other widgets. In addition, there is a feature-rich data grid component (<a href=\\\"https://github.com/dojo/dgrid/\\\">dgrid</a>) which is planned for release in 2018.</p>\\n<h3>Customizing elements</h3>\\n<p><em>Dojo 2</em>&#8216;s out of the box widgets serve two purposes. First, they provide a level of functionality to make them useful in many cases, as well as serve as examples of patterns. The most common way to customize a widget, theming, is broken out into a mixin of which a theme can be applied to a widget. Common behaviors and patterns are provided as separate modules. In the end, instead of extending a widget class to customize it, it is far more likely that the pattern would be to reuse the functionality from <a href=\\\"https://github.com/dojo/widget-core/\\\">widget-core</a> to implement a widget that expressed the relevant functionality.</p>\\n<h3>Building a user interface library</h3>\\n<p><em>Dojo 2</em> is designed to make it easy to create additional components. It also provides an internationalization and localization library. Dojo 2 abstracts DOM event management and has established patterns for good accessibility usage. While the out of the box widgets can be used as a base for a library, it is likely more common to pick and choose some widgets that meet your use case and build additional widgets that meet the UI/UX requirements of your application. The <a href=\\\"https://github.com/dojo/widget-core#meta-configuration\\\">Dojo widget meta approach</a> makes it possible to preserve virtual DOM paradigms in a reactive manner, with support for dimensions, drag, focus, IntersectionObserver and Web Animations.</p>\\n<h3>Re-using and sharing elements</h3>\\n<p>Dojo 2 widgets are TypeScript modules where the default export extends <code>WidgetBase</code>. Also, the theming and style system for Dojo 2 widgets utilizes CSS Modules, meaning that a widget module explicitly imports the CSS, which is designed to flow through the build system and be available as CSS in the application bundle generated. Therefore, while there are some conventions, distributing and re-using widgets is as <em>straightforward</em> as using the ESM <code>import Widget from 'my/widgets/Widget'</code> statement. It is expected that shared/custom modules would be published on npm.</p>\\n<div id=\\\"ember\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/ember-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Ember</h2>\\n<h3>Defining elements</h3>\\n<p><em>Ember.js</em> calls elements <a href=\\\"https://guides.emberjs.com/v2.13.0/components/defining-a-component/\\\"><em>components</em></a>. Typically Ember.js uses <a href=\\\"http://handlebarsjs.com/\\\">Handlebars</a> as its templating syntax. Ember.js also embraces <a href=\\\"https://www.w3.org/wiki/WebComponents/\\\">Web Components</a> and provides the necessary tooling to ensure that custom elements are managed within the application.</p>\\n<p>An example of defining a new component class:</p>\\n<pre class=\\\"brush: bash; title: ; notranslate\\\" title=\\\"\\\">\\r\\n$ ember generate component todo-list\\r\\n</pre>\\n<p>And then defining a template (<code>app/templates/components/todo-list.hbs</code>):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;ul&gt;\\r\\n    {{#each items}}\\r\\n        &lt;li&gt;{{this}}&lt;/li&gt;\\r\\n    {{/each}}\\r\\n&lt;/ul&gt;\\r\\n</pre>\\n<p>An example of creating an instance of a todo list:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;todo-list items=model&gt;&lt;/todo-list&gt;\\r\\n</pre>\\n<p>And adding an index route:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport default Ember.Route.extend({\\r\\n    model() {\\r\\n        return this.get('store').findAll('item');\\r\\n    }\\r\\n});\\r\\n</pre>\\n<h3>Out of the box</h3>\\n<p><em>Ember.js</em> focuses more on providing an application framework than being opinionated about user interactions. While it has strong guidelines for how a component interfaces with the application, it does not provide a set of common out of the box components. There is a rich community of components at <a href=\\\"https://www.emberaddons.com/\\\">Ember Addons</a> which can easily be included in your Ember application via the Ember.js tooling.</p>\\n<h3>Customizing elements</h3>\\n<p><em>Ember.js</em> does not provide out of the box elements, therefore how to customize a component is determined by the creator of the third-party component.</p>\\n<h3>Building a user interface library</h3>\\n<p><em>Ember.js</em> focuses on the application framework. Ember.js has a well-defined component interface though, and the project provides guides with information on how to build components into a library. There is no default support for internationalization and localization, but there are several examples of injecting localized strings into components with Ember.js. Theming is also left as an exercise for component authors, and there are several different systems or patterns that have become common within the Ember.js ecosystem.</p>\\n<p>There are numerous third-party components available, and they can be managed with the EmberCLI. They can vary greatly though in quality and consistency. In creating a library, you would want to get a sense of how effective the existing third-party components are in meeting your needs, versus the effort to author a custom set of consistent components.</p>\\n<h3>Re-using and sharing elements</h3>\\n<p>Ember.js has the concept of <em>addons</em> and <em>blueprints</em> which are all accessible via the <a href=\\\"https://ember-cli.com/\\\">EmberCLI</a>. By creating an addon with the appropriate components you can create a reusable library of tools. These addons can be added to blueprints to make it easy to scaffold out new projects with the appropriate components. These can be published to npm. While npm is used for dependency management for <em>new</em> projects, many Ember projects still use the now deprecated <a href=\\\"https://bower.io/\\\">Bower</a> for dependency management.</p>\\n<p>Ember has a well-integrated toolchain and uses <a href=\\\"https://github.com/broccolijs/broccoli\\\">broccoli</a> as an asset pipeline for creating web applications that contain all of their dependencies.</p>\\n<div id=\\\"aurelia\\\" class=\\\"rule\\\"></div>\\n<div class=\\\"feature-icon\\\"><img class=\\\"alignnone size-full wp-image-14439\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/aurelia-logo.png\\\" alt=\\\"\\\" /></div>\\n<h2 class=\\\"feature-item\\\">Aurelia</h2>\\n<h3>Defining elements</h3>\\n<p><em>Aurelia</em> calls elements <a href=\\\"http://aurelia.io/hub.html#/doc/article/aurelia/framework/latest/creating-components\\\"><em>components</em></a>. Aurelia uses its own <a href=\\\"http://aurelia.io/hub.html#/doc/article/aurelia/templating/latest/templating-basics/\\\">templating engine</a> which is normally transpiled, but can also be run within the browser. Aurelia fully embraces <a href=\\\"https://www.w3.org/wiki/WebComponents/\\\">Web Components</a> and creating a custom element is accomplished by naming the JavaScript and HTML template file with the same name, but with appropriate extensions.</p>\\n<p>An example of creating a todo list class:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nexport class TodoList {\\r\\n    constructor(items) {\\r\\n        this.items = items;\\r\\n    }\\r\\n}\\r\\n</pre>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;template&gt;\\r\\n    &lt;ul&gt;\\r\\n        &lt;li repeat.for=&quot;item of items&quot;&gt;${item}&lt;/li&gt;\\r\\n    &lt;/ul&gt;\\r\\n&lt;/template&gt;\\r\\n</pre>\\n<p>An example of creating a todo list instance in a containing template:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nconst todoList = new TodoList([ 'item1' ]);\\r\\n</pre>\\n<h3>Out of the box</h3>\\n<p><em>Aurelia</em> originally did not provide a set of out of the box components, but in late 2016 the project announced <a href=\\\"https://github.com/aurelia/ux\\\"><em>Aurelia UX</em></a>, a set of components that provide higher-order capabilities. There is a <a href=\\\"https://github.com/aurelia/app-ux-showcase\\\">showcase application</a> available which demonstrates the components that are currently part of the UX framework. At the time of this writing the framework contains the following categories of components:</p>\\n<ul>\\n<li>Buttons</li>\\n<li>Checkboxes</li>\\n<li>Layout</li>\\n<li>Inputs</li>\\n<li>Text Area</li>\\n<li>Chips</li>\\n<li>Icons</li>\\n</ul>\\n<h3>Customizing elements</h3>\\n<p>If you use <em>Aurelia UX</em>, components are provided as ES6 classes. The components have a fairly decomposed lifecycle and in theory a component could inherit from an ancestor and change the behavior, but the challenge is that because DOM interactions occur throughout the lifecycle of the component, overriding a particular method might cause surprising behaviors. Like other frameworks, it is likely that you would create a new component using the patterns and library available.</p>\\n<h3>Building a user interface library</h3>\\n<p>If you use <em>Aurelia UX</em> as the starting point for your library, you will have a reasonable set of components and a theming system. Internationalization is provided by the core packages of Aurelia by integrating <a href=\\\"http://i18next.com/\\\">i18next</a>.</p>\\n<p>There are a few third-party libraries that have different sets of components with varying degrees of functionality as well as a few bridges to other UI libraries.</p>\\n<h3>Re-using and sharing elements</h3>\\n<p>Aurelia does not have any hard and fast rules around creating UI libraries. Dependencies are typically TypeScript components which have been emitted to JavaScript and are bundled with their definition files. They are then published on npm and can use npm for dependency management (or jspm or yarn).</p>\\n<p>The Aurelia CLI expects resources that are contained in the <code>/src/</code> directory, and CSS files located in there will be built into the application and can be imported into a component or application.</p>\\n<div class=\\\"rule\\\"></div>\\n<h2>Summary</h2>\\n<p>We are going to summarize each of the frameworks from a UI perspective. One topic that was not covered in depth above is accessibility (a11y). None of the frameworks provide an automatic, completely accessible solution because much of accessibility depends on how UI components are used in an application. There are ways to turn components into something a screen reader can properly read, and some of the <em>out of the box</em> component libraries do this and none of them prevent you from creating custom accessible components. Some frameworks actively promote accessibility, but none of them <em>enforce</em> it. Even if you have a component available in a screen reader, it does not make it 100% accessible. How you color your elements (therefore what styles you use) and keyboard navigation of your elements are also critical factors to having an accessible UI. With accessibility being a complex topic and it being difficult if not impossible for frameworks to enforce all rules, it is only really useful to mention accessibility here in the summary.</p>\\n<h3>Angular 2+</h3>\\n<p>Angular 2, by itself, is a framework for building components and applications. Some of the fundamental tools are available to build consistent UI components, like i18n, but some features like theming only come with adopting Material 2.</p>\\n<p>The Material 2 design gives many considerations to theming and work in an accessible way. At the very least, Material Design provides good patterns for building well behaved Angular 2+ components.</p>\\n<p>If you are <em>sold</em> on Material Design, you get a very extensive set of UI components. If you want to add additional custom elements to this collection of components or customize the ones available, you might find this challenging. If you are building a library of components, then you need to be prepared to adopt all of the Angular 2+ approaches, but also add in theming and make sure you create accessible components.</p>\\n<h3>React + Redux</h3>\\n<p>React provides a foundational library for building components. Its focus is to provide a pattern that ensures that components play the <em>right</em> role in what the core React team considers to be a good web application. There is a large React community providing options for the other concerns around theming, event management, i18n, and localization. It is quite easy to create React components and in theory, you could build up an extensive library over time. If you do try to use third-party components, though, you will need to verify their consistency and quality and it may be difficult to make a cohesive set of UI components from a visual/style/UX perspective without significant effort.</p>\\n<p>From an accessibility perspective, you will need to identify the patterns that make the web accessible as a whole and make sure those are incorporated into your components. Again though, there is a robust community to provide information and resources.</p>\\n<p>Third-party component libraries may suit your needs, but the extensibility and usability of those would need to be assessed in the context of your application requirements.</p>\\n<h3>Vue.js</h3>\\n<p>Vue.js is likely the least <em>opinionated</em> of the frameworks we have reviewed when it comes to the UI. It is best suited for a <em>bring your own</em> UI approach. If you are building a greenfield Vue.js application, there are many third-party component libraries that can use. You can also build your own library of components, where the only real opinion is how the component interacts with the application. There are also extensive third-party patterns and tools to connect Vue.js to other UI frameworks. If you are incrementally adapting an existing UI to an MVVM application framework, then Vue.js has several advantages to make this possible without throwing away your existing UI.</p>\\n<p>Because of this lack of opinion, all the other concerns, like accessibility, theming, and i18n are left to you, though in our research, for every problem there is a Vue.js community solution.</p>\\n<h3>Dojo 2</h3>\\n<p>Dojo 2 strives to provide a complete UI element solution. Dojo 2 seeks to provide a solid core of default widgets which either form a foundation for a library or serve as patterns for creating your own library. Theming, i18n, and localization are provided out of the box along with other common functions such as focus events, intersection observers and more. The out of the box components are designed to be fully accessible and there is further functionality under development to make sure that focus management and other UI events can be managed without having to make sure that each widget has all the logic necessary to behave in a fully accessible way.</p>\\n<h3>Ember.js</h3>\\n<p>Like the rest of Ember, from a UI perspective, Ember has an opinion. Ember.js is a solid and good opinion and if you like the rest of the Ember.js application framework, then you are likely not going to find any issues with the UI patterns. Ember.js is much more mature than the other frameworks we are reviewing in this series, but at the same time the Ember team have made solid efforts to stay current and evolve as patterns and best practices change. Ember.js UI components are very closely aligned to Web Components and the Ember.js team still hopes that as Web Components become available in browsers, you will be able to just convert your Ember.js UI components to Web Components.</p>\\n<h3>Aurelia</h3>\\n<p>Aurelia UX provides a decent set of components but is likely not sufficient to create a complex business application on its own. While Aurelia provides i18n and Aurelia UX provides a theming system, these out of the box components do not appear to be fully accessible at this time. There are some third-party UI libraries for Aurelia, but their features and capabilities are out of the scope of this analysis.</p>\\n<p>If you were using Aurelia as your application framework, it would make sense to strongly consider using the Aurelia UX component system.</p>\\n<h2>Up next</h2>\\n<p>Now we have flipped through our back catalog of user interfaces, next up on our hit list is delving deeper into how the surveyed frameworks can help us achieve our user experience goals. User experience is much more than a flashy album cover, it is the core of how users experience our product. It is one of the areas where design and engineering have to work together towards a common goal.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Whether it is Top 40 or classical or R&amp;B, artists and music have a recognizable look and feel. When looking at frameworks, some simply provide us with a bag of instruments, while others provide us with chord progressions and album covers we can customize.</p>\\n\",\"protected\":false},\"author\":67,\"featured_media\":22256,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[444,445,214,448,2,215,3,29,11,234],\"tags\":[446,449],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks: User Interface Development | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/web-frameworks-user-interface-development/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks: User Interface Development | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Whether it is Top 40 or classical or R&amp;B, artists and music have a recognizable look and feel. When looking at frameworks, some simply provide us with a bag of instruments, while others provide us with chord progressions and album covers we can customize.\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/web-frameworks-user-interface-development/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-06-16T23:32:56+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-03-30T13:41:20+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-interface-development/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"Web Frameworks: User Interface Development\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-interface-development/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-interface-development/\\\",\\\"name\\\":\\\"Web Frameworks: User Interface Development | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/web-frameworks-user-interface-development/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-06-16T23:32:56+00:00\\\",\\\"dateModified\\\":\\\"2020-03-30T13:41:20+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/web-frameworks-user-interface-development/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14450\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=14450\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14450/revisions\"}],\"predecessor-version\":[{\"id\":22257,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/14450/revisions/22257\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22256\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=14450\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=14450\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=14450\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":67,\"name\":\"Kit Kelly\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kkelly/\",\"slug\":\"kkelly\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kit Kelly, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kit Kelly, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kkelly/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kkelly/\\\",\\\"name\\\":\\\"Kit Kelly, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/13093841ff1b780913b10a245cc737ee\\\",\\\"name\\\":\\\"Kit Kelly\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ea4e125243ac392bb3bbf6bbfb242d86?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kit Kelly\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kkelly/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/67\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22256,\"date\":\"2020-02-06T11:40:12\",\"slug\":\"web-frameworks-user-interface-development-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/web-frameworks-user-interface-development/web-frameworks-user-interface-development-2/\",\"title\":{\"rendered\":\"Web Frameworks- User Interface Development\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Web Frameworks- User Interface Development | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Web Frameworks- User Interface Development | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-06T19:40:18+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\\\",\\\"name\\\":\\\"Web Frameworks- User Interface Development | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-02-06T19:40:12+00:00\\\",\\\"dateModified\\\":\\\"2020-02-06T19:40:18+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"Web Frameworks: User Interface Development\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/06/Web-Frameworks-User-Interface-Development.jpg\",\"sizes\":{\"medium\":{\"file\":\"Web-Frameworks-User-Interface-Development-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development-300x158.jpg\"},\"large\":{\"file\":\"Web-Frameworks-User-Interface-Development-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development-1024x538.jpg\"},\"thumbnail\":{\"file\":\"Web-Frameworks-User-Interface-Development-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development-150x150.jpg\"},\"medium_large\":{\"file\":\"Web-Frameworks-User-Interface-Development-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development-768x403.jpg\"},\"full\":{\"file\":\"Web-Frameworks-User-Interface-Development.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/06/Web-Frameworks-User-Interface-Development.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22256\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a7749c2eacd068e-LHR"],["cf-request-id","037e6c6dd40000068e4a918200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:18:57 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=dce2eb6577bc12a51e69fc72a5eeb57211592842737; expires=Wed, 22-Jul-20 16:18:57 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}