{"value":{"body":"[{\"id\":16616,\"date\":\"2019-02-28T08:10:16\",\"date_gmt\":\"2019-02-28T15:10:16\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=16616\"},\"modified\":\"2020-01-21T08:35:46\",\"modified_gmt\":\"2020-01-21T16:35:46\",\"slug\":\"reducing-first-input-delay-for-a-better-user-experience\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/\",\"title\":{\"rendered\":\"Reducing First Input Delay for a Better User Experience\"},\"content\":{\"rendered\":\"<p>One common complaint around web applications is that they can feel slow or clunky compared with native applications. Sometimes we find sites that can take a long time to load (let&#8217;s say longer than 3 seconds) and sometimes those sites feel non-interactive or &#8216;janky&#8217; when we try to interact with them. Many sites, especially those that leverage JavaScript heavily, can suffer from this problem as <a href=\\\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/javascript-startup-optimization/\\\">JavaScript parsing, compiling and execution</a> can be blocking.</p>\\n<p>In modern web development, we have identified many metrics for determining the experience a user receives when viewing a page. Some common metrics that we often hear about are:</p>\\n<ol>\\n<li>Time to first byte: how quickly it takes for the server to send the first payload to the client</li>\\n<li>Time to first meaningful paint: how quickly it takes to render some meaningful content to the screen</li>\\n<li>Time to interactive: how quickly until the site responds smoothly to user interactions</li>\\n</ol>\\n<p>These are all valid ways to measure various parts of the user experience and it makes sense not to try to overemphasise one in particular. </p>\\n<p>One common part of the user journey in a site or application is the time the user first tries to interact with the page. Similar to how, if we don&#8217;t serve a site in a timely manner, users get frustrated, users also get frustrated if we give an illusion of interactivity. If the user goes to tap, click or drag and the app is unresponsive, this could be perceived in a harsh light, potentially causing the user to leave the site or application. This leaves space for another metric, namely First Input Delay (FID for short) which will be the focus of this post. </p>\\n<h3>Defining First Input Delay</h3>\\n<p>First Input Delay is a relatively new metric for measuring web page performance. It was introduced by Google, described by <a href=\\\"https://developers.google.com/web/updates/2018/05/first-input-delay\\\">Philip Walton in May 2018</a>. At a high level, we can define First Input Delay as the length of time before a response to the first user interaction on a web page. More explicitly, we can define interactions as the user clicking or using gestures on a part of the application that is controlled via JavaScript (for example, scrolling or zooming would not be an interaction in this strict definition). Generally, we measure this metric in milliseconds as users will perceive an interaction that takes less than 100ms to respond as instantaneous. </p>\\n<h3>Measuring First Input Delay</h3>\\n<p>Although you could measure a first input delay manually from your developer tools, the most effective way to measure FID at scale is to use the <a href=\\\"https://github.com/GoogleChromeLabs/first-input-delay\\\">first-input-delay</a> library from the Chrome team. The library loops through interaction events and adds a callback to each event. It in that callback it takes the time difference in milliseconds between the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp\\\"><code>timeStamp</code></a> of the event (when it fired) and when the browser was able to handle it. This library provides an interface for measuring the delay in the following fashion:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    perfMetrics.onFirstInputDelay(function(delay, evt) {\\r\\n        // Do something with the delay, for example send to analytics\\r\\n    });\\r\\n</pre>\\n<p>You will want to inline the <code>first-input-delay</code> library into your <code>head</code> of your page as you want to make sure firstly that it isn&#8217;t render blocking, but also so that it is available as soon as possible to catch the user interaction. You may also want to inline the actual callback above too for the same reason.</p>\\n<p>If you don&#8217;t want to use analytics or run this in production, one approach could potentially be to run headless Chrome via Puppeteer to try and obtain this <a href=\\\"https://michaljanaszek.com/blog/test-website-performance-with-puppeteer#firstMeaningfulPaint\\\">metric in a programmatic fashion</a>, although this is an explorative exercise left to the reader.</p>\\n<h3>Who should be considering this metric?</h3>\\n<p>Generally, FID would be valuable to understand for anyone building a site that isn&#8217;t static, especially one that uses a large amount of JavaScript. Sites that use server-side rendering (SSR) may also be worth examining the FID of, as they often present the site quickly but then have to hydrate on the client with added JavaScript functionality (event listeners and so forth). Any sites that have large initialisation steps can lead to long FIDs, so these would also be a good candidate. This can be determined by examining the performance tab in your favourite web browser when looking at your page and checking to see what is happening on the main-thread during page load.</p>\\n<h3>Reducing First Input Delay</h3>\\n<p>As web developers, First Input Delay is something we want to keep to a minimum. Some sites will have no First Input Delay as the user may not interact with the site in ways other than scrolling or zooming (which are not covered by FID). Fundamentally, the main thread is predominantly blocked by parsing, compiling and executing JavaScript. On slower devices such as low end mobiles, <a href=\\\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/javascript-startup-optimization/#parsecompile\\\">this time is increased dramatically</a>. A common cause of long FIDs is large JavaScript bundles with long-running initialisation tasks. Although it may not be possible to reduce a given bundle size, we can change the strategy we take in handling its execution. For example, we can break long-running tasks down into smaller tasks (sub 50ms) – allowing the browser to yield to rendering and input handling. Browsers will generally prioritise user interactions over site tasks in a process called <a href=\\\"https://blogs.windows.com/msedgedev/2017/06/01/input-responsiveness-event-loop-microsoft-edge/\\\">input priotizitation</a> so breaking down code into smaller tasks allows the browser the opportunity to prioritise any user inputs. As <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\\\">tasks in JavaScript run till completion</a>, a simple way to break them up is to force a new task using <code>setTimeout</code> with a 0ms timer. However, there are perhaps better methods than this which we will discuss below.</p>\\n<p>Philip Walton, author of the original FID blog post, has suggested a development pattern termed &#8216;Idle Till Urgent&#8217;. Here we avoid evaluating our code up front and even lazily waiting to evaluate the code until it&#8217;s needed. Instead, we take the approach of leveraging the ability to evaluate code in idle periods. Here the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\\\"><code>requestIdleCallback</code></a> browser API is used, which allows code to run during the time when the browser main thread is not currently working (it is idle). This API is currently supported in Chrome, Firefox and Opera, but there is <a href=\\\"https://gist.github.com/paullewis/55efe5d6f05434a96c36\\\">a shim for unsupported browsers</a>. There is also a <a href=\\\"https://github.com/facebook/react/blob/8c67bbf183cc5ae1cab15a8265c612daf80cd86f/packages/scheduler/src/Scheduler.js#L375\\\">Polyfill in the React source code</a> which you can explore if you&#8217;re feeling experimental. The trick is if a given value is needed urgently, we cancel the <code>requestIdleCallback</code> callback and instead calculate the value immediately. </p>\\n<p>This approach has notably been implemented in two libraries, namely:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/GoogleChromeLabs/idlize\\\">Idlize</a> by Philip Walton</li>\\n<li><a href=\\\"https://github.com/TehShrike/idle-until-urgent\\\">idle-until-urgent</a> by Josh Duff</li>\\n</ul>\\n<p>Let&#8217;s compare how they look (using ES6 syntax) to get values during idle times. In this case, we&#8217;re going to format date and time using Intl for the &#8216;Europe/London&#8217; timezone. Firstly Idlize:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    import { IdleValue } from 'idlize/IdleValue.mjs'\\r\\n\\r\\n    const formatter = new IdleValue(() =&gt; new Intl.DateTimeFormat('en-US', {\\r\\n        timeZone: 'Europe/London'\\r\\n    }));\\r\\n\\r\\n    const value = formatter.getValue().format(new Date(1537452915210));\\r\\n</pre>\\n<p>Comparing with idle-until-urgent:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    import * as makeIdleGetter from 'idle-until-urgent';\\r\\n\\r\\n    const formatter = makeIdleGetter(() =&gt; new Intl.DateTimeFormat('en-US', {\\r\\n        timeZone: 'Europe/London'\\r\\n    }));\\r\\n\\r\\n    const value = formatter().format(new Date(1537452915210)); // =&gt; '9/20/2018'\\r\\n</pre>\\n<p>As you can see, both libraries take similar approaches to getting values during idle periods with only minor API differences. The main difference of note here is that Idlize has a much wider set of APIs at its disposal, with idle-until-urgent just focusing on getting idle values (<code>makeIdleGetter</code>). However, idle-until-urgent boasts a smaller bundle size (one-third of the size of defineIdleProperty.mjs after being built) and uses a functional rather than class based approach.</p>\\n<p>Idlize also has other features we can leverage to better implement the idle-until-urgent pattern—for example, idle task queues. Here, we can add multiple functions to a queue and allow those functions to be executed when the browser is idle. This looks a little something like this:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    import { IdleQueue } from 'idlize/IdleQueue.mjs';\\r\\n\\r\\n    const queue = new IdleQueue();\\r\\n    const state = {};\\r\\n\\r\\n    function getWordStatistics(text) {\\r\\n        // Remove punctuation\\r\\n        text.replace(/[.,\\\\/#!$%\\\\^&amp;\\\\*;:{}=\\\\-_`~()]/g,&quot;&quot;)\\r\\n        text = text.toLowerCase();\\r\\n        words = text.split(' ');\\r\\n    \\r\\n        const wordCount = {}\\r\\n        let totalLength = 0;\\r\\n    \\r\\n        words.forEach((word) =&gt; {\\r\\n            totalLength += word.length;\\r\\n            wordCount[word] = wordCount[word] ? wordCount[word] + 1 : 1;\\r\\n        });\\r\\n    \\r\\n        return {\\r\\n            averageLength: parseInt(totalLength / words.length),\\r\\n            wordCount\\r\\n        }\\r\\n    \\r\\n    }\\r\\n\\r\\n    queue.pushTask(() =&gt; {\\r\\n        getWordStatistics(`JavaScript, often abbreviated as JS, is a high-level,\\r\\n                           interpreted programming language.\\r\\n                           It is a language which is also characterized as dynamic,\\r\\n                           weakly typed, prototype-based and multi-paradigm.`);\\r\\n    });\\r\\n</pre>\\n<p>Similar to the idle value approach, we can also run the functions immediately if they are urgently required.</p>\\n<h3>Keeping the main thread idle</h3>\\n<p>In the preceding sections, we&#8217;ve expressed that a long First Input Delay is often caused by long-running tasks that don&#8217;t yield to the browser to allow rendering and handling of input. What can be done about this? One thing that might help, alongside splitting up long tasks, is running them off the main thread entirely. Here we could use Web Workers for long running tasks to take workloads onto different threads. The benefit here is that work that happens in another thread and doesn&#8217;t block the main thread, keeping it free for rendering and handling user input. <a href=\\\"https://davidea.st/articles/firebase-bundle-size\\\">David East has shown how he leveraged Web Workers to decrease Time-to-Interactive</a> and it is fair to believe that the benefits of Web Workers can be used to reduce FID too. </p>\\n<p>A core part of keeping FID low is making sure tasks are kept below 50ms run time on the main thread. Web Workers mean that work is happening off the main thread so that it is free to render and respond to user interactions. It is possible to write a Web Worker up front, but sometimes it might be easier to use a library like <a href=\\\"https://github.com/developit/greenlet/issues/32#issuecomment-394763207\\\">Greenlet</a> by Jason Miller to inline your Web Workers on the fly. Let&#8217;s see how we could take the same interaction we put on the Idle Queue using Idlize and see if there&#8217;s a way to shoot this off with Greenlet:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n    import greenlet from 'greenlet'\\r\\n\\r\\n    const getWordStatistics = greenlet(words =&gt; {\\r\\n        text.replace(/[.,\\\\/#!$%\\\\^&amp;\\\\*;:{}=\\\\-_`~()]/g,&quot;&quot;)\\r\\n        text = text.toLowerCase();\\r\\n        words = text.split(' ');\\r\\n    \\r\\n        const wordCount = {}\\r\\n        let totalLength = 0;\\r\\n    \\r\\n        words.forEach((word) =&gt; {\\r\\n            totalLength += word.length;\\r\\n            wordCount[word] = wordCount[word] ? wordCount[word] + 1 : 1;\\r\\n        });\\r\\n    \\r\\n        return {\\r\\n            averageLength: parseInt(totalLength / words.length),\\r\\n            wordCount\\r\\n        }\\r\\n    });\\r\\n</pre>\\n<p>Here we have completely moved the execution of getting the average length and word counts over to another thread, meaning we don&#8217;t have to wait for idle time to execute it. A common question here will be &#8220;isn&#8217;t there a cost to transferring data to a Web Worker?&#8221; and the answer is yes, but it&#8217;s generally less than developers tend to think, with objects with fewer than <a href=\\\"https://www.loxodrome.io/post/web-worker-performance/\\\">1,000 keys taking less than a millisecond on modern laptops</a>. Essentially, we pay a small cost to transfer the data but avoid blocking the main thread in return. This being said, there is a solid limitation here, namely that we can&#8217;t do DOM operations (although there is an effort to provide a <a href=\\\"http://www.github.com/ampproject/workerdom\\\">Web Worker DOM interface from the AMP team</a>). Also, using inlined workers, functions generally have to be pure (free of outer scope variables) to work correctly, as <code>toString</code> is often used to transfer the function&#8217;s code in this approach. We also make have to make our code asynchronous which could be situationally undesirable. </p>\\n<h3>Conclusion</h3>\\n<p>As the amount of JavaScript in our pages has increased on average over time, we need ways to mitigate providing poor user experiences, especially for those on low-end devices. In this post, we have discussed what First Input Delay is—explaining it is a metric for determining the total length of time spent responding to a user&#8217;s first input to a page. We then went on to show the first-input-delay library, measuring the FID of a page for our users. We then explored methods and libraries for reducing FID and rounded things off by examining using Web Workers to keep the main thread as idle as possible. Hopefully we have provided an overview of how FID matters in your applications and how you can keep it to a minimum for the end users of your sites and applications.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>One common complaint around web applications is that they can feel slow or clunky compared with native applications. Sometimes we find sites that can take a long time to load (let&#8217;s say longer than 3 seconds) and sometimes those sites feel non-interactive or &#8216;janky&#8217; when we try to interact with them. Many sites, especially those [&hellip;]</p>\\n\",\"protected\":false},\"author\":2,\"featured_media\":21996,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[214,3],\"tags\":[225],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Reducing First Input Delay for a Better User Experience | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Reducing First Input Delay for a Better User Experience | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"One common complaint around web applications is that they can feel slow or clunky compared with native applications. Sometimes we find sites that can take a long time to load (let&#8217;s say longer than 3 seconds) and sometimes those sites feel non-interactive or &#8216;janky&#8217; when we try to interact with them. Many sites, especially those [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2019-02-28T15:10:16+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-21T16:35:46+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\\\",\\\"width\\\":1200,\\\"height\\\":630},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/\\\",\\\"name\\\":\\\"Reducing First Input Delay for a Better User Experience | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/#primaryimage\\\"},\\\"datePublished\\\":\\\"2019-02-28T15:10:16+00:00\\\",\\\"dateModified\\\":\\\"2020-01-21T16:35:46+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16616\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=16616\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16616/revisions\"}],\"predecessor-version\":[{\"id\":21997,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/16616/revisions/21997\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/21996\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=16616\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=16616\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=16616\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=16616\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":2,\"name\":\"James Milner\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jmilner/\",\"slug\":\"jmilner\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>James Milner, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"James Milner, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/jmilner/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/jmilner/\\\",\\\"name\\\":\\\"James Milner, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/2aae6d24ea20b00a1dd8b92912ea5d38\\\",\\\"name\\\":\\\"James Milner\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/2c1e608635a29804f4ea7e1cb3305af0?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"James Milner\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/jmilner/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/2\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":21996,\"date\":\"2020-01-21T08:35:32\",\"slug\":\"first-input-delay\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/reducing-first-input-delay-for-a-better-user-experience/first-input-delay/\",\"title\":{\"rendered\":\"First Input Delay\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>First Input Delay | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"First Input Delay | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\\\",\\\"name\\\":\\\"First Input Delay | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-21T16:35:32+00:00\\\",\\\"dateModified\\\":\\\"2020-01-21T16:35:32+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2019/02/First-Input-Delay.png\",\"sizes\":{\"medium\":{\"file\":\"First-Input-Delay-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay-300x158.png\"},\"large\":{\"file\":\"First-Input-Delay-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay-1024x538.png\"},\"thumbnail\":{\"file\":\"First-Input-Delay-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay-150x150.png\"},\"medium_large\":{\"file\":\"First-Input-Delay-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay-768x403.png\"},\"full\":{\"file\":\"First-Input-Delay.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/02/First-Input-Delay.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/21996\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:25:58 GMT"],["expires","Mon, 31 Aug 2020 15:25:58 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}