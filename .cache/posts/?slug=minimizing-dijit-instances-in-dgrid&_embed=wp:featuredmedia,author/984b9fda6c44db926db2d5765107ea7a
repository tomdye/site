{"value":{"body":"[{\"id\":10579,\"date\":\"2015-04-14T11:22:20\",\"date_gmt\":\"2015-04-14T18:22:20\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=10579\"},\"modified\":\"2015-04-14T11:22:20\",\"modified_gmt\":\"2015-04-14T18:22:20\",\"slug\":\"minimizing-dijit-instances-in-dgrid\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/\",\"title\":{\"rendered\":\"Minimizing Dijit Instances in dgrid\"},\"content\":{\"rendered\":\"<p><img src=\\\"https://wp.sitepen.com/wp-content/uploads/2014/08/dgrid-300x157.png\\\" alt=\\\"dgrid\\\" width=\\\"300\\\" height=\\\"157\\\" class=\\\"alignnone size-medium wp-image-9519\\\" style=\\\"margin:20px 0 15px 15px; float:right;\\\"  /></p>\\n<p>Dijit and dgrid provide a powerful set of user interface components, allowing for fast construction of sophisticated web applications with excellent performance and interactivity. However, one particular configuration of dgrid that can impact memory and performance: heavy use of persistent Dijit editors within grid cells. The dgrid&#8217;s <code>Editor</code> plugin makes it very easy to leverage various Dijits for editing cells. However, using the default &#8220;always-on&#8221; mode, where a Dijit is instantiated for every editable cell, in combination with a several columns with numerous rows can quickly consume a lot of memory and create a noticeable drag on your application&#8217;s performance.</p>\\n<p>Dijit editors can help provide some fantastic functionality, with powerful widgets for auto-completion, date input, and validation. In this post, we&#8217;ll review two approaches to achieving advanced data input in dgrids that are designed for heavy data manipulation without compromising performance or memory consumption.</p>\\n<p><!--more--></p>\\n<h2><code>editOn</code></h2>\\n<p>The simplest and most straightforward way to limit the creation of Dijit widgets is by creating one shared instance of an editor per dgrid column using the editor&#8217;s <code>editOn</code> property. This editor plugin is designed to be used such that editors, including widgets, are not displayed until the user initiates interaction with the cell, and the <code>editOn</code> allows us to enable this behavior, and specify what type of event should trigger the editor. Typically, we might enable the editor with a <code>click</code> event, or possibly a <code>dblclick</code> event. For example:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nvar grid = new Grid({\\n\\tcolumns: {\\n\\t\\tdueDate: {\\n\\t\\t\\teditor: DateTextBox,\\n\\t\\t\\teditOn: 'click',\\n\\t\\t\\tlabel: 'Due'\\n\\t\\t},\\n...\\n</pre>\\n<p>When editor columns are configured with the <code>editOn</code> property, the cells will be rendered using the standard default high-performance rendering path that simply generates text inside of a cell. Only a single shared Dijit will then be created, and it will be displayed in the appropriate cell when the <code>editOn</code> event is triggered. In this case, the single Dijit editor will only be displayed in response to a <code>click</code> event.</p>\\n<p>One of the issues with this approach, is that typically the rendering of the grid cells might look quite different than the rendering of the Dijit controls. In some situations this may be desirable, clearly differentiating and highlighting the cell that is currently being edited. However, in some situations this might not be desirable, as it might not be clear to users to that the cells are editable. Visually indicating that cells are editable may be particularly important in situations where cells might be editable or non-editable in different situations. Different rows might be editable, different columns might be editable, or the cells might switch between editable and read-only over time (e.g. switching application modes). Rendered Dijit editors provide a distinct styling that visually invites editing.</p>\\n<p>However, we can mitigate this issue by styling the editable cells with presentation similar to Dijit editors. For standard text boxes, this could be as simple as creating an inner element with a border and appropriate spacing, that mimics a Dijit <code>TextBox</code>. We could create such an inner element by adding a <code>renderCell</code> method to create one:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ncolumnDefinition: {\\n\\teditor: TextBox,\\n\\teditOn: 'click',\\n\\trenderCell: function (object, value, td) {\\n\\t\\tput(td, 'div.pseudoEditor', value);\\n\\t},\\n...\\n</pre>\\n<p>And then we could add some styling. This will look similar to a Claro-themed <code>TextBox</code> (although again, you might actually want some differences to more distinctly highlight the cell that is being edited):</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\n.pseudoEditor {\\n\\tborder: 1px solid #b5bcc7;\\n\\theight: 13px;\\n\\tpadding: 2px;\\n}\\n</pre>\\n<p>Other widgets may require more attention to provide similar styling. For example, if you wanted to mimic the dropdown button/arrow of a <code>DateTextBox</code>, <code>Select</code>, or <code>ComboBox</code>, you would need to provide a corresponding element (or psuedo-element) and icon. You might also want to listen for <code>click</code> events on this pseudo dropdown element, and in response to such a event, instantiate the widget and then open the dropdown of the widget after it has been rendered (usually done by calling the widget&#8217;s <code>loadAndOpenDropDown</code> method).</p>\\n<h2>Customized Native Inputs with Event Delegation</h2>\\n<p>There are situations where the <code>editOn</code> approach might not be ideal. If you are using validation, you may wish for the validation indicator to persist even after a user has moved on to other cells. With the <code>editOn</code> configuration, the widget will be removed once the user is done editing (on the <code>blur</code> event), and so validation won&#8217;t be naturally retained. Also, there may be situations where you wish to provide specialized input handling, that Dijit doesn&#8217;t provide. Or maybe you don&#8217;t want to load the Dijit dependencies (perhaps for lightweight mobile applications). While this is typically a more involved approach, it is very doable. </p>\\n<p>To begin, rather than configuring our editor to use a widget, we will define an input to use as the editor. We can do this by providing a string to the <code>editor</code> property value. This string will be used as the <code>type</code> attribute value for a native <code>&lt;input></code>. This will give us some basic editing capability. From here, we could then setup an event listener at the grid level, using the concept of event delegation, to listen for any events of interest from the editors. This can give us a chance to respond to <code>click</code> events to open any drop downs, or dgrid&#8217;s <code>dgrid-datachange</code> events to perform validation and add appropriate validation indicators to the cell. Here is an example of listening to <code>dgrid-datachange</code> events to perform validation:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\ngrid.on('.field-someProperty:dgrid-datachange', function (event) {\\n\\tvar cell = grid.cell(event);\\n\\tvar value = event.value;\\n\\tvar valid = isValid(value);\\n\\t// add or remove the error-state class based on if the value is valid\\n\\tput(cell.element, valid ? '!error-state' : '.error-state');\\n\\tif (!valid) {\\n\\t\\t// prevent the value from changing\\n\\t\\tevent.preventDefault();\\n\\t}\\n});\\n</pre>\\n<p>We might want to build on this to add a mouse hover handler to show a tooltip with more validation error information.</p>\\n<p>The editor can easily be configured for a native input element based on an <code>&lt;input></code>. However, if you want to use another input element, such as a <code>&lt;select></code> element, this will require additional effort. This could be accomplished by writing your <code>renderCell</code> method to generate the <code>&lt;select></code> element and writing your own <code>change</code> event handler, and manually updating data values in response to changes in the input.</p>\\n<p>Another approach is to mimic a widget with the <code>editor</code> value that you have provided to the dgrid editor (make the editor think it is a widget). This is somewhat of a fragile approach, since it relies on undocumented interactions in the editor, but you can provide a function as an <code>editor</code> (if the <code>editor</code> is a function, dgrid treats it as a widget, and your function will be executed for each cell, as if it were a widget constructor), and assign a self-reference of the <code>focusNode</code> property, and define a <code>connect</code> to handle event handling, to handle the necessary calls and property interactions that dgrid will make to the widget:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\nsomeColumn: {\\n\\teditor: function (args) {\\n\\t\\tvar select = ... create the select or other input element\\n\\t\\t// the editor keys of the focusNode to get the element\\n\\t\\tselect.focusNode = select;\\n\\t\\t// provide the event handling function that the editor will use\\n\\t\\t// to register for listening to change events\\n\\t\\tselect.connect = eventHandlerForTheseElements;\\n\\t}\\n</pre>\\n<p>Using custom renderers and custom event delegation handling, virtually any type of input can be created efficiently.</p>\\n<p>Again, we recommend optimizing the number of Dijit inputs within a grid to maximize performance. Creating Dijit inputs through a dgrid can have an impact on performance. For editors that can be appropriately styled while they aren&#8217;t being edited, the <code>editOn</code> approach can make it possible to only instantiate a single shared Dijit editor instance per dgrid column. If you require editors with persistent customized behavior, like validation, using native inputs with event delegation to customize the behavior may be your best option. If you are experiencing performance problems with grids in your application, <a href=\\\"https://www.sitepen.com/contact\\\">we would love to help</a>. A properly optimized dgrid is extremely fast and fluid, and you (and your users) shouldn&#8217;t settle for less.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Dijit and dgrid provide a powerful set of user interface components, allowing for fast construction of sophisticated web applications with excellent performance and interactivity. However, one particular configuration of dgrid that can impact memory and performance: heavy use of persistent Dijit editors within grid cells. The dgrid&#8217;s Editor plugin makes it very easy to leverage [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":10046,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[350,45,6,8],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Minimizing Dijit Instances in dgrid | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Minimizing Dijit Instances in dgrid | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Dijit and dgrid provide a powerful set of user interface components, allowing for fast construction of sophisticated web applications with excellent performance and interactivity. However, one particular configuration of dgrid that can impact memory and performance: heavy use of persistent Dijit editors within grid cells. The dgrid&#8217;s Editor plugin makes it very easy to leverage [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2015-04-14T18:22:20+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/\\\",\\\"name\\\":\\\"Minimizing Dijit Instances in dgrid | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/#primaryimage\\\"},\\\"datePublished\\\":\\\"2015-04-14T18:22:20+00:00\\\",\\\"dateModified\\\":\\\"2015-04-14T18:22:20+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/minimizing-dijit-instances-in-dgrid/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10579\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=10579\"}],\"version-history\":[{\"count\":0,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/10579/revisions\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/10046\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=10579\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=10579\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=10579\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=10579\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"code\":\"rest_post_invalid_id\",\"message\":\"Invalid post ID.\",\"data\":{\"status\":404}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5b0199a1bc67f3e7-LHR"],["cf-request-id","03d4de59140000f3e74237a200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Thu, 09 Jul 2020 11:10:43 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d137d3d59c86528ed4e1df5d5cbaa811d1594293043; expires=Sat, 08-Aug-20 11:10:43 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}