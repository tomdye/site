{"value":{"body":"[{\"id\":7335,\"date\":\"2014-01-06T11:10:11\",\"date_gmt\":\"2014-01-06T18:10:11\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=7335\"},\"modified\":\"2020-08-01T08:10:34\",\"modified_gmt\":\"2020-08-01T15:10:34\",\"slug\":\"private-matters-convention-and-closures\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/\",\"title\":{\"rendered\":\"Private Matters: Convention and Closures\"},\"content\":{\"rendered\":\"<p>Many object-oriented programming (OOP) languages provide a way to define private properties and methods. This allows objects to encapsulate functionality and state information. This encapsulation leads to a clear distinction between the internal implementation and a clean external interface.</p>\\n<p>However, JavaScript does not have a native mechanism for declaring private properties and methods, in the same sense that other object oriented languages do. But, there are a few techniques that we can use to achieve the same results.</p>\\n<p><!--more--></p>\\n<h2>Convention-Based</h2>\\n<p>The first technique we will consider is the use of convention-based naming to denote private properties and methods. The typical convention is to prefix names with an underscore to indicate they are private. This informs other users that the property or method is private, and shouldn&#8217;t be used.</p>\\n<p>Here is a simple example of a private property, private method, and public method in a class created with <a href=\\\"http://dojotoolkit.org/\\\">Dojo</a>&#8216;s <code>declare</code> (using standard prototypal inheritance):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndeclare(null, {\\r\\n    _privateProperty: 3,\\r\\n    _privateMethod: function () {\\r\\n        return this._privateProperty;\\r\\n    },\\r\\n    publicMethod: function () {\\r\\n        return this._privateMethod();\\r\\n    }\\r\\n});\\r\\n</pre>\\n<div style=\\\"float: right; width: 250px; background-color: #f6f6f2; border: 1px solid #bbb; font-size: 80%; padding: 1em; margin: 1.5em;\\\">\\n<h2>Terminology</h2>\\n<p>There are a couple of key JavaScripts concepts referenced in this post:</p>\\n<ul>\\n<li>Closure &#8211; A closure is a scope of variables (and arguments) of data and functions, that remains active through the references of other inner functions. There generally is a single closure for each module that may contain data and functions, and one can create closures to correspond to individual object instances as well.</li>\\n<li>Prototypal Inheritance &#8211; JavaScript uses direct object-to-object (or prototype) inheritance to achieve the type of functionality sharing and inheritance usually achieved through classes in other languages. One can define functions on prototypes (typically through a class constructor like Dojo&#8217;s <code>declare</code>), to provide method-like functionality on object instances.</li>\\n</ul>\\n</div>\\n<p>There are a few advantages to this approach: </p>\\n<ul>\\n<li>It fits well with JavaScript&#8217;s object-oriented paradigm.</li>\\n<li>Private properties and functions can exist alongside public ones, attached to the prototype.</li>\\n<li>There is no barrier to access between private and public methods and properties.</li>\\n<li>Private methods can be defined on object prototypes, and easily inherited by other sub classes and object instances without any extra overhead.</li>\\n</ul>\\n<p>However, convention-based private properties are not really private; they don&#8217;t actually prevent users from accessing these properties. This can be an advantage or a disadvantage. Often private methods or properties might actually end up being very useful to the users of an object. When we use convention-based access, users still retain the flexibility of ignoring the convention to override or directly call or access the private method or property. However, this type of access may not be advantageous for version upgrades. We will look at this concern in the next section.</p>\\n<h2>Instance-Specific Closures</h2>\\n<p>The next option for creating private members is to use instance-specific closures. A closure is a function scope within which we can create private functions and variables alongside functions that are publicly assigned and accessible outside the closure. Typically this is done in the constructor of the class, where the constructor function&#8217;s scope is used to contain the private functions, and public functions can be created prior to the new instance being accessible and any method calls being dispatched on it. Here is an example of using this type of closure to create a private property (as a variable), private method, and public method:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndeclare(null, {\\r\\n    constructor: function () {\\r\\n        var privateProperty = 3;\\r\\n        function privateFunction () {\\r\\n            return privateProperty;\\r\\n        }\\r\\n        this.publicMethod = function () {\\r\\n            return privateFunction();\\r\\n        };\\r\\n    }\\r\\n});\\r\\n</pre>\\n<p>There are several benefits and disadvantages of this approach as well. The first advantage is that it can be used to create truly private methods and state information, which really can not be accessed outside of the closure. Closures can also yield very clean code. When accessing private state values and the private functions, we don&#8217;t need to reference them through a property on `this`, they can be directly referenced. We also do not need to litter our code with underscores: the declaration indicates the scope without needing any extra conventions (although you could still use it). All this can produce cleaner, more readable, and less-error prone code.</p>\\n<p>However, there are a few issues with this approach to be aware of. First, closures are notorious for consuming more memory. With the typical convention-based (prototypal) declaration, a single set of methods can be shared across all instances. But in the case of closures, each instance allocates a new scope instance for the constructor, as well as new function and variable slots for each of the function and variables in the scope of the constructor, which can easily add up to a large amount of memory consumption if there are a high number of instances.</p>\\n<p>Second, methods declared in the traditional way, on the prototype of a class, cannot access the private functions or variables from the constructor scope. Any public method you wish to create, that will need access to these private functions, must be declared within the same constructor scope (you can see how we created the public method in the example above to be able to access the private function), and can&#8217;t be created through Dojo&#8217;s <code>declare</code>.</p>\\n<p>Truly private methods may also present an inconvenience to the end user, who may really want to call your private function or override it. This is often cited as an issue with using closures. However, this reasoning deserves some caution, as well. From the perspective of looking at a single static version of some code, making otherwise private functions available can be alluring. But, one of the key reasons we denote functions as private is because they are part of our internal implementation, which we may anticipate or wish to change in future versions to improve the quality of our component. If we make these private methods accessible (through convention-based denotation of private), anyone who uses these methods creates a dependency on them, and future versions that eliminate or change the private methods can easily break the code with dependencies on the old version of these methods. If we are creating private methods for the purpose of protecting our internal implementation to facilitate future upgrades, using convention-based private members can defeat that very purpose. Whereas closure based private methods can keep methods truly private and help to ensure smoother future upgrades. Remember, it is much easier to switch a private method to a publicly accessible method in a future version than vice-versa. Once you have made something accessible, it can be very difficult to hide or change it without causing grief for your users.</p>\\n<h2>Class-Specific Closures</h2>\\n<p>Finally, there is third option available. Closures can also be used outside of class construction to create class-specific closures instead of instance-specific closures. In this case, we use a single closure to define our private functions, rather than generating new functions inside of the constructor. The closure scope may come from an immediately invoked function expression or, if an AMD modules is being defined, from the scope of the module&#8217;s factory function. Here is an example of using this option (within a <code>define()</code>&#8216;ed module):</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndefine([...], function (...) {\\r\\n    var privateProperty = 3;\\r\\n    function privateFunction () {\\r\\n         return privateProperty;\\r\\n    }\\r\\n    return declare(null, {\\r\\n        publicMethod: function () {\\r\\n            return privateFunction();\\r\\n        }\\r\\n    }\\r\\n});\\r\\n</pre>\\n<p>One of the key differences in this approach should be immediately made known: since there is only a single instance of the closure, we can not have instance-specific private state values. The <code>privateProperty</code> variable declared here is shared by all instances.</p>\\n<p>There are some important advantages with this approach which address some of the key problems with the instance-specific closures. First, we no longer have any instance-specific memory overhead. Just as with convention-based private methods, instances only retain the memory of the object itself, providing much more efficient memory usage.</p>\\n<p>Second, methods declared in the traditional way, on the prototype of the class, have full access to all the private functions (and class-specific variables), one does not need to alter the declaration of these public methods to give them access to private methods.</p>\\n<p>You may be hesitant about using functions that don&#8217;t sit on the instances as methods. However, remember that the instance context is essentially just another argument that is passed to a function with some nice syntax. We can still easily give these functions access to the instance and all its (public) properties and methods.</p>\\n<h2>Combining Techniques</h2>\\n<p>Because class-specific closures allow methods on the prototype to access the private methods and variables, this gives us the option to be able to combine techniques. For example, we could easily use a convention-based private property in conjunction with a class-specific closured function, allowing us to have a truly private function, while still using instance-specific data without any instance-specific extra memory overhead:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndefine([...], function (...) {\\r\\n    function privateFunction (instance) {\\r\\n         return instance._privateProperty;\\r\\n    }\\r\\n    return declare(null, {\\r\\n        _privateProperty: 3,\\r\\n        publicMethod: function () {\\r\\n            return privateFunction(this);\\r\\n        }\\r\\n    }\\r\\n});\\r\\n</pre>\\n<h2>Looking Ahead: WeakMaps</h2>\\n<p>One of the exciting new features that has been proposed for EcmaScript 6 is the <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\\\">WeakMap interface</a>. A WeakMap is an object that supports objects as keys. By using a WeakMap, we can actually create a class-specific closure on a WeakMap, yet use instances as the keys to define instance-specific data. Here is how we could upgrade the previous example to use WeakMaps:</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\ndefine([...], function (...) {\\r\\n    var privatePropertyMap = new WeakMap();\\r\\n    function privateFunction (instance) {\\r\\n        // set a private property value for this instance\\r\\n        privatePropertyMap.set(instance, someValue);\\r\\n        // get a private property value\\r\\n        return privatePropertyMap.get(instance);\\r\\n    }\\r\\n    return declare(null, {\\r\\n        publicMethod: function () {\\r\\n            // we can access the private property values here as well\\r\\n            privatePropertyMap.get(instance);\\r\\n            return privateFunction(this);\\r\\n        }\\r\\n    }\\r\\n});\\r\\n</pre>\\n<p>WeakMaps will automatically remove entries when an object key is garbage collected, so private property values are cleaned up as a natural part of the garbage collection process. WeakMaps are currently only available in Firefox and Chrome with the experimental features enabled.</p>\\n<h2>Comparison of Features</h2>\\n<p>So which option should you use? Each of these different approaches are suited for different situations. To help summarize, let&#8217;s compare the benefits and capabilities of these different approaches:</p>\\n<table>\\n<thead>\\n<tr>\\n<th></th>\\n<th>Convention-Based</th>\\n<th>Instance-Specific Closures</th>\\n<th>Class-Specific Closures</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Per-instance memory overhead</td>\\n<td>No</td>\\n<td>Yes</td>\\n<td>No</td>\\n</tr>\\n<tr>\\n<td>Truly private</td>\\n<td>No</td>\\n<td>Yes</td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td>Accessible from standard prototypal methods</td>\\n<td>Yes</td>\\n<td>No</td>\\n<td>Yes</td>\\n</tr>\\n<tr>\\n<td>Permits instance-specific state</td>\\n<td>Yes</td>\\n<td>Yes</td>\\n<td>No</td>\\n</tr>\\n<tr>\\n<td>Enables direct referencing of private functions</td>\\n<td>No</td>\\n<td>Yes</td>\\n<td>Yes</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>As for general advice for which technique to use, I&#8217;ll conclude with a few suggestions. Each of these approaches have appropriate use cases, here some final guidelines:</p>\\n<ul>\\n<li>Avoid instance-specific closures for classes for which you expect to have a high number of instances (like thousands).</li>\\n<li>Be very careful about what you are communicating with convention-based private methods and properties. If you are trying to privatize these for the sake of future implementation upgrades, the underscore convention may be insufficient. If you do not foresee any changes, in some cases it may be better to simply make your methods public and document when and when to use them.</li>\\n<li>Class-specific private functions can often provide the best of both worlds, but again remember that you can&#8217;t use them to store instance-specific private state information.</li>\\n<li>Once WeakMaps are widely available, you can utilize these for truly private instance-specific data.</li>\\n</ul>\\n<p>Often using a combination of these tools can yield the greatest flexibility, balancing of performance, and maintainability of your code.</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>Many object-oriented programming (OOP) languages provide a way to define private properties and methods. This allows objects to encapsulate functionality and state information. This encapsulation leads to a clear distinction between the internal implementation and a clean external interface. However, JavaScript does not have a native mechanism for declaring private properties and methods, in the [&hellip;]</p>\\n\",\"protected\":false},\"author\":28,\"featured_media\":22075,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[3],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Private Matters: Convention and Closures | SitePen</title>\\n<meta name=\\\"description\\\" content=\\\"Many object-oriented programming (OOP) languages provide a way to define private properties and methods. This allows objects to encapsulate functionality and state information. This encapsulation leads to a clear distinction between the internal implementation and a clean external interface.  However, JavaScript does not\\\" />\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Private Matters: Convention and Closures | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"Many object-oriented programming (OOP) languages provide a way to define private properties and methods. This allows objects to encapsulate functionality and state information. This encapsulation leads to a clear distinction between the internal implementation and a clean external interface.  However, JavaScript does not\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2014-01-06T18:10:11+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-08-01T15:10:34+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"width\\\":1600,\\\"height\\\":900},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/\\\",\\\"name\\\":\\\"Private Matters: Convention and Closures | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/#primaryimage\\\"},\\\"datePublished\\\":\\\"2014-01-06T18:10:11+00:00\\\",\\\"dateModified\\\":\\\"2020-08-01T15:10:34+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\"},\\\"description\\\":\\\"Many object-oriented programming (OOP) languages provide a way to define private properties and methods. This allows objects to encapsulate functionality and state information. This encapsulation leads to a clear distinction between the internal implementation and a clean external interface. However, JavaScript does not\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/blog/private-matters-convention-and-closures/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/7335\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=7335\"}],\"version-history\":[{\"count\":1,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/7335/revisions\"}],\"predecessor-version\":[{\"id\":26349,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/7335/revisions/26349\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=7335\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=7335\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=7335\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=7335\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":28,\"name\":\"Kris Zyp\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/kzyp/\",\"slug\":\"kzyp\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Kris Zyp, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Kris Zyp, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/kzyp/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/kzyp/\\\",\\\"name\\\":\\\"Kris Zyp, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/0b6eaf72ddf34f8c761763c239c05087\\\",\\\"name\\\":\\\"Kris Zyp\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/0c073304e94b11bc5a45aa6a3b5fedb7?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Kris Zyp\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/kzyp/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/28\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22075,\"date\":\"2020-01-22T13:53:07\",\"slug\":\"og_imagev1\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/og_imagev1/\",\"title\":{\"rendered\":\"og_imageV1\"},\"author\":9,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.7 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>og_imageV1 | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"og_imageV1 | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1600\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"900\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\",\\\"name\\\":\\\"og_imageV1 | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"dateModified\\\":\\\"2020-01-22T21:53:07+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1600,\"height\":900,\"file\":\"2020/01/og_imageV1.jpg\",\"sizes\":{\"medium\":{\"file\":\"og_imageV1-300x169.jpg\",\"width\":300,\"height\":169,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-300x169.jpg\"},\"large\":{\"file\":\"og_imageV1-1024x576.jpg\",\"width\":1024,\"height\":576,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1024x576.jpg\"},\"thumbnail\":{\"file\":\"og_imageV1-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-150x150.jpg\"},\"medium_large\":{\"file\":\"og_imageV1-768x432.jpg\",\"width\":768,\"height\":432,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-768x432.jpg\"},\"1536x1536\":{\"file\":\"og_imageV1-1536x864.jpg\",\"width\":1536,\"height\":864,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1-1536x864.jpg\"},\"full\":{\"file\":\"og_imageV1.jpg\",\"width\":1600,\"height\":900,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2020/01/og_imageV1.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22075\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/9\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Mon, 10 Aug 2020 15:44:46 GMT"],["expires","Wed, 09 Sep 2020 15:44:46 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.21-1+0~20200807.66+debian9~1.gbp18a1c2"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}