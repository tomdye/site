{"value":{"body":"[{\"id\":15002,\"date\":\"2017-08-17T09:47:29\",\"date_gmt\":\"2017-08-17T16:47:29\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=15002\"},\"modified\":\"2020-02-03T10:13:29\",\"modified_gmt\":\"2020-02-03T18:13:29\",\"slug\":\"state-of-modern-component-styling\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/state-of-modern-component-styling/\",\"title\":{\"rendered\":\"State of Modern Component Styling\"},\"content\":{\"rendered\":\"<p>As new user interface component frameworks are created and old frameworks are replaced with emerging technologies, methods for styling those components must change with them. Long gone are the days of creating a simple HTML component and importing a simple CSS file with corresponding class names. Concerns such as style leaking, local DOM manipulation and theming are driving changes to the approaches we take. With developer IDEs and the JavaScript language itself and extensions such as TypeScript becoming more intelligent and allowing auto-completion, should our styling approaches not give us the same? In this world of intelligent auto-completion, why should we expect developers to remember and replicate matching class names across CSS and HTML? Modern frameworks are adapting to this shift and there are many different solutions to the problem of making styling and theming more intuitive. Here we will explore some of these solutions.</p>\\n<p><!--more--></p>\\n<h2 id=\\\"the-olden-days\\\">The olden days</h2>\\n<p>In simple forms, a component is just a block of HTML with some corresponding JavaScript and CSS.</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;div class='button'&gt;\\r\\n\\t&lt;span class='label'&gt;Click Me&lt;/span&gt;\\r\\n&lt;/div&gt;\\r\\n</pre>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.button {\\r\\n\\tdisplay: block;\\r\\n\\tbackground: blue;\\r\\n}\\r\\n\\r\\n.button .label {\\r\\n\\tcolor: white;\\r\\n}\\r\\n</pre>\\n<p>There are many problems with this approach in this form. The first main issue is that any other styles for a <code>label</code> class will likely affect our button label. The class names are brittle as they are manually entered in both the HTML and CSS and the colours are hardcoded, making any changes or theming more difficult to maintain. Sure, you could tidy this up by using something like a <a href=\\\"http://getbem.com/introduction/\\\">BEM</a> technique, but this is really treating the symptoms of the issue rather than changing the underlying approach.</p>\\n<p>More recently, styling and theming an app was often achieved using a framework such as the highly popular <a href=\\\"http://getbootstrap.com/javascript/\\\">Bootstrap</a> and adding extra classes / structure to your components to bring them inline with the framework&#8217;s guidelines. Other popular approaches such as <a href=\\\"https://material.io/\\\">Material</a> and <a href=\\\"https://semantic-ui.com/\\\">Semantic</a> have since been released and largely have implementations available for use within React, Polymer, and other frameworks.</p>\\n<p>Improvements could be made to the approach of base CSS using CSS preprocessors such as <a href=\\\"http://lesscss.org/\\\">Less</a>, <a href=\\\"http://stylus-lang.com/\\\">Stylus</a>, and <a href=\\\"http://sass-lang.com/\\\">Sass</a>. These introduced a proprietary format of CSS including popular features such as mixins, variables, and vendor prefixing. The downside of using preprocessors is that developers must learn this format and the end result is still CSS, without solving many of the same problems including leaking styles across components.</p>\\n<h2 id=\\\"what-we-are-trying-to-solve\\\">What we are trying to solve?</h2>\\n<div class=\\\"pull-right\\\">\\n<img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/article-image.jpg\\\" alt=\\\"\\\" class=\\\"alignnone size-full wp-image-15019\\\" />\\n</div>\\n<p>So what problems are modern component styling approaches really trying to solve?</p>\\n<h3 id=\\\"style-leakage\\\">Style leakage</h3>\\n<p>A common problem with using class names in global CSS is that you can have style clashes. If you have more than one node with the same class name, these nodes will receive the same CSS rules. You can strive to avoid this problem by nesting your CSS selectors and by following the principles of BEM, but this can often become very complicated.</p>\\n<h3 id=\\\"changes-to-designs\\\">Changes to designs</h3>\\n<p>Changes to your designs when using vanilla CSS can be a challenge as you will likely end up using <code>find and replace</code> to change color, padding, margin and other properties across your CSS files. Preprocessors provide variables to make this easier, but then you are introducing a new proprietary CSS language into your codebase.</p>\\n<h3 id=\\\"theming\\\">Theming</h3>\\n<p>Vanilla or preprocessed CSS can be challenging to theme. I&#8217;ve often found myself going down the path of writing overly complicated CSS rule definitions with highly specific selectors to override the base styles of a component and this quickly gets messy. Especially when the toolkit you are theming changes their style definitions in the next release, and you have to use the browser debugging tools to inspect the CSS to identify any changes impacting your UI components</p>\\n<h3 id=\\\"class-name-mistakes\\\">Class name mistakes</h3>\\n<p>Keeping track of how class names are spelt, and which class names applying particular styles, can be frustrating and inefficient. One small spelling mistake somewhere in your codebase can stop styles from being applied and tracking down the cause can time consuming as this is not reported as an error.</p>\\n<h2 id=\\\"the-new-way\\\">The new way</h2>\\n<p>There are many approaches used in modern component frameworks. These can largely be split into <code>CSS</code>, <code>CSS-in-JS</code> and <code>inline-styles</code>. We&#8217;ll stay clear of the latter option and concentrate on those that generate actual CSS stylesheets.</p>\\n<p>So lets dive in.</p>\\n<h3 id=\\\"polymer-styling\\\">Polymer Styling</h3>\\n<p><a href=\\\"https://www.polymer-project.org/\\\">Polymer</a> uses the cutting edge of available browser functionality largely using polyfills to cover the gaps in browser support. As such, the framework uses the same approach for its styling. Polymer styles are written using proposed future CSS syntax and make heavy use of <a href=\\\"https://developer.mozilla.org/en-US/docs/Web/CSS/--*\\\"><code>css-custom-properties</code></a>.</p>\\n<p><code>css-custom-properties</code> allow you to create DOM level scoped variables that can be used to alter the CSS that is applied to a given element.</p>\\n<pre class=\\\"brush: xml; title: ; notranslate\\\" title=\\\"\\\">\\r\\n&lt;style&gt;\\r\\n\\t:root { --title-color: green; }\\r\\n\\t.warning { --title-color: red; }\\r\\n\\t.title { color: var(--title-color); }\\r\\n&lt;/style&gt;\\r\\n\\r\\n&lt;span class='title'&gt;Green Title&lt;/span&gt;\\r\\n&lt;span class='title warning'&gt;Red Title&lt;/span&gt;\\r\\n</pre>\\n<p>Polymer utilises this approach for both its component styling and its theming. A theme file will typically include a theme class wrapping a number of <code>css-custom-properties</code> that are then used to manipulate the visible styles at run time. The challenge with this approach is that <code>css-custom-properties</code> cannot be fully polyfilled at run time as any polyfill must account for the structure of the DOM when applying the correct CSS properties and variables to each node.</p>\\n<p>To get around this issue, Polymer has a comprehensive build time polyfill for <code>css-custom-properties</code> which has knowledge of the application&#8217;s DOM structure and applies calculated variables to the generated output. At this time, Polymer has deprecated the use of external stylesheets, so all styles must be written within the polymer element template.</p>\\n<h3 id=\\\"styled-components\\\">Styled components</h3>\\n<p><a href=\\\"https://www.styled-components.com/\\\">Styled components</a> for React uses tagged template literals to create styles. They can be used to create predefined components to represent <code>button</code>, <code>a</code> and other HTML elements, or to add styles to any standard React component. A CSS stylesheet is created with class names which are passed to the component via the <code>classname</code> property.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport styled from 'styled-components'\\r\\nconst Button = styled.button`\\r\\n\\tbackground: blue;\\r\\n\\tdisplay: block;\\r\\n\\tcolor: white;\\r\\n`;\\r\\n</pre>\\n<p>These stye tags can return functions that receive component properties. For example, you could pass a property to your component to indicate if it was a primary button, this would be used by the <code>styles.button</code> to adapt the styles accordingly.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport styled from 'styled-components'\\r\\n\\r\\nconst Button = styled.button`\\r\\n\\tbackground: ${props =&gt; props.primary ? 'green' : 'blue'};\\r\\n\\tdisplay: block;\\r\\n\\tcolor: white;\\r\\n`;\\r\\n\\r\\nreturn(\\r\\n\\t&lt;Button primary&gt;Primary Button&lt;/Button&gt; // Green button\\r\\n);\\r\\n</pre>\\n<p>Theming of styled-components is achieved using a <code>&lt;ThemeProvider&gt;</code> component wrapper which takes a <code>theme</code> property. The theme can provide variables and rules to be used within the component.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport styled from 'styled-components'\\r\\n\\r\\nconst Button = styled.button`\\r\\n\\tbackground: ${props =&gt; props.theme.buttonBackground};\\r\\n\\tdisplay: block;\\r\\n\\tcolor: white;\\r\\n`;\\r\\n\\r\\nconst theme = {\\r\\n\\tbuttonBackground: 'green'\\r\\n};\\r\\n\\r\\nreturn(\\r\\n\\t&lt;ThemeProvider theme={theme}&gt;\\r\\n\\t\\t&lt;Button primary&gt;Primary Button&lt;/Button&gt; // Green button\\r\\n\\t&lt;/ThemeProvider&gt;\\r\\n);\\r\\n</pre>\\n<h3 id=\\\"jsxstyle\\\">jsxstyle</h3>\\n<p><a href=\\\"https://github.com/smyte/jsxstyle\\\">jsxstyle</a> aims to create display components that can wrap components. These display components can take the form of <code>block</code>, <code>inlineBlock</code>, <code>flex</code> and other typical values for the CSS <code>display</code> property. Each display component accepts properties that represent CSS attributes, which are in turn used to style their contents. The built code inserts stylesheets into the DOM with unique CSS class names. This avoids style leakage and enables rules to be reused between components that share styles.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport { Block, Inline } from 'jsxstyle';\\r\\n\\r\\nreturn (\\r\\n\\t&lt;Block backgroundColor='blue'&gt;\\r\\n\\t\\t&lt;Inline color='white'&gt;Blue Button&lt;/Inline&gt;\\r\\n\\t&lt;/Block&gt;\\r\\n);\\r\\n</pre>\\n<h3 id=\\\"glamorous\\\">Glamorous</h3>\\n<p>PayPal&#8217;s <a href=\\\"https://glamorous.rocks/\\\">Glamorous</a> aims to build upon the ideas of both <code>styled-components</code> and <code>jsxstyle</code>. Glamorous provides a function that receives styles as a JavaScript object as well as providing a collection of components that can be used with property styles. The latter approach allows you to create styled components without having to give them a name.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport glamorous, {Button} from 'glamorous'\\r\\n\\r\\nconst MyButton = glamorous.button({\\r\\n\\tbackgroundColor: 'blue',\\r\\n\\tcolor: 'white'\\r\\n});\\r\\n\\r\\nreturn (\\r\\n\\t&lt;MyButton&gt;Named Button&lt;/MyButton&gt;\\r\\n\\t&lt;Button backgroundColor='blue'\\r\\n\\t\\tcolor='white'&gt;Anonymous Button&lt;/Button&gt;\\r\\n);\\r\\n</pre>\\n<p>The benefit of not having to provide a name is that this avoids having to add a placeholder HTML element just to provide a reference for a group of items. Inline styles allow you to apply styles directly to a node without naming it in that manner. Glamorous&#8217;s approach to allowing similar inline styles (that turn into CSS) to be applied directly to an anonymous node / element provides the same benefit.</p>\\n<p>Theming in Glamorous is provided via a <code>&lt;ThemeProvider&gt;</code>, much like <code>styled-components</code>, but it also allows a theme to be directly injected into a component. Themes can provide both variables and styles to components.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport glamorous, {ThemeProvider} from 'glamorous'\\r\\n\\r\\nconst myTheme = {\\r\\n\\tbutton: {\\r\\n\\t\\tbackgroundColor: 'blue',\\r\\n\\t\\tcolor: 'white'\\r\\n\\t}\\r\\n};\\r\\n\\r\\nconst ThemeableButton = glamorous.button((props, theme) =&gt; ({\\r\\n  ...theme.button\\r\\n}));\\r\\n\\r\\nreturn (\\r\\n\\t&lt;ThemeProvider theme={myTheme}&gt;\\r\\n\\t\\t&lt;ThemeableButton&gt;Themed Button&lt;/ThemeableButton&gt;\\r\\n\\t&lt;/ThemeProvider&gt;\\r\\n);\\r\\n</pre>\\n<h3 id=\\\"css-in-jss\\\">CSS in JS (JSS)</h3>\\n<p><a href=\\\"http://cssinjs.org\\\">CSS in JS</a> uses CSS directly within your JavaScript code. CSS Class names form the top level object keys and each nested object contains the CSS rules. This pattern is used within React and React Native and allows styles to be combined using an array.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// react native example\\r\\nimport {Stylesheet, Button} from 'react-native';\\r\\n\\r\\nconst styles = Stylesheet.create({\\r\\n\\tbutton: {\\r\\n\\t\\tbackground: 'blue',\\r\\n\\t\\tcolor: 'white'\\r\\n\\t},\\r\\n\\tbold: {\\r\\n\\t\\tfontWeight: 'bold'\\r\\n\\t}\\r\\n);\\r\\n\\r\\nreturn(\\r\\n\\t&lt;Button style={styles.button}&gt;Native Button&lt;/Button&gt;\\r\\n\\t&lt;Button style={[styles.button, styles.bold]}&gt;Bold Button&lt;/Button&gt;\\r\\n);\\r\\n</pre>\\n<p>In several ways, this reminds us of the early Netscape CSS predecessor, <a href=\\\"https://en.wikipedia.org/wiki/JavaScript_Style_Sheets\\\">JavaScript StyleSheets (JSSS)</a>.</p>\\n<h3 id=\\\"react-themeable\\\">React Themeable</h3>\\n<p><a href=\\\"https://github.com/markdalgleish/react-themeable\\\">React themeable</a> is an attempt to normalise the styling and theming of React components. The idea is that all third-party components should adopt this approach to level out the inconsistencies of styling and theming. It is highly versatile and allows styles to be written using <code>css-modules</code>, <code>react style</code>, <code>radium</code> and plain CSS.</p>\\n<p>React Components such as <a href=\\\"https://github.com/moroshko/react-autosuggest\\\">react-autosugest</a> make use of react-themeable and ships with zero styles of its own.</p>\\n<p>React-themeable provides a component with a single function, <code>themeable</code>, which accepts a theme property and returns a function that may be uses to decorate the relevant nodes. The returned function deals with whether the theme provided is class or style based, and automatically sets up the appropriate attributes.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport themeable from 'react-themeable';\\r\\n\\r\\nrender() {\\r\\n\\tconst theme = themeable(this.props.theme);\\r\\n\\r\\n\\treturn (\\r\\n\\t\\t&lt;div {...theme(1, 'button')}&gt;\\r\\n\\t\\t\\t&lt;span {...theme(2, 'label')}&gt;Themed Button&lt;/span&gt;\\r\\n\\t\\t&lt;/div&gt;\\r\\n\\t);\\r\\n}\\r\\n</pre>\\n<p>The theme for this component must now provide classes or styles for <code>button</code> and <code>label</code>. This approach is highly effective because it gives the component author control over which nodes can receive styles and which cannot, whilst leaving the component user free to use whatever styling approach and technology they see fit.</p>\\n<h3 id=\\\"css-modules\\\">CSS Modules</h3>\\n<p><a href=\\\"https://github.com/css-modules/css-modules\\\">CSS modules</a> allows you to write locally scoped class names and animation names using plain CSS. The CSS files are then imported into your JavaScript modules and the classes provided are then used to decorate your DOM nodes. When importing a CSS module, it exports a JSON object with mappings from the specified class names to the localised class names it has generated.</p>\\n<p>This means that the developer does not need to nest CSS class names in order to achieve style encapsulation. When using CSS modules, you should refrain from id or tag selectors as these cannot be localised by the build process.</p>\\n<p>When you pair CSS modules with typed-css-modules within a TypeScript project, you are able to get the benefit of Intellisense/auto-completion of CSS class names.</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n/* from this */\\r\\n.button .label {\\r\\n\\tcolor: white;\\r\\n}\\r\\n\\r\\n/* to this */\\r\\n.label {\\r\\n\\tcolor: white;\\r\\n}\\r\\n\\r\\n/* after build */\\r\\n.module_name_label_35j2h3g4 {\\r\\n\\tcolor: white;\\r\\n}\\r\\n</pre>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport css from './style.css' // returns map of classnames\\r\\n\\r\\nreturn (\\r\\n\\t&lt;button className={css.button}&gt;\\r\\n\\t\\t&lt;span className={css.label}&gt;My button&lt;/span&gt;\\r\\n\\t\\t// Span will receive built classname\\r\\n\\t&lt;/button&gt;\\r\\n);\\r\\n</pre>\\n<h3 id=\\\"postcss-and-css-next\\\">PostCSS and PostCSS-cssnext</h3>\\n<p><a href=\\\"http://postcss.org/\\\">PostCSS</a> enables you to write cutting edge CSS and down emit your code to a format that the browser can use, much the same way as Babel allows you to write ES6+ code for a wide range of browsers.</p>\\n<p>PostCSS has a vast library of plugins available to enable various features. <a href=\\\"http://cssnext.io/\\\">PostCSS-cssnext</a> is one of the most useful plugins available, as it allows you to use modern CSS specification features without having to worry about browser support. These include color functions, rule nesting, <code>css-custom-properties</code> and more. PostCSS-cssnext also comes bundled with <a href=\\\"https://github.com/postcss/autoprefixer\\\">autoprefixer</a> which alleviates the need to add vendor prefixes to your CSS code and maximises browser support.</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n:root { \\r\\n\\t--primary-color: 'green';\\r\\n}\\r\\n.button {\\r\\n \\tbackground: var(--primary-color);\\r\\n\\t&amp;:hover {\\r\\n\\t\\tbackground: color(var(--primary-color) a(40%));\\r\\n\\t}\\r\\n}\\r\\n</pre>\\n<h3 id=\\\"dojo2\\\">Dojo 2</h3>\\n<div class=\\\"pull-right\\\">\\n<img src=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/dojo2.jpg\\\" alt=\\\"\\\" class=\\\"alignnone size-full wp-image-15023\\\" />\\n</div>\\n<p><a href=\\\"https://dojo.io/\\\">Dojo 2</a> aims to provide a typesafe styling and theming approach using the most recent technology available. With a robust widget authoring framework, its very important that the theming system is baked into the widget creation system. Widget theme files are authored as <code>css-modules</code> and compiled using <code>PostCSS</code> and <code>PostCSS-cssnext</code>. This allows widget authors to write CSS files without having to worry about cross-browser compatibility, style leakage and without using a preprocessor language. Each widget has its own style file with a <code>.m.css</code> file extension to mark it as a <code>css-module</code> to the build system. Common module files for <code>icons</code> and app level styles can be imported into your widget file and the classes provided are used to decorate widget nodes. <code>css-custom-properties</code> are used to provide CSS variables to the widgets, and these values are computed at build time so that browser compatibility is maximised. A <code>variables.css</code> file is included with the <a href=\\\"http://github.com/dojo/widgets\\\">@dojo/widgets</a> package and can be imported into client CSS files to allow third-party developers to use and extend the Dojo 2 look and feel in their own widgets.</p>\\n<p>Dojo 2 provides a class level function, <code>classes</code>, which is used to keep track of CSS classes being added and removed from the rendered Virtual DOM and to allow for themes to be used.</p>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\nimport * as css from './styles/myWidget.m.css`;\\r\\n\\r\\nreturn v('div', { classes: this.classes(css.root) }, [\\r\\n\\tv('span', { classes: this.classes(css.label) })\\r\\n]);\\r\\n</pre>\\n<p>In order to theme a Dojo 2 widget you must pass it a <code>theme</code> object. The theme object can provide the theme for multiple widgets keyed by their widget name. Dojo 2 widgets from <code>@dojo/widgets</code> are keyed with a <code>dojo-</code> prefix to avoid naming clashes. Themes can target the class names passed to <code>this.classes</code>. For example, to change the <code>span</code> element&#8217;s appearance from the above example, a theme should provide an alternative <code>label</code> class.</p>\\n<pre class=\\\"brush: css; title: ; notranslate\\\" title=\\\"\\\">\\r\\n.label {\\r\\n\\tcolor: red;\\r\\n}\\r\\n</pre>\\n<pre class=\\\"brush: jscript; title: ; notranslate\\\" title=\\\"\\\">\\r\\n// import theme file\\r\\nimport * as myWidget from './themes/myTheme/myWidget.m.css`;\\r\\nimport myWidget from './widgets/myWidget';\\r\\n\\r\\nconst theme = {\\r\\n\\tmyWidget\\r\\n}\\r\\n\\r\\nreturn w(myWidget, { theme } ); //will have a red label\\r\\n</pre>\\n<h2 id=\\\"summary\\\">Summary</h2>\\n<p>JavaScript has come a long way and it is great to see that styling, theming and uses of CSS are also progressing quickly. Frameworks like like Dojo 2 and Polymer are making the most of the advances in CSS specifications for <code>css-custom-properties</code> and localisation of class names, which is great for developers who like to write <code>CSS</code>. CSS in JavaScript approaches such as <code>Glamourous</code> and <code>react-styles</code> are proving very popular in the React world due to the auto-completion/Intellisense that they provide within the IDE, not to mention the options they provide for frameworks like <code>react-native</code>. <code>css-modules</code> and TypeScript are a great combination for developers who like their styles to be in CSS files (where they should be!), but still want the Intellisense that CSS in JavaScript approaches provide. There are many options available, to help your providing better styling for your applications, and most importantly, stay away from the <code>!important</code> declaration!</p>\\n<hr />\\n<h2>Need a few style tips?</h2>\\n<div>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ConsultingLogoBlogs2.jpg\\\" alt=\\\"Let's Talk! Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px\\\"><a href=\\\"https://www.sitepen.com/contact/\\\">Let&#8217;s talk</a> about how we can get your web app dressed in the latest styles of the season.</p>\\n<p><a href=\\\"https://www.sitepen.com/services/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0px\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/SupportLogoBlogs2.jpg\\\" alt=\\\"Support Logo\\\" width=\\\"28\\\" /></a></p>\\n<p style=\\\"margin-top: -5px\\\">Get help from <a href=\\\"https://www.sitepen.com/services/\\\">SitePen On-Demand Development and Support</a>, our fast and efficient solutions to JavaScript and web development problems of any size.</p>\\n<p><a href=\\\"https://www.sitepen.com/contact/\\\"><img class=\\\"alignleft\\\" style=\\\"margin-top: 0\\\" src=\\\"https://wp.sitepen.com/wp-content/uploads/2016/06/ContactLogoBlogs2.jpg\\\" alt=\\\"Contact Us Logo\\\" width=\\\"30\\\" /></a></p>\\n<p style=\\\"margin-top: -5px\\\">Have a question? We&#8217;re here to help! <a href=\\\"https://www.sitepen.com/contact/\\\">Get in touch</a> and let&#8217;s see how we can work together.</p>\\n</div>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>As new user interface component frameworks are created and old frameworks are replaced with emerging technologies, methods for styling those components must change with them. Long gone are the days of creating a simple HTML component and importing a simple CSS file with corresponding class names. Concerns such as style leaking, local DOM manipulation and [&hellip;]</p>\\n\",\"protected\":false},\"author\":71,\"featured_media\":22202,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[31,214,215,4,3,29],\"tags\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>State of Modern Component Styling | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/state-of-modern-component-styling/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"State of Modern Component Styling | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"As new user interface component frameworks are created and old frameworks are replaced with emerging technologies, methods for styling those components must change with them. Long gone are the days of creating a simple HTML component and importing a simple CSS file with corresponding class names. Concerns such as style leaking, local DOM manipulation and [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/state-of-modern-component-styling/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2017-08-17T16:47:29+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-03T18:13:29+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/state-of-modern-component-styling/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\\\",\\\"width\\\":1200,\\\"height\\\":630,\\\"caption\\\":\\\"State of Modern Component Styling\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/state-of-modern-component-styling/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/state-of-modern-component-styling/\\\",\\\"name\\\":\\\"State of Modern Component Styling | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/state-of-modern-component-styling/#primaryimage\\\"},\\\"datePublished\\\":\\\"2017-08-17T16:47:29+00:00\\\",\\\"dateModified\\\":\\\"2020-02-03T18:13:29+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/ae18d0e8f6dcf3fc7f67a0ff2a2858d9\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/state-of-modern-component-styling/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/ae18d0e8f6dcf3fc7f67a0ff2a2858d9\\\",\\\"name\\\":\\\"Tom Dye\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c292767a42519c724d6aff82c851588d?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Tom Dye\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15002\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/71\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=15002\"}],\"version-history\":[{\"count\":2,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15002/revisions\"}],\"predecessor-version\":[{\"id\":22203,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/15002/revisions/22203\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22202\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=15002\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=15002\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=15002\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":71,\"name\":\"Tom Dye\",\"url\":\"https://www.sitepen.com\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/tdye/\",\"slug\":\"tdye\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/c292767a42519c724d6aff82c851588d?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/c292767a42519c724d6aff82c851588d?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/c292767a42519c724d6aff82c851588d?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Tom Dye, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Tom Dye, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/author/tdye/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/c292767a42519c724d6aff82c851588d?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/tdye/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/author/tdye/\\\",\\\"name\\\":\\\"Tom Dye, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/ae18d0e8f6dcf3fc7f67a0ff2a2858d9\\\",\\\"name\\\":\\\"Tom Dye\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/c292767a42519c724d6aff82c851588d?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Tom Dye\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/author/tdye/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/71\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":22202,\"date\":\"2020-02-03T10:13:17\",\"slug\":\"state-of-modern-component-styling-2\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/blog/state-of-modern-component-styling/state-of-modern-component-styling-2/\",\"title\":{\"rendered\":\"State of Modern Component Styling\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.3 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>State of Modern Component Styling | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"State of Modern Component Styling | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-02-03T18:13:21+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\\\",\\\"name\\\":\\\"State of Modern Component Styling | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2020-02-03T18:13:17+00:00\\\",\\\"dateModified\\\":\\\"2020-02-03T18:13:21+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"State of Modern Component Styling\",\"media_type\":\"image\",\"mime_type\":\"image/jpeg\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2017/08/State-of-Modern-Component-Styling.jpg\",\"sizes\":{\"medium\":{\"file\":\"State-of-Modern-Component-Styling-300x158.jpg\",\"width\":300,\"height\":158,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling-300x158.jpg\"},\"large\":{\"file\":\"State-of-Modern-Component-Styling-1024x538.jpg\",\"width\":1024,\"height\":538,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling-1024x538.jpg\"},\"thumbnail\":{\"file\":\"State-of-Modern-Component-Styling-150x150.jpg\",\"width\":150,\"height\":150,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling-150x150.jpg\"},\"medium_large\":{\"file\":\"State-of-Modern-Component-Styling-768x403.jpg\",\"width\":768,\"height\":403,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling-768x403.jpg\"},\"full\":{\"file\":\"State-of-Modern-Component-Styling.jpg\",\"width\":1200,\"height\":630,\"mime_type\":\"image/jpeg\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"1\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2017/08/State-of-Modern-Component-Styling.jpg\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/22202\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cf-cache-status","DYNAMIC"],["cf-ray","5a774a157ee3ce17-LHR"],["cf-request-id","037e6ca1660000ce17e39b5200000001"],["connection","close"],["content-encoding","gzip"],["content-type","application/json; charset=UTF-8"],["date","Mon, 22 Jun 2020 16:19:10 GMT"],["expect-ct","max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","cloudflare"],["set-cookie","__cfduid=d174b1f578e3264a1fa1c6117f415cb0c1592842750; expires=Wed, 22-Jul-20 16:19:10 GMT; path=/; domain=.sitepen.com; HttpOnly; SameSite=Lax"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}