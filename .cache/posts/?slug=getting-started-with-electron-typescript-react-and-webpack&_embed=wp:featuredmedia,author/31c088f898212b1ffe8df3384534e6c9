{"value":{"body":"[{\"id\":18975,\"date\":\"2019-09-17T05:55:46\",\"date_gmt\":\"2019-09-17T12:55:46\",\"guid\":{\"rendered\":\"https://www.sitepen.com/blog/?p=18975\"},\"modified\":\"2020-01-21T06:36:27\",\"modified_gmt\":\"2020-01-21T14:36:27\",\"slug\":\"getting-started-with-electron-typescript-react-and-webpack\",\"status\":\"publish\",\"type\":\"post\",\"link\":\"https://wp.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/\",\"title\":{\"rendered\":\"Getting Started with Electron, Typescript, React and Webpack\"},\"content\":{\"rendered\":\"<p>If you need to build a desktop application today, <a href=\\\"https://electronjs.org/\\\">Electron</a> is an increasingly common choice. It is cross-platform and is built using the same web technologies that you probably already know.</p>\\n<p>We&#8217;re long-time users of Electron at SitePen, and have previously talked about <a href=\\\"https://www.sitepen.com/blog/overview-of-electron/\\\">Setting up Electron with Dojo</a>. Here we will explore an opinionated approach to setting up Electron: TypeScript, React and Webpack.</p>\\n<p><!--more--></p>\\n<p>We&#8217;ll start with a basic Electron project and progressively build it into an enterprise-ready solution.</p>\\n<h4>Initialize an empty Electron project</h4>\\n<p>First we need a vanilla Electron project. It will be virtually identical to the official <a href=\\\"https://electronjs.org/docs/tutorial/first-app\\\">Electron First App</a> tutorial and the <a href=\\\"https://github.com/electron/electron-quick-start\\\">Electron Quickstart repository</a>.</p>\\n<p>Electron has two separate processes: a <strong>main</strong> process, which is Electron itself, and a <strong>render</strong> process, which is essentially a web page that Electron loads in a Chromium-based browser.</p>\\n<h6>Install dependencies</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">npm init -y\\r\\nnpm install --save-dev electron</pre>\\n<h6>Electron (main) entry point</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// src/electron.js\\r\\nconst { app, BrowserWindow } = require('electron');\\r\\n\\r\\nfunction createWindow () {\\r\\n  // Create the browser window.\\r\\n  let win = new BrowserWindow({\\r\\n    width: 800,\\r\\n    height: 600,\\r\\n    webPreferences: {\\r\\n      nodeIntegration: true\\r\\n    }\\r\\n  });\\r\\n\\r\\n  // and load the index.html of the app.\\r\\n  win.loadFile('index.html');\\r\\n}\\r\\n\\r\\napp.on('ready', createWindow);</pre>\\n<h6>Electron (render) entry point</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">&lt;!-- // src/index.html --&gt;\\r\\n&lt;!DOCTYPE html&gt;\\r\\n&lt;html&gt;\\r\\n  &lt;head&gt;\\r\\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\\r\\n    &lt;title&gt;Hello World!&lt;/title&gt;\\r\\n  &lt;/head&gt;\\r\\n  &lt;body&gt;\\r\\n    &lt;div id=&quot;app&quot;&gt;\\r\\n      &lt;h1&gt;Hello World!&lt;/h1&gt;\\r\\n    &lt;/div&gt;\\r\\n  &lt;/body&gt;\\r\\n&lt;/html&gt;</pre>\\n<p>We can run the app with <code>npx electron src/electron.js</code>. We&#8217;ll add this in our <code>package.json</code> as a script.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// package.json\\r\\n&quot;scripts&quot;: {\\r\\n  &quot;start&quot;: &quot;electron src/electron.js&quot;\\r\\n}</pre>\\n<h4>Adding TypeScript</h4>\\n<p>The boilerplate JavaScript is also valid TypeScript, so let&#8217;s rename <code>src/electron.js</code> to <code>electron.ts</code>. We just need to install the TypeScript compiler and configure it.</p>\\n<h6>Install dependencies</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">npm install --save-dev typescript</pre>\\n<h6>TypeScript configuration</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">touch tsconfig.json</pre>\\n<h6>Update npm scripts</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">&quot;scripts&quot;: {\\r\\n  &quot;build&quot;: &quot;tsc src/electron.ts&quot;\\r\\n}</pre>\\n<h4>Adding Webpack</h4>\\n<p>Next we&#8217;ll set up <a href=\\\"https://webpack.js.org/\\\">Webpack</a> to optimize our application. Webpack configuration consists of an array of <strong>entry points</strong>. Webpack processes each entry point by passing the file (and its dependencies) through a <strong>loader</strong>. Loaders are selected via <strong>rules</strong>, often with a loader per file extension. Finally, Webpack dumps the output to a specified location.</p>\\n<p>We&#8217;ll create a single entry point for our electron main process, add a loader for all <code>*.ts</code> files to pass through the TypeScript compiler, and tell Webpack to dump the output alongside the source files.</p>\\n<h6>Install dependencies</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">npm install --save-dev webpack webpack-cli ts-loader</pre>\\n<h6>Webpack configuration</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// webpack.config.js\\r\\nmodule.exports = [\\r\\n  {\\r\\n    mode: 'development',\\r\\n    entry: './src/electron.ts',\\r\\n    target: 'electron-main',\\r\\n    module: {\\r\\n      rules: [{\\r\\n        test: /\\\\.ts$/,\\r\\n        include: /src/,\\r\\n        use: [{ loader: 'ts-loader' }]\\r\\n      }]\\r\\n    },\\r\\n    output: {\\r\\n      path: __dirname + '/src',\\r\\n      filename: 'electron.js'\\r\\n    }\\r\\n  }\\r\\n];</pre>\\n<p>Here&#8217;s a breakdown of each piece of the configuration:</p>\\n<ul>\\n<li><code>mode: develop</code> Development build (as opposed to production).</li>\\n<li><code>entry: './src/electron.ts</code> Location of the entry point</li>\\n<li><code>target: 'electron-main'</code> Specifies which environment to target; Webpack knows about the electron main process specifically.</li>\\n<li><code>test: /\\\\.ts$/</code> Specifies that this rule should match all files that end with the <code>.ts</code> extension.</li>\\n<li><code>include: /src/</code> Specifies that all files within <code>src</code> should be considered for matching this rule.</li>\\n<li><code>use: [{ loader: 'ts-loader' }]</code> Specifies which loader(s) to use when this rule matches.</li>\\n<li><code>path: __dirname + '/src'</code> Directory where all output files will be placed.</li>\\n<li><code>filename: 'electron.js'</code> Primary output bundle filename.</li>\\n</ul>\\n<h6>Update npm scripts</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// package.json\\r\\n&quot;scripts&quot;: {\\r\\n  &quot;build&quot;: &quot;webpack --config ./webpack.config.js&quot;,\\r\\n  &quot;start&quot;: &quot;npm run build &amp;&amp; electron ./src/electron.js&quot;\\r\\n}</pre>\\n<h4>Adding React</h4>\\n<p>The React render process does not need to know it&#8217;s being used within an Electron context, so setting up React is similar to setting up a vanilla React project.</p>\\n<h6>Install dependencies</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">npm install --save-dev react react-dom @types/react @types/react-dom</pre>\\n<h6>React entry point</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// src/react.tsx\\r\\nimport * as React from 'react';\\r\\nimport * as ReactDOM from 'react-dom';\\r\\n\\r\\nconst Index = () =&gt; {\\r\\n    return &lt;div&gt;Hello React!&lt;/div&gt;;\\r\\n};\\r\\n\\r\\nReactDOM.render(&lt;Index /&gt;, document.getElementById('app'));</pre>\\n<h6>TypeScript configuration</h6>\\n<p>Our render entry point is <code>.tsx</code> and not <code>.ts</code>. The TypeScript compiler has built-in support for TSX (The TypeScript equivalent of JSX), but we need to tell TypeScript how to handle our TSX resources. Not surprisingly, we&#8217;re using the React TSX variety.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// tsconfig.json\\r\\n{\\r\\n  &quot;compilerOptions&quot;: {\\r\\n    &quot;jsx&quot;: &quot;react&quot;\\r\\n  }\\r\\n}</pre>\\n<p>Next, we&#8217;ll create a new entry point in Webpack&#8217;s configuration. Webpack will process our entry point (and its dependencies) and load the result into our <code>index.html</code> via the html-webpack-plugin.</p>\\n<h6>Install dependencies</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">npm install --save-dev html-webpack-plugin</pre>\\n<h6>Webpack configuration</h6>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// webpack.config.js\\r\\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\\r\\n\\r\\nmodule.exports = [\\r\\n  ...\\r\\n  {\\r\\n    mode: 'development',\\r\\n    entry: './src/react.tsx',\\r\\n    target: 'electron-renderer',\\r\\n    devtool: 'source-map',\\r\\n    module: { rules: [{\\r\\n      test: /\\\\.ts(x?)$/,\\r\\n      include: /src/,\\r\\n      use: [{ loader: 'ts-loader' }]\\r\\n    }] },\\r\\n    output: {\\r\\n      path: __dirname + '/dist',\\r\\n      filename: 'react.js'\\r\\n    },\\r\\n    plugins: [\\r\\n      new HtmlWebpackPlugin({\\r\\n        template: './src/index.html'\\r\\n      })\\r\\n    ]\\r\\n  }\\r\\n];</pre>\\n<p>This configuration is similar to that of our main process, but there are some new items:</p>\\n<ul>\\n<li><code>target: 'electron-renderer'</code> Specifies which environment to target; Webpack knows about the electron renderer process specifically.</li>\\n<li><code>plugins ...</code> Specifies any plugins used during the build process. Plugins differ from loaders in that plugins operate at the <strong>bundle</strong> level and can more deeply integrate with the build process via hooks. Loaders operate at the <strong>file</strong> level. The <code>HtmlWebpackPlugin</code> will automagically add a reference to the output bundle in the specified <code>template</code> file.</li>\\n</ul>\\n<p>Since the output path for our renderer files is no longer the <code>src</code> directory, we&#8217;ve instructed Webpack to put our resources in a new <code>dist</code> directory. Let&#8217;s do the same for the main process&#8217; configuration.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">// webpack.config.js\\r\\n...\\r\\n  output: {\\r\\n    path: __dirname + '/dist',\\r\\n    filename: 'electron.js'\\r\\n  }</pre>\\n<p>With our output files now inside the <code>dist</code> directory, we need to update our npm scripts to match.</p>\\n<pre class=\\\"brush: plain; title: ; notranslate\\\" title=\\\"\\\">&quot;scripts&quot;: {\\r\\n  ...\\r\\n  &quot;start&quot;: &quot;npm run build &amp;&amp; electron ./dist/electron.js&quot;\\r\\n}</pre>\\n<h4>Conclusion</h4>\\n<p>And that&#8217;s it! As it turns out, Electron is well suited for running the major front-end frameworks and Webpack is well suited for packaging multiple things at once. The whole process just needed a little demystification.</p>\\n<p>Need help creating your next desktop application or determining if Electron is the right approach for you? <a href=\\\"https://www.sitepen.com/contact/\\\">Contact us</a> to discuss how we can help!</p>\\n\",\"protected\":false},\"excerpt\":{\"rendered\":\"<p>If you need to build a desktop application today, Electron is an increasingly common choice. It is cross-platform and is built using the same web technologies that you probably already know. We&#8217;re long-time users of Electron at SitePen, and have previously talked about Setting up Electron with Dojo. Here we will explore an opinionated approach [&hellip;]</p>\\n\",\"protected\":false},\"author\":7,\"featured_media\":19103,\"comment_status\":\"closed\",\"ping_status\":\"closed\",\"sticky\":false,\"template\":\"\",\"format\":\"standard\",\"meta\":{\"spay_email\":\"\"},\"categories\":[2,3,28,29],\"tags\":[],\"series\":[],\"jetpack_featured_media_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\",\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Getting Started with Electron, Typescript, React and Webpack | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"index, follow\\\" />\\n<meta name=\\\"googlebot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<meta name=\\\"bingbot\\\" content=\\\"index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1\\\" />\\n<link rel=\\\"canonical\\\" href=\\\"https://www.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Getting Started with Electron, Typescript, React and Webpack | SitePen\\\" />\\n<meta property=\\\"og:description\\\" content=\\\"If you need to build a desktop application today, Electron is an increasingly common choice. It is cross-platform and is built using the same web technologies that you probably already know. We&#8217;re long-time users of Electron at SitePen, and have previously talked about Setting up Electron with Dojo. Here we will explore an opinionated approach [&hellip;]\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://www.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"article:published_time\\\" content=\\\"2019-09-17T12:55:46+00:00\\\" />\\n<meta property=\\\"article:modified_time\\\" content=\\\"2020-01-21T14:36:27+00:00\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/#primaryimage\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\\\",\\\"width\\\":1200,\\\"height\\\":630},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/#webpage\\\",\\\"url\\\":\\\"https://www.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/\\\",\\\"name\\\":\\\"Getting Started with Electron, Typescript, React and Webpack | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"primaryImageOfPage\\\":{\\\"@id\\\":\\\"https://www.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/#primaryimage\\\"},\\\"datePublished\\\":\\\"2019-09-17T12:55:46+00:00\\\",\\\"dateModified\\\":\\\"2020-01-21T14:36:27+00:00\\\",\\\"author\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/04930765dd570e4c832d133ffc00dd3b\\\"},\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://www.sitepen.com/blog/getting-started-with-electron-typescript-react-and-webpack/\\\"]}]},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/04930765dd570e4c832d133ffc00dd3b\\\",\\\"name\\\":\\\"Justin Ellison\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ddee8b65a6b01a2572461b44f275b697?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Justin Ellison\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18975\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/post\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/7\"}],\"replies\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/comments?post=18975\"}],\"version-history\":[{\"count\":5,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18975/revisions\"}],\"predecessor-version\":[{\"id\":21957,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/posts/18975/revisions/21957\"}],\"wp:featuredmedia\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/19103\"}],\"wp:attachment\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media?parent=18975\"}],\"wp:term\":[{\"taxonomy\":\"category\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/categories?post=18975\"},{\"taxonomy\":\"post_tag\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/tags?post=18975\"},{\"taxonomy\":\"series\",\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/series?post=18975\"}],\"curies\":[{\"name\":\"wp\",\"href\":\"https://api.w.org/{rel}\",\"templated\":true}]},\"_embedded\":{\"author\":[{\"id\":7,\"name\":\"Justin Ellison\",\"url\":\"\",\"description\":\"\",\"link\":\"https://wp.sitepen.com/blog/author/jellison/\",\"slug\":\"jellison\",\"avatar_urls\":{\"24\":\"https://secure.gravatar.com/avatar/ddee8b65a6b01a2572461b44f275b697?s=24&d=mm&r=g\",\"48\":\"https://secure.gravatar.com/avatar/ddee8b65a6b01a2572461b44f275b697?s=48&d=mm&r=g\",\"96\":\"https://secure.gravatar.com/avatar/ddee8b65a6b01a2572461b44f275b697?s=96&d=mm&r=g\"},\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Justin Ellison, Author at SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"profile\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Justin Ellison, Author at SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/blog/author/jellison/\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://secure.gravatar.com/avatar/ddee8b65a6b01a2572461b44f275b697?s=500&#038;d=mm&#038;r=g\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"ProfilePage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/blog/author/jellison/#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/blog/author/jellison/\\\",\\\"name\\\":\\\"Justin Ellison, Author at SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":[\\\"Person\\\"],\\\"@id\\\":\\\"https://wp.sitepen.com/#/schema/person/04930765dd570e4c832d133ffc00dd3b\\\",\\\"name\\\":\\\"Justin Ellison\\\",\\\"image\\\":{\\\"@type\\\":\\\"ImageObject\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#personlogo\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"url\\\":\\\"https://secure.gravatar.com/avatar/ddee8b65a6b01a2572461b44f275b697?s=96&d=mm&r=g\\\",\\\"caption\\\":\\\"Justin Ellison\\\"},\\\"mainEntityOfPage\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/blog/author/jellison/#webpage\\\"}}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/7\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users\"}]}}],\"wp:featuredmedia\":[{\"id\":19103,\"date\":\"2019-09-16T10:03:36\",\"slug\":\"setting-up-electron-blog\",\"type\":\"attachment\",\"link\":\"https://wp.sitepen.com/setting-up-electron-blog/\",\"title\":{\"rendered\":\"Setting-up-Electron-blog\"},\"author\":5,\"yoast_head\":\"<!-- This site is optimized with the Yoast SEO plugin v14.5 - https://yoast.com/wordpress/plugins/seo/ -->\\n<title>Setting-up-Electron-blog | SitePen</title>\\n<meta name=\\\"robots\\\" content=\\\"noindex, follow\\\" />\\n<meta property=\\\"og:locale\\\" content=\\\"en_US\\\" />\\n<meta property=\\\"og:type\\\" content=\\\"article\\\" />\\n<meta property=\\\"og:title\\\" content=\\\"Setting-up-Electron-blog | SitePen\\\" />\\n<meta property=\\\"og:url\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\\\" />\\n<meta property=\\\"og:site_name\\\" content=\\\"SitePen\\\" />\\n<meta property=\\\"article:publisher\\\" content=\\\"https://www.facebook.com/SitePen\\\" />\\n<meta property=\\\"og:image\\\" content=\\\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\\\" />\\n\\t<meta property=\\\"og:image:width\\\" content=\\\"1200\\\" />\\n\\t<meta property=\\\"og:image:height\\\" content=\\\"630\\\" />\\n<meta name=\\\"twitter:card\\\" content=\\\"summary_large_image\\\" />\\n<meta name=\\\"twitter:creator\\\" content=\\\"@SitePen\\\" />\\n<meta name=\\\"twitter:site\\\" content=\\\"@SitePen\\\" />\\n<script type=\\\"application/ld+json\\\" class=\\\"yoast-schema-graph\\\">{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@graph\\\":[{\\\"@type\\\":\\\"WebSite\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\",\\\"url\\\":\\\"https://wp.sitepen.com/\\\",\\\"name\\\":\\\"SitePen\\\",\\\"description\\\":\\\"Enterprise Web Apps Done Right\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"SearchAction\\\",\\\"target\\\":\\\"https://wp.sitepen.com/?s={search_term_string}\\\",\\\"query-input\\\":\\\"required name=search_term_string\\\"}],\\\"inLanguage\\\":\\\"en-US\\\"},{\\\"@type\\\":\\\"WebPage\\\",\\\"@id\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png#webpage\\\",\\\"url\\\":\\\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\\\",\\\"name\\\":\\\"Setting-up-Electron-blog | SitePen\\\",\\\"isPartOf\\\":{\\\"@id\\\":\\\"https://wp.sitepen.com/#website\\\"},\\\"datePublished\\\":\\\"2019-09-16T17:03:36+00:00\\\",\\\"dateModified\\\":\\\"2019-09-16T17:03:36+00:00\\\",\\\"inLanguage\\\":\\\"en-US\\\",\\\"potentialAction\\\":[{\\\"@type\\\":\\\"ReadAction\\\",\\\"target\\\":[\\\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\\\"]}]}]}</script>\\n<!-- / Yoast SEO plugin. -->\",\"caption\":{\"rendered\":\"\"},\"alt_text\":\"\",\"media_type\":\"image\",\"mime_type\":\"image/png\",\"media_details\":{\"width\":1200,\"height\":630,\"file\":\"2019/09/Setting-up-Electron-blog.png\",\"sizes\":{\"medium\":{\"file\":\"Setting-up-Electron-blog-300x158.png\",\"width\":300,\"height\":158,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog-300x158.png\"},\"large\":{\"file\":\"Setting-up-Electron-blog-1024x538.png\",\"width\":1024,\"height\":538,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog-1024x538.png\"},\"thumbnail\":{\"file\":\"Setting-up-Electron-blog-150x150.png\",\"width\":150,\"height\":150,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog-150x150.png\"},\"medium_large\":{\"file\":\"Setting-up-Electron-blog-768x403.png\",\"width\":768,\"height\":403,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog-768x403.png\"},\"full\":{\"file\":\"Setting-up-Electron-blog.png\",\"width\":1200,\"height\":630,\"mime_type\":\"image/png\",\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\"}},\"image_meta\":{\"aperture\":\"0\",\"credit\":\"\",\"camera\":\"\",\"caption\":\"\",\"created_timestamp\":\"0\",\"copyright\":\"\",\"focal_length\":\"0\",\"iso\":\"0\",\"shutter_speed\":\"0\",\"title\":\"\",\"orientation\":\"0\",\"keywords\":[]}},\"source_url\":\"https://wp.sitepen.com/wp-content/uploads/2019/09/Setting-up-Electron-blog.png\",\"_links\":{\"self\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media/19103\"}],\"collection\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/media\"}],\"about\":[{\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/types/attachment\"}],\"author\":[{\"embeddable\":true,\"href\":\"https://wp.sitepen.com/wp-json/wp/v2/users/5\"}]}}]}}]","headers":[["access-control-allow-headers","Authorization, Content-Type"],["access-control-expose-headers","X-WP-Total, X-WP-TotalPages"],["allow","GET"],["cache-control","max-age=2592000"],["connection","close"],["content-type","application/json; charset=UTF-8"],["date","Sat, 01 Aug 2020 15:30:14 GMT"],["expires","Mon, 31 Aug 2020 15:30:14 GMT"],["link","<https://wp.sitepen.com/wp-json/>; rel=\"https://api.w.org/\""],["server","Apache"],["transfer-encoding","chunked"],["vary","Origin"],["x-content-type-options","nosniff"],["x-powered-by","PHP/7.3.16-1+0~20200320.56+debian9~1.gbp370a75"],["x-robots-tag","noindex"],["x-wp-total","1"],["x-wp-totalpages","1"]]},"type":"Object"}